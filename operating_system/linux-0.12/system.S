
tools/system：     文件格式 elf32-i386


Disassembly of section .text:

00000000 <pg_dir>:
       0:	b8 10 00 00 00       	mov    $0x10,%eax
       5:	8e d8                	mov    %eax,%ds
       7:	8e c0                	mov    %eax,%es
       9:	8e e0                	mov    %eax,%fs
       b:	8e e8                	mov    %eax,%gs
       d:	0f b2 25 c0 f2 02 00 	lss    0x2f2c0,%esp
      14:	e8 58 00 00 00       	call   71 <setup_idt>
      19:	e8 83 00 00 00       	call   a1 <setup_gdt>
      1e:	b8 10 00 00 00       	mov    $0x10,%eax
      23:	8e d8                	mov    %eax,%ds
      25:	8e c0                	mov    %eax,%es
      27:	8e e0                	mov    %eax,%fs
      29:	8e e8                	mov    %eax,%gs
      2b:	0f b2 25 c0 f2 02 00 	lss    0x2f2c0,%esp
      32:	31 c0                	xor    %eax,%eax
      34:	40                   	inc    %eax
      35:	a3 00 00 00 00       	mov    %eax,0x0
      3a:	39 05 00 00 10 00    	cmp    %eax,0x100000
      40:	74 f2                	je     34 <OLDSS+0x4>
      42:	0f 20 c0             	mov    %cr0,%eax
      45:	25 11 00 00 80       	and    $0x80000011,%eax
      4a:	83 c8 02             	or     $0x2,%eax
      4d:	0f 22 c0             	mov    %eax,%cr0
      50:	e8 05 00 00 00       	call   5a <check_x87>
      55:	e9 a6 53 00 00       	jmp    5400 <after_page_tables>

0000005a <check_x87>:
      5a:	db e3                	fninit 
      5c:	9b df e0             	fstsw  %ax
      5f:	3c 00                	cmp    $0x0,%al
      61:	74 0b                	je     6e <check_x87+0x14>
      63:	0f 20 c0             	mov    %cr0,%eax
      66:	83 f0 06             	xor    $0x6,%eax
      69:	0f 22 c0             	mov    %eax,%cr0
      6c:	c3                   	ret    
      6d:	90                   	nop
      6e:	db e4                	fnsetpm(287 only) 
      70:	c3                   	ret    

00000071 <setup_idt>:
      71:	8d 15 28 54 00 00    	lea    0x5428,%edx
      77:	b8 00 00 08 00       	mov    $0x80000,%eax
      7c:	66 89 d0             	mov    %dx,%ax
      7f:	66 ba 00 8e          	mov    $0x8e00,%dx
      83:	8d 3d b8 54 00 00    	lea    0x54b8,%edi
      89:	b9 00 01 00 00       	mov    $0x100,%ecx

0000008e <rp_sidt>:
      8e:	89 07                	mov    %eax,(%edi)
      90:	89 57 04             	mov    %edx,0x4(%edi)
      93:	83 c7 08             	add    $0x8,%edi
      96:	49                   	dec    %ecx
      97:	75 f5                	jne    8e <rp_sidt>
      99:	0f 01 1d aa 54 00 00 	lidtl  0x54aa
      a0:	c3                   	ret    

000000a1 <setup_gdt>:
      a1:	0f 01 15 b2 54 00 00 	lgdtl  0x54b2
      a8:	c3                   	ret    
	...

00001000 <pg0>:
	...

00002000 <pg1>:
	...

00003000 <pg2>:
	...

00004000 <pg3>:
	...

00005000 <tmp_floppy_area>:
	...

00005400 <after_page_tables>:
    5400:	6a 00                	push   $0x0
    5402:	6a 00                	push   $0x0
    5404:	6a 00                	push   $0x0
    5406:	68 12 54 00 00       	push   $0x5412
    540b:	68 00 68 00 00       	push   $0x6800
    5410:	eb 3c                	jmp    544e <setup_paging>

00005412 <L6>:
    5412:	eb fe                	jmp    5412 <L6>

00005414 <int_msg>:
    5414:	55                   	push   %ebp
    5415:	6e                   	outsb  %ds:(%esi),(%dx)
    5416:	6b 6e 6f 77          	imul   $0x77,0x6f(%esi),%ebp
    541a:	6e                   	outsb  %ds:(%esi),(%dx)
    541b:	20 69 6e             	and    %ch,0x6e(%ecx)
    541e:	74 65                	je     5485 <setup_paging+0x37>
    5420:	72 72                	jb     5494 <setup_paging+0x46>
    5422:	75 70                	jne    5494 <setup_paging+0x46>
    5424:	74 0a                	je     5430 <ignore_int+0x8>
    5426:	0d                   	.byte 0xd
	...

00005428 <ignore_int>:
    5428:	50                   	push   %eax
    5429:	51                   	push   %ecx
    542a:	52                   	push   %edx
    542b:	1e                   	push   %ds
    542c:	06                   	push   %es
    542d:	0f a0                	push   %fs
    542f:	b8 10 00 00 00       	mov    $0x10,%eax
    5434:	8e d8                	mov    %eax,%ds
    5436:	8e c0                	mov    %eax,%es
    5438:	8e e0                	mov    %eax,%fs
    543a:	68 14 54 00 00       	push   $0x5414
    543f:	e8 fd 37 00 00       	call   8c41 <printk>
    5444:	58                   	pop    %eax
    5445:	0f a1                	pop    %fs
    5447:	07                   	pop    %es
    5448:	1f                   	pop    %ds
    5449:	5a                   	pop    %edx
    544a:	59                   	pop    %ecx
    544b:	58                   	pop    %eax
    544c:	cf                   	iret   
    544d:	90                   	nop

0000544e <setup_paging>:
    544e:	b9 00 14 00 00       	mov    $0x1400,%ecx
    5453:	31 c0                	xor    %eax,%eax
    5455:	31 ff                	xor    %edi,%edi
    5457:	fc                   	cld    
    5458:	f3 ab                	rep stos %eax,%es:(%edi)
    545a:	c7 05 00 00 00 00 07 	movl   $0x1007,0x0
    5461:	10 00 00 
    5464:	c7 05 04 00 00 00 07 	movl   $0x2007,0x4
    546b:	20 00 00 
    546e:	c7 05 08 00 00 00 07 	movl   $0x3007,0x8
    5475:	30 00 00 
    5478:	c7 05 0c 00 00 00 07 	movl   $0x4007,0xc
    547f:	40 00 00 
    5482:	bf fc 4f 00 00       	mov    $0x4ffc,%edi
    5487:	b8 07 f0 ff 00       	mov    $0xfff007,%eax
    548c:	fd                   	std    
    548d:	ab                   	stos   %eax,%es:(%edi)
    548e:	2d 00 10 00 00       	sub    $0x1000,%eax
    5493:	7d f8                	jge    548d <setup_paging+0x3f>
    5495:	fc                   	cld    
    5496:	31 c0                	xor    %eax,%eax
    5498:	0f 22 d8             	mov    %eax,%cr3
    549b:	0f 20 c0             	mov    %cr0,%eax
    549e:	0d 00 00 00 80       	or     $0x80000000,%eax
    54a3:	0f 22 c0             	mov    %eax,%cr0
    54a6:	c3                   	ret    
    54a7:	90                   	nop
	...

000054aa <idt_descr>:
    54aa:	ff 07                	incl   (%edi)
    54ac:	b8 54 00 00 00       	mov    $0x54,%eax
	...

000054b2 <gdt_descr>:
    54b2:	ff 07                	incl   (%edi)
    54b4:	b8                   	.byte 0xb8
    54b5:	5c                   	pop    %esp
	...

000054b8 <idt>:
	...

00005cb8 <gdt>:
	...
    5cc0:	ff 0f                	decl   (%edi)
    5cc2:	00 00                	add    %al,(%eax)
    5cc4:	00 9a c0 00 ff 0f    	add    %bl,0xfff00c0(%edx)
    5cca:	00 00                	add    %al,(%eax)
    5ccc:	00 92 c0 00 00 00    	add    %dl,0xc0(%edx)
	...

000064b8 <fork>:
// __attribute__((always_inline))表示将函数强制设置为内联函数
// int fork(void) __attribute__((always_inline));
//  int pause()系统调用：暂停进程的执行，直到收到一个信号。
// int pause(void) __attribute__((always_inline));
// fork()系统调用函数的定义
_syscall0(int, fork)
    64b8:	83 ec 10             	sub    $0x10,%esp
    64bb:	b8 02 00 00 00       	mov    $0x2,%eax
    64c0:	cd 80                	int    $0x80
    64c2:	89 44 24 0c          	mov    %eax,0xc(%esp)
    64c6:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    64cb:	78 06                	js     64d3 <fork+0x1b>
    64cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    64d1:	eb 10                	jmp    64e3 <fork+0x2b>
    64d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    64d7:	f7 d8                	neg    %eax
    64d9:	a3 24 68 04 00       	mov    %eax,0x46824
    64de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    64e3:	83 c4 10             	add    $0x10,%esp
    64e6:	c3                   	ret    

000064e7 <pause>:
// pause()系统调用函数的定义
_syscall0(int, pause)
    64e7:	83 ec 10             	sub    $0x10,%esp
    64ea:	b8 1d 00 00 00       	mov    $0x1d,%eax
    64ef:	cd 80                	int    $0x80
    64f1:	89 44 24 0c          	mov    %eax,0xc(%esp)
    64f5:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    64fa:	78 06                	js     6502 <pause+0x1b>
    64fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6500:	eb 10                	jmp    6512 <pause+0x2b>
    6502:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6506:	f7 d8                	neg    %eax
    6508:	a3 24 68 04 00       	mov    %eax,0x46824
    650d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6512:	83 c4 10             	add    $0x10,%esp
    6515:	c3                   	ret    

00006516 <setup>:
// int setup(void * BIOS)系统调用,仅用于linux初始化(仅在这个程序中被调用).
_syscall1(int, setup, void *, BIOS)
    6516:	53                   	push   %ebx
    6517:	83 ec 10             	sub    $0x10,%esp
    651a:	8b 54 24 18          	mov    0x18(%esp),%edx
    651e:	b8 00 00 00 00       	mov    $0x0,%eax
    6523:	89 d3                	mov    %edx,%ebx
    6525:	cd 80                	int    $0x80
    6527:	89 44 24 0c          	mov    %eax,0xc(%esp)
    652b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    6530:	78 06                	js     6538 <setup+0x22>
    6532:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6536:	eb 10                	jmp    6548 <setup+0x32>
    6538:	8b 44 24 0c          	mov    0xc(%esp),%eax
    653c:	f7 d8                	neg    %eax
    653e:	a3 24 68 04 00       	mov    %eax,0x46824
    6543:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6548:	83 c4 10             	add    $0x10,%esp
    654b:	5b                   	pop    %ebx
    654c:	c3                   	ret    

0000654d <sync>:
// int sync()系统调用：更新文件系统。
_syscall0(int, sync)
    654d:	83 ec 10             	sub    $0x10,%esp
    6550:	b8 24 00 00 00       	mov    $0x24,%eax
    6555:	cd 80                	int    $0x80
    6557:	89 44 24 0c          	mov    %eax,0xc(%esp)
    655b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    6560:	78 06                	js     6568 <sync+0x1b>
    6562:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6566:	eb 10                	jmp    6578 <sync+0x2b>
    6568:	8b 44 24 0c          	mov    0xc(%esp),%eax
    656c:	f7 d8                	neg    %eax
    656e:	a3 24 68 04 00       	mov    %eax,0x46824
    6573:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6578:	83 c4 10             	add    $0x10,%esp
    657b:	c3                   	ret    

0000657c <fork_for_process0>:
extern long rd_init(long mem_start, int length);	// 虚拟盘初始化(blk_drv/ramdisk.c)
extern long kernel_mktime(struct tm * tm);			// 计算系统开机启动时间(秒)

// fork系统调用函数,该函数作为static inline表示内联函数，主要用来在进程0里面创建进程1的时候内联，使进程0在生成进程1的时候
// 不使用自己的用户堆栈
static inline long fork_for_process0() {
    657c:	83 ec 10             	sub    $0x10,%esp
	long __res;
	__asm__ volatile (
    657f:	b8 02 00 00 00       	mov    $0x2,%eax
    6584:	cd 80                	int    $0x80
    6586:	89 44 24 0c          	mov    %eax,0xc(%esp)
		"int $0x80\n\t"  														/* 调用系统中断0x80 ，为系统调用中断*/
		: "=a" (__res)  														/* 返回值->eax(__res) */
		: "0" (2));  															/* 输入为系统中断调用号__NR_name */
	if (__res >= 0)  															/* 如果返回值>=0,则直接返回该值 */
    658a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    658f:	78 06                	js     6597 <fork_for_process0+0x1b>
		return __res;
    6591:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6595:	eb 10                	jmp    65a7 <fork_for_process0+0x2b>
	errno = -__res;  															/* 否则置出错号,并返回-1 */
    6597:	8b 44 24 0c          	mov    0xc(%esp),%eax
    659b:	f7 d8                	neg    %eax
    659d:	a3 24 68 04 00       	mov    %eax,0x46824
	return -1;
    65a2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    65a7:	83 c4 10             	add    $0x10,%esp
    65aa:	c3                   	ret    

000065ab <sprintf>:

// 内核专用sprintf()函数.该函数用于产生格式化信息并输出到指定缓冲区str中.参数'*fmt'指定输出将采用格式.
static int sprintf(char * str, const char *fmt, ...)
{
    65ab:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;
	int i;

	va_start(args, fmt);
    65ae:	8d 44 24 24          	lea    0x24(%esp),%eax
    65b2:	83 c0 04             	add    $0x4,%eax
    65b5:	89 44 24 0c          	mov    %eax,0xc(%esp)
	i = vsprintf(str, fmt, args);
    65b9:	8b 44 24 24          	mov    0x24(%esp),%eax
    65bd:	83 ec 04             	sub    $0x4,%esp
    65c0:	ff 74 24 10          	pushl  0x10(%esp)
    65c4:	50                   	push   %eax
    65c5:	ff 74 24 2c          	pushl  0x2c(%esp)
    65c9:	e8 a3 29 00 00       	call   8f71 <vsprintf>
    65ce:	83 c4 10             	add    $0x10,%esp
    65d1:	89 44 24 08          	mov    %eax,0x8(%esp)
	va_end(args);
	return i;
    65d5:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    65d9:	83 c4 1c             	add    $0x1c,%esp
    65dc:	c3                   	ret    

000065dd <time_init>:
#define BCD_TO_BIN(val) ((val) = ((val)&15) + ((val) >> 4) * 10)

// 该函数取CMOS实时钟信息作为开机时间,并保存到全局变量startup_time(秒)中.其中调用的函数kernel_mktime()用于计算从
// 1970年1月1日0时起到开机当日经过的秒数,作为开机时间.
static void time_init(void)
{
    65dd:	83 ec 3c             	sub    $0x3c,%esp
	struct tm time;								// 时间结构tm定义在include/time.h中
	// CMOS的访问速度很慢.为了减小时间误差,在读取了下面循环中所有数值后,若此时CMOS中秒值了变化,那么就重新读取所有值.这样内核
	// 就能把与CMOS时间误差控制在1秒之内.
	do {
		time.tm_sec = CMOS_READ(0);				// 当前时间秒值(均是BCD码值)
    65e0:	b8 80 00 00 00       	mov    $0x80,%eax
    65e5:	ba 70 00 00 00       	mov    $0x70,%edx
    65ea:	ee                   	out    %al,(%dx)
    65eb:	eb 00                	jmp    65ed <time_init+0x10>
    65ed:	eb 00                	jmp    65ef <time_init+0x12>
    65ef:	b8 71 00 00 00       	mov    $0x71,%eax
    65f4:	89 c2                	mov    %eax,%edx
    65f6:	ec                   	in     (%dx),%al
    65f7:	eb 00                	jmp    65f9 <time_init+0x1c>
    65f9:	eb 00                	jmp    65fb <time_init+0x1e>
    65fb:	88 44 24 2f          	mov    %al,0x2f(%esp)
    65ff:	0f b6 44 24 2f       	movzbl 0x2f(%esp),%eax
    6604:	0f b6 c0             	movzbl %al,%eax
    6607:	89 44 24 04          	mov    %eax,0x4(%esp)
		time.tm_min = CMOS_READ(2);				// 当前分钟值.
    660b:	b8 82 00 00 00       	mov    $0x82,%eax
    6610:	ba 70 00 00 00       	mov    $0x70,%edx
    6615:	ee                   	out    %al,(%dx)
    6616:	eb 00                	jmp    6618 <time_init+0x3b>
    6618:	eb 00                	jmp    661a <time_init+0x3d>
    661a:	b8 71 00 00 00       	mov    $0x71,%eax
    661f:	89 c2                	mov    %eax,%edx
    6621:	ec                   	in     (%dx),%al
    6622:	eb 00                	jmp    6624 <time_init+0x47>
    6624:	eb 00                	jmp    6626 <time_init+0x49>
    6626:	88 44 24 2e          	mov    %al,0x2e(%esp)
    662a:	0f b6 44 24 2e       	movzbl 0x2e(%esp),%eax
    662f:	0f b6 c0             	movzbl %al,%eax
    6632:	89 44 24 08          	mov    %eax,0x8(%esp)
		time.tm_hour = CMOS_READ(4);			// 当前小时值.
    6636:	b8 84 00 00 00       	mov    $0x84,%eax
    663b:	ba 70 00 00 00       	mov    $0x70,%edx
    6640:	ee                   	out    %al,(%dx)
    6641:	eb 00                	jmp    6643 <time_init+0x66>
    6643:	eb 00                	jmp    6645 <time_init+0x68>
    6645:	b8 71 00 00 00       	mov    $0x71,%eax
    664a:	89 c2                	mov    %eax,%edx
    664c:	ec                   	in     (%dx),%al
    664d:	eb 00                	jmp    664f <time_init+0x72>
    664f:	eb 00                	jmp    6651 <time_init+0x74>
    6651:	88 44 24 2d          	mov    %al,0x2d(%esp)
    6655:	0f b6 44 24 2d       	movzbl 0x2d(%esp),%eax
    665a:	0f b6 c0             	movzbl %al,%eax
    665d:	89 44 24 0c          	mov    %eax,0xc(%esp)
		time.tm_mday = CMOS_READ(7);			// 一月中的当天日期.
    6661:	b8 87 00 00 00       	mov    $0x87,%eax
    6666:	ba 70 00 00 00       	mov    $0x70,%edx
    666b:	ee                   	out    %al,(%dx)
    666c:	eb 00                	jmp    666e <time_init+0x91>
    666e:	eb 00                	jmp    6670 <time_init+0x93>
    6670:	b8 71 00 00 00       	mov    $0x71,%eax
    6675:	89 c2                	mov    %eax,%edx
    6677:	ec                   	in     (%dx),%al
    6678:	eb 00                	jmp    667a <time_init+0x9d>
    667a:	eb 00                	jmp    667c <time_init+0x9f>
    667c:	88 44 24 2c          	mov    %al,0x2c(%esp)
    6680:	0f b6 44 24 2c       	movzbl 0x2c(%esp),%eax
    6685:	0f b6 c0             	movzbl %al,%eax
    6688:	89 44 24 10          	mov    %eax,0x10(%esp)
		time.tm_mon = CMOS_READ(8);				// 当前月份(1-12)
    668c:	b8 88 00 00 00       	mov    $0x88,%eax
    6691:	ba 70 00 00 00       	mov    $0x70,%edx
    6696:	ee                   	out    %al,(%dx)
    6697:	eb 00                	jmp    6699 <time_init+0xbc>
    6699:	eb 00                	jmp    669b <time_init+0xbe>
    669b:	b8 71 00 00 00       	mov    $0x71,%eax
    66a0:	89 c2                	mov    %eax,%edx
    66a2:	ec                   	in     (%dx),%al
    66a3:	eb 00                	jmp    66a5 <time_init+0xc8>
    66a5:	eb 00                	jmp    66a7 <time_init+0xca>
    66a7:	88 44 24 2b          	mov    %al,0x2b(%esp)
    66ab:	0f b6 44 24 2b       	movzbl 0x2b(%esp),%eax
    66b0:	0f b6 c0             	movzbl %al,%eax
    66b3:	89 44 24 14          	mov    %eax,0x14(%esp)
		time.tm_year = CMOS_READ(9);			// 当前年份.
    66b7:	b8 89 00 00 00       	mov    $0x89,%eax
    66bc:	ba 70 00 00 00       	mov    $0x70,%edx
    66c1:	ee                   	out    %al,(%dx)
    66c2:	eb 00                	jmp    66c4 <time_init+0xe7>
    66c4:	eb 00                	jmp    66c6 <time_init+0xe9>
    66c6:	b8 71 00 00 00       	mov    $0x71,%eax
    66cb:	89 c2                	mov    %eax,%edx
    66cd:	ec                   	in     (%dx),%al
    66ce:	eb 00                	jmp    66d0 <time_init+0xf3>
    66d0:	eb 00                	jmp    66d2 <time_init+0xf5>
    66d2:	88 44 24 2a          	mov    %al,0x2a(%esp)
    66d6:	0f b6 44 24 2a       	movzbl 0x2a(%esp),%eax
    66db:	0f b6 c0             	movzbl %al,%eax
    66de:	89 44 24 18          	mov    %eax,0x18(%esp)
	} while (time.tm_sec != CMOS_READ(0));
    66e2:	8b 4c 24 04          	mov    0x4(%esp),%ecx
    66e6:	b8 80 00 00 00       	mov    $0x80,%eax
    66eb:	ba 70 00 00 00       	mov    $0x70,%edx
    66f0:	ee                   	out    %al,(%dx)
    66f1:	eb 00                	jmp    66f3 <time_init+0x116>
    66f3:	eb 00                	jmp    66f5 <time_init+0x118>
    66f5:	b8 71 00 00 00       	mov    $0x71,%eax
    66fa:	89 c2                	mov    %eax,%edx
    66fc:	ec                   	in     (%dx),%al
    66fd:	eb 00                	jmp    66ff <time_init+0x122>
    66ff:	eb 00                	jmp    6701 <time_init+0x124>
    6701:	88 44 24 29          	mov    %al,0x29(%esp)
    6705:	0f b6 44 24 29       	movzbl 0x29(%esp),%eax
    670a:	0f b6 c0             	movzbl %al,%eax
    670d:	39 c1                	cmp    %eax,%ecx
    670f:	0f 85 cb fe ff ff    	jne    65e0 <time_init+0x3>
	BCD_TO_BIN(time.tm_sec);					// 转换成进进制数值.
    6715:	8b 44 24 04          	mov    0x4(%esp),%eax
    6719:	83 e0 0f             	and    $0xf,%eax
    671c:	89 c1                	mov    %eax,%ecx
    671e:	8b 44 24 04          	mov    0x4(%esp),%eax
    6722:	c1 f8 04             	sar    $0x4,%eax
    6725:	89 c2                	mov    %eax,%edx
    6727:	89 d0                	mov    %edx,%eax
    6729:	c1 e0 02             	shl    $0x2,%eax
    672c:	01 d0                	add    %edx,%eax
    672e:	01 c0                	add    %eax,%eax
    6730:	01 c8                	add    %ecx,%eax
    6732:	89 44 24 04          	mov    %eax,0x4(%esp)
	BCD_TO_BIN(time.tm_min);
    6736:	8b 44 24 08          	mov    0x8(%esp),%eax
    673a:	83 e0 0f             	and    $0xf,%eax
    673d:	89 c1                	mov    %eax,%ecx
    673f:	8b 44 24 08          	mov    0x8(%esp),%eax
    6743:	c1 f8 04             	sar    $0x4,%eax
    6746:	89 c2                	mov    %eax,%edx
    6748:	89 d0                	mov    %edx,%eax
    674a:	c1 e0 02             	shl    $0x2,%eax
    674d:	01 d0                	add    %edx,%eax
    674f:	01 c0                	add    %eax,%eax
    6751:	01 c8                	add    %ecx,%eax
    6753:	89 44 24 08          	mov    %eax,0x8(%esp)
	BCD_TO_BIN(time.tm_hour);
    6757:	8b 44 24 0c          	mov    0xc(%esp),%eax
    675b:	83 e0 0f             	and    $0xf,%eax
    675e:	89 c1                	mov    %eax,%ecx
    6760:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6764:	c1 f8 04             	sar    $0x4,%eax
    6767:	89 c2                	mov    %eax,%edx
    6769:	89 d0                	mov    %edx,%eax
    676b:	c1 e0 02             	shl    $0x2,%eax
    676e:	01 d0                	add    %edx,%eax
    6770:	01 c0                	add    %eax,%eax
    6772:	01 c8                	add    %ecx,%eax
    6774:	89 44 24 0c          	mov    %eax,0xc(%esp)
	BCD_TO_BIN(time.tm_mday);
    6778:	8b 44 24 10          	mov    0x10(%esp),%eax
    677c:	83 e0 0f             	and    $0xf,%eax
    677f:	89 c1                	mov    %eax,%ecx
    6781:	8b 44 24 10          	mov    0x10(%esp),%eax
    6785:	c1 f8 04             	sar    $0x4,%eax
    6788:	89 c2                	mov    %eax,%edx
    678a:	89 d0                	mov    %edx,%eax
    678c:	c1 e0 02             	shl    $0x2,%eax
    678f:	01 d0                	add    %edx,%eax
    6791:	01 c0                	add    %eax,%eax
    6793:	01 c8                	add    %ecx,%eax
    6795:	89 44 24 10          	mov    %eax,0x10(%esp)
	BCD_TO_BIN(time.tm_mon);
    6799:	8b 44 24 14          	mov    0x14(%esp),%eax
    679d:	83 e0 0f             	and    $0xf,%eax
    67a0:	89 c1                	mov    %eax,%ecx
    67a2:	8b 44 24 14          	mov    0x14(%esp),%eax
    67a6:	c1 f8 04             	sar    $0x4,%eax
    67a9:	89 c2                	mov    %eax,%edx
    67ab:	89 d0                	mov    %edx,%eax
    67ad:	c1 e0 02             	shl    $0x2,%eax
    67b0:	01 d0                	add    %edx,%eax
    67b2:	01 c0                	add    %eax,%eax
    67b4:	01 c8                	add    %ecx,%eax
    67b6:	89 44 24 14          	mov    %eax,0x14(%esp)
	BCD_TO_BIN(time.tm_year);
    67ba:	8b 44 24 18          	mov    0x18(%esp),%eax
    67be:	83 e0 0f             	and    $0xf,%eax
    67c1:	89 c1                	mov    %eax,%ecx
    67c3:	8b 44 24 18          	mov    0x18(%esp),%eax
    67c7:	c1 f8 04             	sar    $0x4,%eax
    67ca:	89 c2                	mov    %eax,%edx
    67cc:	89 d0                	mov    %edx,%eax
    67ce:	c1 e0 02             	shl    $0x2,%eax
    67d1:	01 d0                	add    %edx,%eax
    67d3:	01 c0                	add    %eax,%eax
    67d5:	01 c8                	add    %ecx,%eax
    67d7:	89 44 24 18          	mov    %eax,0x18(%esp)
	time.tm_mon--;								// tm_mon中月份范围是0~11.
    67db:	8b 44 24 14          	mov    0x14(%esp),%eax
    67df:	83 e8 01             	sub    $0x1,%eax
    67e2:	89 44 24 14          	mov    %eax,0x14(%esp)
	startup_time = kernel_mktime(&time);		// 计算开机时间.kernel/mktime.c
    67e6:	83 ec 0c             	sub    $0xc,%esp
    67e9:	8d 44 24 10          	lea    0x10(%esp),%eax
    67ed:	50                   	push   %eax
    67ee:	e8 8b 53 00 00       	call   bb7e <kernel_mktime>
    67f3:	83 c4 10             	add    $0x10,%esp
    67f6:	a3 04 fb 02 00       	mov    %eax,0x2fb04
}
    67fb:	90                   	nop
    67fc:	83 c4 3c             	add    $0x3c,%esp
    67ff:	c3                   	ret    

00006800 <main>:
struct drive_info { char dummy[32]; } drive_info;	// 用于存放硬盘参数表信息.

// 内核初始化主程序.初始化结束后将以任务0(idle任务即空闲任务)的身份运行.
// 英文注释含义是"这里确实是void,没错.在startup程序(head.s)中就是这样假设的".参见head.h程序代码.
int main(void)										/* This really IS void, no error here. */
{													/* The startup routine assumes (well, ...) this */
    6800:	8d 4c 24 04          	lea    0x4(%esp),%ecx
    6804:	83 e4 f0             	and    $0xfffffff0,%esp
    6807:	ff 71 fc             	pushl  -0x4(%ecx)
    680a:	55                   	push   %ebp
    680b:	89 e5                	mov    %esp,%ebp
    680d:	51                   	push   %ecx
    680e:	83 ec 04             	sub    $0x4,%esp
#ifdef EM
	// 开启仿真协处理器
	__asm__("movl %cr0,%eax \n\t" \
    6811:	0f 20 c0             	mov    %cr0,%eax
    6814:	83 f0 06             	xor    $0x6,%eax
    6817:	0f 22 c0             	mov    %eax,%cr0
	// 首先保存根文件系统设备和交换文件设备号,并根据setup.s程序中获取的信息设置控制台终端屏幕行,列数环境变量TERM,并用其设置初始init进程
	// 中执行etc/rc文件和shell程序使用的环境变量,以及复制内存0x90080处的硬盘表.
	// 其中ROOT_DEV已在前面包含进的include/linux/fs.h文件上被声明为extern_int
	// 而SWAP_DEV在include/linux/mm.h文件内也作了相同声明.这里mm.h文件并没有显式地列在本程序前部,因为前面包含进的include/linux/sched.h
	// 文件中已经含有它.
 	ROOT_DEV = ORIG_ROOT_DEV;										// ROOT_DEV定义在fs/super.c
    681a:	b8 fc 01 09 00       	mov    $0x901fc,%eax
    681f:	0f b7 00             	movzwl (%eax),%eax
    6822:	0f b7 c0             	movzwl %ax,%eax
    6825:	a3 cc 20 03 00       	mov    %eax,0x320cc
 	SWAP_DEV = ORIG_SWAP_DEV;										// SWAP_DEV定义在mm/swap.c
    682a:	b8 fa 01 09 00       	mov    $0x901fa,%eax
    682f:	0f b7 00             	movzwl (%eax),%eax
    6832:	0f b7 c0             	movzwl %ax,%eax
    6835:	a3 a0 11 03 00       	mov    %eax,0x311a0
   	sprintf(term, "TERM=con%dx%d", CON_COLS, CON_ROWS);
    683a:	b8 0e 00 09 00       	mov    $0x9000e,%eax
    683f:	0f b7 00             	movzwl (%eax),%eax
    6842:	0f b7 c0             	movzwl %ax,%eax
    6845:	0f b6 d0             	movzbl %al,%edx
    6848:	b8 0e 00 09 00       	mov    $0x9000e,%eax
    684d:	0f b7 00             	movzwl (%eax),%eax
    6850:	66 c1 e8 08          	shr    $0x8,%ax
    6854:	0f b7 c0             	movzwl %ax,%eax
    6857:	52                   	push   %edx
    6858:	50                   	push   %eax
    6859:	68 27 30 02 00       	push   $0x23027
    685e:	68 e0 fa 02 00       	push   $0x2fae0
    6863:	e8 43 fd ff ff       	call   65ab <sprintf>
    6868:	83 c4 10             	add    $0x10,%esp
	envp[1] = term;
    686b:	c7 05 20 e0 02 00 e0 	movl   $0x2fae0,0x2e020
    6872:	fa 02 00 
	envp_rc[1] = term;
    6875:	c7 05 0c e0 02 00 e0 	movl   $0x2fae0,0x2e00c
    687c:	fa 02 00 
    drive_info = DRIVE_INFO;										// 复制内存0x90080处的硬盘参数表.
    687f:	b8 80 00 09 00       	mov    $0x90080,%eax
    6884:	8b 10                	mov    (%eax),%edx
    6886:	89 15 20 07 04 00    	mov    %edx,0x40720
    688c:	8b 50 04             	mov    0x4(%eax),%edx
    688f:	89 15 24 07 04 00    	mov    %edx,0x40724
    6895:	8b 50 08             	mov    0x8(%eax),%edx
    6898:	89 15 28 07 04 00    	mov    %edx,0x40728
    689e:	8b 50 0c             	mov    0xc(%eax),%edx
    68a1:	89 15 2c 07 04 00    	mov    %edx,0x4072c
    68a7:	8b 50 10             	mov    0x10(%eax),%edx
    68aa:	89 15 30 07 04 00    	mov    %edx,0x40730
    68b0:	8b 50 14             	mov    0x14(%eax),%edx
    68b3:	89 15 34 07 04 00    	mov    %edx,0x40734
    68b9:	8b 50 18             	mov    0x18(%eax),%edx
    68bc:	89 15 38 07 04 00    	mov    %edx,0x40738
    68c2:	8b 40 1c             	mov    0x1c(%eax),%eax
    68c5:	a3 3c 07 04 00       	mov    %eax,0x4073c

	// 接着根据机器物理内存容量设置高速缓冲区和主内存的位置和范围.
	// 高速缓存末端地址->buffer_memory_end;机器内存容量->memory_end;主内存开始地址->main_memory_start.
	// 设置物理内存大小
	memory_end = (1 << 20) + (EXT_MEM_K << 10);						// 内存大小=1MB + 扩展内存(k)*1024字节.
    68ca:	b8 02 00 09 00       	mov    $0x90002,%eax
    68cf:	0f b7 00             	movzwl (%eax),%eax
    68d2:	0f b7 c0             	movzwl %ax,%eax
    68d5:	c1 e0 0a             	shl    $0xa,%eax
    68d8:	05 00 00 10 00       	add    $0x100000,%eax
    68dd:	a3 c0 fa 02 00       	mov    %eax,0x2fac0
	memory_end &= 0xfffff000;										// 忽略不到4KB(1页)的内存数.
    68e2:	a1 c0 fa 02 00       	mov    0x2fac0,%eax
    68e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    68ec:	a3 c0 fa 02 00       	mov    %eax,0x2fac0
	if (memory_end > 16 * 1024 * 1024)								// 如果内存量超过16MB,则按16MB计.
    68f1:	a1 c0 fa 02 00       	mov    0x2fac0,%eax
    68f6:	3d 00 00 00 01       	cmp    $0x1000000,%eax
    68fb:	7e 0a                	jle    6907 <main+0x107>
		memory_end = 16 * 1024 * 1024;
    68fd:	c7 05 c0 fa 02 00 00 	movl   $0x1000000,0x2fac0
    6904:	00 00 01 
	// 根据物理内存的大小设置高速缓冲去的末端大小
	if (memory_end > 12 * 1024 * 1024) 								// 如果内存>12MB,则设置缓冲区末端=4MB
    6907:	a1 c0 fa 02 00       	mov    0x2fac0,%eax
    690c:	3d 00 00 c0 00       	cmp    $0xc00000,%eax
    6911:	7e 0c                	jle    691f <main+0x11f>
		buffer_memory_end = 4 * 1024 * 1024;
    6913:	c7 05 c4 fa 02 00 00 	movl   $0x400000,0x2fac4
    691a:	00 40 00 
    691d:	eb 22                	jmp    6941 <main+0x141>
	else if (memory_end > 6 * 1024 * 1024)							// 否则若内存>6MB,则设置缓冲区末端=2MB
    691f:	a1 c0 fa 02 00       	mov    0x2fac0,%eax
    6924:	3d 00 00 60 00       	cmp    $0x600000,%eax
    6929:	7e 0c                	jle    6937 <main+0x137>
		buffer_memory_end = 2 * 1024 * 1024;
    692b:	c7 05 c4 fa 02 00 00 	movl   $0x200000,0x2fac4
    6932:	00 20 00 
    6935:	eb 0a                	jmp    6941 <main+0x141>
	else
		buffer_memory_end = 1 * 1024 * 1024;						// 否则则设置缓冲区末端=1MB
    6937:	c7 05 c4 fa 02 00 00 	movl   $0x100000,0x2fac4
    693e:	00 10 00 
	// 根据高速缓冲区的末端大小设置主内存区的起始地址
	main_memory_start = buffer_memory_end;							// 主内存起始位置 = 缓冲区末端
    6941:	a1 c4 fa 02 00       	mov    0x2fac4,%eax
    6946:	a3 c8 fa 02 00       	mov    %eax,0x2fac8
	// 参见kernel/blk_drv/ramdisk.c.
#ifdef RAMDISK
	main_memory_start += rd_init(main_memory_start, RAMDISK * 1024);
#endif
	// 以下是内核进行所有方面的初始化工作.
	mem_init(main_memory_start, memory_end);						// 主内存区初始化.(mm/memory.c)
    694b:	8b 15 c0 fa 02 00    	mov    0x2fac0,%edx
    6951:	a1 c8 fa 02 00       	mov    0x2fac8,%eax
    6956:	83 ec 08             	sub    $0x8,%esp
    6959:	52                   	push   %edx
    695a:	50                   	push   %eax
    695b:	e8 2c 5f 00 00       	call   c88c <mem_init>
    6960:	83 c4 10             	add    $0x10,%esp
	trap_init();                                    				// 陷阱门(硬件中断向量)初始化.(kernel/traps.c)
    6963:	e8 50 16 00 00       	call   7fb8 <trap_init>
	blk_dev_init();													// 块设备初始化.(blk_drv/ll_rw_blk.c)
    6968:	e8 1d 00 01 00       	call   1698a <blk_dev_init>
	chr_dev_init();													// 字符设备初始化.(chr_drv/tty_io.c)
    696d:	e8 66 31 01 00       	call   19ad8 <chr_dev_init>
 	tty_init();														// tty初始化(chr_drv/tty_io.c)
    6972:	e8 63 31 01 00       	call   19ada <tty_init>
	time_init();													// 设置开机启动时间.
    6977:	e8 61 fc ff ff       	call   65dd <time_init>
 	sched_init();													// 调度程序初始化(加载任务0的tr,ldtr)(kernel/sched.c)
    697c:	e8 fe 0d 00 00       	call   777f <sched_init>
	buffer_init(buffer_memory_end);									// 缓冲管理初始化,建内存链表等.(fs/buffer.c)
    6981:	a1 c4 fa 02 00       	mov    0x2fac4,%eax
    6986:	83 ec 0c             	sub    $0xc,%esp
    6989:	50                   	push   %eax
    698a:	e8 72 8f 00 00       	call   f901 <buffer_init>
    698f:	83 c4 10             	add    $0x10,%esp
	hd_init();														// 硬盘初始化.	(blk_drv/hd.c)
    6992:	e8 0b 1b 01 00       	call   184a2 <hd_init>
	floppy_init();													// 软驱初始化.	(blk_drv/floppy.c)
    6997:	e8 b0 0c 01 00       	call   1764c <floppy_init>
	sti();															// 所有初始化工作都完了,于是开启中断.
    699c:	fb                   	sti    
	// 打印内核初始化完毕
	Log(LOG_INFO_TYPE, "<<<<< Linux0.12 Kernel Init Finished, Ready Start Process0 >>>>>\n");
    699d:	83 ec 08             	sub    $0x8,%esp
    69a0:	68 38 30 02 00       	push   $0x23038
    69a5:	6a 00                	push   $0x0
    69a7:	e8 3c bf 01 00       	call   228e8 <Log>
    69ac:	83 c4 10             	add    $0x10,%esp
	// 下面过程通过在堆栈中设置的参数,利用中断返回指令启动任务0执行.
	move_to_user_mode();											// 移到用户模式下执行.(include/asm/system.h)
    69af:	89 e0                	mov    %esp,%eax
    69b1:	6a 17                	push   $0x17
    69b3:	50                   	push   %eax
    69b4:	9c                   	pushf  
    69b5:	6a 0f                	push   $0xf
    69b7:	68 bd 69 00 00       	push   $0x69bd
    69bc:	cf                   	iret   
    69bd:	b8 17 00 00 00       	mov    $0x17,%eax
    69c2:	8e d8                	mov    %eax,%ds
    69c4:	8e c0                	mov    %eax,%es
    69c6:	8e e0                	mov    %eax,%fs
    69c8:	8e e8                	mov    %eax,%gs
	if (!fork_for_process0()) {										/* we count on this going ok */
    69ca:	e8 ad fb ff ff       	call   657c <fork_for_process0>
    69cf:	85 c0                	test   %eax,%eax
    69d1:	75 05                	jne    69d8 <main+0x1d8>
		init();														// 在新建的子进程(任务1即init进程)中执行.
    69d3:	e8 4f 00 00 00       	call   6a27 <init>
	 * 我们就回到这里,一直循环执行'pause()'.
	 */
	// pause()系统调用(kernel/sched.c)会把任务0转换成可中断等待状态,再执行调度函数.但是调度函数只要发现系统中没有其他任务可以运行时就会切换
	// 到任务0,是不信赖于任务0的状态.
	for(;;)
		__asm__("int $0x80"::"a" (__NR_pause):);					// 即执行系统调用pause().
    69d8:	b8 1d 00 00 00       	mov    $0x1d,%eax
    69dd:	cd 80                	int    $0x80
    69df:	eb f7                	jmp    69d8 <main+0x1d8>

000069e1 <printf>:

// 下面函数产生格式化信息并输出到标准输出设备stdout(1),这里是指屏幕上显示.参数'*fmt'指定输出将采用的格式,参见标准C语言书籍.
// 该子程序正好是vsprintf如何使用的一个简单例子.该程序使用vsprintf()将格式化的字符串放入printbuf缓冲区,然后用write()将
// 缓冲区的内容输出到标准设备(1--stdout).vsprintf()函数的实现见kernel/vsprintf.c.
int printf(const char *fmt, ...)
{
    69e1:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;
	int i;

	va_start(args, fmt);
    69e4:	8d 44 24 24          	lea    0x24(%esp),%eax
    69e8:	89 44 24 0c          	mov    %eax,0xc(%esp)
	write(1, printbuf, i = vsprintf(printbuf, fmt, args));
    69ec:	8b 44 24 20          	mov    0x20(%esp),%eax
    69f0:	83 ec 04             	sub    $0x4,%esp
    69f3:	ff 74 24 10          	pushl  0x10(%esp)
    69f7:	50                   	push   %eax
    69f8:	68 c0 f6 02 00       	push   $0x2f6c0
    69fd:	e8 6f 25 00 00       	call   8f71 <vsprintf>
    6a02:	83 c4 10             	add    $0x10,%esp
    6a05:	89 44 24 08          	mov    %eax,0x8(%esp)
    6a09:	83 ec 04             	sub    $0x4,%esp
    6a0c:	ff 74 24 0c          	pushl  0xc(%esp)
    6a10:	68 c0 f6 02 00       	push   $0x2f6c0
    6a15:	6a 01                	push   $0x1
    6a17:	e8 9e bd 01 00       	call   227ba <write>
    6a1c:	83 c4 10             	add    $0x10,%esp
	va_end(args);
	return i;
    6a1f:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    6a23:	83 c4 1c             	add    $0x1c,%esp
    6a26:	c3                   	ret    

00006a27 <init>:

// 在main()中已经进行子系统初始化,包括内存管理,各种硬件设备和驱动程序.init()函数在任务0第1次创建的子进程(任务1)中.它首先对第一个将要执行
// 的程序(shell)的环境进行初始化,然后以登录shell方式加载程序并执行之.
void init(void)
{
    6a27:	83 ec 1c             	sub    $0x1c,%esp
	int pid, i, fd;
	// setup()是一个系统调用.用于读取硬盘参数和分区表信息并加载虚拟盘(若存在的话)和安装根文件系统设备.该函数用25行上的宏定义,对就函数是sys_setup(),
	// 在块设备子目录kernel/blk_drv/hd.c.
	setup((void *) &drive_info);
    6a2a:	68 20 07 04 00       	push   $0x40720
    6a2f:	e8 e2 fa ff ff       	call   6516 <setup>
    6a34:	83 c4 04             	add    $0x4,%esp
	// 下面以读写访问方式打开设备"/dev/tty0",它对应终端控制台.由于这是第一次打开文件操作,因此产生的文件句柄号(文件描述符)肯定是0.该句柄是UNIX类操作
	// 系统默认的控制台标准输入句柄stdin.这里再把它以读和写的方式分别打开是为了复制产生标准输出(写)句柄stdout和标准出错输出句柄stderr.函数前面的"(void)"
	// 前缀用于表示强制函数无需返回值.
	(void) open("/dev/tty1", O_RDWR, 0);
    6a37:	83 ec 04             	sub    $0x4,%esp
    6a3a:	6a 00                	push   $0x0
    6a3c:	6a 02                	push   $0x2
    6a3e:	68 7a 30 02 00       	push   $0x2307a
    6a43:	e8 f2 bc 01 00       	call   2273a <open>
    6a48:	83 c4 10             	add    $0x10,%esp
	(void) dup(0);													// 复制句柄,产生句柄1号--stdout标准输出设备.
    6a4b:	83 ec 0c             	sub    $0xc,%esp
    6a4e:	6a 00                	push   $0x0
    6a50:	e8 a2 bd 01 00       	call   227f7 <dup>
    6a55:	83 c4 10             	add    $0x10,%esp
	(void) dup(0);													// 复制句柄,产生句柄2号--stderr标准出错输出设备.
    6a58:	83 ec 0c             	sub    $0xc,%esp
    6a5b:	6a 00                	push   $0x0
    6a5d:	e8 95 bd 01 00       	call   227f7 <dup>
    6a62:	83 c4 10             	add    $0x10,%esp
	// 进程1执行的用户级代码的开始
	printf("<<<<< Process 1 console fd = %d >>>>>\n", fd);
    6a65:	83 ec 08             	sub    $0x8,%esp
    6a68:	ff 74 24 14          	pushl  0x14(%esp)
    6a6c:	68 84 30 02 00       	push   $0x23084
    6a71:	e8 6b ff ff ff       	call   69e1 <printf>
    6a76:	83 c4 10             	add    $0x10,%esp
	// 下面打印缓冲区块数和总字节数,每块1024字节,以及主内存区空闲内存字节数.
	printf("<<<<< %d buffers = %d bytes buffer space >>>>>\n\r", NR_BUFFERS,
    6a79:	a1 c0 20 03 00       	mov    0x320c0,%eax
    6a7e:	c1 e0 0a             	shl    $0xa,%eax
    6a81:	89 c2                	mov    %eax,%edx
    6a83:	a1 c0 20 03 00       	mov    0x320c0,%eax
    6a88:	83 ec 04             	sub    $0x4,%esp
    6a8b:	52                   	push   %edx
    6a8c:	50                   	push   %eax
    6a8d:	68 ac 30 02 00       	push   $0x230ac
    6a92:	e8 4a ff ff ff       	call   69e1 <printf>
    6a97:	83 c4 10             	add    $0x10,%esp
			NR_BUFFERS * BLOCK_SIZE);
	printf("<<<<< Free mem: %d bytes >>>>>\n\r", memory_end - main_memory_start);
    6a9a:	8b 15 c0 fa 02 00    	mov    0x2fac0,%edx
    6aa0:	a1 c8 fa 02 00       	mov    0x2fac8,%eax
    6aa5:	29 c2                	sub    %eax,%edx
    6aa7:	89 d0                	mov    %edx,%eax
    6aa9:	83 ec 08             	sub    $0x8,%esp
    6aac:	50                   	push   %eax
    6aad:	68 e0 30 02 00       	push   $0x230e0
    6ab2:	e8 2a ff ff ff       	call   69e1 <printf>
    6ab7:	83 c4 10             	add    $0x10,%esp
	// 下面fork()用于创建一个子进程(任务2).对于被创建的子进程,fork()将返回0值,对于原进程(父进程)则返回子进程的进程号pid.所以第202--206行是子进程执行的内容.
	// 该子进程关闭了句柄0(stdin),以只读方式打开/etc/rc文件,并使用execve()函数将进程自身替换成/bin/sh程序(即shell程序),然后执行/bin/sh程序.所携带的参数
	// 和环境变量分别由argv_rc和envp_rc数组给出.关闭句柄0并立刻打开/etc/rc文件的作用是把标准输入stdin重定向到/etc/rc/文件.这样shell程序/bin/sh就可以运行
	// rc文件中设置的命令.由于这里sh的运行方式是非交互式的,因此在执行完rc文件中的命令后就会立刻退出,进程2也随之结束.并于execve()函数说明请参见fs/exec.c程序.
	// 函数_exit()退出时的出错码1 - 操作未许可;2 -- 文件或目录不存在.
	if (!(pid = fork())) {
    6aba:	e8 f9 f9 ff ff       	call   64b8 <fork>
    6abf:	89 44 24 08          	mov    %eax,0x8(%esp)
    6ac3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6ac8:	75 59                	jne    6b23 <init+0xfc>
		close(0);
    6aca:	83 ec 0c             	sub    $0xc,%esp
    6acd:	6a 00                	push   $0x0
    6acf:	e8 af bc 01 00       	call   22783 <close>
    6ad4:	83 c4 10             	add    $0x10,%esp
		if (open("/etc/rc", O_RDONLY, 0))
    6ad7:	83 ec 04             	sub    $0x4,%esp
    6ada:	6a 00                	push   $0x0
    6adc:	6a 00                	push   $0x0
    6ade:	68 01 31 02 00       	push   $0x23101
    6ae3:	e8 52 bc 01 00       	call   2273a <open>
    6ae8:	83 c4 10             	add    $0x10,%esp
    6aeb:	85 c0                	test   %eax,%eax
    6aed:	74 0d                	je     6afc <init+0xd5>
			_exit(1);												// 若打开文件失败,则退出(lib/_exit.c).
    6aef:	83 ec 0c             	sub    $0xc,%esp
    6af2:	6a 01                	push   $0x1
    6af4:	e8 30 bc 01 00       	call   22729 <_exit>
    6af9:	83 c4 10             	add    $0x10,%esp
		execve("/bin/sh", argv_rc, envp_rc);						// 替换成/bin/sh程序并执行.
    6afc:	83 ec 04             	sub    $0x4,%esp
    6aff:	68 08 e0 02 00       	push   $0x2e008
    6b04:	68 00 e0 02 00       	push   $0x2e000
    6b09:	68 00 30 02 00       	push   $0x23000
    6b0e:	e8 4a bd 01 00       	call   2285d <execve>
    6b13:	83 c4 10             	add    $0x10,%esp
		_exit(2);													// 若execve()执行失败则退出.
    6b16:	83 ec 0c             	sub    $0xc,%esp
    6b19:	6a 02                	push   $0x2
    6b1b:	e8 09 bc 01 00       	call   22729 <_exit>
    6b20:	83 c4 10             	add    $0x10,%esp
    }
	// 下面还是父进程（1）执行的语句。wait()等待子进程停止或终止，返回值应是子进程的进程号（pid)。这三句的作用是父进程等待子进程
	// 的结束。&i是存放返回状态信息的位置。如果wait()返回值不等于子进程号，则继续等待。
  	if (pid > 0)
    6b23:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6b28:	7e 17                	jle    6b41 <init+0x11a>
		while (pid != wait(&i));
    6b2a:	90                   	nop
    6b2b:	83 ec 0c             	sub    $0xc,%esp
    6b2e:	8d 44 24 10          	lea    0x10(%esp),%eax
    6b32:	50                   	push   %eax
    6b33:	e8 9f bd 01 00       	call   228d7 <wait>
    6b38:	83 c4 10             	add    $0x10,%esp
    6b3b:	39 44 24 08          	cmp    %eax,0x8(%esp)
    6b3f:	75 ea                	jne    6b2b <init+0x104>
	// 失败”信息并继续执行。对于所创建的子进程将关闭所有以前还遗留的句柄（stdin、stdout、stderr），新创建一个会话并设置进程组号，
	// 然后重新打开/dev/tty0作为stdin，并复制成stdout和stderr。再次执行系统解释程序/bin/sh。但这次执行所选用的参数和环境数组另
	// 选了一套。然后父进程再次运行wait()等等。如果子进程又停止了执行，则在标准输出上显示出错信息“子进程pid停止了运行，返回码是i”，
	// 然后继续重试下去...，形成“大”死循环。
	while (1) {
		if ((pid = fork()) < 0) {
    6b41:	e8 72 f9 ff ff       	call   64b8 <fork>
    6b46:	89 44 24 08          	mov    %eax,0x8(%esp)
    6b4a:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6b4f:	79 17                	jns    6b68 <init+0x141>
			printf("Fork failed in init %c\r\n", ' ');
    6b51:	83 ec 08             	sub    $0x8,%esp
    6b54:	6a 20                	push   $0x20
    6b56:	68 09 31 02 00       	push   $0x23109
    6b5b:	e8 81 fe ff ff       	call   69e1 <printf>
    6b60:	83 c4 10             	add    $0x10,%esp
			continue;
    6b63:	e9 c2 00 00 00       	jmp    6c2a <init+0x203>
		}
		if (!pid) {                             					// 新的子进程。
    6b68:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6b6d:	0f 85 80 00 00 00    	jne    6bf3 <init+0x1cc>
			close(0); close(1); close(2);
    6b73:	83 ec 0c             	sub    $0xc,%esp
    6b76:	6a 00                	push   $0x0
    6b78:	e8 06 bc 01 00       	call   22783 <close>
    6b7d:	83 c4 10             	add    $0x10,%esp
    6b80:	83 ec 0c             	sub    $0xc,%esp
    6b83:	6a 01                	push   $0x1
    6b85:	e8 f9 bb 01 00       	call   22783 <close>
    6b8a:	83 c4 10             	add    $0x10,%esp
    6b8d:	83 ec 0c             	sub    $0xc,%esp
    6b90:	6a 02                	push   $0x2
    6b92:	e8 ec bb 01 00       	call   22783 <close>
    6b97:	83 c4 10             	add    $0x10,%esp
			setsid();                       						// 创建一新的会话期，见后面说明。
    6b9a:	e8 8f bc 01 00       	call   2282e <setsid>
			(void) open("/dev/tty1", O_RDWR, 0);
    6b9f:	83 ec 04             	sub    $0x4,%esp
    6ba2:	6a 00                	push   $0x0
    6ba4:	6a 02                	push   $0x2
    6ba6:	68 7a 30 02 00       	push   $0x2307a
    6bab:	e8 8a bb 01 00       	call   2273a <open>
    6bb0:	83 c4 10             	add    $0x10,%esp
			(void) dup(0);
    6bb3:	83 ec 0c             	sub    $0xc,%esp
    6bb6:	6a 00                	push   $0x0
    6bb8:	e8 3a bc 01 00       	call   227f7 <dup>
    6bbd:	83 c4 10             	add    $0x10,%esp
			(void) dup(0);
    6bc0:	83 ec 0c             	sub    $0xc,%esp
    6bc3:	6a 00                	push   $0x0
    6bc5:	e8 2d bc 01 00       	call   227f7 <dup>
    6bca:	83 c4 10             	add    $0x10,%esp
			_exit(execve("/bin/sh", argv, envp));
    6bcd:	83 ec 04             	sub    $0x4,%esp
    6bd0:	68 1c e0 02 00       	push   $0x2e01c
    6bd5:	68 14 e0 02 00       	push   $0x2e014
    6bda:	68 00 30 02 00       	push   $0x23000
    6bdf:	e8 79 bc 01 00       	call   2285d <execve>
    6be4:	83 c4 10             	add    $0x10,%esp
    6be7:	83 ec 0c             	sub    $0xc,%esp
    6bea:	50                   	push   %eax
    6beb:	e8 39 bb 01 00       	call   22729 <_exit>
    6bf0:	83 c4 10             	add    $0x10,%esp
		}
		while (1)
			if (pid == wait(&i))
    6bf3:	83 ec 0c             	sub    $0xc,%esp
    6bf6:	8d 44 24 10          	lea    0x10(%esp),%eax
    6bfa:	50                   	push   %eax
    6bfb:	e8 d7 bc 01 00       	call   228d7 <wait>
    6c00:	83 c4 10             	add    $0x10,%esp
    6c03:	39 44 24 08          	cmp    %eax,0x8(%esp)
    6c07:	74 02                	je     6c0b <init+0x1e4>
    6c09:	eb e8                	jmp    6bf3 <init+0x1cc>
				break;
    6c0b:	90                   	nop
		printf("\n\rchild %d died with code %04x\n\r", pid, i);
    6c0c:	8b 44 24 04          	mov    0x4(%esp),%eax
    6c10:	83 ec 04             	sub    $0x4,%esp
    6c13:	50                   	push   %eax
    6c14:	ff 74 24 10          	pushl  0x10(%esp)
    6c18:	68 24 31 02 00       	push   $0x23124
    6c1d:	e8 bf fd ff ff       	call   69e1 <printf>
    6c22:	83 c4 10             	add    $0x10,%esp
		sync();
    6c25:	e8 23 f9 ff ff       	call   654d <sync>
		if ((pid = fork()) < 0) {
    6c2a:	e9 12 ff ff ff       	jmp    6b41 <init+0x11a>
    6c2f:	90                   	nop

00006c30 <show_task>:
// 除了SIGKILL和SIGSTOP信号以外其他信号都是可阻塞的.
#define _BLOCKABLE (~(_S(SIGKILL) | _S(SIGSTOP)))

// 内核调试函数.显示任务号nr的进程号,进程状态和内核堆栈空闲字节数(大约).
void show_task(int nr, struct task_struct * p)
{
    6c30:	53                   	push   %ebx
    6c31:	83 ec 18             	sub    $0x18,%esp
	int i, j = 4096 - sizeof(struct task_struct);
    6c34:	c7 44 24 08 7c 0b 00 	movl   $0xb7c,0x8(%esp)
    6c3b:	00 

	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
    6c3c:	8b 44 24 24          	mov    0x24(%esp),%eax
    6c40:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
    6c46:	85 c0                	test   %eax,%eax
    6c48:	74 12                	je     6c5c <show_task+0x2c>
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
    6c4a:	8b 44 24 24          	mov    0x24(%esp),%eax
    6c4e:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
    6c54:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    6c5a:	eb 05                	jmp    6c61 <show_task+0x31>
    6c5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
    6c61:	8b 54 24 24          	mov    0x24(%esp),%edx
    6c65:	8b 92 bc 02 00 00    	mov    0x2bc(%edx),%edx
	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
    6c6b:	8b 9a 2c 02 00 00    	mov    0x22c(%edx),%ebx
    6c71:	8b 54 24 24          	mov    0x24(%esp),%edx
    6c75:	8b 0a                	mov    (%edx),%ecx
    6c77:	8b 54 24 24          	mov    0x24(%esp),%edx
    6c7b:	8b 92 2c 02 00 00    	mov    0x22c(%edx),%edx
    6c81:	83 ec 08             	sub    $0x8,%esp
    6c84:	50                   	push   %eax
    6c85:	53                   	push   %ebx
    6c86:	51                   	push   %ecx
    6c87:	52                   	push   %edx
    6c88:	ff 74 24 38          	pushl  0x38(%esp)
    6c8c:	68 48 31 02 00       	push   $0x23148
    6c91:	e8 ab 1f 00 00       	call   8c41 <printk>
    6c96:	83 c4 20             	add    $0x20,%esp
	i = 0;
    6c99:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    6ca0:	00 
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
    6ca1:	eb 05                	jmp    6ca8 <show_task+0x78>
		i++;
    6ca3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
    6ca8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6cac:	3b 44 24 08          	cmp    0x8(%esp),%eax
    6cb0:	7d 17                	jge    6cc9 <show_task+0x99>
    6cb2:	8b 44 24 24          	mov    0x24(%esp),%eax
    6cb6:	8d 90 84 04 00 00    	lea    0x484(%eax),%edx
    6cbc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6cc0:	01 d0                	add    %edx,%eax
    6cc2:	0f b6 00             	movzbl (%eax),%eax
    6cc5:	84 c0                	test   %al,%al
    6cc7:	74 da                	je     6ca3 <show_task+0x73>
	printk("%d/%d chars free in kstack\n\r", i, j);
    6cc9:	83 ec 04             	sub    $0x4,%esp
    6ccc:	ff 74 24 0c          	pushl  0xc(%esp)
    6cd0:	ff 74 24 14          	pushl  0x14(%esp)
    6cd4:	68 74 31 02 00       	push   $0x23174
    6cd9:	e8 63 1f 00 00       	call   8c41 <printk>
    6cde:	83 c4 10             	add    $0x10,%esp
	printk("   PC=%08X.", *(1019 + (unsigned long *) p));
    6ce1:	8b 44 24 24          	mov    0x24(%esp),%eax
    6ce5:	05 ec 0f 00 00       	add    $0xfec,%eax
    6cea:	8b 00                	mov    (%eax),%eax
    6cec:	83 ec 08             	sub    $0x8,%esp
    6cef:	50                   	push   %eax
    6cf0:	68 91 31 02 00       	push   $0x23191
    6cf5:	e8 47 1f 00 00       	call   8c41 <printk>
    6cfa:	83 c4 10             	add    $0x10,%esp
	if (p->p_ysptr || p->p_osptr)
    6cfd:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d01:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    6d07:	85 c0                	test   %eax,%eax
    6d09:	75 0e                	jne    6d19 <show_task+0xe9>
    6d0b:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d0f:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    6d15:	85 c0                	test   %eax,%eax
    6d17:	74 5e                	je     6d77 <show_task+0x147>
		printk("   Younger sib=%d, older sib=%d\n\r",
			p->p_ysptr ? p->p_ysptr->pid : -1,
			p->p_osptr ? p->p_osptr->pid : -1);
    6d19:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d1d:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d23:	85 c0                	test   %eax,%eax
    6d25:	74 12                	je     6d39 <show_task+0x109>
			p->p_osptr ? p->p_osptr->pid : -1);
    6d27:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d2b:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d31:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    6d37:	eb 05                	jmp    6d3e <show_task+0x10e>
    6d39:	ba ff ff ff ff       	mov    $0xffffffff,%edx
			p->p_ysptr ? p->p_ysptr->pid : -1,
    6d3e:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d42:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d48:	85 c0                	test   %eax,%eax
    6d4a:	74 12                	je     6d5e <show_task+0x12e>
			p->p_ysptr ? p->p_ysptr->pid : -1,
    6d4c:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d50:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d56:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    6d5c:	eb 05                	jmp    6d63 <show_task+0x133>
    6d5e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6d63:	83 ec 04             	sub    $0x4,%esp
    6d66:	52                   	push   %edx
    6d67:	50                   	push   %eax
    6d68:	68 a0 31 02 00       	push   $0x231a0
    6d6d:	e8 cf 1e 00 00       	call   8c41 <printk>
    6d72:	83 c4 10             	add    $0x10,%esp
    6d75:	eb 10                	jmp    6d87 <show_task+0x157>
	else
		printk("\n\r");
    6d77:	83 ec 0c             	sub    $0xc,%esp
    6d7a:	68 c2 31 02 00       	push   $0x231c2
    6d7f:	e8 bd 1e 00 00       	call   8c41 <printk>
    6d84:	83 c4 10             	add    $0x10,%esp
}
    6d87:	90                   	nop
    6d88:	83 c4 18             	add    $0x18,%esp
    6d8b:	5b                   	pop    %ebx
    6d8c:	c3                   	ret    

00006d8d <show_state>:

// 显示所有任务的任务号,进程号,进程状态和内核堆栈空闲字节数(大约).
// NR_TASKS是系统能容纳的最大进程(任务)数量(64个),定义在include/kernel/sched.h
void show_state(void)
{
    6d8d:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	printk("\rTask-info:\n\r");
    6d90:	83 ec 0c             	sub    $0xc,%esp
    6d93:	68 c5 31 02 00       	push   $0x231c5
    6d98:	e8 a4 1e 00 00       	call   8c41 <printk>
    6d9d:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NR_TASKS; i++)
    6da0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    6da7:	00 
    6da8:	eb 2f                	jmp    6dd9 <show_state+0x4c>
		if (task[i])
    6daa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6dae:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    6db5:	85 c0                	test   %eax,%eax
    6db7:	74 1b                	je     6dd4 <show_state+0x47>
			show_task(i, task[i]);
    6db9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6dbd:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    6dc4:	83 ec 08             	sub    $0x8,%esp
    6dc7:	50                   	push   %eax
    6dc8:	ff 74 24 18          	pushl  0x18(%esp)
    6dcc:	e8 5f fe ff ff       	call   6c30 <show_task>
    6dd1:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NR_TASKS; i++)
    6dd4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    6dd9:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    6dde:	7e ca                	jle    6daa <show_state+0x1d>
}
    6de0:	90                   	nop
    6de1:	83 c4 1c             	add    $0x1c,%esp
    6de4:	c3                   	ret    

00006de5 <math_state_restore>:
 */
// 当任务被调度交换过以后,该函数用以保存原任务的协处理器状态(上下文)并恢复新调度进来的当前任务的协处理器执行状态.
void math_state_restore()
{
	// 如果任务没变则返回(上一个任务就是当前任务).这里"上一个任务"是指刚被交换出去的任务.
	if (last_task_used_math == current)
    6de5:	8b 15 0c fb 02 00    	mov    0x2fb0c,%edx
    6deb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    6df0:	39 c2                	cmp    %eax,%edx
    6df2:	74 4d                	je     6e41 <math_state_restore+0x5c>
		return;
	// 在发送协处理器命令之前要先必WAIT指令.如果上个任务使用了协处理器,则保存其状态.
	__asm__("fwait");
    6df4:	9b                   	fwait
	if (last_task_used_math) {
    6df5:	a1 0c fb 02 00       	mov    0x2fb0c,%eax
    6dfa:	85 c0                	test   %eax,%eax
    6dfc:	74 0b                	je     6e09 <math_state_restore+0x24>
		__asm__("fnsave %0"::"m" (last_task_used_math->tss.i387));
    6dfe:	a1 0c fb 02 00       	mov    0x2fb0c,%eax
    6e03:	dd b0 18 04 00 00    	fnsave 0x418(%eax)
	}
	// 现在,las_task_used_math指向当前任务,以备当前任务被交换出去时使用.此时如果当前任务用过协处理器,则恢复其状态.否则的话说明是第一次使用,
	// 于是就向协处理器发初始化命令,并设置使用协处理器标志.
	last_task_used_math = current;
    6e09:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    6e0e:	a3 0c fb 02 00       	mov    %eax,0x2fb0c
	if (current->used_math) {
    6e13:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    6e18:	0f b7 80 28 03 00 00 	movzwl 0x328(%eax),%eax
    6e1f:	66 85 c0             	test   %ax,%ax
    6e22:	74 0c                	je     6e30 <math_state_restore+0x4b>
		__asm__("frstor %0"::"m" (current->tss.i387));
    6e24:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    6e29:	dd a0 18 04 00 00    	frstor 0x418(%eax)
    6e2f:	c3                   	ret    
	} else {
		__asm__("fninit"::);					// 向协处理器发初始化命令.
    6e30:	db e3                	fninit 
		current->used_math=1;					// 设置已使用协处理器标志.
    6e32:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    6e37:	66 c7 80 28 03 00 00 	movw   $0x1,0x328(%eax)
    6e3e:	01 00 
    6e40:	c3                   	ret    
		return;
    6e41:	90                   	nop
	}
}
    6e42:	c3                   	ret    

00006e43 <schedule>:
 *
 * 注意!!任务0是个闲置('idle')任务,只有当没有其他任务可以运行时才调用它.它不能被杀死,也不睡眠.任务0中的状态信息'state'是从
 * 来不用的.
 */
void schedule(void)
{
    6e43:	83 ec 20             	sub    $0x20,%esp

	/* check alarm, wake up any interruptible tasks that have got a signal */
	/* 检测alarm(进程的报警定时值),唤醒任何已得到信号的可中断任务 */

	// 从任务数组中最后一个任务开始循环检测alarm.在循环时跳过空指针项.
	for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6e46:	c7 44 24 10 bc f2 02 	movl   $0x2f2bc,0x10(%esp)
    6e4d:	00 
    6e4e:	e9 e6 00 00 00       	jmp    6f39 <schedule+0xf6>
		if (*p) {
    6e53:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e57:	8b 00                	mov    (%eax),%eax
    6e59:	85 c0                	test   %eax,%eax
    6e5b:	0f 84 d3 00 00 00    	je     6f34 <schedule+0xf1>
			// 如果设置过任务超时定时timeout,并且已经超时,则复位超时定时值,并且如果任务处于可中断睡眠状态TASK_INTERRUPTIBLE下,将其置为就绪
			// 状态(TASK_RUNNING).
			if ((*p)->timeout && (*p)->timeout < jiffies) {
    6e61:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e65:	8b 00                	mov    (%eax),%eax
    6e67:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
    6e6d:	85 c0                	test   %eax,%eax
    6e6f:	74 3e                	je     6eaf <schedule+0x6c>
    6e71:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e75:	8b 00                	mov    (%eax),%eax
    6e77:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
    6e7d:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    6e82:	39 c2                	cmp    %eax,%edx
    6e84:	73 29                	jae    6eaf <schedule+0x6c>
				(*p)->timeout = 0;
    6e86:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e8a:	8b 00                	mov    (%eax),%eax
    6e8c:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
    6e93:	00 00 00 
				if ((*p)->state == TASK_INTERRUPTIBLE)
    6e96:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e9a:	8b 00                	mov    (%eax),%eax
    6e9c:	8b 00                	mov    (%eax),%eax
    6e9e:	83 f8 01             	cmp    $0x1,%eax
    6ea1:	75 0c                	jne    6eaf <schedule+0x6c>
					(*p)->state = TASK_RUNNING;
    6ea3:	8b 44 24 10          	mov    0x10(%esp),%eax
    6ea7:	8b 00                	mov    (%eax),%eax
    6ea9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
			// 如果设置过任务的定时值alarm,并且已经过期(alarm<jiffies),则在信号位图中置SIGALRM信号,即向任务发送SIGALARM信号.然后清alarm.
			// 该信号的默认操作是终止进程.jiffies是系统从开机开始算起的滴答数(10ms/滴答).定义在sched.h中.
			if ((*p)->alarm && (*p)->alarm < jiffies) {
    6eaf:	8b 44 24 10          	mov    0x10(%esp),%eax
    6eb3:	8b 00                	mov    (%eax),%eax
    6eb5:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
    6ebb:	85 c0                	test   %eax,%eax
    6ebd:	74 3a                	je     6ef9 <schedule+0xb6>
    6ebf:	8b 44 24 10          	mov    0x10(%esp),%eax
    6ec3:	8b 00                	mov    (%eax),%eax
    6ec5:	8b 90 dc 02 00 00    	mov    0x2dc(%eax),%edx
    6ecb:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    6ed0:	39 c2                	cmp    %eax,%edx
    6ed2:	73 25                	jae    6ef9 <schedule+0xb6>
				(*p)->signal |= (1 << (SIGALRM - 1));
    6ed4:	8b 44 24 10          	mov    0x10(%esp),%eax
    6ed8:	8b 00                	mov    (%eax),%eax
    6eda:	8b 50 0c             	mov    0xc(%eax),%edx
    6edd:	8b 44 24 10          	mov    0x10(%esp),%eax
    6ee1:	8b 00                	mov    (%eax),%eax
    6ee3:	80 ce 20             	or     $0x20,%dh
    6ee6:	89 50 0c             	mov    %edx,0xc(%eax)
				(*p)->alarm = 0;
    6ee9:	8b 44 24 10          	mov    0x10(%esp),%eax
    6eed:	8b 00                	mov    (%eax),%eax
    6eef:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%eax)
    6ef6:	00 00 00 
			}
			// 如果信号位图中除被阻塞的信号外还有其他信号,并且任务处于可中断状态,则置任务为就绪状态.
			// 其中'~(_BLOCKABLE & (*p)->blocked)'用于忽略被阻塞的信号,但SIGKILL和SIGSTOP不能被阻塞.
			if (((*p)->signal & ~(_BLOCKABLE & (*p)->blocked)) && (*p)->state == TASK_INTERRUPTIBLE)
    6ef9:	8b 44 24 10          	mov    0x10(%esp),%eax
    6efd:	8b 00                	mov    (%eax),%eax
    6eff:	8b 50 0c             	mov    0xc(%eax),%edx
    6f02:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f06:	8b 00                	mov    (%eax),%eax
    6f08:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    6f0e:	25 ff fe fb ff       	and    $0xfffbfeff,%eax
    6f13:	f7 d0                	not    %eax
    6f15:	21 d0                	and    %edx,%eax
    6f17:	85 c0                	test   %eax,%eax
    6f19:	74 19                	je     6f34 <schedule+0xf1>
    6f1b:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f1f:	8b 00                	mov    (%eax),%eax
    6f21:	8b 00                	mov    (%eax),%eax
    6f23:	83 f8 01             	cmp    $0x1,%eax
    6f26:	75 0c                	jne    6f34 <schedule+0xf1>
				(*p)->state = TASK_RUNNING;
    6f28:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f2c:	8b 00                	mov    (%eax),%eax
    6f2e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6f34:	83 6c 24 10 04       	subl   $0x4,0x10(%esp)
    6f39:	81 7c 24 10 c0 f1 02 	cmpl   $0x2f1c0,0x10(%esp)
    6f40:	00 
    6f41:	0f 87 0c ff ff ff    	ja     6e53 <schedule+0x10>
		}

	/* this is the scheduler proper: */
	/* 这里是调度程序的主要部分 */
	while (1) {
		c = -1;
    6f47:	c7 44 24 14 ff ff ff 	movl   $0xffffffff,0x14(%esp)
    6f4e:	ff 
		next = 0;
    6f4f:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
    6f56:	00 
		i = NR_TASKS;
    6f57:	c7 44 24 1c 40 00 00 	movl   $0x40,0x1c(%esp)
    6f5e:	00 
		p = &task[NR_TASKS];
    6f5f:	c7 44 24 10 c0 f2 02 	movl   $0x2f2c0,0x10(%esp)
    6f66:	00 
		// 这段代码是从任务数组的最后一个任务开始循环处理,并跳过不含任务的数组糟.比较每个就绪状态任务的counter(任务运行时间的递减滴答计数)值,
		// 哪一个值大,运行时间还不长,next就指向哪个的任务号.
		while (--i) {
    6f67:	eb 41                	jmp    6faa <schedule+0x167>
			// 当前索引没有进程指针则跳过当前循环
			if (!*--p)
    6f69:	83 6c 24 10 04       	subl   $0x4,0x10(%esp)
    6f6e:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f72:	8b 00                	mov    (%eax),%eax
    6f74:	85 c0                	test   %eax,%eax
    6f76:	75 02                	jne    6f7a <schedule+0x137>
				continue;
    6f78:	eb 30                	jmp    6faa <schedule+0x167>
			if ((*p)->state == TASK_RUNNING && (*p)->counter > c)
    6f7a:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f7e:	8b 00                	mov    (%eax),%eax
    6f80:	8b 00                	mov    (%eax),%eax
    6f82:	85 c0                	test   %eax,%eax
    6f84:	75 24                	jne    6faa <schedule+0x167>
    6f86:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f8a:	8b 00                	mov    (%eax),%eax
    6f8c:	8b 40 04             	mov    0x4(%eax),%eax
    6f8f:	39 44 24 14          	cmp    %eax,0x14(%esp)
    6f93:	7d 15                	jge    6faa <schedule+0x167>
				c = (*p)->counter, next = i;
    6f95:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f99:	8b 00                	mov    (%eax),%eax
    6f9b:	8b 40 04             	mov    0x4(%eax),%eax
    6f9e:	89 44 24 14          	mov    %eax,0x14(%esp)
    6fa2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    6fa6:	89 44 24 18          	mov    %eax,0x18(%esp)
		while (--i) {
    6faa:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
    6faf:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    6fb4:	75 b3                	jne    6f69 <schedule+0x126>
		}
		// 如果比较得出有counter值不等于0的结果,或者後方中没有一个可运行的任务存在(此时c仍然为-1,next=0),则退出开始的循环,执行161行上的任务切换
		// 操作.否则就根据每个任务的优先权值,更新每一个任务的counter值,然后回到125行重新比较.counter值的计算方式为counter = counter /2 +priority.
		// 注意,这里计算过程不考虑进程的状态.
		if (c) break;
    6fb6:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    6fbb:	75 49                	jne    7006 <schedule+0x1c3>
		for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6fbd:	c7 44 24 10 bc f2 02 	movl   $0x2f2bc,0x10(%esp)
    6fc4:	00 
    6fc5:	eb 30                	jmp    6ff7 <schedule+0x1b4>
			if (*p)
    6fc7:	8b 44 24 10          	mov    0x10(%esp),%eax
    6fcb:	8b 00                	mov    (%eax),%eax
    6fcd:	85 c0                	test   %eax,%eax
    6fcf:	74 21                	je     6ff2 <schedule+0x1af>
				(*p)->counter = ((*p)->counter >> 1) + (*p)->priority;
    6fd1:	8b 44 24 10          	mov    0x10(%esp),%eax
    6fd5:	8b 00                	mov    (%eax),%eax
    6fd7:	8b 40 04             	mov    0x4(%eax),%eax
    6fda:	d1 f8                	sar    %eax
    6fdc:	89 c1                	mov    %eax,%ecx
    6fde:	8b 44 24 10          	mov    0x10(%esp),%eax
    6fe2:	8b 00                	mov    (%eax),%eax
    6fe4:	8b 50 08             	mov    0x8(%eax),%edx
    6fe7:	8b 44 24 10          	mov    0x10(%esp),%eax
    6feb:	8b 00                	mov    (%eax),%eax
    6fed:	01 ca                	add    %ecx,%edx
    6fef:	89 50 04             	mov    %edx,0x4(%eax)
		for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6ff2:	83 6c 24 10 04       	subl   $0x4,0x10(%esp)
    6ff7:	81 7c 24 10 c0 f1 02 	cmpl   $0x2f1c0,0x10(%esp)
    6ffe:	00 
    6fff:	77 c6                	ja     6fc7 <schedule+0x184>
		c = -1;
    7001:	e9 41 ff ff ff       	jmp    6f47 <schedule+0x104>
		if (c) break;
    7006:	90                   	nop
	}
	// 用下面的宏(定义在sched.h中)把当前任务指针current指向任务号为next的任务,并切换到该任务中运行.在146行上next被初始化为0.因此若系统中没有任何
	// 其他任务可运行时,则next始终为0.因此调度函数会在系统空闲时去执行任务0.此时任务0权执行pause()
	switch_to(next);					// 切换到任务号为next的任务,并运行之.
    7007:	8b 44 24 18          	mov    0x18(%esp),%eax
    700b:	c1 e0 04             	shl    $0x4,%eax
    700e:	8d 50 20             	lea    0x20(%eax),%edx
    7011:	8b 44 24 18          	mov    0x18(%esp),%eax
    7015:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    701c:	89 c1                	mov    %eax,%ecx
    701e:	39 0d a0 f1 02 00    	cmp    %ecx,0x2f1a0
    7024:	74 19                	je     703f <schedule+0x1fc>
    7026:	66 89 54 24 0c       	mov    %dx,0xc(%esp)
    702b:	87 0d a0 f1 02 00    	xchg   %ecx,0x2f1a0
    7031:	ff 6c 24 08          	ljmp   *0x8(%esp)
    7035:	39 0d 0c fb 02 00    	cmp    %ecx,0x2fb0c
    703b:	75 02                	jne    703f <schedule+0x1fc>
    703d:	0f 06                	clts   
}
    703f:	90                   	nop
    7040:	83 c4 20             	add    $0x20,%esp
    7043:	c3                   	ret    

00007044 <sys_pause>:
// pause()系统调用.转换当前任务的状态为可中断的等待状态,并重新调试.
// 该系统调用将导致进程进入睡眠状态,直到收到一个信号.该信号用于终止进程或者使进程调用一个信号捕获函数.只有当捕获了一个信号,并且信号捕获处理函数返回,
// pause()才会返回.此时pause()返回值应该是-1,并且errno被置为EINTR.这里还没有完全实现(直到0.95版).
int sys_pause(void)
{
	current->state = TASK_INTERRUPTIBLE;
    7044:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7049:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	schedule();
    704f:	e8 ef fd ff ff       	call   6e43 <schedule>
	return 0;
    7054:	b8 00 00 00 00       	mov    $0x0,%eax
}
    7059:	c3                   	ret    

0000705a <__sleep_on>:
// 是任务结构)会改变,因此为了能修改调用该函数程序中原来就是指针变量的值,就需要传递指针'*p'的指针,即'**p'.
// 参数state是任务睡眠使用的状态:TASK_INTERRUPTIBLE或TASK_INTERRUPTIBLE.处于不可中断睡眠状态(TASK_UNINTERRUPTIBLE)的任务需要内核程序利用
// wake_up()函数明确唤醒之.处于可中断睡眠状态(TASK_INTERRUPTIBLE)可以通过信号,任务起时等手段唤醒(置为就绪状态TASK_RUNNING).
// *** 注意,由于本内核代码不是很成熟,因此下列与睡眠相关的代码存在一些问题,不宜深究.
static inline void __sleep_on(struct task_struct **p, int state)
{
    705a:	83 ec 1c             	sub    $0x1c,%esp
	struct task_struct *tmp;

	// 若指针无效,则退出.(指针所指的对象可以是NULL,但指针本身不会为0).
	// 如果当前任务是任务0,则死机(impossible!).
	if (!p)
    705d:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    7062:	0f 84 ae 00 00 00    	je     7116 <__sleep_on+0xbc>
		return;
	if (current == &(init_task.task))
    7068:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    706d:	3d a0 e1 02 00       	cmp    $0x2e1a0,%eax
    7072:	75 10                	jne    7084 <__sleep_on+0x2a>
		panic("task[0] trying to sleep");
    7074:	83 ec 0c             	sub    $0xc,%esp
    7077:	68 d3 31 02 00       	push   $0x231d3
    707c:	e8 81 1b 00 00       	call   8c02 <panic>
    7081:	83 c4 10             	add    $0x10,%esp
	// 让tmp指向已经在等待队列上的任务(如果有的话),例如inode->i_wait.并且将睡眠队列头的等待指针指向当前任务.这样就把当前任务插入到了*p的等待队列中.然后
	// 将当前任务置为指定的等待状态,并执行重新调度.
	tmp = *p;
    7084:	8b 44 24 20          	mov    0x20(%esp),%eax
    7088:	8b 00                	mov    (%eax),%eax
    708a:	89 44 24 0c          	mov    %eax,0xc(%esp)
	*p = current;
    708e:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    7094:	8b 44 24 20          	mov    0x20(%esp),%eax
    7098:	89 10                	mov    %edx,(%eax)
	current->state = state;
    709a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    709f:	8b 54 24 24          	mov    0x24(%esp),%edx
    70a3:	89 10                	mov    %edx,(%eax)
	// 将当前进程睡眠后立刻调用调度函数进行调度新的进程执行
repeat:	schedule();
    70a5:	e8 99 fd ff ff       	call   6e43 <schedule>
	// 只有当这个等待任务被唤醒时,程序才会返回到这里,表示进程已被明确地唤醒并执行.如果等待队列中还有等待任务,并且队列头指针*p所指向的任务不是当前任务时,说明
	// 在本任务插入等待队列后还有任务进入等待队列.于是我们应该也要唤醒这个任务,而我们自己应按顺序让这些后面进入队列的任务唤醒,因此这里将等待队列头所指任务先
	// 置为就绪状态,而自己则置为不可中断等待状态,即自己要等待这些后续队列的任务被唤醒而执行时来唤醒本任务.然后重新执行调度程序.
	if (*p && *p != current) {
    70aa:	8b 44 24 20          	mov    0x20(%esp),%eax
    70ae:	8b 00                	mov    (%eax),%eax
    70b0:	85 c0                	test   %eax,%eax
    70b2:	74 28                	je     70dc <__sleep_on+0x82>
    70b4:	8b 44 24 20          	mov    0x20(%esp),%eax
    70b8:	8b 10                	mov    (%eax),%edx
    70ba:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    70bf:	39 c2                	cmp    %eax,%edx
    70c1:	74 19                	je     70dc <__sleep_on+0x82>
		(**p).state = 0;
    70c3:	8b 44 24 20          	mov    0x20(%esp),%eax
    70c7:	8b 00                	mov    (%eax),%eax
    70c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		current->state = TASK_UNINTERRUPTIBLE;
    70cf:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    70d4:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
		goto repeat;
    70da:	eb c9                	jmp    70a5 <__sleep_on+0x4b>
	}
	// 执行到这里,说明本任务真正被唤醒执行.此时等待队列头指针应该指向本任务,若它为空,则表明调度有问题,于是显示警告信息.最后我们让头指针指向在我们前面进入队列的
	// 任务(*p = tmp).若确实存在这样一个任务,即队列中还有任务(tmp不为空),就唤醒之.最先进入队列的任务在唤醒后运行时最终会把等待队列头指针置成NULL.
	if (!*p)
    70dc:	8b 44 24 20          	mov    0x20(%esp),%eax
    70e0:	8b 00                	mov    (%eax),%eax
    70e2:	85 c0                	test   %eax,%eax
    70e4:	75 10                	jne    70f6 <__sleep_on+0x9c>
		printk("Warning: *P = NULL\n\r");
    70e6:	83 ec 0c             	sub    $0xc,%esp
    70e9:	68 eb 31 02 00       	push   $0x231eb
    70ee:	e8 4e 1b 00 00       	call   8c41 <printk>
    70f3:	83 c4 10             	add    $0x10,%esp
	if (*p = tmp)
    70f6:	8b 44 24 20          	mov    0x20(%esp),%eax
    70fa:	8b 54 24 0c          	mov    0xc(%esp),%edx
    70fe:	89 10                	mov    %edx,(%eax)
    7100:	8b 44 24 20          	mov    0x20(%esp),%eax
    7104:	8b 00                	mov    (%eax),%eax
    7106:	85 c0                	test   %eax,%eax
    7108:	74 0d                	je     7117 <__sleep_on+0xbd>
		tmp->state = 0;
    710a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    710e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    7114:	eb 01                	jmp    7117 <__sleep_on+0xbd>
		return;
    7116:	90                   	nop
}
    7117:	83 c4 1c             	add    $0x1c,%esp
    711a:	c3                   	ret    

0000711b <interruptible_sleep_on>:

// 将当前任务置为可中断的等待状态(TASK_INIERRUPTIBLE),并放入头指针*p指定的等待队列中.
void interruptible_sleep_on(struct task_struct **p)
{
    711b:	83 ec 0c             	sub    $0xc,%esp
	__sleep_on(p, TASK_INTERRUPTIBLE);
    711e:	83 ec 08             	sub    $0x8,%esp
    7121:	6a 01                	push   $0x1
    7123:	ff 74 24 1c          	pushl  0x1c(%esp)
    7127:	e8 2e ff ff ff       	call   705a <__sleep_on>
    712c:	83 c4 10             	add    $0x10,%esp
}
    712f:	90                   	nop
    7130:	83 c4 0c             	add    $0xc,%esp
    7133:	c3                   	ret    

00007134 <sleep_on>:

// 把当前任务置为不可中断的等待状态(TASK_UNINTERRUPTIBLE),并让睡眠队列头指针指向当前任务.只有明确地唤醒时才会返回.该函数提供了进程与中断处理程序之间的
// 同步机制.
void sleep_on(struct task_struct **p)
{
    7134:	83 ec 0c             	sub    $0xc,%esp
	__sleep_on(p, TASK_UNINTERRUPTIBLE);
    7137:	83 ec 08             	sub    $0x8,%esp
    713a:	6a 02                	push   $0x2
    713c:	ff 74 24 1c          	pushl  0x1c(%esp)
    7140:	e8 15 ff ff ff       	call   705a <__sleep_on>
    7145:	83 c4 10             	add    $0x10,%esp
}
    7148:	90                   	nop
    7149:	83 c4 0c             	add    $0xc,%esp
    714c:	c3                   	ret    

0000714d <wake_up>:

// 唤醒*p指向的任务.*p是任务等待队列头指针.由于新等待任务是插入在等待队列头指针处的,因此唤醒的是最后进入等待队列的任务.若该任务已经处于停止或
// 僵死状态,则显示警告信息.
void wake_up(struct task_struct **p)
{
    714d:	83 ec 0c             	sub    $0xc,%esp
	if (p && *p) {
    7150:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    7155:	74 50                	je     71a7 <wake_up+0x5a>
    7157:	8b 44 24 10          	mov    0x10(%esp),%eax
    715b:	8b 00                	mov    (%eax),%eax
    715d:	85 c0                	test   %eax,%eax
    715f:	74 46                	je     71a7 <wake_up+0x5a>
		if ((**p).state == TASK_STOPPED)						// 处于停止状态.
    7161:	8b 44 24 10          	mov    0x10(%esp),%eax
    7165:	8b 00                	mov    (%eax),%eax
    7167:	8b 00                	mov    (%eax),%eax
    7169:	83 f8 04             	cmp    $0x4,%eax
    716c:	75 10                	jne    717e <wake_up+0x31>
			printk("wake_up: TASK_STOPPED");
    716e:	83 ec 0c             	sub    $0xc,%esp
    7171:	68 00 32 02 00       	push   $0x23200
    7176:	e8 c6 1a 00 00       	call   8c41 <printk>
    717b:	83 c4 10             	add    $0x10,%esp
		if ((**p).state == TASK_ZOMBIE)							// 处于僵死状态.
    717e:	8b 44 24 10          	mov    0x10(%esp),%eax
    7182:	8b 00                	mov    (%eax),%eax
    7184:	8b 00                	mov    (%eax),%eax
    7186:	83 f8 03             	cmp    $0x3,%eax
    7189:	75 10                	jne    719b <wake_up+0x4e>
			printk("wake_up: TASK_ZOMBIE");
    718b:	83 ec 0c             	sub    $0xc,%esp
    718e:	68 16 32 02 00       	push   $0x23216
    7193:	e8 a9 1a 00 00       	call   8c41 <printk>
    7198:	83 c4 10             	add    $0x10,%esp
		(**p).state=0;											// 置为就绪状态TASK_RUNNING.
    719b:	8b 44 24 10          	mov    0x10(%esp),%eax
    719f:	8b 00                	mov    (%eax),%eax
    71a1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
}
    71a7:	90                   	nop
    71a8:	83 c4 0c             	add    $0xc,%esp
    71ab:	c3                   	ret    

000071ac <ticks_to_floppy_on>:

// 指定软驱启动到正常运转状态所需等待时间.
// 参数nr -- 软驱号(0--3),返回值为滴答.
// 局部变量selected是选中软驱标志(blk_drv/floppy.c).mask是所选软驱对应的数字输出寄存器中启动马达位.mask高4位是各软驱启动马达标志.
int ticks_to_floppy_on(unsigned int nr)
{
    71ac:	83 ec 1c             	sub    $0x1c,%esp
	extern unsigned char selected;
	unsigned char mask = 0x10 << nr;
    71af:	8b 44 24 20          	mov    0x20(%esp),%eax
    71b3:	ba 10 00 00 00       	mov    $0x10,%edx
    71b8:	89 c1                	mov    %eax,%ecx
    71ba:	d3 e2                	shl    %cl,%edx
    71bc:	89 d0                	mov    %edx,%eax
    71be:	88 44 24 0f          	mov    %al,0xf(%esp)

	// 系统最多有4个软驱.首先预先设置好指定软驱nr停转之前需要经过的时间(100秒).然后取当前DOR寄存器值到临时变量mask中,并把指定软驱的马达
	// 启动标志置位.
	if (nr > 3)
    71c2:	83 7c 24 20 03       	cmpl   $0x3,0x20(%esp)
    71c7:	76 10                	jbe    71d9 <ticks_to_floppy_on+0x2d>
		panic("floppy_on: nr>3");
    71c9:	83 ec 0c             	sub    $0xc,%esp
    71cc:	68 2b 32 02 00       	push   $0x2322b
    71d1:	e8 2c 1a 00 00       	call   8c02 <panic>
    71d6:	83 c4 10             	add    $0x10,%esp
	moff_timer[nr] = 10000;							/* 100 s = very big :-) */	// 停转维持时间.
    71d9:	8b 44 24 20          	mov    0x20(%esp),%eax
    71dd:	c7 04 85 30 fb 02 00 	movl   $0x2710,0x2fb30(,%eax,4)
    71e4:	10 27 00 00 
	cli();											/* use floppy_off to turn it off */	// 关中断
    71e8:	fa                   	cli    
	mask |= current_DOR;
    71e9:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    71f0:	08 44 24 0f          	or     %al,0xf(%esp)
	// 如果当前没有选择软驱,则首先复位其他软驱的选择位,然后指定软驱选择位.
	if (!selected) {
    71f4:	0f b6 05 58 21 03 00 	movzbl 0x32158,%eax
    71fb:	84 c0                	test   %al,%al
    71fd:	75 0d                	jne    720c <ticks_to_floppy_on+0x60>
		mask &= 0xFC;
    71ff:	80 64 24 0f fc       	andb   $0xfc,0xf(%esp)
		mask |= nr;
    7204:	8b 44 24 20          	mov    0x20(%esp),%eax
    7208:	08 44 24 0f          	or     %al,0xf(%esp)
	}
	// 如果数字输出寄存器的当前值与要求的值不同,则向FDC数字输出端口输出新值(mask),并且如果要求启动的马达还没有启动,则置相应软驱的马达启动
	// 定时器值(HZ/2 = 0.5秒或50个滴答).若已经启动,则再设置启动定时为2个滴答,能满足下面do_floppy_timer()中先递减后判断的要求.执行本次
	// 定时代码的要求即可.此后更新当前数字输出寄存器current_DOR.
	if (mask != current_DOR) {
    720c:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    7213:	38 44 24 0f          	cmp    %al,0xf(%esp)
    7217:	74 5c                	je     7275 <ticks_to_floppy_on+0xc9>
		outb(mask, FD_DOR);
    7219:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
    721e:	ba f2 03 00 00       	mov    $0x3f2,%edx
    7223:	ee                   	out    %al,(%dx)
		if ((mask ^ current_DOR) & 0xf0)
    7224:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    722b:	32 44 24 0f          	xor    0xf(%esp),%al
    722f:	0f b6 c0             	movzbl %al,%eax
    7232:	25 f0 00 00 00       	and    $0xf0,%eax
    7237:	85 c0                	test   %eax,%eax
    7239:	74 11                	je     724c <ticks_to_floppy_on+0xa0>
			mon_timer[nr] = HZ / 2;
    723b:	8b 44 24 20          	mov    0x20(%esp),%eax
    723f:	c7 04 85 20 fb 02 00 	movl   $0x32,0x2fb20(,%eax,4)
    7246:	32 00 00 00 
    724a:	eb 1f                	jmp    726b <ticks_to_floppy_on+0xbf>
		else if (mon_timer[nr] < 2)
    724c:	8b 44 24 20          	mov    0x20(%esp),%eax
    7250:	8b 04 85 20 fb 02 00 	mov    0x2fb20(,%eax,4),%eax
    7257:	83 f8 01             	cmp    $0x1,%eax
    725a:	7f 0f                	jg     726b <ticks_to_floppy_on+0xbf>
			mon_timer[nr] = 2;
    725c:	8b 44 24 20          	mov    0x20(%esp),%eax
    7260:	c7 04 85 20 fb 02 00 	movl   $0x2,0x2fb20(,%eax,4)
    7267:	02 00 00 00 
		current_DOR = mask;
    726b:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
    7270:	a2 c8 f2 02 00       	mov    %al,0x2f2c8
	}
	sti();											// 开中断.
    7275:	fb                   	sti    
	return mon_timer[nr];							// 最后返回启动马达所需的时间值.
    7276:	8b 44 24 20          	mov    0x20(%esp),%eax
    727a:	8b 04 85 20 fb 02 00 	mov    0x2fb20(,%eax,4),%eax
}
    7281:	83 c4 1c             	add    $0x1c,%esp
    7284:	c3                   	ret    

00007285 <floppy_on>:

// 等待指定软驱马达启动所需的一段时间,然后返回.
// 设置指定软驱的马达启动到正常转速所需的延时,然后睡眠等待.在定时中断过程中会一直递减判断这里设定的延时值.当延时到期,就会 这里的等待进程.
void floppy_on(unsigned int nr)
{
    7285:	83 ec 0c             	sub    $0xc,%esp
	// 关中断.如果马达启动定时还没到,就一直把当前进程置为不可中断睡眠状态并放入等待马达运行的队列中.然后开中断.
	cli();
    7288:	fa                   	cli    
	while (ticks_to_floppy_on(nr))
    7289:	eb 18                	jmp    72a3 <floppy_on+0x1e>
		sleep_on(nr + wait_motor);
    728b:	8b 44 24 10          	mov    0x10(%esp),%eax
    728f:	c1 e0 02             	shl    $0x2,%eax
    7292:	05 10 fb 02 00       	add    $0x2fb10,%eax
    7297:	83 ec 0c             	sub    $0xc,%esp
    729a:	50                   	push   %eax
    729b:	e8 94 fe ff ff       	call   7134 <sleep_on>
    72a0:	83 c4 10             	add    $0x10,%esp
	while (ticks_to_floppy_on(nr))
    72a3:	83 ec 0c             	sub    $0xc,%esp
    72a6:	ff 74 24 1c          	pushl  0x1c(%esp)
    72aa:	e8 fd fe ff ff       	call   71ac <ticks_to_floppy_on>
    72af:	83 c4 10             	add    $0x10,%esp
    72b2:	85 c0                	test   %eax,%eax
    72b4:	75 d5                	jne    728b <floppy_on+0x6>
	sti();
    72b6:	fb                   	sti    
}
    72b7:	90                   	nop
    72b8:	83 c4 0c             	add    $0xc,%esp
    72bb:	c3                   	ret    

000072bc <floppy_off>:

// 置关闭相应软驱马达停转定时器(3秒).
// 若不使用该函数明确关闭指定的软驱马达,则在马达开启100秒之后也会被关闭.
void floppy_off(unsigned int nr)
{
	moff_timer[nr] = 3 * HZ;
    72bc:	8b 44 24 04          	mov    0x4(%esp),%eax
    72c0:	c7 04 85 30 fb 02 00 	movl   $0x12c,0x2fb30(,%eax,4)
    72c7:	2c 01 00 00 
}
    72cb:	90                   	nop
    72cc:	c3                   	ret    

000072cd <do_floppy_timer>:

// 软盘定时处理子程序.更新马达启动定时值和马达关闭停转时值.该子程序会在时钟定时中断过程中被调用,因此系统每经过一个滴答(10ms)就会被
// 调用一次,随时更新马达开启或停转定时器的值.如果某一个马达停转定时到,则将数字输出寄存器马达启动位复位.
void do_floppy_timer(void)
{
    72cd:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	unsigned char mask = 0x10;
    72d0:	c6 44 24 0b 10       	movb   $0x10,0xb(%esp)

	for (i = 0 ; i < 4 ; i++, mask <<= 1) {
    72d5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    72dc:	00 
    72dd:	e9 bc 00 00 00       	jmp    739e <do_floppy_timer+0xd1>
		if (!(mask & current_DOR))						// 如果不是DOR指定的马达则跳过.
    72e2:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    72e9:	22 44 24 0b          	and    0xb(%esp),%al
    72ed:	84 c0                	test   %al,%al
    72ef:	0f 84 9f 00 00 00    	je     7394 <do_floppy_timer+0xc7>
			continue;
		if (mon_timer[i]) {								// 如果马达启动定时到则唤醒进程.
    72f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    72f9:	8b 04 85 20 fb 02 00 	mov    0x2fb20(,%eax,4),%eax
    7300:	85 c0                	test   %eax,%eax
    7302:	74 42                	je     7346 <do_floppy_timer+0x79>
			if (!--mon_timer[i])
    7304:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7308:	8b 04 85 20 fb 02 00 	mov    0x2fb20(,%eax,4),%eax
    730f:	8d 50 ff             	lea    -0x1(%eax),%edx
    7312:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7316:	89 14 85 20 fb 02 00 	mov    %edx,0x2fb20(,%eax,4)
    731d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7321:	8b 04 85 20 fb 02 00 	mov    0x2fb20(,%eax,4),%eax
    7328:	85 c0                	test   %eax,%eax
    732a:	75 69                	jne    7395 <do_floppy_timer+0xc8>
				wake_up(i + wait_motor);
    732c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7330:	c1 e0 02             	shl    $0x2,%eax
    7333:	05 10 fb 02 00       	add    $0x2fb10,%eax
    7338:	83 ec 0c             	sub    $0xc,%esp
    733b:	50                   	push   %eax
    733c:	e8 0c fe ff ff       	call   714d <wake_up>
    7341:	83 c4 10             	add    $0x10,%esp
    7344:	eb 4f                	jmp    7395 <do_floppy_timer+0xc8>
		} else if (!moff_timer[i]) {					// 如果马达停转定时到则复位相应马达启动位,并且更新数字输出寄存器.
    7346:	8b 44 24 0c          	mov    0xc(%esp),%eax
    734a:	8b 04 85 30 fb 02 00 	mov    0x2fb30(,%eax,4),%eax
    7351:	85 c0                	test   %eax,%eax
    7353:	75 24                	jne    7379 <do_floppy_timer+0xac>
			current_DOR &= ~mask;
    7355:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
    735a:	f7 d0                	not    %eax
    735c:	0f b6 15 c8 f2 02 00 	movzbl 0x2f2c8,%edx
    7363:	21 d0                	and    %edx,%eax
    7365:	a2 c8 f2 02 00       	mov    %al,0x2f2c8
			outb(current_DOR, FD_DOR);
    736a:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    7371:	ba f2 03 00 00       	mov    $0x3f2,%edx
    7376:	ee                   	out    %al,(%dx)
    7377:	eb 1c                	jmp    7395 <do_floppy_timer+0xc8>
		} else
			moff_timer[i]--;							// 否则马达停转计时递减.
    7379:	8b 44 24 0c          	mov    0xc(%esp),%eax
    737d:	8b 04 85 30 fb 02 00 	mov    0x2fb30(,%eax,4),%eax
    7384:	8d 50 ff             	lea    -0x1(%eax),%edx
    7387:	8b 44 24 0c          	mov    0xc(%esp),%eax
    738b:	89 14 85 30 fb 02 00 	mov    %edx,0x2fb30(,%eax,4)
    7392:	eb 01                	jmp    7395 <do_floppy_timer+0xc8>
			continue;
    7394:	90                   	nop
	for (i = 0 ; i < 4 ; i++, mask <<= 1) {
    7395:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    739a:	d0 64 24 0b          	shlb   0xb(%esp)
    739e:	83 7c 24 0c 03       	cmpl   $0x3,0xc(%esp)
    73a3:	0f 8e 39 ff ff ff    	jle    72e2 <do_floppy_timer+0x15>
	}
}
    73a9:	90                   	nop
    73aa:	83 c4 1c             	add    $0x1c,%esp
    73ad:	c3                   	ret    

000073ae <add_timer>:

// 添加定时器.输入参数为指定的定时值(滴答数)和相应的处理程序指针.
// 软盘驱动程序(floppy.c)利用该函数执行启动或关闭马达的延时操作.
// 参数jiffies- 以10毫秒计的滴答数; *fn() - 定时时间到时执行的函数.
void add_timer(long jiffies, void (*fn)(void))
{
    73ae:	83 ec 1c             	sub    $0x1c,%esp
	struct timer_list * p;

	// 如果定时处理程序指针为空,则退出.否则关中断.
	if (!fn)
    73b1:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    73b6:	0f 84 54 01 00 00    	je     7510 <add_timer+0x162>
		return;
	cli();
    73bc:	fa                   	cli    
	// 如果定时值<=0,则立刻调用其处理程序.并且该定时器不加入链表中.
	if (jiffies <= 0)
    73bd:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    73c2:	7f 0b                	jg     73cf <add_timer+0x21>
		(fn)();
    73c4:	8b 44 24 24          	mov    0x24(%esp),%eax
    73c8:	ff d0                	call   *%eax
    73ca:	e9 3e 01 00 00       	jmp    750d <add_timer+0x15f>
	else {
		// 否则从定时器数组中,找一个空闲项.
		for (p = timer_list ; p < timer_list + TIME_REQUESTS ; p++)
    73cf:	c7 44 24 0c 40 fb 02 	movl   $0x2fb40,0xc(%esp)
    73d6:	00 
    73d7:	eb 10                	jmp    73e9 <add_timer+0x3b>
			if (!p->fn)
    73d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    73dd:	8b 40 04             	mov    0x4(%eax),%eax
    73e0:	85 c0                	test   %eax,%eax
    73e2:	74 12                	je     73f6 <add_timer+0x48>
		for (p = timer_list ; p < timer_list + TIME_REQUESTS ; p++)
    73e4:	83 44 24 0c 0c       	addl   $0xc,0xc(%esp)
    73e9:	b8 40 fe 02 00       	mov    $0x2fe40,%eax
    73ee:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    73f2:	72 e5                	jb     73d9 <add_timer+0x2b>
    73f4:	eb 01                	jmp    73f7 <add_timer+0x49>
				break;
    73f6:	90                   	nop
		// 如果已经用完了定时器数组,则系统崩溃.否则向定时器数据结构填入就信息,并链入链表头.
		if (p >= timer_list + TIME_REQUESTS)
    73f7:	b8 40 fe 02 00       	mov    $0x2fe40,%eax
    73fc:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    7400:	72 10                	jb     7412 <add_timer+0x64>
			panic("No more time requests free");
    7402:	83 ec 0c             	sub    $0xc,%esp
    7405:	68 3b 32 02 00       	push   $0x2323b
    740a:	e8 f3 17 00 00       	call   8c02 <panic>
    740f:	83 c4 10             	add    $0x10,%esp
		p->fn = fn;
    7412:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7416:	8b 54 24 24          	mov    0x24(%esp),%edx
    741a:	89 50 04             	mov    %edx,0x4(%eax)
		p->jiffies = jiffies;
    741d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7421:	8b 54 24 20          	mov    0x20(%esp),%edx
    7425:	89 10                	mov    %edx,(%eax)
		p->next = next_timer;
    7427:	8b 15 40 fe 02 00    	mov    0x2fe40,%edx
    742d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7431:	89 50 08             	mov    %edx,0x8(%eax)
		next_timer = p;
    7434:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7438:	a3 40 fe 02 00       	mov    %eax,0x2fe40
		// 链表项按定时值从小到大排序.在排序时减去排在前面需要的滴答数,这样在处理定时器时只要查看链表头的第一项的定时是否到期即可.
		// [[?? 这段程序好像没有考虑周全.如果新插入的定时器值小于原来关一个定时器值时则根本没会进入循环中,但此时还是应该将紧随后面
		// 的一个定时器值减去新的第1个的定时值.即如果第1个定时值<=第2个,则第2个定时值扣除第1个的值即可,否则进入下面循环中进行处理.]]
		while (p->next && p->next->jiffies < p->jiffies) {
    743d:	eb 72                	jmp    74b1 <add_timer+0x103>
			p->jiffies -= p->next->jiffies;
    743f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7443:	8b 10                	mov    (%eax),%edx
    7445:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7449:	8b 40 08             	mov    0x8(%eax),%eax
    744c:	8b 00                	mov    (%eax),%eax
    744e:	29 c2                	sub    %eax,%edx
    7450:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7454:	89 10                	mov    %edx,(%eax)
			fn = p->fn;
    7456:	8b 44 24 0c          	mov    0xc(%esp),%eax
    745a:	8b 40 04             	mov    0x4(%eax),%eax
    745d:	89 44 24 24          	mov    %eax,0x24(%esp)
			p->fn = p->next->fn;
    7461:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7465:	8b 40 08             	mov    0x8(%eax),%eax
    7468:	8b 50 04             	mov    0x4(%eax),%edx
    746b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    746f:	89 50 04             	mov    %edx,0x4(%eax)
			p->next->fn = fn;
    7472:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7476:	8b 40 08             	mov    0x8(%eax),%eax
    7479:	8b 54 24 24          	mov    0x24(%esp),%edx
    747d:	89 50 04             	mov    %edx,0x4(%eax)
			jiffies = p->jiffies;
    7480:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7484:	8b 00                	mov    (%eax),%eax
    7486:	89 44 24 20          	mov    %eax,0x20(%esp)
			p->jiffies = p->next->jiffies;
    748a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    748e:	8b 40 08             	mov    0x8(%eax),%eax
    7491:	8b 10                	mov    (%eax),%edx
    7493:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7497:	89 10                	mov    %edx,(%eax)
			p->next->jiffies = jiffies;
    7499:	8b 44 24 0c          	mov    0xc(%esp),%eax
    749d:	8b 40 08             	mov    0x8(%eax),%eax
    74a0:	8b 54 24 20          	mov    0x20(%esp),%edx
    74a4:	89 10                	mov    %edx,(%eax)
			p = p->next;
    74a6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74aa:	8b 40 08             	mov    0x8(%eax),%eax
    74ad:	89 44 24 0c          	mov    %eax,0xc(%esp)
		while (p->next && p->next->jiffies < p->jiffies) {
    74b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74b5:	8b 40 08             	mov    0x8(%eax),%eax
    74b8:	85 c0                	test   %eax,%eax
    74ba:	74 17                	je     74d3 <add_timer+0x125>
    74bc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74c0:	8b 40 08             	mov    0x8(%eax),%eax
    74c3:	8b 10                	mov    (%eax),%edx
    74c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74c9:	8b 00                	mov    (%eax),%eax
    74cb:	39 c2                	cmp    %eax,%edx
    74cd:	0f 8c 6c ff ff ff    	jl     743f <add_timer+0x91>
		}
		// 修正上述问题.
		if(p->next && p->next->jiffies >= p->jiffies) {
    74d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74d7:	8b 40 08             	mov    0x8(%eax),%eax
    74da:	85 c0                	test   %eax,%eax
    74dc:	74 2f                	je     750d <add_timer+0x15f>
    74de:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74e2:	8b 40 08             	mov    0x8(%eax),%eax
    74e5:	8b 10                	mov    (%eax),%edx
    74e7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74eb:	8b 00                	mov    (%eax),%eax
    74ed:	39 c2                	cmp    %eax,%edx
    74ef:	7c 1c                	jl     750d <add_timer+0x15f>
			p->next->jiffies -= p->jiffies;
    74f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74f5:	8b 40 08             	mov    0x8(%eax),%eax
    74f8:	8b 08                	mov    (%eax),%ecx
    74fa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74fe:	8b 10                	mov    (%eax),%edx
    7500:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7504:	8b 40 08             	mov    0x8(%eax),%eax
    7507:	29 d1                	sub    %edx,%ecx
    7509:	89 ca                	mov    %ecx,%edx
    750b:	89 10                	mov    %edx,(%eax)
		}
	}
	sti();
    750d:	fb                   	sti    
    750e:	eb 01                	jmp    7511 <add_timer+0x163>
		return;
    7510:	90                   	nop
}
    7511:	83 c4 1c             	add    $0x1c,%esp
    7514:	c3                   	ret    

00007515 <do_timer>:

// 时钟中断C函数处理程序,在sys_call.s中的timer_interrupt被调用.
// 参数cpl是当前特权级0或3,是时钟中断发生时正被执行的代码选择符中的特权级.cpl=0时表示中断发生时正在执行内核代码,cpl=3时表示中断发生时正在执行用户
// 代码.对于一个进程由于执行时间片用完时,则进行任务切换.并执行一个计时更新工作.
void do_timer(long cpl)
{
    7515:	83 ec 1c             	sub    $0x1c,%esp
	static int blanked = 0;

	// 首先判断是否经过了一定时间而让屏幕黑屏(blankcount).如果blankcount计数不为零,或者黑屏延时间隔时间blankinterval为0的话,那么若已经处理黑屏状态
	// (黑屏标志blanked=1),则让屏幕恢复显示.若blnkcount计数不为零,则递减之,并且复位黑屏标志.
	if (blankcount || !blankinterval) {
    7518:	a1 28 fe 03 00       	mov    0x3fe28,%eax
    751d:	85 c0                	test   %eax,%eax
    751f:	75 09                	jne    752a <do_timer+0x15>
    7521:	a1 24 fe 03 00       	mov    0x3fe24,%eax
    7526:	85 c0                	test   %eax,%eax
    7528:	75 30                	jne    755a <do_timer+0x45>
		if (blanked)
    752a:	a1 44 fe 02 00       	mov    0x2fe44,%eax
    752f:	85 c0                	test   %eax,%eax
    7531:	74 05                	je     7538 <do_timer+0x23>
			unblank_screen();
    7533:	e8 1b 5f 01 00       	call   1d453 <unblank_screen>
		if (blankcount)
    7538:	a1 28 fe 03 00       	mov    0x3fe28,%eax
    753d:	85 c0                	test   %eax,%eax
    753f:	74 0d                	je     754e <do_timer+0x39>
			blankcount--;
    7541:	a1 28 fe 03 00       	mov    0x3fe28,%eax
    7546:	83 e8 01             	sub    $0x1,%eax
    7549:	a3 28 fe 03 00       	mov    %eax,0x3fe28
		blanked = 0;
    754e:	c7 05 44 fe 02 00 00 	movl   $0x0,0x2fe44
    7555:	00 00 00 
    7558:	eb 18                	jmp    7572 <do_timer+0x5d>
	// 否则的话若黑屏标志末置位,则让屏幕黑屏,并且设置黑屏标志.
	} else if (!blanked) {
    755a:	a1 44 fe 02 00       	mov    0x2fe44,%eax
    755f:	85 c0                	test   %eax,%eax
    7561:	75 0f                	jne    7572 <do_timer+0x5d>
		blank_screen();
    7563:	e8 d6 5e 01 00       	call   1d43e <blank_screen>
		blanked = 1;
    7568:	c7 05 44 fe 02 00 01 	movl   $0x1,0x2fe44
    756f:	00 00 00 
	}
	// 接着处理硬盘操作超时问题.如果硬盘超时计数递减之后为0,则进行硬盘访问超时处理.
	if (hd_timeout)
    7572:	a1 84 21 03 00       	mov    0x32184,%eax
    7577:	85 c0                	test   %eax,%eax
    7579:	74 1b                	je     7596 <do_timer+0x81>
		if (!--hd_timeout)
    757b:	a1 84 21 03 00       	mov    0x32184,%eax
    7580:	83 e8 01             	sub    $0x1,%eax
    7583:	a3 84 21 03 00       	mov    %eax,0x32184
    7588:	a1 84 21 03 00       	mov    0x32184,%eax
    758d:	85 c0                	test   %eax,%eax
    758f:	75 05                	jne    7596 <do_timer+0x81>
			hd_times_out();							// 硬盘访问超时处理(blk_drv/hd.c).
    7591:	e8 f1 0b 01 00       	call   18187 <hd_times_out>

	// 如果发声计数次数到,则关闭发声.(向0x61口发送命令,复位位0和1.位0控制8253计数器2的工作,位1控制扬声器.
	if (beepcount)									// 扬声器发声时间滴答数(chr_drv/console.c)
    7596:	a1 2c fe 03 00       	mov    0x3fe2c,%eax
    759b:	85 c0                	test   %eax,%eax
    759d:	74 1b                	je     75ba <do_timer+0xa5>
		if (!--beepcount)
    759f:	a1 2c fe 03 00       	mov    0x3fe2c,%eax
    75a4:	83 e8 01             	sub    $0x1,%eax
    75a7:	a3 2c fe 03 00       	mov    %eax,0x3fe2c
    75ac:	a1 2c fe 03 00       	mov    0x3fe2c,%eax
    75b1:	85 c0                	test   %eax,%eax
    75b3:	75 05                	jne    75ba <do_timer+0xa5>
			sysbeepstop();
    75b5:	e8 36 5d 01 00       	call   1d2f0 <sysbeepstop>

	// 如果当前特权级(cpl)为0(最高,表示是内核程序在工作),则将内核代码时间stime递增;[Linus把内核程序统称为超级用户(superviser)的
	// 程序.这种称呼来自Intel CPU手册.]如果cpl>0,则表示是一般用户程序在工作,增加utime.
	if (cpl)
    75ba:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    75bf:	74 16                	je     75d7 <do_timer+0xc2>
		current->utime++;
    75c1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    75c6:	8b 90 e0 02 00 00    	mov    0x2e0(%eax),%edx
    75cc:	83 c2 01             	add    $0x1,%edx
    75cf:	89 90 e0 02 00 00    	mov    %edx,0x2e0(%eax)
    75d5:	eb 14                	jmp    75eb <do_timer+0xd6>
	else
		current->stime++;
    75d7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    75dc:	8b 90 e4 02 00 00    	mov    0x2e4(%eax),%edx
    75e2:	83 c2 01             	add    $0x1,%edx
    75e5:	89 90 e4 02 00 00    	mov    %edx,0x2e4(%eax)

	// 如果有定时器存在,则将链表第1个定时器的值减1.如果已等于0,则调用相应的处理程序,并将该处理程序指针置空.然后去掉该项定时器.next_timer是
	// 定时器链表的头指针.
	if (next_timer) {
    75eb:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    75f0:	85 c0                	test   %eax,%eax
    75f2:	74 4d                	je     7641 <do_timer+0x12c>
		next_timer->jiffies--;
    75f4:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    75f9:	8b 10                	mov    (%eax),%edx
    75fb:	83 ea 01             	sub    $0x1,%edx
    75fe:	89 10                	mov    %edx,(%eax)
		while (next_timer && next_timer->jiffies <= 0) {
    7600:	eb 2b                	jmp    762d <do_timer+0x118>
			void (*fn)(void);						// 这里插入了一个函数指针定义!!

			fn = next_timer->fn;
    7602:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    7607:	8b 40 04             	mov    0x4(%eax),%eax
    760a:	89 44 24 0c          	mov    %eax,0xc(%esp)
			next_timer->fn = NULL;
    760e:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    7613:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
			next_timer = next_timer->next;
    761a:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    761f:	8b 40 08             	mov    0x8(%eax),%eax
    7622:	a3 40 fe 02 00       	mov    %eax,0x2fe40
			(fn)();									// 调用定时处理函数.
    7627:	8b 44 24 0c          	mov    0xc(%esp),%eax
    762b:	ff d0                	call   *%eax
		while (next_timer && next_timer->jiffies <= 0) {
    762d:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    7632:	85 c0                	test   %eax,%eax
    7634:	74 0b                	je     7641 <do_timer+0x12c>
    7636:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    763b:	8b 00                	mov    (%eax),%eax
    763d:	85 c0                	test   %eax,%eax
    763f:	7e c1                	jle    7602 <do_timer+0xed>
		}
	}
	// 如果当前软盘控制器FDC的数字输出寄存器中马达启动位有置位的,则执行软盘定时程序.
	if (current_DOR & 0xf0)
    7641:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    7648:	0f b6 c0             	movzbl %al,%eax
    764b:	25 f0 00 00 00       	and    $0xf0,%eax
    7650:	85 c0                	test   %eax,%eax
    7652:	74 05                	je     7659 <do_timer+0x144>
		do_floppy_timer();
    7654:	e8 74 fc ff ff       	call   72cd <do_floppy_timer>
	// 如果进程运行时间还没完,则退出.否则置当前任务运行计数值为0.并且若发生时钟中断时正在内核代码中运行则返回,否则调用执行调试函数.
	if ((--current->counter) > 0) return;
    7659:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    765e:	8b 50 04             	mov    0x4(%eax),%edx
    7661:	83 ea 01             	sub    $0x1,%edx
    7664:	89 50 04             	mov    %edx,0x4(%eax)
    7667:	8b 40 04             	mov    0x4(%eax),%eax
    766a:	85 c0                	test   %eax,%eax
    766c:	7f 1a                	jg     7688 <do_timer+0x173>
	current->counter = 0;
    766e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7673:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	if (!cpl) return;								// 对于内核态程序,不信赖counter值进行调试.
    767a:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    767f:	74 0a                	je     768b <do_timer+0x176>
	schedule();
    7681:	e8 bd f7 ff ff       	call   6e43 <schedule>
    7686:	eb 04                	jmp    768c <do_timer+0x177>
	if ((--current->counter) > 0) return;
    7688:	90                   	nop
    7689:	eb 01                	jmp    768c <do_timer+0x177>
	if (!cpl) return;								// 对于内核态程序,不信赖counter值进行调试.
    768b:	90                   	nop
}
    768c:	83 c4 1c             	add    $0x1c,%esp
    768f:	c3                   	ret    

00007690 <sys_alarm>:
// 进程数据结构中报警定时值alarm的单位是系统滴答（1滴答为10毫秒），它是系统开机起到设置定时操作时系统滴答值jiffies和转换成滴答
// 单位的定时值之和，即'jiffies + HZ*定时秒值'。而参数给出的是以秒为单位的定时值，因此本函数的主要操作是进行两个单位的转换。
// 其中常数HZ = 100,是内核系统运行频率。定义在inlucde/sched.h上。
// 参数seconds是新的定时时间值，单位是秒。
int sys_alarm(long seconds)
{
    7690:	83 ec 10             	sub    $0x10,%esp
	int old = current->alarm;
    7693:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7698:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
    769e:	89 44 24 0c          	mov    %eax,0xc(%esp)

	if (old)
    76a2:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    76a7:	74 1d                	je     76c6 <sys_alarm+0x36>
		old = (old - jiffies) / HZ;
    76a9:	8b 54 24 0c          	mov    0xc(%esp),%edx
    76ad:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    76b2:	29 c2                	sub    %eax,%edx
    76b4:	89 d0                	mov    %edx,%eax
    76b6:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    76bb:	f7 e2                	mul    %edx
    76bd:	89 d0                	mov    %edx,%eax
    76bf:	c1 e8 05             	shr    $0x5,%eax
    76c2:	89 44 24 0c          	mov    %eax,0xc(%esp)
	current->alarm = (seconds>0)?(jiffies+HZ*seconds):0;
    76c6:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    76cb:	7e 12                	jle    76df <sys_alarm+0x4f>
    76cd:	8b 44 24 14          	mov    0x14(%esp),%eax
    76d1:	6b c0 64             	imul   $0x64,%eax,%eax
    76d4:	89 c2                	mov    %eax,%edx
    76d6:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    76db:	01 c2                	add    %eax,%edx
    76dd:	eb 05                	jmp    76e4 <sys_alarm+0x54>
    76df:	ba 00 00 00 00       	mov    $0x0,%edx
    76e4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    76e9:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%eax)
	return (old);
    76ef:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    76f3:	83 c4 10             	add    $0x10,%esp
    76f6:	c3                   	ret    

000076f7 <sys_getpid>:

// 取当前进程号pid。
int sys_getpid(void)
{
	return current->pid;
    76f7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    76fc:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
}
    7702:	c3                   	ret    

00007703 <sys_getppid>:

// 取父进程号ppid。
int sys_getppid(void)
{
	return current->p_pptr->pid;
    7703:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7708:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    770e:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
}
    7714:	c3                   	ret    

00007715 <sys_getuid>:

// 取用户uid。
int sys_getuid(void)
{
	return current->uid;
    7715:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    771a:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    7721:	0f b7 c0             	movzwl %ax,%eax
}
    7724:	c3                   	ret    

00007725 <sys_geteuid>:

// 取有效的用户号euid。
int sys_geteuid(void)
{
	return current->euid;
    7725:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    772a:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    7731:	0f b7 c0             	movzwl %ax,%eax
}
    7734:	c3                   	ret    

00007735 <sys_getgid>:

// 取组号gid。
int sys_getgid(void)
{
	return current->gid;
    7735:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    773a:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    7741:	0f b7 c0             	movzwl %ax,%eax
}
    7744:	c3                   	ret    

00007745 <sys_getegid>:

// 取有效的组号egid。
int sys_getegid(void)
{
	return current->egid;
    7745:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    774a:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    7751:	0f b7 c0             	movzwl %ax,%eax
}
    7754:	c3                   	ret    

00007755 <sys_nice>:

// 系统调用功能 -- 降低对CPU的使用优先权（有人会用吗？）。
// 应该限制increment为大于0的值，否则可使优先仅增大！！
int sys_nice(long increment)
{
	if (current->priority-increment > 0)
    7755:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    775a:	8b 40 08             	mov    0x8(%eax),%eax
    775d:	2b 44 24 04          	sub    0x4(%esp),%eax
    7761:	85 c0                	test   %eax,%eax
    7763:	7e 14                	jle    7779 <sys_nice+0x24>
		current->priority -= increment;
    7765:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    776a:	8b 50 08             	mov    0x8(%eax),%edx
    776d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7772:	2b 54 24 04          	sub    0x4(%esp),%edx
    7776:	89 50 08             	mov    %edx,0x8(%eax)
	return 0;
    7779:	b8 00 00 00 00       	mov    $0x0,%eax
}
    777e:	c3                   	ret    

0000777f <sched_init>:

// 内核调度程序的初始化子程序
void sched_init(void)
{
    777f:	55                   	push   %ebp
    7780:	57                   	push   %edi
    7781:	56                   	push   %esi
    7782:	53                   	push   %ebx
    7783:	83 ec 10             	sub    $0x10,%esp
		panic("Struct sigaction MUST be 16 bytes");
	// 在全局描述符表中设置初始任务(任务0)的任务状态段描述符和局部数据表描述符.
	// FIRST_TSS_ENTRY和FIRST_LDT_ENTRY的值分别是4和5,定义在include/linux/sched.h中.gdt是一个描述符表数组(include/linux/head.h),
	// 实际上对应程序head.s中的他已描述符表基址(gdt).因此gdt+FIRST_TSS_ENTRY即为gdt[FIRST_TSS_ENTRY](即是gdt[4]),即gdt数组第4项的地址
	// 参见include/asm/system.h
	set_tss_desc(gdt + FIRST_TSS_ENTRY, &(init_task.task.tss));
    7786:	ba d8 5c 00 00       	mov    $0x5cd8,%edx
    778b:	b9 da 5c 00 00       	mov    $0x5cda,%ecx
    7790:	bb dc 5c 00 00       	mov    $0x5cdc,%ebx
    7795:	be dd 5c 00 00       	mov    $0x5cdd,%esi
    779a:	bf de 5c 00 00       	mov    $0x5cde,%edi
    779f:	bd df 5c 00 00       	mov    $0x5cdf,%ebp
    77a4:	b8 50 e5 02 00       	mov    $0x2e550,%eax
    77a9:	66 c7 02 68 00       	movw   $0x68,(%edx)
    77ae:	66 89 01             	mov    %ax,(%ecx)
    77b1:	c1 c8 10             	ror    $0x10,%eax
    77b4:	88 03                	mov    %al,(%ebx)
    77b6:	c6 06 89             	movb   $0x89,(%esi)
    77b9:	c6 07 00             	movb   $0x0,(%edi)
    77bc:	88 65 00             	mov    %ah,0x0(%ebp)
    77bf:	c1 c8 10             	ror    $0x10,%eax
	set_ldt_desc(gdt + FIRST_LDT_ENTRY, &(init_task.task.ldt));
    77c2:	ba e0 5c 00 00       	mov    $0x5ce0,%edx
    77c7:	b9 e2 5c 00 00       	mov    $0x5ce2,%ecx
    77cc:	bb e4 5c 00 00       	mov    $0x5ce4,%ebx
    77d1:	be e5 5c 00 00       	mov    $0x5ce5,%esi
    77d6:	bf e6 5c 00 00       	mov    $0x5ce6,%edi
    77db:	bd e7 5c 00 00       	mov    $0x5ce7,%ebp
    77e0:	b8 38 e5 02 00       	mov    $0x2e538,%eax
    77e5:	66 c7 02 68 00       	movw   $0x68,(%edx)
    77ea:	66 89 01             	mov    %ax,(%ecx)
    77ed:	c1 c8 10             	ror    $0x10,%eax
    77f0:	88 03                	mov    %al,(%ebx)
    77f2:	c6 06 82             	movb   $0x82,(%esi)
    77f5:	c6 07 00             	movb   $0x0,(%edi)
    77f8:	88 65 00             	mov    %ah,0x0(%ebp)
    77fb:	c1 c8 10             	ror    $0x10,%eax
	// 清任务数组和描述符表项(注意i=1开始,所以初始任务的描述符还在).描述符项结构定义在文件include/linux/head.h中.
	p = gdt + 2 + FIRST_TSS_ENTRY;
    77fe:	c7 44 24 08 e8 5c 00 	movl   $0x5ce8,0x8(%esp)
    7805:	00 
	// 初始化除进程一以外的其他进程指针
	for(i = 1; i < NR_TASKS; i++) {
    7806:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    780d:	00 
    780e:	eb 4e                	jmp    785e <sched_init+0xdf>
		task[i] = NULL;
    7810:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7814:	c7 04 85 c0 f1 02 00 	movl   $0x0,0x2f1c0(,%eax,4)
    781b:	00 00 00 00 
		p->a = p->b = 0;
    781f:	8b 44 24 08          	mov    0x8(%esp),%eax
    7823:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    782a:	8b 44 24 08          	mov    0x8(%esp),%eax
    782e:	8b 50 04             	mov    0x4(%eax),%edx
    7831:	8b 44 24 08          	mov    0x8(%esp),%eax
    7835:	89 10                	mov    %edx,(%eax)
		p++;
    7837:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
		p->a = p->b = 0;
    783c:	8b 44 24 08          	mov    0x8(%esp),%eax
    7840:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    7847:	8b 44 24 08          	mov    0x8(%esp),%eax
    784b:	8b 50 04             	mov    0x4(%eax),%edx
    784e:	8b 44 24 08          	mov    0x8(%esp),%eax
    7852:	89 10                	mov    %edx,(%eax)
		p++;
    7854:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
	for(i = 1; i < NR_TASKS; i++) {
    7859:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    785e:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    7863:	7e ab                	jle    7810 <sched_init+0x91>
	}
	/* Clear NT, so that we won't have troubles with that later on */
	/* 清除标志寄存器中的位NT,这样以后就不会有麻烦 */
	// EFLAGS中的NT标志位用于控制任务的嵌套调用.当NT位置位时,那么当前中断任务执行IRET指令时就会引起任务切换.NT指出TSS中的back_link字段是否有效.
	// NT=0时无效.
	__asm__("pushfl ; andl $0xffffbfff,(%esp) ; popfl");
    7865:	9c                   	pushf  
    7866:	81 24 24 ff bf ff ff 	andl   $0xffffbfff,(%esp)
    786d:	9d                   	popf   
	// 将任务0的TSS段选择符加载到任务寄存器tr.将局部描述符表段选择符加载到局部描述符表寄存器ldtr中.注意!!是将GDT中相应LDT描述符的选择符加载到ldtr.
	// 只明确加这一次,以后新任务LDT的加载,是CPU根据TSS中的LDT项自动加载.
	ltr(0);								// 定义在include/linux/sched.h
    786e:	b8 20 00 00 00       	mov    $0x20,%eax
    7873:	0f 00 d8             	ltr    %ax
	lldt(0);							// 其中参数(0)是任务号.
    7876:	b8 28 00 00 00       	mov    $0x28,%eax
    787b:	0f 00 d0             	lldt   %ax
	// 下面代码用于初始化8253定时器.通道0,选择工作方式3,二进制计数方式.通道0的输出引脚接在中断控制主芯片的IRQ0上,它每10毫秒发出一个IRQ0请求.
	// LATCH是初始定时计数值.
	outb_p(0x36, 0x43);					/* binary, mode 3, LSB/MSB, ch 0 */
    787e:	b8 36 00 00 00       	mov    $0x36,%eax
    7883:	ba 43 00 00 00       	mov    $0x43,%edx
    7888:	ee                   	out    %al,(%dx)
    7889:	eb 00                	jmp    788b <sched_init+0x10c>
    788b:	eb 00                	jmp    788d <sched_init+0x10e>
	outb_p(LATCH & 0xff, 0x40);			/* LSB */	// 定时值低字节
    788d:	b8 9b 00 00 00       	mov    $0x9b,%eax
    7892:	ba 40 00 00 00       	mov    $0x40,%edx
    7897:	ee                   	out    %al,(%dx)
    7898:	eb 00                	jmp    789a <sched_init+0x11b>
    789a:	eb 00                	jmp    789c <sched_init+0x11d>
	outb(LATCH >> 8, 0x40);				/* MSB */	// 定时值高字节
    789c:	b8 2e 00 00 00       	mov    $0x2e,%eax
    78a1:	ba 40 00 00 00       	mov    $0x40,%edx
    78a6:	ee                   	out    %al,(%dx)
	// 设置时钟中断处理程序句柄(设置时钟中断门).修改中断控制器屏蔽码,允许时钟中断.
	// 然后设置系统调用中断门.这两个设置中断描述衔表IDT中描述符的宏定义在文件include/asm/system.h中.两者的区别参见system.h文件开始处的说明.
	set_intr_gate(0x20, &timer_interrupt);
    78a7:	b9 b8 55 00 00       	mov    $0x55b8,%ecx
    78ac:	bb bc 55 00 00       	mov    $0x55bc,%ebx
    78b1:	ba 18 7a 00 00       	mov    $0x7a18,%edx
    78b6:	b8 00 00 08 00       	mov    $0x80000,%eax
    78bb:	66 89 d0             	mov    %dx,%ax
    78be:	66 ba 00 8e          	mov    $0x8e00,%dx
    78c2:	89 01                	mov    %eax,(%ecx)
    78c4:	89 13                	mov    %edx,(%ebx)
	outb(inb_p(0x21) & ~0x01, 0x21);
    78c6:	b8 21 00 00 00       	mov    $0x21,%eax
    78cb:	89 c2                	mov    %eax,%edx
    78cd:	ec                   	in     (%dx),%al
    78ce:	eb 00                	jmp    78d0 <sched_init+0x151>
    78d0:	eb 00                	jmp    78d2 <sched_init+0x153>
    78d2:	88 44 24 07          	mov    %al,0x7(%esp)
    78d6:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
    78db:	0f b6 c0             	movzbl %al,%eax
    78de:	83 e0 fe             	and    $0xfffffffe,%eax
    78e1:	ba 21 00 00 00       	mov    $0x21,%edx
    78e6:	ee                   	out    %al,(%dx)
	set_system_gate(0x80, &system_call);
    78e7:	b9 b8 58 00 00       	mov    $0x58b8,%ecx
    78ec:	bb bc 58 00 00       	mov    $0x58bc,%ebx
    78f1:	ba 20 79 00 00       	mov    $0x7920,%edx
    78f6:	b8 00 00 08 00       	mov    $0x80000,%eax
    78fb:	66 89 d0             	mov    %dx,%ax
    78fe:	66 ba 00 ef          	mov    $0xef00,%dx
    7902:	89 01                	mov    %eax,(%ecx)
    7904:	89 13                	mov    %edx,(%ebx)
}
    7906:	90                   	nop
    7907:	83 c4 10             	add    $0x10,%esp
    790a:	5b                   	pop    %ebx
    790b:	5e                   	pop    %esi
    790c:	5f                   	pop    %edi
    790d:	5d                   	pop    %ebp
    790e:	c3                   	ret    
    790f:	90                   	nop

00007910 <bad_sys_call>:
    7910:	6a da                	push   $0xffffffda
    7912:	eb 50                	jmp    7964 <ret_from_sys_call>

00007914 <reschedule>:
    7914:	68 64 79 00 00       	push   $0x7964
    7919:	e9 25 f5 ff ff       	jmp    6e43 <schedule>
    791e:	66 90                	xchg   %ax,%ax

00007920 <system_call>:
    7920:	1e                   	push   %ds
    7921:	06                   	push   %es
    7922:	0f a0                	push   %fs
    7924:	50                   	push   %eax
    7925:	52                   	push   %edx
    7926:	51                   	push   %ecx
    7927:	53                   	push   %ebx
    7928:	ba 10 00 00 00       	mov    $0x10,%edx
    792d:	8e da                	mov    %edx,%ds
    792f:	8e c2                	mov    %edx,%es
    7931:	ba 17 00 00 00       	mov    $0x17,%edx
    7936:	8e e2                	mov    %edx,%fs
    7938:	3b 05 9c e1 02 00    	cmp    0x2e19c,%eax
    793e:	73 d0                	jae    7910 <bad_sys_call>
    7940:	8b 1c 85 40 e0 02 00 	mov    0x2e040(,%eax,4),%ebx
    7947:	83 fb 00             	cmp    $0x0,%ebx
    794a:	75 05                	jne    7951 <sys_call>
    794c:	e8 96 29 00 00       	call   a2e7 <sys_default>

00007951 <sys_call>:
    7951:	ff d3                	call   *%ebx
    7953:	50                   	push   %eax
    7954:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7959:	83 38 00             	cmpl   $0x0,(%eax)
    795c:	75 b6                	jne    7914 <reschedule>
    795e:	83 78 04 00          	cmpl   $0x0,0x4(%eax)
    7962:	74 b0                	je     7914 <reschedule>

00007964 <ret_from_sys_call>:
    7964:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7969:	3b 05 c0 f1 02 00    	cmp    0x2f1c0,%eax
    796f:	74 34                	je     79a5 <ret_from_sys_call+0x41>
    7971:	66 83 7c 24 24 0f    	cmpw   $0xf,0x24(%esp)
    7977:	75 2c                	jne    79a5 <ret_from_sys_call+0x41>
    7979:	66 83 7c 24 30 17    	cmpw   $0x17,0x30(%esp)
    797f:	75 24                	jne    79a5 <ret_from_sys_call+0x41>
    7981:	8b 58 0c             	mov    0xc(%eax),%ebx
    7984:	8b 88 10 02 00 00    	mov    0x210(%eax),%ecx
    798a:	f7 d1                	not    %ecx
    798c:	21 d9                	and    %ebx,%ecx
    798e:	0f bc c9             	bsf    %ecx,%ecx
    7991:	74 12                	je     79a5 <ret_from_sys_call+0x41>
    7993:	0f b3 cb             	btr    %ecx,%ebx
    7996:	89 58 0c             	mov    %ebx,0xc(%eax)
    7999:	41                   	inc    %ecx
    799a:	51                   	push   %ecx
    799b:	e8 eb 3e 00 00       	call   b88b <do_signal>
    79a0:	59                   	pop    %ecx
    79a1:	85 c0                	test   %eax,%eax
    79a3:	75 af                	jne    7954 <sys_call+0x3>
    79a5:	58                   	pop    %eax
    79a6:	5b                   	pop    %ebx
    79a7:	59                   	pop    %ecx
    79a8:	5a                   	pop    %edx
    79a9:	83 c4 04             	add    $0x4,%esp
    79ac:	0f a1                	pop    %fs
    79ae:	07                   	pop    %es
    79af:	1f                   	pop    %ds
    79b0:	cf                   	iret   
    79b1:	8d 76 00             	lea    0x0(%esi),%esi

000079b4 <coprocessor_error>:
    79b4:	1e                   	push   %ds
    79b5:	06                   	push   %es
    79b6:	0f a0                	push   %fs
    79b8:	6a ff                	push   $0xffffffff
    79ba:	52                   	push   %edx
    79bb:	51                   	push   %ecx
    79bc:	53                   	push   %ebx
    79bd:	50                   	push   %eax
    79be:	b8 10 00 00 00       	mov    $0x10,%eax
    79c3:	8e d8                	mov    %eax,%ds
    79c5:	8e c0                	mov    %eax,%es
    79c7:	b8 17 00 00 00       	mov    $0x17,%eax
    79cc:	8e e0                	mov    %eax,%fs
    79ce:	68 64 79 00 00       	push   $0x7964
    79d3:	e9 40 91 01 00       	jmp    20b18 <math_error>

000079d8 <device_not_available>:
    79d8:	1e                   	push   %ds
    79d9:	06                   	push   %es
    79da:	0f a0                	push   %fs
    79dc:	6a ff                	push   $0xffffffff
    79de:	52                   	push   %edx
    79df:	51                   	push   %ecx
    79e0:	53                   	push   %ebx
    79e1:	50                   	push   %eax
    79e2:	b8 10 00 00 00       	mov    $0x10,%eax
    79e7:	8e d8                	mov    %eax,%ds
    79e9:	8e c0                	mov    %eax,%es
    79eb:	b8 17 00 00 00       	mov    $0x17,%eax
    79f0:	8e e0                	mov    %eax,%fs
    79f2:	68 64 79 00 00       	push   $0x7964
    79f7:	0f 06                	clts   
    79f9:	0f 20 c0             	mov    %cr0,%eax
    79fc:	a9 04 00 00 00       	test   $0x4,%eax
    7a01:	0f 84 de f3 ff ff    	je     6de5 <math_state_restore>
    7a07:	55                   	push   %ebp
    7a08:	56                   	push   %esi
    7a09:	57                   	push   %edi
    7a0a:	6a 00                	push   $0x0
    7a0c:	e8 12 8f 01 00       	call   20923 <math_emulate>
    7a11:	83 c4 04             	add    $0x4,%esp
    7a14:	5f                   	pop    %edi
    7a15:	5e                   	pop    %esi
    7a16:	5d                   	pop    %ebp
    7a17:	c3                   	ret    

00007a18 <timer_interrupt>:
    7a18:	1e                   	push   %ds
    7a19:	06                   	push   %es
    7a1a:	0f a0                	push   %fs
    7a1c:	6a ff                	push   $0xffffffff
    7a1e:	52                   	push   %edx
    7a1f:	51                   	push   %ecx
    7a20:	53                   	push   %ebx
    7a21:	50                   	push   %eax
    7a22:	b8 10 00 00 00       	mov    $0x10,%eax
    7a27:	8e d8                	mov    %eax,%ds
    7a29:	8e c0                	mov    %eax,%es
    7a2b:	b8 17 00 00 00       	mov    $0x17,%eax
    7a30:	8e e0                	mov    %eax,%fs
    7a32:	ff 05 00 fb 02 00    	incl   0x2fb00
    7a38:	b0 20                	mov    $0x20,%al
    7a3a:	e6 20                	out    %al,$0x20
    7a3c:	8b 44 24 24          	mov    0x24(%esp),%eax
    7a40:	83 e0 03             	and    $0x3,%eax
    7a43:	50                   	push   %eax
    7a44:	e8 cc fa ff ff       	call   7515 <do_timer>
    7a49:	83 c4 04             	add    $0x4,%esp
    7a4c:	e9 13 ff ff ff       	jmp    7964 <ret_from_sys_call>
    7a51:	8d 76 00             	lea    0x0(%esi),%esi

00007a54 <sys_execve>:
    7a54:	8d 44 24 20          	lea    0x20(%esp),%eax
    7a58:	50                   	push   %eax
    7a59:	e8 a7 9d 00 00       	call   11805 <do_execve>
    7a5e:	83 c4 04             	add    $0x4,%esp
    7a61:	c3                   	ret    
    7a62:	66 90                	xchg   %ax,%ax

00007a64 <sys_fork>:
    7a64:	e8 e7 10 00 00       	call   8b50 <find_empty_process>
    7a69:	85 c0                	test   %eax,%eax
    7a6b:	78 0e                	js     7a7b <sys_fork+0x17>
    7a6d:	0f a8                	push   %gs
    7a6f:	56                   	push   %esi
    7a70:	57                   	push   %edi
    7a71:	55                   	push   %ebp
    7a72:	50                   	push   %eax
    7a73:	e8 7b 0b 00 00       	call   85f3 <copy_process>
    7a78:	83 c4 14             	add    $0x14,%esp
    7a7b:	c3                   	ret    

00007a7c <hd_interrupt>:
    7a7c:	50                   	push   %eax
    7a7d:	51                   	push   %ecx
    7a7e:	52                   	push   %edx
    7a7f:	1e                   	push   %ds
    7a80:	06                   	push   %es
    7a81:	0f a0                	push   %fs
    7a83:	b8 10 00 00 00       	mov    $0x10,%eax
    7a88:	8e d8                	mov    %eax,%ds
    7a8a:	8e c0                	mov    %eax,%es
    7a8c:	b8 17 00 00 00       	mov    $0x17,%eax
    7a91:	8e e0                	mov    %eax,%fs
    7a93:	b0 20                	mov    $0x20,%al
    7a95:	e6 a0                	out    %al,$0xa0
    7a97:	eb 00                	jmp    7a99 <hd_interrupt+0x1d>
    7a99:	eb 00                	jmp    7a9b <hd_interrupt+0x1f>
    7a9b:	31 d2                	xor    %edx,%edx
    7a9d:	89 15 84 21 03 00    	mov    %edx,0x32184
    7aa3:	87 15 80 21 03 00    	xchg   %edx,0x32180
    7aa9:	85 d2                	test   %edx,%edx
    7aab:	75 05                	jne    7ab2 <hd_interrupt+0x36>
    7aad:	ba c6 7f 01 00       	mov    $0x17fc6,%edx
    7ab2:	e6 20                	out    %al,$0x20
    7ab4:	ff d2                	call   *%edx
    7ab6:	0f a1                	pop    %fs
    7ab8:	07                   	pop    %es
    7ab9:	1f                   	pop    %ds
    7aba:	5a                   	pop    %edx
    7abb:	59                   	pop    %ecx
    7abc:	58                   	pop    %eax
    7abd:	cf                   	iret   

00007abe <floppy_interrupt>:
    7abe:	50                   	push   %eax
    7abf:	51                   	push   %ecx
    7ac0:	52                   	push   %edx
    7ac1:	1e                   	push   %ds
    7ac2:	06                   	push   %es
    7ac3:	0f a0                	push   %fs
    7ac5:	b8 10 00 00 00       	mov    $0x10,%eax
    7aca:	8e d8                	mov    %eax,%ds
    7acc:	8e c0                	mov    %eax,%es
    7ace:	b8 17 00 00 00       	mov    $0x17,%eax
    7ad3:	8e e0                	mov    %eax,%fs
    7ad5:	b0 20                	mov    $0x20,%al
    7ad7:	e6 20                	out    %al,$0x20
    7ad9:	31 c0                	xor    %eax,%eax
    7adb:	87 05 54 21 03 00    	xchg   %eax,0x32154
    7ae1:	85 c0                	test   %eax,%eax
    7ae3:	75 05                	jne    7aea <floppy_interrupt+0x2c>
    7ae5:	b8 2b 72 01 00       	mov    $0x1722b,%eax
    7aea:	ff d0                	call   *%eax
    7aec:	0f a1                	pop    %fs
    7aee:	07                   	pop    %es
    7aef:	1f                   	pop    %ds
    7af0:	5a                   	pop    %edx
    7af1:	59                   	pop    %ecx
    7af2:	58                   	pop    %eax
    7af3:	cf                   	iret   

00007af4 <parallel_interrupt>:
    7af4:	50                   	push   %eax
    7af5:	b0 20                	mov    $0x20,%al
    7af7:	e6 20                	out    %al,$0x20
    7af9:	58                   	pop    %eax
    7afa:	cf                   	iret   

00007afb <die>:
void alignment_check(void);					// int46(kernel/asm.s)

// 该子程序用来打印出错中断的名称,出错号,调用程序的EIP,EFLAGS,ESP,fs段寄存器值,段的基址,段的长度,进程号pid,任务号,10字节指令码.如果
// 堆栈在用户数据段,则还打印16字节堆栈内容.这些信息可用于程序调试.
static void die(char * str, long esp_ptr, long nr)
{
    7afb:	56                   	push   %esi
    7afc:	53                   	push   %ebx
    7afd:	83 ec 14             	sub    $0x14,%esp
	long * esp = (long *) esp_ptr;
    7b00:	8b 44 24 24          	mov    0x24(%esp),%eax
    7b04:	89 44 24 08          	mov    %eax,0x8(%esp)
	int i;

	printk("%s: %04x\n\r",str, nr & 0xffff);
    7b08:	8b 44 24 28          	mov    0x28(%esp),%eax
    7b0c:	0f b7 c0             	movzwl %ax,%eax
    7b0f:	83 ec 04             	sub    $0x4,%esp
    7b12:	50                   	push   %eax
    7b13:	ff 74 24 28          	pushl  0x28(%esp)
    7b17:	68 58 32 02 00       	push   $0x23258
    7b1c:	e8 20 11 00 00       	call   8c41 <printk>
    7b21:	83 c4 10             	add    $0x10,%esp
	// 下行打印语句显示当前调用进程的CS:EIP,EFLAGS和SS:ESP的值.
	// (1) EIP:\t%04x:%p\n	-- esp[1]是段选择符(cs),esp[0]是eip
	// (2) EFLAGS:\t%p	-- esp[2]是eflags
	// (2) ESP:\t%04x:%p\n	-- esp[4]是原ss,esp[3]是原esp
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b24:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b28:	83 c0 0c             	add    $0xc,%eax
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b2b:	8b 30                	mov    (%eax),%esi
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b2d:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b31:	83 c0 10             	add    $0x10,%eax
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b34:	8b 18                	mov    (%eax),%ebx
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b36:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b3a:	83 c0 08             	add    $0x8,%eax
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b3d:	8b 08                	mov    (%eax),%ecx
    7b3f:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b43:	8b 10                	mov    (%eax),%edx
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b45:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b49:	83 c0 04             	add    $0x4,%eax
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b4c:	8b 00                	mov    (%eax),%eax
    7b4e:	83 ec 08             	sub    $0x8,%esp
    7b51:	56                   	push   %esi
    7b52:	53                   	push   %ebx
    7b53:	51                   	push   %ecx
    7b54:	52                   	push   %edx
    7b55:	50                   	push   %eax
    7b56:	68 64 32 02 00       	push   $0x23264
    7b5b:	e8 e1 10 00 00       	call   8c41 <printk>
    7b60:	83 c4 20             	add    $0x20,%esp
	printk("fs: %04x\n", _fs());
    7b63:	66 8c e0             	mov    %fs,%ax
    7b66:	89 c3                	mov    %eax,%ebx
    7b68:	89 d8                	mov    %ebx,%eax
    7b6a:	0f b7 c0             	movzwl %ax,%eax
    7b6d:	83 ec 08             	sub    $0x8,%esp
    7b70:	50                   	push   %eax
    7b71:	68 8a 32 02 00       	push   $0x2328a
    7b76:	e8 c6 10 00 00       	call   8c41 <printk>
    7b7b:	83 c4 10             	add    $0x10,%esp
	printk("base: %p, limit: %p\n", get_base(current->ldt[1]), get_limit(0x17));
    7b7e:	b8 17 00 00 00       	mov    $0x17,%eax
    7b83:	0f 03 c0             	lsl    %ax,%eax
    7b86:	40                   	inc    %eax
    7b87:	89 44 24 04          	mov    %eax,0x4(%esp)
    7b8b:	8b 4c 24 04          	mov    0x4(%esp),%ecx
    7b8f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7b94:	05 a0 03 00 00       	add    $0x3a0,%eax
    7b99:	83 c0 02             	add    $0x2,%eax
    7b9c:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    7ba2:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
    7ba8:	8d 72 04             	lea    0x4(%edx),%esi
    7bab:	8b 1d a0 f1 02 00    	mov    0x2f1a0,%ebx
    7bb1:	81 c3 a0 03 00 00    	add    $0x3a0,%ebx
    7bb7:	83 c3 07             	add    $0x7,%ebx
    7bba:	8a 33                	mov    (%ebx),%dh
    7bbc:	8a 16                	mov    (%esi),%dl
    7bbe:	c1 e2 10             	shl    $0x10,%edx
    7bc1:	66 8b 10             	mov    (%eax),%dx
    7bc4:	89 d0                	mov    %edx,%eax
    7bc6:	89 04 24             	mov    %eax,(%esp)
    7bc9:	8b 04 24             	mov    (%esp),%eax
    7bcc:	83 ec 04             	sub    $0x4,%esp
    7bcf:	51                   	push   %ecx
    7bd0:	50                   	push   %eax
    7bd1:	68 94 32 02 00       	push   $0x23294
    7bd6:	e8 66 10 00 00       	call   8c41 <printk>
    7bdb:	83 c4 10             	add    $0x10,%esp
	if (esp[4] == 0x17) {						// 或原ss值为0x17(用户栈),则还打印出用户栈的4个长字值(16字节).
    7bde:	8b 44 24 08          	mov    0x8(%esp),%eax
    7be2:	83 c0 10             	add    $0x10,%eax
    7be5:	8b 00                	mov    (%eax),%eax
    7be7:	83 f8 17             	cmp    $0x17,%eax
    7bea:	75 71                	jne    7c5d <die+0x162>
		printk("Stack: ");
    7bec:	83 ec 0c             	sub    $0xc,%esp
    7bef:	68 a9 32 02 00       	push   $0x232a9
    7bf4:	e8 48 10 00 00       	call   8c41 <printk>
    7bf9:	83 c4 10             	add    $0x10,%esp
		for (i = 0; i < 4; i++)
    7bfc:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    7c03:	00 
    7c04:	eb 40                	jmp    7c46 <die+0x14b>
			printk("%p ", get_seg_long(0x17, i + (long *)esp[3]));
    7c06:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7c0a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    7c11:	8b 44 24 08          	mov    0x8(%esp),%eax
    7c15:	83 c0 0c             	add    $0xc,%eax
    7c18:	8b 00                	mov    (%eax),%eax
    7c1a:	01 d0                	add    %edx,%eax
    7c1c:	89 c2                	mov    %eax,%edx
    7c1e:	b8 17 00 00 00       	mov    $0x17,%eax
    7c23:	0f a0                	push   %fs
    7c25:	8e e0                	mov    %eax,%fs
    7c27:	64 8b 02             	mov    %fs:(%edx),%eax
    7c2a:	0f a1                	pop    %fs
    7c2c:	89 c3                	mov    %eax,%ebx
    7c2e:	89 d8                	mov    %ebx,%eax
    7c30:	83 ec 08             	sub    $0x8,%esp
    7c33:	50                   	push   %eax
    7c34:	68 b1 32 02 00       	push   $0x232b1
    7c39:	e8 03 10 00 00       	call   8c41 <printk>
    7c3e:	83 c4 10             	add    $0x10,%esp
		for (i = 0; i < 4; i++)
    7c41:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    7c46:	83 7c 24 0c 03       	cmpl   $0x3,0xc(%esp)
    7c4b:	7e b9                	jle    7c06 <die+0x10b>
		printk("\n");
    7c4d:	83 ec 0c             	sub    $0xc,%esp
    7c50:	68 b5 32 02 00       	push   $0x232b5
    7c55:	e8 e7 0f 00 00       	call   8c41 <printk>
    7c5a:	83 c4 10             	add    $0x10,%esp
	}
	str(i);										// 取当前运行任务的任务号(include/linux/sched.h).
    7c5d:	b8 00 00 00 00       	mov    $0x0,%eax
    7c62:	66 0f 00 c8          	str    %ax
    7c66:	83 e8 20             	sub    $0x20,%eax
    7c69:	c1 e8 04             	shr    $0x4,%eax
    7c6c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	printk("Pid: %d, process nr: %d\n\r", current->pid, 0xffff & i);
    7c70:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7c74:	0f b7 d0             	movzwl %ax,%edx
    7c77:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7c7c:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    7c82:	83 ec 04             	sub    $0x4,%esp
    7c85:	52                   	push   %edx
    7c86:	50                   	push   %eax
    7c87:	68 b7 32 02 00       	push   $0x232b7
    7c8c:	e8 b0 0f 00 00       	call   8c41 <printk>
    7c91:	83 c4 10             	add    $0x10,%esp
                        						// 进程号,任务号.
	for(i = 0; i < 10; i++)
    7c94:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    7c9b:	00 
    7c9c:	eb 40                	jmp    7cde <die+0x1e3>
		printk("%02x ", 0xff & get_seg_byte(esp[1], (i+(char *)esp[0])));
    7c9e:	8b 44 24 08          	mov    0x8(%esp),%eax
    7ca2:	83 c0 04             	add    $0x4,%eax
    7ca5:	8b 00                	mov    (%eax),%eax
    7ca7:	8b 54 24 08          	mov    0x8(%esp),%edx
    7cab:	8b 12                	mov    (%edx),%edx
    7cad:	89 d1                	mov    %edx,%ecx
    7caf:	8b 54 24 0c          	mov    0xc(%esp),%edx
    7cb3:	01 ca                	add    %ecx,%edx
    7cb5:	0f a0                	push   %fs
    7cb7:	8e e0                	mov    %eax,%fs
    7cb9:	64 8a 02             	mov    %fs:(%edx),%al
    7cbc:	0f a1                	pop    %fs
    7cbe:	89 c3                	mov    %eax,%ebx
    7cc0:	89 d8                	mov    %ebx,%eax
    7cc2:	0f be c0             	movsbl %al,%eax
    7cc5:	0f b6 c0             	movzbl %al,%eax
    7cc8:	83 ec 08             	sub    $0x8,%esp
    7ccb:	50                   	push   %eax
    7ccc:	68 d1 32 02 00       	push   $0x232d1
    7cd1:	e8 6b 0f 00 00       	call   8c41 <printk>
    7cd6:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < 10; i++)
    7cd9:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    7cde:	83 7c 24 0c 09       	cmpl   $0x9,0xc(%esp)
    7ce3:	7e b9                	jle    7c9e <die+0x1a3>
	printk("\n\r");
    7ce5:	83 ec 0c             	sub    $0xc,%esp
    7ce8:	68 d7 32 02 00       	push   $0x232d7
    7ced:	e8 4f 0f 00 00       	call   8c41 <printk>
    7cf2:	83 c4 10             	add    $0x10,%esp
	do_exit(11);								/* play segment exception */
    7cf5:	83 ec 0c             	sub    $0xc,%esp
    7cf8:	6a 0b                	push   $0xb
    7cfa:	e8 6b 30 00 00       	call   ad6a <do_exit>
    7cff:	83 c4 10             	add    $0x10,%esp
}
    7d02:	90                   	nop
    7d03:	83 c4 14             	add    $0x14,%esp
    7d06:	5b                   	pop    %ebx
    7d07:	5e                   	pop    %esi
    7d08:	c3                   	ret    

00007d09 <do_double_fault>:

// 以下这些以do_开头的函数是asm.s中对应中断处理程序调用的C函数.
void do_double_fault(long esp, long error_code)
{
    7d09:	83 ec 0c             	sub    $0xc,%esp
	die("double fault", esp, error_code);
    7d0c:	83 ec 04             	sub    $0x4,%esp
    7d0f:	ff 74 24 18          	pushl  0x18(%esp)
    7d13:	ff 74 24 18          	pushl  0x18(%esp)
    7d17:	68 da 32 02 00       	push   $0x232da
    7d1c:	e8 da fd ff ff       	call   7afb <die>
    7d21:	83 c4 10             	add    $0x10,%esp
}
    7d24:	90                   	nop
    7d25:	83 c4 0c             	add    $0xc,%esp
    7d28:	c3                   	ret    

00007d29 <do_general_protection>:

void do_general_protection(long esp, long error_code)
{
    7d29:	83 ec 0c             	sub    $0xc,%esp
	die("general protection", esp, error_code);
    7d2c:	83 ec 04             	sub    $0x4,%esp
    7d2f:	ff 74 24 18          	pushl  0x18(%esp)
    7d33:	ff 74 24 18          	pushl  0x18(%esp)
    7d37:	68 e7 32 02 00       	push   $0x232e7
    7d3c:	e8 ba fd ff ff       	call   7afb <die>
    7d41:	83 c4 10             	add    $0x10,%esp
}
    7d44:	90                   	nop
    7d45:	83 c4 0c             	add    $0xc,%esp
    7d48:	c3                   	ret    

00007d49 <do_alignment_check>:

void do_alignment_check(long esp, long error_code)
{
    7d49:	83 ec 0c             	sub    $0xc,%esp
    die("alignment check", esp, error_code);
    7d4c:	83 ec 04             	sub    $0x4,%esp
    7d4f:	ff 74 24 18          	pushl  0x18(%esp)
    7d53:	ff 74 24 18          	pushl  0x18(%esp)
    7d57:	68 fa 32 02 00       	push   $0x232fa
    7d5c:	e8 9a fd ff ff       	call   7afb <die>
    7d61:	83 c4 10             	add    $0x10,%esp
}
    7d64:	90                   	nop
    7d65:	83 c4 0c             	add    $0xc,%esp
    7d68:	c3                   	ret    

00007d69 <do_divide_error>:

void do_divide_error(long esp, long error_code)
{
    7d69:	83 ec 0c             	sub    $0xc,%esp
	die("divide error", esp, error_code);
    7d6c:	83 ec 04             	sub    $0x4,%esp
    7d6f:	ff 74 24 18          	pushl  0x18(%esp)
    7d73:	ff 74 24 18          	pushl  0x18(%esp)
    7d77:	68 0a 33 02 00       	push   $0x2330a
    7d7c:	e8 7a fd ff ff       	call   7afb <die>
    7d81:	83 c4 10             	add    $0x10,%esp
}
    7d84:	90                   	nop
    7d85:	83 c4 0c             	add    $0xc,%esp
    7d88:	c3                   	ret    

00007d89 <do_int3>:
// 参数是进入中断后被顺序压入堆栈的寄存器值.参见asm.s程序.
void do_int3(long * esp, long error_code,
		long fs, long es, long ds,
		long ebp, long esi, long edi,
		long edx, long ecx, long ebx, long eax)
{
    7d89:	83 ec 1c             	sub    $0x1c,%esp
	int tr;

	__asm__("str %%ax":"=a" (tr):"0" (0));		// 取任务寄存器值->tr
    7d8c:	b8 00 00 00 00       	mov    $0x0,%eax
    7d91:	66 0f 00 c8          	str    %ax
    7d95:	89 44 24 0c          	mov    %eax,0xc(%esp)
	printk("eax\t\tebx\t\tecx\t\tedx\n\r%8x\t%8x\t%8x\t%8x\n\r",
    7d99:	83 ec 0c             	sub    $0xc,%esp
    7d9c:	ff 74 24 4c          	pushl  0x4c(%esp)
    7da0:	ff 74 24 54          	pushl  0x54(%esp)
    7da4:	ff 74 24 5c          	pushl  0x5c(%esp)
    7da8:	ff 74 24 64          	pushl  0x64(%esp)
    7dac:	68 18 33 02 00       	push   $0x23318
    7db1:	e8 8b 0e 00 00       	call   8c41 <printk>
    7db6:	83 c4 20             	add    $0x20,%esp
		eax, ebx, ecx, edx);
	printk("esi\t\tedi\t\tebp\t\tesp\n\r%8x\t%8x\t%8x\t%8x\n\r",
    7db9:	8b 44 24 20          	mov    0x20(%esp),%eax
    7dbd:	83 ec 0c             	sub    $0xc,%esp
    7dc0:	50                   	push   %eax
    7dc1:	ff 74 24 44          	pushl  0x44(%esp)
    7dc5:	ff 74 24 50          	pushl  0x50(%esp)
    7dc9:	ff 74 24 50          	pushl  0x50(%esp)
    7dcd:	68 40 33 02 00       	push   $0x23340
    7dd2:	e8 6a 0e 00 00       	call   8c41 <printk>
    7dd7:	83 c4 20             	add    $0x20,%esp
		esi, edi, ebp, (long) esp);
	printk("\n\rds\tes\tfs\ttr\n\r%4x\t%4x\t%4x\t%4x\n\r",
    7dda:	83 ec 0c             	sub    $0xc,%esp
    7ddd:	ff 74 24 18          	pushl  0x18(%esp)
    7de1:	ff 74 24 38          	pushl  0x38(%esp)
    7de5:	ff 74 24 40          	pushl  0x40(%esp)
    7de9:	ff 74 24 48          	pushl  0x48(%esp)
    7ded:	68 68 33 02 00       	push   $0x23368
    7df2:	e8 4a 0e 00 00       	call   8c41 <printk>
    7df7:	83 c4 20             	add    $0x20,%esp
		ds, es, fs, tr);
	printk("EIP: %8x   CS: %4x  EFLAGS: %8x\n\r", esp[0], esp[1], esp[2]);
    7dfa:	8b 44 24 20          	mov    0x20(%esp),%eax
    7dfe:	83 c0 08             	add    $0x8,%eax
    7e01:	8b 08                	mov    (%eax),%ecx
    7e03:	8b 44 24 20          	mov    0x20(%esp),%eax
    7e07:	83 c0 04             	add    $0x4,%eax
    7e0a:	8b 10                	mov    (%eax),%edx
    7e0c:	8b 44 24 20          	mov    0x20(%esp),%eax
    7e10:	8b 00                	mov    (%eax),%eax
    7e12:	51                   	push   %ecx
    7e13:	52                   	push   %edx
    7e14:	50                   	push   %eax
    7e15:	68 8c 33 02 00       	push   $0x2338c
    7e1a:	e8 22 0e 00 00       	call   8c41 <printk>
    7e1f:	83 c4 10             	add    $0x10,%esp
}
    7e22:	90                   	nop
    7e23:	83 c4 1c             	add    $0x1c,%esp
    7e26:	c3                   	ret    

00007e27 <do_nmi>:

void do_nmi(long esp, long error_code)
{
    7e27:	83 ec 0c             	sub    $0xc,%esp
	die("nmi", esp, error_code);
    7e2a:	83 ec 04             	sub    $0x4,%esp
    7e2d:	ff 74 24 18          	pushl  0x18(%esp)
    7e31:	ff 74 24 18          	pushl  0x18(%esp)
    7e35:	68 ae 33 02 00       	push   $0x233ae
    7e3a:	e8 bc fc ff ff       	call   7afb <die>
    7e3f:	83 c4 10             	add    $0x10,%esp
}
    7e42:	90                   	nop
    7e43:	83 c4 0c             	add    $0xc,%esp
    7e46:	c3                   	ret    

00007e47 <do_debug>:

void do_debug(long esp, long error_code)
{
    7e47:	83 ec 0c             	sub    $0xc,%esp
	die("debug", esp, error_code);
    7e4a:	83 ec 04             	sub    $0x4,%esp
    7e4d:	ff 74 24 18          	pushl  0x18(%esp)
    7e51:	ff 74 24 18          	pushl  0x18(%esp)
    7e55:	68 b2 33 02 00       	push   $0x233b2
    7e5a:	e8 9c fc ff ff       	call   7afb <die>
    7e5f:	83 c4 10             	add    $0x10,%esp
}
    7e62:	90                   	nop
    7e63:	83 c4 0c             	add    $0xc,%esp
    7e66:	c3                   	ret    

00007e67 <do_overflow>:

void do_overflow(long esp, long error_code)
{
    7e67:	83 ec 0c             	sub    $0xc,%esp
	die("overflow", esp, error_code);
    7e6a:	83 ec 04             	sub    $0x4,%esp
    7e6d:	ff 74 24 18          	pushl  0x18(%esp)
    7e71:	ff 74 24 18          	pushl  0x18(%esp)
    7e75:	68 b8 33 02 00       	push   $0x233b8
    7e7a:	e8 7c fc ff ff       	call   7afb <die>
    7e7f:	83 c4 10             	add    $0x10,%esp
}
    7e82:	90                   	nop
    7e83:	83 c4 0c             	add    $0xc,%esp
    7e86:	c3                   	ret    

00007e87 <do_bounds>:

void do_bounds(long esp, long error_code)
{
    7e87:	83 ec 0c             	sub    $0xc,%esp
	die("bounds", esp, error_code);
    7e8a:	83 ec 04             	sub    $0x4,%esp
    7e8d:	ff 74 24 18          	pushl  0x18(%esp)
    7e91:	ff 74 24 18          	pushl  0x18(%esp)
    7e95:	68 c1 33 02 00       	push   $0x233c1
    7e9a:	e8 5c fc ff ff       	call   7afb <die>
    7e9f:	83 c4 10             	add    $0x10,%esp
}
    7ea2:	90                   	nop
    7ea3:	83 c4 0c             	add    $0xc,%esp
    7ea6:	c3                   	ret    

00007ea7 <do_invalid_op>:

void do_invalid_op(long esp, long error_code)
{
    7ea7:	83 ec 0c             	sub    $0xc,%esp
	die("invalid operand", esp, error_code);
    7eaa:	83 ec 04             	sub    $0x4,%esp
    7ead:	ff 74 24 18          	pushl  0x18(%esp)
    7eb1:	ff 74 24 18          	pushl  0x18(%esp)
    7eb5:	68 c8 33 02 00       	push   $0x233c8
    7eba:	e8 3c fc ff ff       	call   7afb <die>
    7ebf:	83 c4 10             	add    $0x10,%esp
}
    7ec2:	90                   	nop
    7ec3:	83 c4 0c             	add    $0xc,%esp
    7ec6:	c3                   	ret    

00007ec7 <do_device_not_available>:

void do_device_not_available(long esp, long error_code)
{
    7ec7:	83 ec 0c             	sub    $0xc,%esp
	die("device not available", esp, error_code);
    7eca:	83 ec 04             	sub    $0x4,%esp
    7ecd:	ff 74 24 18          	pushl  0x18(%esp)
    7ed1:	ff 74 24 18          	pushl  0x18(%esp)
    7ed5:	68 d8 33 02 00       	push   $0x233d8
    7eda:	e8 1c fc ff ff       	call   7afb <die>
    7edf:	83 c4 10             	add    $0x10,%esp
}
    7ee2:	90                   	nop
    7ee3:	83 c4 0c             	add    $0xc,%esp
    7ee6:	c3                   	ret    

00007ee7 <do_coprocessor_segment_overrun>:

void do_coprocessor_segment_overrun(long esp, long error_code)
{
    7ee7:	83 ec 0c             	sub    $0xc,%esp
	die("coprocessor segment overrun", esp, error_code);
    7eea:	83 ec 04             	sub    $0x4,%esp
    7eed:	ff 74 24 18          	pushl  0x18(%esp)
    7ef1:	ff 74 24 18          	pushl  0x18(%esp)
    7ef5:	68 ed 33 02 00       	push   $0x233ed
    7efa:	e8 fc fb ff ff       	call   7afb <die>
    7eff:	83 c4 10             	add    $0x10,%esp
}
    7f02:	90                   	nop
    7f03:	83 c4 0c             	add    $0xc,%esp
    7f06:	c3                   	ret    

00007f07 <do_invalid_TSS>:

void do_invalid_TSS(long esp, long error_code)
{
    7f07:	83 ec 0c             	sub    $0xc,%esp
	die("invalid TSS", esp, error_code);
    7f0a:	83 ec 04             	sub    $0x4,%esp
    7f0d:	ff 74 24 18          	pushl  0x18(%esp)
    7f11:	ff 74 24 18          	pushl  0x18(%esp)
    7f15:	68 09 34 02 00       	push   $0x23409
    7f1a:	e8 dc fb ff ff       	call   7afb <die>
    7f1f:	83 c4 10             	add    $0x10,%esp
}
    7f22:	90                   	nop
    7f23:	83 c4 0c             	add    $0xc,%esp
    7f26:	c3                   	ret    

00007f27 <do_segment_not_present>:

void do_segment_not_present(long esp, long error_code)
{
    7f27:	83 ec 0c             	sub    $0xc,%esp
	die("segment not present", esp, error_code);
    7f2a:	83 ec 04             	sub    $0x4,%esp
    7f2d:	ff 74 24 18          	pushl  0x18(%esp)
    7f31:	ff 74 24 18          	pushl  0x18(%esp)
    7f35:	68 15 34 02 00       	push   $0x23415
    7f3a:	e8 bc fb ff ff       	call   7afb <die>
    7f3f:	83 c4 10             	add    $0x10,%esp
}
    7f42:	90                   	nop
    7f43:	83 c4 0c             	add    $0xc,%esp
    7f46:	c3                   	ret    

00007f47 <do_stack_segment>:

void do_stack_segment(long esp, long error_code)
{
    7f47:	83 ec 0c             	sub    $0xc,%esp
	die("stack segment", esp, error_code);
    7f4a:	83 ec 04             	sub    $0x4,%esp
    7f4d:	ff 74 24 18          	pushl  0x18(%esp)
    7f51:	ff 74 24 18          	pushl  0x18(%esp)
    7f55:	68 29 34 02 00       	push   $0x23429
    7f5a:	e8 9c fb ff ff       	call   7afb <die>
    7f5f:	83 c4 10             	add    $0x10,%esp
}
    7f62:	90                   	nop
    7f63:	83 c4 0c             	add    $0xc,%esp
    7f66:	c3                   	ret    

00007f67 <do_coprocessor_error>:

void do_coprocessor_error(long esp, long error_code)
{
    7f67:	83 ec 0c             	sub    $0xc,%esp
	if (last_task_used_math != current)
    7f6a:	8b 15 0c fb 02 00    	mov    0x2fb0c,%edx
    7f70:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7f75:	39 c2                	cmp    %eax,%edx
    7f77:	75 1a                	jne    7f93 <do_coprocessor_error+0x2c>
		return;
	die("coprocessor error", esp, error_code);
    7f79:	83 ec 04             	sub    $0x4,%esp
    7f7c:	ff 74 24 18          	pushl  0x18(%esp)
    7f80:	ff 74 24 18          	pushl  0x18(%esp)
    7f84:	68 37 34 02 00       	push   $0x23437
    7f89:	e8 6d fb ff ff       	call   7afb <die>
    7f8e:	83 c4 10             	add    $0x10,%esp
    7f91:	eb 01                	jmp    7f94 <do_coprocessor_error+0x2d>
		return;
    7f93:	90                   	nop
}
    7f94:	83 c4 0c             	add    $0xc,%esp
    7f97:	c3                   	ret    

00007f98 <do_reserved>:

void do_reserved(long esp, long error_code)
{
    7f98:	83 ec 0c             	sub    $0xc,%esp
	die("reserved (15,17-47) error", esp, error_code);
    7f9b:	83 ec 04             	sub    $0x4,%esp
    7f9e:	ff 74 24 18          	pushl  0x18(%esp)
    7fa2:	ff 74 24 18          	pushl  0x18(%esp)
    7fa6:	68 49 34 02 00       	push   $0x23449
    7fab:	e8 4b fb ff ff       	call   7afb <die>
    7fb0:	83 c4 10             	add    $0x10,%esp
}
    7fb3:	90                   	nop
    7fb4:	83 c4 0c             	add    $0xc,%esp
    7fb7:	c3                   	ret    

00007fb8 <trap_init>:
// 下面是异常(陷阱)中断程序初始化子程序.设置它们的中断调用门(中断向量).
// set_trap_gate()与set_system_gate()都使用了中断描述符表IDT中的陷阱门(Trap Gate),它们之间的主要区别在于前者设置的特权级为0,
// 后者是3.因此断点陷阱中断int3,溢出中断overflow和边界出错中断bounds可以由任何程序调用.这两个函数均是嵌入式汇编宏程序,参见
// include/asm/system.h
void trap_init(void)
{
    7fb8:	53                   	push   %ebx
    7fb9:	83 ec 10             	sub    $0x10,%esp
	int i;

	set_trap_gate(0, &divide_error);							// 设置除操作出错的中断向量值.
    7fbc:	b9 b8 54 00 00       	mov    $0x54b8,%ecx
    7fc1:	bb bc 54 00 00       	mov    $0x54bc,%ebx
    7fc6:	ba bf 82 00 00       	mov    $0x82bf,%edx
    7fcb:	b8 00 00 08 00       	mov    $0x80000,%eax
    7fd0:	66 89 d0             	mov    %dx,%ax
    7fd3:	66 ba 00 8f          	mov    $0x8f00,%dx
    7fd7:	89 01                	mov    %eax,(%ecx)
    7fd9:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(1, &debug);
    7fdb:	b9 c0 54 00 00       	mov    $0x54c0,%ecx
    7fe0:	bb c4 54 00 00       	mov    $0x54c4,%ebx
    7fe5:	ba f4 82 00 00       	mov    $0x82f4,%edx
    7fea:	b8 00 00 08 00       	mov    $0x80000,%eax
    7fef:	66 89 d0             	mov    %dx,%ax
    7ff2:	66 ba 00 8f          	mov    $0x8f00,%dx
    7ff6:	89 01                	mov    %eax,(%ecx)
    7ff8:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(2, &nmi);
    7ffa:	b9 c8 54 00 00       	mov    $0x54c8,%ecx
    7fff:	bb cc 54 00 00       	mov    $0x54cc,%ebx
    8004:	ba fb 82 00 00       	mov    $0x82fb,%edx
    8009:	b8 00 00 08 00       	mov    $0x80000,%eax
    800e:	66 89 d0             	mov    %dx,%ax
    8011:	66 ba 00 8f          	mov    $0x8f00,%dx
    8015:	89 01                	mov    %eax,(%ecx)
    8017:	89 13                	mov    %edx,(%ebx)
	set_system_gate(3, &int3);									/* int3-5 can be called from all */
    8019:	b9 d0 54 00 00       	mov    $0x54d0,%ecx
    801e:	bb d4 54 00 00       	mov    $0x54d4,%ebx
    8023:	ba 02 83 00 00       	mov    $0x8302,%edx
    8028:	b8 00 00 08 00       	mov    $0x80000,%eax
    802d:	66 89 d0             	mov    %dx,%ax
    8030:	66 ba 00 ef          	mov    $0xef00,%dx
    8034:	89 01                	mov    %eax,(%ecx)
    8036:	89 13                	mov    %edx,(%ebx)
	set_system_gate(4, &overflow);
    8038:	b9 d8 54 00 00       	mov    $0x54d8,%ecx
    803d:	bb dc 54 00 00       	mov    $0x54dc,%ebx
    8042:	ba 09 83 00 00       	mov    $0x8309,%edx
    8047:	b8 00 00 08 00       	mov    $0x80000,%eax
    804c:	66 89 d0             	mov    %dx,%ax
    804f:	66 ba 00 ef          	mov    $0xef00,%dx
    8053:	89 01                	mov    %eax,(%ecx)
    8055:	89 13                	mov    %edx,(%ebx)
	set_system_gate(5, &bounds);
    8057:	b9 e0 54 00 00       	mov    $0x54e0,%ecx
    805c:	bb e4 54 00 00       	mov    $0x54e4,%ebx
    8061:	ba 10 83 00 00       	mov    $0x8310,%edx
    8066:	b8 00 00 08 00       	mov    $0x80000,%eax
    806b:	66 89 d0             	mov    %dx,%ax
    806e:	66 ba 00 ef          	mov    $0xef00,%dx
    8072:	89 01                	mov    %eax,(%ecx)
    8074:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(6, &invalid_op);
    8076:	b9 e8 54 00 00       	mov    $0x54e8,%ecx
    807b:	bb ec 54 00 00       	mov    $0x54ec,%ebx
    8080:	ba 17 83 00 00       	mov    $0x8317,%edx
    8085:	b8 00 00 08 00       	mov    $0x80000,%eax
    808a:	66 89 d0             	mov    %dx,%ax
    808d:	66 ba 00 8f          	mov    $0x8f00,%dx
    8091:	89 01                	mov    %eax,(%ecx)
    8093:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(7, &device_not_available);					// 函数未实现
    8095:	b9 f0 54 00 00       	mov    $0x54f0,%ecx
    809a:	bb f4 54 00 00       	mov    $0x54f4,%ebx
    809f:	ba d8 79 00 00       	mov    $0x79d8,%edx
    80a4:	b8 00 00 08 00       	mov    $0x80000,%eax
    80a9:	66 89 d0             	mov    %dx,%ax
    80ac:	66 ba 00 8f          	mov    $0x8f00,%dx
    80b0:	89 01                	mov    %eax,(%ecx)
    80b2:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(8, &double_fault);
    80b4:	b9 f8 54 00 00       	mov    $0x54f8,%ecx
    80b9:	bb fc 54 00 00       	mov    $0x54fc,%ebx
    80be:	ba 41 83 00 00       	mov    $0x8341,%edx
    80c3:	b8 00 00 08 00       	mov    $0x80000,%eax
    80c8:	66 89 d0             	mov    %dx,%ax
    80cb:	66 ba 00 8f          	mov    $0x8f00,%dx
    80cf:	89 01                	mov    %eax,(%ecx)
    80d1:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(9, &coprocessor_segment_overrun);
    80d3:	b9 00 55 00 00       	mov    $0x5500,%ecx
    80d8:	bb 04 55 00 00       	mov    $0x5504,%ebx
    80dd:	ba 1e 83 00 00       	mov    $0x831e,%edx
    80e2:	b8 00 00 08 00       	mov    $0x80000,%eax
    80e7:	66 89 d0             	mov    %dx,%ax
    80ea:	66 ba 00 8f          	mov    $0x8f00,%dx
    80ee:	89 01                	mov    %eax,(%ecx)
    80f0:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(10, &invalid_TSS);
    80f2:	b9 08 55 00 00       	mov    $0x5508,%ecx
    80f7:	bb 0c 55 00 00       	mov    $0x550c,%ebx
    80fc:	ba 78 83 00 00       	mov    $0x8378,%edx
    8101:	b8 00 00 08 00       	mov    $0x80000,%eax
    8106:	66 89 d0             	mov    %dx,%ax
    8109:	66 ba 00 8f          	mov    $0x8f00,%dx
    810d:	89 01                	mov    %eax,(%ecx)
    810f:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(11, &segment_not_present);
    8111:	b9 10 55 00 00       	mov    $0x5510,%ecx
    8116:	bb 14 55 00 00       	mov    $0x5514,%ebx
    811b:	ba 7f 83 00 00       	mov    $0x837f,%edx
    8120:	b8 00 00 08 00       	mov    $0x80000,%eax
    8125:	66 89 d0             	mov    %dx,%ax
    8128:	66 ba 00 8f          	mov    $0x8f00,%dx
    812c:	89 01                	mov    %eax,(%ecx)
    812e:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(12, &stack_segment);
    8130:	b9 18 55 00 00       	mov    $0x5518,%ecx
    8135:	bb 1c 55 00 00       	mov    $0x551c,%ebx
    813a:	ba 86 83 00 00       	mov    $0x8386,%edx
    813f:	b8 00 00 08 00       	mov    $0x80000,%eax
    8144:	66 89 d0             	mov    %dx,%ax
    8147:	66 ba 00 8f          	mov    $0x8f00,%dx
    814b:	89 01                	mov    %eax,(%ecx)
    814d:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(13, &general_protection);
    814f:	b9 20 55 00 00       	mov    $0x5520,%ecx
    8154:	bb 24 55 00 00       	mov    $0x5524,%ebx
    8159:	ba 8d 83 00 00       	mov    $0x838d,%edx
    815e:	b8 00 00 08 00       	mov    $0x80000,%eax
    8163:	66 89 d0             	mov    %dx,%ax
    8166:	66 ba 00 8f          	mov    $0x8f00,%dx
    816a:	89 01                	mov    %eax,(%ecx)
    816c:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(14, &page_fault);
    816e:	b9 28 55 00 00       	mov    $0x5528,%ecx
    8173:	bb 2c 55 00 00       	mov    $0x552c,%ebx
    8178:	ba a3 d2 00 00       	mov    $0xd2a3,%edx
    817d:	b8 00 00 08 00       	mov    $0x80000,%eax
    8182:	66 89 d0             	mov    %dx,%ax
    8185:	66 ba 00 8f          	mov    $0x8f00,%dx
    8189:	89 01                	mov    %eax,(%ecx)
    818b:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(15, &reserved);
    818d:	b9 30 55 00 00       	mov    $0x5530,%ecx
    8192:	bb 34 55 00 00       	mov    $0x5534,%ebx
    8197:	ba 25 83 00 00       	mov    $0x8325,%edx
    819c:	b8 00 00 08 00       	mov    $0x80000,%eax
    81a1:	66 89 d0             	mov    %dx,%ax
    81a4:	66 ba 00 8f          	mov    $0x8f00,%dx
    81a8:	89 01                	mov    %eax,(%ecx)
    81aa:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(16, &coprocessor_error);						// 函数未实现
    81ac:	b9 38 55 00 00       	mov    $0x5538,%ecx
    81b1:	bb 3c 55 00 00       	mov    $0x553c,%ebx
    81b6:	ba b4 79 00 00       	mov    $0x79b4,%edx
    81bb:	b8 00 00 08 00       	mov    $0x80000,%eax
    81c0:	66 89 d0             	mov    %dx,%ax
    81c3:	66 ba 00 8f          	mov    $0x8f00,%dx
    81c7:	89 01                	mov    %eax,(%ecx)
    81c9:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(17, &alignment_check);
    81cb:	b9 40 55 00 00       	mov    $0x5540,%ecx
    81d0:	bb 44 55 00 00       	mov    $0x5544,%ebx
    81d5:	ba 94 83 00 00       	mov    $0x8394,%edx
    81da:	b8 00 00 08 00       	mov    $0x80000,%eax
    81df:	66 89 d0             	mov    %dx,%ax
    81e2:	66 ba 00 8f          	mov    $0x8f00,%dx
    81e6:	89 01                	mov    %eax,(%ecx)
    81e8:	89 13                	mov    %edx,(%ebx)
	// 下面把int17-47的陷阱门先均设置为reserved,以后各硬件初始化时会重新设置自己的陷阱门.
	for (i = 18; i < 48; i++)
    81ea:	c7 44 24 0c 12 00 00 	movl   $0x12,0xc(%esp)
    81f1:	00 
    81f2:	eb 36                	jmp    822a <trap_init+0x272>
		set_trap_gate(i, &reserved);
    81f4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    81f8:	c1 e0 03             	shl    $0x3,%eax
    81fb:	8d 88 b8 54 00 00    	lea    0x54b8(%eax),%ecx
    8201:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8205:	c1 e0 03             	shl    $0x3,%eax
    8208:	05 b8 54 00 00       	add    $0x54b8,%eax
    820d:	8d 58 04             	lea    0x4(%eax),%ebx
    8210:	ba 25 83 00 00       	mov    $0x8325,%edx
    8215:	b8 00 00 08 00       	mov    $0x80000,%eax
    821a:	66 89 d0             	mov    %dx,%ax
    821d:	66 ba 00 8f          	mov    $0x8f00,%dx
    8221:	89 01                	mov    %eax,(%ecx)
    8223:	89 13                	mov    %edx,(%ebx)
	for (i = 18; i < 48; i++)
    8225:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    822a:	83 7c 24 0c 2f       	cmpl   $0x2f,0xc(%esp)
    822f:	7e c3                	jle    81f4 <trap_init+0x23c>
	// 设置协处理器中断0x2d(45)陷阱门描述符,并允许其产生中断请求.设置并行口中断描述符.
	set_trap_gate(45, &irq13);
    8231:	b9 20 56 00 00       	mov    $0x5620,%ecx
    8236:	bb 24 56 00 00       	mov    $0x5624,%ebx
    823b:	ba 2c 83 00 00       	mov    $0x832c,%edx
    8240:	b8 00 00 08 00       	mov    $0x80000,%eax
    8245:	66 89 d0             	mov    %dx,%ax
    8248:	66 ba 00 8f          	mov    $0x8f00,%dx
    824c:	89 01                	mov    %eax,(%ecx)
    824e:	89 13                	mov    %edx,(%ebx)
	outb_p(inb_p(0x21)&0xfb, 0x21);								// 允许8259A主芯片的IRQ2中断请求(连接从芯片)
    8250:	b8 21 00 00 00       	mov    $0x21,%eax
    8255:	89 c2                	mov    %eax,%edx
    8257:	ec                   	in     (%dx),%al
    8258:	eb 00                	jmp    825a <trap_init+0x2a2>
    825a:	eb 00                	jmp    825c <trap_init+0x2a4>
    825c:	88 44 24 0b          	mov    %al,0xb(%esp)
    8260:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
    8265:	0f b6 c0             	movzbl %al,%eax
    8268:	25 fb 00 00 00       	and    $0xfb,%eax
    826d:	ba 21 00 00 00       	mov    $0x21,%edx
    8272:	ee                   	out    %al,(%dx)
    8273:	eb 00                	jmp    8275 <trap_init+0x2bd>
    8275:	eb 00                	jmp    8277 <trap_init+0x2bf>
	outb(inb_p(0xA1)&0xdf, 0xA1);								// 允许8259A从芯片的IRQ13中断请求(协处理器中断)
    8277:	b8 a1 00 00 00       	mov    $0xa1,%eax
    827c:	89 c2                	mov    %eax,%edx
    827e:	ec                   	in     (%dx),%al
    827f:	eb 00                	jmp    8281 <trap_init+0x2c9>
    8281:	eb 00                	jmp    8283 <trap_init+0x2cb>
    8283:	88 44 24 0a          	mov    %al,0xa(%esp)
    8287:	0f b6 44 24 0a       	movzbl 0xa(%esp),%eax
    828c:	0f b6 c0             	movzbl %al,%eax
    828f:	25 df 00 00 00       	and    $0xdf,%eax
    8294:	ba a1 00 00 00       	mov    $0xa1,%edx
    8299:	ee                   	out    %al,(%dx)
	set_trap_gate(39, &parallel_interrupt);						// 设置并行口1的中断0x27陷阱门描述符.
    829a:	b9 f0 55 00 00       	mov    $0x55f0,%ecx
    829f:	bb f4 55 00 00       	mov    $0x55f4,%ebx
    82a4:	ba f4 7a 00 00       	mov    $0x7af4,%edx
    82a9:	b8 00 00 08 00       	mov    $0x80000,%eax
    82ae:	66 89 d0             	mov    %dx,%ax
    82b1:	66 ba 00 8f          	mov    $0x8f00,%dx
    82b5:	89 01                	mov    %eax,(%ecx)
    82b7:	89 13                	mov    %edx,(%ebx)
}
    82b9:	90                   	nop
    82ba:	83 c4 10             	add    $0x10,%esp
    82bd:	5b                   	pop    %ebx
    82be:	c3                   	ret    

000082bf <divide_error>:
    82bf:	68 69 7d 00 00       	push   $0x7d69

000082c4 <no_error_code>:
    82c4:	87 04 24             	xchg   %eax,(%esp)
    82c7:	53                   	push   %ebx
    82c8:	51                   	push   %ecx
    82c9:	52                   	push   %edx
    82ca:	57                   	push   %edi
    82cb:	56                   	push   %esi
    82cc:	55                   	push   %ebp
    82cd:	1e                   	push   %ds
    82ce:	06                   	push   %es
    82cf:	0f a0                	push   %fs
    82d1:	6a 00                	push   $0x0
    82d3:	8d 54 24 2c          	lea    0x2c(%esp),%edx
    82d7:	52                   	push   %edx
    82d8:	ba 10 00 00 00       	mov    $0x10,%edx
    82dd:	8e da                	mov    %edx,%ds
    82df:	8e c2                	mov    %edx,%es
    82e1:	8e e2                	mov    %edx,%fs
    82e3:	ff d0                	call   *%eax
    82e5:	83 c4 08             	add    $0x8,%esp
    82e8:	0f a1                	pop    %fs
    82ea:	07                   	pop    %es
    82eb:	1f                   	pop    %ds
    82ec:	5d                   	pop    %ebp
    82ed:	5e                   	pop    %esi
    82ee:	5f                   	pop    %edi
    82ef:	5a                   	pop    %edx
    82f0:	59                   	pop    %ecx
    82f1:	5b                   	pop    %ebx
    82f2:	58                   	pop    %eax
    82f3:	cf                   	iret   

000082f4 <debug>:
    82f4:	68 89 7d 00 00       	push   $0x7d89
    82f9:	eb c9                	jmp    82c4 <no_error_code>

000082fb <nmi>:
    82fb:	68 27 7e 00 00       	push   $0x7e27
    8300:	eb c2                	jmp    82c4 <no_error_code>

00008302 <int3>:
    8302:	68 89 7d 00 00       	push   $0x7d89
    8307:	eb bb                	jmp    82c4 <no_error_code>

00008309 <overflow>:
    8309:	68 67 7e 00 00       	push   $0x7e67
    830e:	eb b4                	jmp    82c4 <no_error_code>

00008310 <bounds>:
    8310:	68 87 7e 00 00       	push   $0x7e87
    8315:	eb ad                	jmp    82c4 <no_error_code>

00008317 <invalid_op>:
    8317:	68 a7 7e 00 00       	push   $0x7ea7
    831c:	eb a6                	jmp    82c4 <no_error_code>

0000831e <coprocessor_segment_overrun>:
    831e:	68 e7 7e 00 00       	push   $0x7ee7
    8323:	eb 9f                	jmp    82c4 <no_error_code>

00008325 <reserved>:
    8325:	68 98 7f 00 00       	push   $0x7f98
    832a:	eb 98                	jmp    82c4 <no_error_code>

0000832c <irq13>:
    832c:	50                   	push   %eax
    832d:	30 c0                	xor    %al,%al
    832f:	e6 f0                	out    %al,$0xf0
    8331:	b0 20                	mov    $0x20,%al
    8333:	e6 20                	out    %al,$0x20
    8335:	eb 00                	jmp    8337 <irq13+0xb>
    8337:	eb 00                	jmp    8339 <irq13+0xd>
    8339:	e6 a0                	out    %al,$0xa0
    833b:	58                   	pop    %eax
    833c:	e9 73 f6 ff ff       	jmp    79b4 <coprocessor_error>

00008341 <double_fault>:
    8341:	68 09 7d 00 00       	push   $0x7d09

00008346 <error_code>:
    8346:	87 44 24 04          	xchg   %eax,0x4(%esp)
    834a:	87 1c 24             	xchg   %ebx,(%esp)
    834d:	51                   	push   %ecx
    834e:	52                   	push   %edx
    834f:	57                   	push   %edi
    8350:	56                   	push   %esi
    8351:	55                   	push   %ebp
    8352:	1e                   	push   %ds
    8353:	06                   	push   %es
    8354:	0f a0                	push   %fs
    8356:	50                   	push   %eax
    8357:	8d 44 24 2c          	lea    0x2c(%esp),%eax
    835b:	50                   	push   %eax
    835c:	b8 10 00 00 00       	mov    $0x10,%eax
    8361:	8e d8                	mov    %eax,%ds
    8363:	8e c0                	mov    %eax,%es
    8365:	8e e0                	mov    %eax,%fs
    8367:	ff d3                	call   *%ebx
    8369:	83 c4 08             	add    $0x8,%esp
    836c:	0f a1                	pop    %fs
    836e:	07                   	pop    %es
    836f:	1f                   	pop    %ds
    8370:	5d                   	pop    %ebp
    8371:	5e                   	pop    %esi
    8372:	5f                   	pop    %edi
    8373:	5a                   	pop    %edx
    8374:	59                   	pop    %ecx
    8375:	5b                   	pop    %ebx
    8376:	58                   	pop    %eax
    8377:	cf                   	iret   

00008378 <invalid_TSS>:
    8378:	68 07 7f 00 00       	push   $0x7f07
    837d:	eb c7                	jmp    8346 <error_code>

0000837f <segment_not_present>:
    837f:	68 27 7f 00 00       	push   $0x7f27
    8384:	eb c0                	jmp    8346 <error_code>

00008386 <stack_segment>:
    8386:	68 47 7f 00 00       	push   $0x7f47
    838b:	eb b9                	jmp    8346 <error_code>

0000838d <general_protection>:
    838d:	68 29 7d 00 00       	push   $0x7d29
    8392:	eb b2                	jmp    8346 <error_code>

00008394 <alignment_check>:
    8394:	68 49 7d 00 00       	push   $0x7d49
    8399:	eb ab                	jmp    8346 <error_code>

0000839b <verify_area>:
// 可以通过设置该标志来达到使用本函数同样的目的.该函数对当前进程逻辑地址从addr到addr + size这一段范围以页为单位执行写操作前
// 的检测操作.由于检测判断是以页面为单位进行操作,因此程序首先需要找出addr所在页面开始地址start,然后start加上进程数据段基址,
// 使这个start变换成CPU 4GB线性空间中的地址.最后循环调用write_verify()对指定大小的内存空间进行写前验证.若页面是只读的,
// 则执行共享检验和复制页面操作(写时复制).
void verify_area(void * addr, int size)
{
    839b:	53                   	push   %ebx
    839c:	83 ec 18             	sub    $0x18,%esp
	unsigned long start;

	// 首先将起始地址start调整为其所在页的左边界开始位置,同时相应地调整验证区域大小.下句中的start & 0xfff用来获得指定起始位置addr
	// (也即start)在所在页面中的偏移值,原验证范围size加上这个偏移值即扩展成以addr所在页面起始位置开始的范围值.因此在30行上也需要
	// 把验证开始位置start调整成页面边界值.
	start = (unsigned long) addr;
    839f:	8b 44 24 20          	mov    0x20(%esp),%eax
    83a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	size += start & 0xfff;
    83a7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    83ab:	25 ff 0f 00 00       	and    $0xfff,%eax
    83b0:	89 c2                	mov    %eax,%edx
    83b2:	8b 44 24 24          	mov    0x24(%esp),%eax
    83b6:	01 d0                	add    %edx,%eax
    83b8:	89 44 24 24          	mov    %eax,0x24(%esp)
	start &= 0xfffff000;					// 此时start是当前进程空间中的逻辑地址.
    83bc:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    83c3:	ff 
	// 下面把start加上进程数据段在线性地址空间中的起始基址,变成系统整个线性空间中的地址位置.对于Linux0.1x内核,其数据段和代码段在
	// 线性地址空间中的基址和限长均相同.然后循环进行写页面验证.若页面不可写,则复制页面.(mm/memory.c)
	start += get_base(current->ldt[2]);
    83c4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    83c9:	05 a8 03 00 00       	add    $0x3a8,%eax
    83ce:	83 c0 02             	add    $0x2,%eax
    83d1:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    83d7:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
    83dd:	8d 5a 04             	lea    0x4(%edx),%ebx
    83e0:	8b 0d a0 f1 02 00    	mov    0x2f1a0,%ecx
    83e6:	81 c1 a8 03 00 00    	add    $0x3a8,%ecx
    83ec:	83 c1 07             	add    $0x7,%ecx
    83ef:	8a 31                	mov    (%ecx),%dh
    83f1:	8a 13                	mov    (%ebx),%dl
    83f3:	c1 e2 10             	shl    $0x10,%edx
    83f6:	66 8b 10             	mov    (%eax),%dx
    83f9:	89 d0                	mov    %edx,%eax
    83fb:	89 44 24 08          	mov    %eax,0x8(%esp)
    83ff:	8b 44 24 08          	mov    0x8(%esp),%eax
    8403:	01 44 24 0c          	add    %eax,0xc(%esp)
	while (size > 0) {
    8407:	eb 1f                	jmp    8428 <verify_area+0x8d>
		size -= 4096;
    8409:	81 6c 24 24 00 10 00 	subl   $0x1000,0x24(%esp)
    8410:	00 
		write_verify(start);				// include/linux/sched.h
    8411:	83 ec 0c             	sub    $0xc,%esp
    8414:	ff 74 24 18          	pushl  0x18(%esp)
    8418:	e8 08 3f 00 00       	call   c325 <write_verify>
    841d:	83 c4 10             	add    $0x10,%esp
		start += 4096;
    8420:	81 44 24 0c 00 10 00 	addl   $0x1000,0xc(%esp)
    8427:	00 
	while (size > 0) {
    8428:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    842d:	7f da                	jg     8409 <verify_area+0x6e>
	}
}
    842f:	90                   	nop
    8430:	83 c4 18             	add    $0x18,%esp
    8433:	5b                   	pop    %ebx
    8434:	c3                   	ret    

00008435 <copy_mem>:
// 复制内存页表.
// 参数nr是新任务号;p是新任务数据结构指针.该函数为新任务在线性地址空间中设置代码段和数据段基址,限长,并复制页表.由于Linux系统采用写时
// 复制(copy on write)技术,因此这里仅为新进程设置自己的页目录表项和页表项,而没有实际为新进程分配物理内存页面.此时新进程与其父进程
// 共享所有内存页面.操作成功返回0,否则返回出错号.
int copy_mem(int nr, struct task_struct * p)
{
    8435:	56                   	push   %esi
    8436:	53                   	push   %ebx
    8437:	83 ec 34             	sub    $0x34,%esp

	// 首先取当前进程局部描述符表中代码段描述符和数据段描述符项中的段限长(字节数).
	// 0x0f是代码段选择符;0x17是数据段选择符.然后取当前进程代码段和数据段的线性地址空间中的基地址.由于Linux0.12内核还不支持代码和数据段分立的情况,
	// 因此这里需要检查代码段和数据段基址是否都相同,并且要求数据段的长度至少不小于代码段的长度,否则内核显示出错信息,并停止运行.
	// get_limit()和get_base()定义在include/linux/sched.h.
	code_limit = get_limit(0x0f);
    843a:	b8 0f 00 00 00       	mov    $0xf,%eax
    843f:	0f 03 c0             	lsl    %ax,%eax
    8442:	40                   	inc    %eax
    8443:	89 44 24 2c          	mov    %eax,0x2c(%esp)
    8447:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    844b:	89 44 24 28          	mov    %eax,0x28(%esp)
	data_limit = get_limit(0x17);
    844f:	b8 17 00 00 00       	mov    $0x17,%eax
    8454:	0f 03 c0             	lsl    %ax,%eax
    8457:	40                   	inc    %eax
    8458:	89 44 24 24          	mov    %eax,0x24(%esp)
    845c:	8b 44 24 24          	mov    0x24(%esp),%eax
    8460:	89 44 24 20          	mov    %eax,0x20(%esp)
	old_code_base = get_base(current->ldt[1]);
    8464:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8469:	05 a0 03 00 00       	add    $0x3a0,%eax
    846e:	83 c0 02             	add    $0x2,%eax
    8471:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    8477:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
    847d:	8d 5a 04             	lea    0x4(%edx),%ebx
    8480:	8b 0d a0 f1 02 00    	mov    0x2f1a0,%ecx
    8486:	81 c1 a0 03 00 00    	add    $0x3a0,%ecx
    848c:	83 c1 07             	add    $0x7,%ecx
    848f:	8a 31                	mov    (%ecx),%dh
    8491:	8a 13                	mov    (%ebx),%dl
    8493:	c1 e2 10             	shl    $0x10,%edx
    8496:	66 8b 10             	mov    (%eax),%dx
    8499:	89 d0                	mov    %edx,%eax
    849b:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    849f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    84a3:	89 44 24 18          	mov    %eax,0x18(%esp)
	old_data_base = get_base(current->ldt[2]);
    84a7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    84ac:	05 a8 03 00 00       	add    $0x3a8,%eax
    84b1:	83 c0 02             	add    $0x2,%eax
    84b4:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    84ba:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
    84c0:	8d 72 04             	lea    0x4(%edx),%esi
    84c3:	8b 0d a0 f1 02 00    	mov    0x2f1a0,%ecx
    84c9:	81 c1 a8 03 00 00    	add    $0x3a8,%ecx
    84cf:	83 c1 07             	add    $0x7,%ecx
    84d2:	8a 31                	mov    (%ecx),%dh
    84d4:	8a 16                	mov    (%esi),%dl
    84d6:	c1 e2 10             	shl    $0x10,%edx
    84d9:	66 8b 10             	mov    (%eax),%dx
    84dc:	89 d0                	mov    %edx,%eax
    84de:	89 44 24 14          	mov    %eax,0x14(%esp)
    84e2:	8b 44 24 14          	mov    0x14(%esp),%eax
    84e6:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (old_data_base != old_code_base)
    84ea:	8b 44 24 10          	mov    0x10(%esp),%eax
    84ee:	3b 44 24 18          	cmp    0x18(%esp),%eax
    84f2:	74 10                	je     8504 <copy_mem+0xcf>
		panic("We don't support separate I&D");
    84f4:	83 ec 0c             	sub    $0xc,%esp
    84f7:	68 64 34 02 00       	push   $0x23464
    84fc:	e8 01 07 00 00       	call   8c02 <panic>
    8501:	83 c4 10             	add    $0x10,%esp
	if (data_limit < code_limit)
    8504:	8b 44 24 20          	mov    0x20(%esp),%eax
    8508:	3b 44 24 28          	cmp    0x28(%esp),%eax
    850c:	73 10                	jae    851e <copy_mem+0xe9>
		panic("Bad data_limit");
    850e:	83 ec 0c             	sub    $0xc,%esp
    8511:	68 82 34 02 00       	push   $0x23482
    8516:	e8 e7 06 00 00       	call   8c02 <panic>
    851b:	83 c4 10             	add    $0x10,%esp
	// 然后设置创建中的新进程在线性地址空间中的基地址等于(64MB*其任务号),并用该值设置新进程局部描述符表中段描述符中的基地址.接着设置新进程的页目录
	// 表项和页表项,即复制当前进程(父进程)的页目录表项和页表项.此时子进程共享父进程的内存页面.
	// 正常情况下copy_page_tables()返回0,否则表示出错,则释放刚申请的页表项.
	new_data_base = new_code_base = nr * TASK_SIZE;
    851e:	8b 44 24 40          	mov    0x40(%esp),%eax
    8522:	c1 e0 1a             	shl    $0x1a,%eax
    8525:	89 44 24 0c          	mov    %eax,0xc(%esp)
    8529:	8b 44 24 0c          	mov    0xc(%esp),%eax
    852d:	89 44 24 08          	mov    %eax,0x8(%esp)
	p->start_code = new_code_base;
    8531:	8b 44 24 44          	mov    0x44(%esp),%eax
    8535:	8b 54 24 0c          	mov    0xc(%esp),%edx
    8539:	89 90 18 02 00 00    	mov    %edx,0x218(%eax)
	set_base(p->ldt[1], new_code_base);
    853f:	8b 44 24 44          	mov    0x44(%esp),%eax
    8543:	05 a0 03 00 00       	add    $0x3a0,%eax
    8548:	8d 48 02             	lea    0x2(%eax),%ecx
    854b:	8b 44 24 44          	mov    0x44(%esp),%eax
    854f:	05 a0 03 00 00       	add    $0x3a0,%eax
    8554:	8d 58 04             	lea    0x4(%eax),%ebx
    8557:	8b 44 24 44          	mov    0x44(%esp),%eax
    855b:	05 a0 03 00 00       	add    $0x3a0,%eax
    8560:	8d 70 07             	lea    0x7(%eax),%esi
    8563:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8567:	89 c2                	mov    %eax,%edx
    8569:	66 89 11             	mov    %dx,(%ecx)
    856c:	c1 ca 10             	ror    $0x10,%edx
    856f:	88 13                	mov    %dl,(%ebx)
    8571:	88 36                	mov    %dh,(%esi)
    8573:	89 d0                	mov    %edx,%eax
    8575:	89 44 24 04          	mov    %eax,0x4(%esp)
	set_base(p->ldt[2], new_data_base);
    8579:	8b 44 24 44          	mov    0x44(%esp),%eax
    857d:	05 a8 03 00 00       	add    $0x3a8,%eax
    8582:	8d 48 02             	lea    0x2(%eax),%ecx
    8585:	8b 44 24 44          	mov    0x44(%esp),%eax
    8589:	05 a8 03 00 00       	add    $0x3a8,%eax
    858e:	8d 58 04             	lea    0x4(%eax),%ebx
    8591:	8b 44 24 44          	mov    0x44(%esp),%eax
    8595:	05 a8 03 00 00       	add    $0x3a8,%eax
    859a:	8d 70 07             	lea    0x7(%eax),%esi
    859d:	8b 44 24 08          	mov    0x8(%esp),%eax
    85a1:	89 c2                	mov    %eax,%edx
    85a3:	66 89 11             	mov    %dx,(%ecx)
    85a6:	c1 ca 10             	ror    $0x10,%edx
    85a9:	88 13                	mov    %dl,(%ebx)
    85ab:	88 36                	mov    %dh,(%esi)
    85ad:	89 d0                	mov    %edx,%eax
    85af:	89 04 24             	mov    %eax,(%esp)
	if (copy_page_tables(old_data_base, new_data_base, data_limit)) {
    85b2:	8b 44 24 20          	mov    0x20(%esp),%eax
    85b6:	83 ec 04             	sub    $0x4,%esp
    85b9:	50                   	push   %eax
    85ba:	ff 74 24 10          	pushl  0x10(%esp)
    85be:	ff 74 24 1c          	pushl  0x1c(%esp)
    85c2:	e8 5a 38 00 00       	call   be21 <copy_page_tables>
    85c7:	83 c4 10             	add    $0x10,%esp
    85ca:	85 c0                	test   %eax,%eax
    85cc:	74 1a                	je     85e8 <copy_mem+0x1b3>
		free_page_tables(new_data_base, data_limit);
    85ce:	83 ec 08             	sub    $0x8,%esp
    85d1:	ff 74 24 28          	pushl  0x28(%esp)
    85d5:	ff 74 24 14          	pushl  0x14(%esp)
    85d9:	e8 0e 37 00 00       	call   bcec <free_page_tables>
    85de:	83 c4 10             	add    $0x10,%esp
		return -ENOMEM;
    85e1:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
    85e6:	eb 05                	jmp    85ed <copy_mem+0x1b8>
	}
	return 0;
    85e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
    85ed:	83 c4 34             	add    $0x34,%esp
    85f0:	5b                   	pop    %ebx
    85f1:	5e                   	pop    %esi
    85f2:	c3                   	ret    

000085f3 <copy_process>:
// 其中参数nr是调用find_empty_process()分配的任务数组项号.
int copy_process(int nr, long ebp, long edi, long esi, long gs, long none,
		long ebx, long ecx, long edx, long orig_eax,
		long fs, long es, long ds,
		long eip, long cs, long eflags, long esp, long ss)
{
    85f3:	55                   	push   %ebp
    85f4:	57                   	push   %edi
    85f5:	56                   	push   %esi
    85f6:	53                   	push   %ebx
    85f7:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	struct file *f;

	// 首先为新任务数据结构分配内存.如果内存分配出错,则返回出错码并退出.然后将新任务结构指针放入任务数组的nr项中.其中nr为任务号,由前面
	// find_empty_process()返回.接着把当前进程任务结构复制到刚申请到的内存页面p开始处.
	p = (struct task_struct *) get_free_page();
    85fa:	e8 02 4a 00 00       	call   d001 <get_free_page>
    85ff:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!p)
    8603:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    8608:	75 0a                	jne    8614 <copy_process+0x21>
		return -EAGAIN;
    860a:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    860f:	e9 34 05 00 00       	jmp    8b48 <copy_process+0x555>
	task[nr] = p;
    8614:	8b 44 24 30          	mov    0x30(%esp),%eax
    8618:	8b 54 24 08          	mov    0x8(%esp),%edx
    861c:	89 14 85 c0 f1 02 00 	mov    %edx,0x2f1c0(,%eax,4)
	*p = *current;							/* NOTE! this doesn't copy the supervisor stack */	/* 注意!这样不会复制超级用户堆栈(只复制进程结构) */
    8623:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8628:	8b 54 24 08          	mov    0x8(%esp),%edx
    862c:	89 c3                	mov    %eax,%ebx
    862e:	b8 21 01 00 00       	mov    $0x121,%eax
    8633:	89 d7                	mov    %edx,%edi
    8635:	89 de                	mov    %ebx,%esi
    8637:	89 c1                	mov    %eax,%ecx
    8639:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	//	memcpy(p, current, sizeof(struct task_struct));
	// 随后对复制来的进程结构内容进行一些修改,作为新进程的任务结构.先将新进程的状态置为不可中断等待状态,以防止内核调试其执行.然后设置新进程
	// 的进程号pid,并初始化进程运行时间片值等于其priorty值(一般为16个嘀嗒).接着复位新进程的信号位图,报警定时值,会话(session)领导标志
	// leader,进程及其子进程在内核和用户态运行时间统计值,还设置进程开始运行的系统时间start_time.
	p->state = TASK_UNINTERRUPTIBLE;
    863b:	8b 44 24 08          	mov    0x8(%esp),%eax
    863f:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	p->pid = last_pid;						// 新进程号.也由find_empty_process()得到.
    8645:	8b 15 48 fe 02 00    	mov    0x2fe48,%edx
    864b:	8b 44 24 08          	mov    0x8(%esp),%eax
    864f:	89 90 2c 02 00 00    	mov    %edx,0x22c(%eax)
	p->counter = p->priority;				// 运行时间片值(嘀嗒数).
    8655:	8b 44 24 08          	mov    0x8(%esp),%eax
    8659:	8b 50 08             	mov    0x8(%eax),%edx
    865c:	8b 44 24 08          	mov    0x8(%esp),%eax
    8660:	89 50 04             	mov    %edx,0x4(%eax)
	p->signal = 0;							// 信号位图.
    8663:	8b 44 24 08          	mov    0x8(%esp),%eax
    8667:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	p->alarm = 0;							// 报警定时值(嘀嗒数).
    866e:	8b 44 24 08          	mov    0x8(%esp),%eax
    8672:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%eax)
    8679:	00 00 00 
	p->leader = 0;							/* process leadership doesn't inherit */	/* 进程的领导权是不能继承的 */
    867c:	8b 44 24 08          	mov    0x8(%esp),%eax
    8680:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
    8687:	00 00 00 
	p->utime = p->stime = 0;				// 用户态时间和核心态运行时间.
    868a:	8b 44 24 08          	mov    0x8(%esp),%eax
    868e:	c7 80 e4 02 00 00 00 	movl   $0x0,0x2e4(%eax)
    8695:	00 00 00 
    8698:	8b 44 24 08          	mov    0x8(%esp),%eax
    869c:	8b 90 e4 02 00 00    	mov    0x2e4(%eax),%edx
    86a2:	8b 44 24 08          	mov    0x8(%esp),%eax
    86a6:	89 90 e0 02 00 00    	mov    %edx,0x2e0(%eax)
	p->cutime = p->cstime = 0;				// 子进程用户态和核心态运行时间.
    86ac:	8b 44 24 08          	mov    0x8(%esp),%eax
    86b0:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%eax)
    86b7:	00 00 00 
    86ba:	8b 44 24 08          	mov    0x8(%esp),%eax
    86be:	8b 90 ec 02 00 00    	mov    0x2ec(%eax),%edx
    86c4:	8b 44 24 08          	mov    0x8(%esp),%eax
    86c8:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%eax)
	p->start_time = jiffies;				// 进程开始运行时间(当前时间滴答数).
    86ce:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    86d3:	89 c2                	mov    %eax,%edx
    86d5:	8b 44 24 08          	mov    0x8(%esp),%eax
    86d9:	89 90 f0 02 00 00    	mov    %edx,0x2f0(%eax)
	// 再修改任务状态段TSS数据.由于系统给任务结构p分配了1页新内存,所以(PAGE_SIZE + (long) p)让esp0正好指向该页顶端.ss0:esp0用作程序在内核
	// 态执行时的栈.另外,在第3章中我们已经知道,每个任务在GDT表中都有两个段描述符,一个是任务的TSS段描述符,另一个是任务的LDT表段描述符.下面语句就是
	// 把GDT中本任务LDT段描述符的选择符保存在本任务的TSS段.当CPU执行切换任务时,会自动从TSS中把LDT段描述符的选择符加载到ldtr寄存器中.
	p->tss.back_link = 0;
    86df:	8b 44 24 08          	mov    0x8(%esp),%eax
    86e3:	c7 80 b0 03 00 00 00 	movl   $0x0,0x3b0(%eax)
    86ea:	00 00 00 
	p->tss.esp0 = PAGE_SIZE + (long) p;		// 任务内核态栈指针.
    86ed:	8b 44 24 08          	mov    0x8(%esp),%eax
    86f1:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
    86f7:	8b 44 24 08          	mov    0x8(%esp),%eax
    86fb:	89 90 b4 03 00 00    	mov    %edx,0x3b4(%eax)
	p->tss.ss0 = 0x10;              		// 内核态栈的段选择符(与内核数据段相同).
    8701:	8b 44 24 08          	mov    0x8(%esp),%eax
    8705:	c7 80 b8 03 00 00 10 	movl   $0x10,0x3b8(%eax)
    870c:	00 00 00 
	p->tss.eip = eip;						// 指令代码指针.
    870f:	8b 44 24 08          	mov    0x8(%esp),%eax
    8713:	8b 54 24 64          	mov    0x64(%esp),%edx
    8717:	89 90 d0 03 00 00    	mov    %edx,0x3d0(%eax)
	p->tss.eflags = eflags;					// 标志寄存器.
    871d:	8b 44 24 08          	mov    0x8(%esp),%eax
    8721:	8b 54 24 6c          	mov    0x6c(%esp),%edx
    8725:	89 90 d4 03 00 00    	mov    %edx,0x3d4(%eax)
	p->tss.eax = 0;							// 这是当fork()返回时新进程会返回0的原因所在.
    872b:	8b 44 24 08          	mov    0x8(%esp),%eax
    872f:	c7 80 d8 03 00 00 00 	movl   $0x0,0x3d8(%eax)
    8736:	00 00 00 
	p->tss.ecx = ecx;
    8739:	8b 44 24 08          	mov    0x8(%esp),%eax
    873d:	8b 54 24 4c          	mov    0x4c(%esp),%edx
    8741:	89 90 dc 03 00 00    	mov    %edx,0x3dc(%eax)
	p->tss.edx = edx;
    8747:	8b 44 24 08          	mov    0x8(%esp),%eax
    874b:	8b 54 24 50          	mov    0x50(%esp),%edx
    874f:	89 90 e0 03 00 00    	mov    %edx,0x3e0(%eax)
	p->tss.ebx = ebx;
    8755:	8b 44 24 08          	mov    0x8(%esp),%eax
    8759:	8b 54 24 48          	mov    0x48(%esp),%edx
    875d:	89 90 e4 03 00 00    	mov    %edx,0x3e4(%eax)
	p->tss.esp = esp;
    8763:	8b 44 24 08          	mov    0x8(%esp),%eax
    8767:	8b 54 24 70          	mov    0x70(%esp),%edx
    876b:	89 90 e8 03 00 00    	mov    %edx,0x3e8(%eax)
	p->tss.ebp = ebp;
    8771:	8b 44 24 08          	mov    0x8(%esp),%eax
    8775:	8b 54 24 34          	mov    0x34(%esp),%edx
    8779:	89 90 ec 03 00 00    	mov    %edx,0x3ec(%eax)
	p->tss.esi = esi;
    877f:	8b 44 24 08          	mov    0x8(%esp),%eax
    8783:	8b 54 24 3c          	mov    0x3c(%esp),%edx
    8787:	89 90 f0 03 00 00    	mov    %edx,0x3f0(%eax)
	p->tss.edi = edi;
    878d:	8b 44 24 08          	mov    0x8(%esp),%eax
    8791:	8b 54 24 38          	mov    0x38(%esp),%edx
    8795:	89 90 f4 03 00 00    	mov    %edx,0x3f4(%eax)
	p->tss.es = es & 0xffff;				// 段寄存器仅16位有效.
    879b:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    879f:	0f b7 d0             	movzwl %ax,%edx
    87a2:	8b 44 24 08          	mov    0x8(%esp),%eax
    87a6:	89 90 f8 03 00 00    	mov    %edx,0x3f8(%eax)
	p->tss.cs = cs & 0xffff;
    87ac:	8b 44 24 68          	mov    0x68(%esp),%eax
    87b0:	0f b7 d0             	movzwl %ax,%edx
    87b3:	8b 44 24 08          	mov    0x8(%esp),%eax
    87b7:	89 90 fc 03 00 00    	mov    %edx,0x3fc(%eax)
	p->tss.ss = ss & 0xffff;
    87bd:	8b 44 24 74          	mov    0x74(%esp),%eax
    87c1:	0f b7 d0             	movzwl %ax,%edx
    87c4:	8b 44 24 08          	mov    0x8(%esp),%eax
    87c8:	89 90 00 04 00 00    	mov    %edx,0x400(%eax)
	p->tss.ds = ds & 0xffff;
    87ce:	8b 44 24 60          	mov    0x60(%esp),%eax
    87d2:	0f b7 d0             	movzwl %ax,%edx
    87d5:	8b 44 24 08          	mov    0x8(%esp),%eax
    87d9:	89 90 04 04 00 00    	mov    %edx,0x404(%eax)
	p->tss.fs = fs & 0xffff;
    87df:	8b 44 24 58          	mov    0x58(%esp),%eax
    87e3:	0f b7 d0             	movzwl %ax,%edx
    87e6:	8b 44 24 08          	mov    0x8(%esp),%eax
    87ea:	89 90 08 04 00 00    	mov    %edx,0x408(%eax)
	p->tss.gs = gs & 0xffff;
    87f0:	8b 44 24 40          	mov    0x40(%esp),%eax
    87f4:	0f b7 d0             	movzwl %ax,%edx
    87f7:	8b 44 24 08          	mov    0x8(%esp),%eax
    87fb:	89 90 0c 04 00 00    	mov    %edx,0x40c(%eax)
	p->tss.ldt = _LDT(nr);					// 任务局部表描述符的选择符(LDT描述符在GET中).
    8801:	8b 44 24 30          	mov    0x30(%esp),%eax
    8805:	c1 e0 04             	shl    $0x4,%eax
    8808:	83 c0 28             	add    $0x28,%eax
    880b:	89 c2                	mov    %eax,%edx
    880d:	8b 44 24 08          	mov    0x8(%esp),%eax
    8811:	89 90 10 04 00 00    	mov    %edx,0x410(%eax)
	p->tss.trace_bitmap = 0x80000000;		// (高16位有效).
    8817:	8b 44 24 08          	mov    0x8(%esp),%eax
    881b:	c7 80 14 04 00 00 00 	movl   $0x80000000,0x414(%eax)
    8822:	00 00 80 
	// 如果当前任务使用了协处理器,就保存其上下文.汇编指令clts用于清除控制寄存器CR0中的任务已交换(TS)标志.每当发生任务切换,CPU都会设置该标志.该标志用于管理
	// 数学协处理器:如果该标志置位,那么每个ESC指令都会被捕获(异常7).如果协处理器存在标志MP也同时置位的话,那么WAIT指令也会捕获.因此,如果任务切换发生在一个
	// ESC指令开始执行之后,则协处理器中的内容就可能需要在执行新的ESC指令之前保存起来.捕获处理句柄会保存协处理器的内容并复位TS标志.指令fnsave用于把协处理器的
	// 所有状态保存到目的操作数指定的内存区域中(tss.i387).
	if (last_task_used_math == current)
    8825:	8b 15 0c fb 02 00    	mov    0x2fb0c,%edx
    882b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8830:	39 c2                	cmp    %eax,%edx
    8832:	75 12                	jne    8846 <copy_process+0x253>
		__asm__("clts ; fnsave %0 ; frstor %0"::"m" (p->tss.i387));
    8834:	8b 44 24 08          	mov    0x8(%esp),%eax
    8838:	0f 06                	clts   
    883a:	dd b0 18 04 00 00    	fnsave 0x418(%eax)
    8840:	dd a0 18 04 00 00    	frstor 0x418(%eax)
	// 接下来复制进程页表.即在线性地址空间设置新任务代码段和数据段描述符中的基址和限长,并复制页表.如果出错(返回值不是0),则复位任务数组中相应项并
	// 释放为该新任务分配的用于任务结构的内存页.
	if (copy_mem(nr, p)) {					// 返回不为0示出错.
    8846:	83 ec 08             	sub    $0x8,%esp
    8849:	ff 74 24 10          	pushl  0x10(%esp)
    884d:	ff 74 24 3c          	pushl  0x3c(%esp)
    8851:	e8 df fb ff ff       	call   8435 <copy_mem>
    8856:	83 c4 10             	add    $0x10,%esp
    8859:	85 c0                	test   %eax,%eax
    885b:	74 29                	je     8886 <copy_process+0x293>
		task[nr] = NULL;
    885d:	8b 44 24 30          	mov    0x30(%esp),%eax
    8861:	c7 04 85 c0 f1 02 00 	movl   $0x0,0x2f1c0(,%eax,4)
    8868:	00 00 00 00 
		free_page((long) p);
    886c:	8b 44 24 08          	mov    0x8(%esp),%eax
    8870:	83 ec 0c             	sub    $0xc,%esp
    8873:	50                   	push   %eax
    8874:	e8 f9 33 00 00       	call   bc72 <free_page>
    8879:	83 c4 10             	add    $0x10,%esp
		return -EAGAIN;
    887c:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    8881:	e9 c2 02 00 00       	jmp    8b48 <copy_process+0x555>
	}
	// 如果父进程中有文件是打开的,则将对应文件的打开次数增1.因为这里创建的子进程会与父进程共享这些打开的文件.将当前进程(父进程)的pwd,root和
	// executable引用次数均增1.与上面同样的道理,子进程也引用了这些i节点.
	for (i = 0; i < NR_OPEN; i++)
    8886:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    888d:	00 
    888e:	eb 35                	jmp    88c5 <copy_process+0x2d2>
		if (f = p->filp[i])
    8890:	8b 44 24 08          	mov    0x8(%esp),%eax
    8894:	8b 54 24 0c          	mov    0xc(%esp),%edx
    8898:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    889e:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    88a2:	89 44 24 04          	mov    %eax,0x4(%esp)
    88a6:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    88ab:	74 13                	je     88c0 <copy_process+0x2cd>
			f->f_count++;
    88ad:	8b 44 24 04          	mov    0x4(%esp),%eax
    88b1:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    88b5:	8d 50 01             	lea    0x1(%eax),%edx
    88b8:	8b 44 24 04          	mov    0x4(%esp),%eax
    88bc:	66 89 50 04          	mov    %dx,0x4(%eax)
	for (i = 0; i < NR_OPEN; i++)
    88c0:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    88c5:	83 7c 24 0c 13       	cmpl   $0x13,0xc(%esp)
    88ca:	7e c4                	jle    8890 <copy_process+0x29d>
	if (current->pwd)
    88cc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    88d1:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    88d7:	85 c0                	test   %eax,%eax
    88d9:	74 16                	je     88f1 <copy_process+0x2fe>
		current->pwd->i_count++;
    88db:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    88e0:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    88e6:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    88ea:	83 c2 01             	add    $0x1,%edx
    88ed:	66 89 50 34          	mov    %dx,0x34(%eax)
	if (current->root)
    88f1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    88f6:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    88fc:	85 c0                	test   %eax,%eax
    88fe:	74 16                	je     8916 <copy_process+0x323>
		current->root->i_count++;
    8900:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8905:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    890b:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    890f:	83 c2 01             	add    $0x1,%edx
    8912:	66 89 50 34          	mov    %dx,0x34(%eax)
	if (current->executable)
    8916:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    891b:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    8921:	85 c0                	test   %eax,%eax
    8923:	74 16                	je     893b <copy_process+0x348>
		current->executable->i_count++;
    8925:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    892a:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    8930:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    8934:	83 c2 01             	add    $0x1,%edx
    8937:	66 89 50 34          	mov    %dx,0x34(%eax)
	if (current->library)
    893b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8940:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    8946:	85 c0                	test   %eax,%eax
    8948:	74 16                	je     8960 <copy_process+0x36d>
		current->library->i_count++;
    894a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    894f:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    8955:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    8959:	83 c2 01             	add    $0x1,%edx
    895c:	66 89 50 34          	mov    %dx,0x34(%eax)
	// 设置等于父进程的最新子进程指针.若当前进程确实还有其他子进程,则让比邻老兄进程的最年轻进程指针p_yspter指向新进程.最后把当前进程的最新子进程指针指向这个新进程.
	// 然后把新进程设置成就绪态.最后返回新进程号.
	// 另外,set_tss_desc()和set_ldt_desc()定义在include/asm/system.h文件中."gdt+(nr<<1)+FIRST_TSS_ENTRY"是任务nr的TSS描述符项在全局表中的地址.
	// 因为每个任务占用GDT表中2项,因此上式中要包括'(nr<<1)'.
	// 请注意,在任务切换时,任务寄存器tr会由CPU自动加载.
	set_tss_desc(gdt + (nr << 1) + FIRST_TSS_ENTRY, &(p->tss));
    8960:	8b 44 24 08          	mov    0x8(%esp),%eax
    8964:	05 b0 03 00 00       	add    $0x3b0,%eax
    8969:	8b 54 24 30          	mov    0x30(%esp),%edx
    896d:	01 d2                	add    %edx,%edx
    896f:	83 c2 04             	add    $0x4,%edx
    8972:	c1 e2 03             	shl    $0x3,%edx
    8975:	81 c2 b8 5c 00 00    	add    $0x5cb8,%edx
    897b:	8b 4c 24 30          	mov    0x30(%esp),%ecx
    897f:	01 c9                	add    %ecx,%ecx
    8981:	83 c1 04             	add    $0x4,%ecx
    8984:	c1 e1 03             	shl    $0x3,%ecx
    8987:	83 c1 02             	add    $0x2,%ecx
    898a:	81 c1 b8 5c 00 00    	add    $0x5cb8,%ecx
    8990:	8b 5c 24 30          	mov    0x30(%esp),%ebx
    8994:	01 db                	add    %ebx,%ebx
    8996:	83 c3 04             	add    $0x4,%ebx
    8999:	c1 e3 03             	shl    $0x3,%ebx
    899c:	83 c3 04             	add    $0x4,%ebx
    899f:	81 c3 b8 5c 00 00    	add    $0x5cb8,%ebx
    89a5:	8b 74 24 30          	mov    0x30(%esp),%esi
    89a9:	01 f6                	add    %esi,%esi
    89ab:	83 c6 04             	add    $0x4,%esi
    89ae:	c1 e6 03             	shl    $0x3,%esi
    89b1:	83 c6 05             	add    $0x5,%esi
    89b4:	81 c6 b8 5c 00 00    	add    $0x5cb8,%esi
    89ba:	8b 7c 24 30          	mov    0x30(%esp),%edi
    89be:	01 ff                	add    %edi,%edi
    89c0:	83 c7 04             	add    $0x4,%edi
    89c3:	c1 e7 03             	shl    $0x3,%edi
    89c6:	83 c7 06             	add    $0x6,%edi
    89c9:	81 c7 b8 5c 00 00    	add    $0x5cb8,%edi
    89cf:	8b 6c 24 30          	mov    0x30(%esp),%ebp
    89d3:	01 ed                	add    %ebp,%ebp
    89d5:	83 c5 04             	add    $0x4,%ebp
    89d8:	c1 e5 03             	shl    $0x3,%ebp
    89db:	83 c5 07             	add    $0x7,%ebp
    89de:	81 c5 b8 5c 00 00    	add    $0x5cb8,%ebp
    89e4:	66 c7 02 68 00       	movw   $0x68,(%edx)
    89e9:	66 89 01             	mov    %ax,(%ecx)
    89ec:	c1 c8 10             	ror    $0x10,%eax
    89ef:	88 03                	mov    %al,(%ebx)
    89f1:	c6 06 89             	movb   $0x89,(%esi)
    89f4:	c6 07 00             	movb   $0x0,(%edi)
    89f7:	88 65 00             	mov    %ah,0x0(%ebp)
    89fa:	c1 c8 10             	ror    $0x10,%eax
	set_ldt_desc(gdt + (nr << 1) + FIRST_LDT_ENTRY, &(p->ldt));
    89fd:	8b 44 24 08          	mov    0x8(%esp),%eax
    8a01:	05 98 03 00 00       	add    $0x398,%eax
    8a06:	8b 54 24 30          	mov    0x30(%esp),%edx
    8a0a:	01 d2                	add    %edx,%edx
    8a0c:	83 c2 05             	add    $0x5,%edx
    8a0f:	c1 e2 03             	shl    $0x3,%edx
    8a12:	81 c2 b8 5c 00 00    	add    $0x5cb8,%edx
    8a18:	8b 4c 24 30          	mov    0x30(%esp),%ecx
    8a1c:	01 c9                	add    %ecx,%ecx
    8a1e:	83 c1 05             	add    $0x5,%ecx
    8a21:	c1 e1 03             	shl    $0x3,%ecx
    8a24:	83 c1 02             	add    $0x2,%ecx
    8a27:	81 c1 b8 5c 00 00    	add    $0x5cb8,%ecx
    8a2d:	8b 5c 24 30          	mov    0x30(%esp),%ebx
    8a31:	01 db                	add    %ebx,%ebx
    8a33:	83 c3 05             	add    $0x5,%ebx
    8a36:	c1 e3 03             	shl    $0x3,%ebx
    8a39:	83 c3 04             	add    $0x4,%ebx
    8a3c:	81 c3 b8 5c 00 00    	add    $0x5cb8,%ebx
    8a42:	8b 74 24 30          	mov    0x30(%esp),%esi
    8a46:	01 f6                	add    %esi,%esi
    8a48:	83 c6 05             	add    $0x5,%esi
    8a4b:	c1 e6 03             	shl    $0x3,%esi
    8a4e:	83 c6 05             	add    $0x5,%esi
    8a51:	81 c6 b8 5c 00 00    	add    $0x5cb8,%esi
    8a57:	8b 7c 24 30          	mov    0x30(%esp),%edi
    8a5b:	01 ff                	add    %edi,%edi
    8a5d:	83 c7 05             	add    $0x5,%edi
    8a60:	c1 e7 03             	shl    $0x3,%edi
    8a63:	83 c7 06             	add    $0x6,%edi
    8a66:	81 c7 b8 5c 00 00    	add    $0x5cb8,%edi
    8a6c:	8b 6c 24 30          	mov    0x30(%esp),%ebp
    8a70:	01 ed                	add    %ebp,%ebp
    8a72:	83 c5 05             	add    $0x5,%ebp
    8a75:	c1 e5 03             	shl    $0x3,%ebp
    8a78:	83 c5 07             	add    $0x7,%ebp
    8a7b:	81 c5 b8 5c 00 00    	add    $0x5cb8,%ebp
    8a81:	66 c7 02 68 00       	movw   $0x68,(%edx)
    8a86:	66 89 01             	mov    %ax,(%ecx)
    8a89:	c1 c8 10             	ror    $0x10,%eax
    8a8c:	88 03                	mov    %al,(%ebx)
    8a8e:	c6 06 82             	movb   $0x82,(%esi)
    8a91:	c6 07 00             	movb   $0x0,(%edi)
    8a94:	88 65 00             	mov    %ah,0x0(%ebp)
    8a97:	c1 c8 10             	ror    $0x10,%eax
	p->p_pptr = current;				// 设置新进程的父进程指针.
    8a9a:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    8aa0:	8b 44 24 08          	mov    0x8(%esp),%eax
    8aa4:	89 90 bc 02 00 00    	mov    %edx,0x2bc(%eax)
	p->p_cptr = 0;						// 复位新进程的最新子进程指针.
    8aaa:	8b 44 24 08          	mov    0x8(%esp),%eax
    8aae:	c7 80 c0 02 00 00 00 	movl   $0x0,0x2c0(%eax)
    8ab5:	00 00 00 
	p->p_ysptr = 0;						// 复位新进程的比邻年轻兄弟进程指针.
    8ab8:	8b 44 24 08          	mov    0x8(%esp),%eax
    8abc:	c7 80 c4 02 00 00 00 	movl   $0x0,0x2c4(%eax)
    8ac3:	00 00 00 
	p->p_osptr = current->p_cptr;		// 设置新进程的比邻老兄兄弟进程指针.
    8ac6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8acb:	8b 90 c0 02 00 00    	mov    0x2c0(%eax),%edx
    8ad1:	8b 44 24 08          	mov    0x8(%esp),%eax
    8ad5:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%eax)
	if (p->p_osptr)						// 若新进程有老兄兄弟进程,则让其年轻进程兄弟指针指向新进程
    8adb:	8b 44 24 08          	mov    0x8(%esp),%eax
    8adf:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    8ae5:	85 c0                	test   %eax,%eax
    8ae7:	74 14                	je     8afd <copy_process+0x50a>
		p->p_osptr->p_ysptr = p;
    8ae9:	8b 44 24 08          	mov    0x8(%esp),%eax
    8aed:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    8af3:	8b 54 24 08          	mov    0x8(%esp),%edx
    8af7:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
	current->p_cptr = p;				// 让当前进程最新子进程指针指向新进程.
    8afd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8b02:	8b 54 24 08          	mov    0x8(%esp),%edx
    8b06:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
	p->state = TASK_RUNNING;			/* do this last, just in case */        /* 设置进程状态为待运行状态栏 */
    8b0c:	8b 44 24 08          	mov    0x8(%esp),%eax
    8b10:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	Log(LOG_INFO_TYPE, "<<<<< fork new process current_pid = %d, child_pid = %d, nr = %d >>>>>\n", current->pid, p->pid, nr);
    8b16:	8b 44 24 08          	mov    0x8(%esp),%eax
    8b1a:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    8b20:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8b25:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    8b2b:	83 ec 0c             	sub    $0xc,%esp
    8b2e:	ff 74 24 3c          	pushl  0x3c(%esp)
    8b32:	52                   	push   %edx
    8b33:	50                   	push   %eax
    8b34:	68 94 34 02 00       	push   $0x23494
    8b39:	6a 00                	push   $0x0
    8b3b:	e8 a8 9d 01 00       	call   228e8 <Log>
    8b40:	83 c4 20             	add    $0x20,%esp
	return last_pid;        			// 返回新进程号
    8b43:	a1 48 fe 02 00       	mov    0x2fe48,%eax
}
    8b48:	83 c4 1c             	add    $0x1c,%esp
    8b4b:	5b                   	pop    %ebx
    8b4c:	5e                   	pop    %esi
    8b4d:	5f                   	pop    %edi
    8b4e:	5d                   	pop    %ebp
    8b4f:	c3                   	ret    

00008b50 <find_empty_process>:

// 为新进程取得不重复的进程号last_pid.函数返回在任务数组中的任务号(数组项).
int find_empty_process(void)
{
    8b50:	83 ec 10             	sub    $0x10,%esp

	// 首先获取新的进程号.如果last_pid增1后超出进程号的正数表示范围,则重新从1开始使用pid号.然后在任务数组中搜索刚设置的pid号是
	// 否已经被任何任务使用.如果是则跳转到函数开始处理重新获得一个pid号.接着在任务数组中为新任务寻找一个空闲项,并返回项号.last_pid是一
	// 个全局变量,不用返回.如果此时任务数组中64个项已经被全部占用,则返回出错码.
	repeat:
		if ((++last_pid) < 0) last_pid = 1;
    8b53:	a1 48 fe 02 00       	mov    0x2fe48,%eax
    8b58:	83 c0 01             	add    $0x1,%eax
    8b5b:	a3 48 fe 02 00       	mov    %eax,0x2fe48
    8b60:	a1 48 fe 02 00       	mov    0x2fe48,%eax
    8b65:	85 c0                	test   %eax,%eax
    8b67:	79 0a                	jns    8b73 <find_empty_process+0x23>
    8b69:	c7 05 48 fe 02 00 01 	movl   $0x1,0x2fe48
    8b70:	00 00 00 
		for(i = 0 ; i < NR_TASKS ; i++)
    8b73:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    8b7a:	00 
    8b7b:	eb 4a                	jmp    8bc7 <find_empty_process+0x77>
			if (task[i] && ((task[i]->pid == last_pid) ||
    8b7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8b81:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    8b88:	85 c0                	test   %eax,%eax
    8b8a:	74 36                	je     8bc2 <find_empty_process+0x72>
    8b8c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8b90:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    8b97:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    8b9d:	a1 48 fe 02 00       	mov    0x2fe48,%eax
    8ba2:	39 c2                	cmp    %eax,%edx
    8ba4:	74 ad                	je     8b53 <find_empty_process+0x3>
				        (task[i]->pgrp == last_pid)))
    8ba6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8baa:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    8bb1:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    8bb7:	a1 48 fe 02 00       	mov    0x2fe48,%eax
			if (task[i] && ((task[i]->pid == last_pid) ||
    8bbc:	39 c2                	cmp    %eax,%edx
    8bbe:	75 02                	jne    8bc2 <find_empty_process+0x72>
				goto repeat;
    8bc0:	eb 91                	jmp    8b53 <find_empty_process+0x3>
		for(i = 0 ; i < NR_TASKS ; i++)
    8bc2:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    8bc7:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    8bcc:	7e af                	jle    8b7d <find_empty_process+0x2d>
	for(i = 1 ; i < NR_TASKS ; i++)
    8bce:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    8bd5:	00 
    8bd6:	eb 1a                	jmp    8bf2 <find_empty_process+0xa2>
		if (!task[i])
    8bd8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8bdc:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    8be3:	85 c0                	test   %eax,%eax
    8be5:	75 06                	jne    8bed <find_empty_process+0x9d>
			return i;
    8be7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8beb:	eb 11                	jmp    8bfe <find_empty_process+0xae>
	for(i = 1 ; i < NR_TASKS ; i++)
    8bed:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    8bf2:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    8bf7:	7e df                	jle    8bd8 <find_empty_process+0x88>
	return -EAGAIN;
    8bf9:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
}
    8bfe:	83 c4 10             	add    $0x10,%esp
    8c01:	c3                   	ret    

00008c02 <panic>:
// 如果当前进程是任务0的话,还说明是交换任务出错,并且还没有运行文件系统同步函数.
// 函数名前的关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好一些的代码,更重要的是使用这个关键字
// 以避免产生某些(未初始化变量的)假警告信息.
// 等同于现在gcc的函数属性说明:void panic(const char *s) __attribute__((noreturn));
void panic(const char * s)
{
    8c02:	83 ec 0c             	sub    $0xc,%esp
	printk("Kernel panic: %s\n\r", s);
    8c05:	83 ec 08             	sub    $0x8,%esp
    8c08:	ff 74 24 18          	pushl  0x18(%esp)
    8c0c:	68 dc 34 02 00       	push   $0x234dc
    8c11:	e8 2b 00 00 00       	call   8c41 <printk>
    8c16:	83 c4 10             	add    $0x10,%esp
	if (current == task[0])
    8c19:	8b 15 c0 f1 02 00    	mov    0x2f1c0,%edx
    8c1f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8c24:	39 c2                	cmp    %eax,%edx
    8c26:	75 12                	jne    8c3a <panic+0x38>
		printk("In swapper task - not syncing\n\r");
    8c28:	83 ec 0c             	sub    $0xc,%esp
    8c2b:	68 f0 34 02 00       	push   $0x234f0
    8c30:	e8 0c 00 00 00       	call   8c41 <printk>
    8c35:	83 c4 10             	add    $0x10,%esp
    8c38:	eb 05                	jmp    8c3f <panic+0x3d>
	else
		sys_sync();
    8c3a:	e8 7b 62 00 00       	call   eeba <sys_sync>
	for(;;);
    8c3f:	eb fe                	jmp    8c3f <panic+0x3d>

00008c41 <printk>:
// 函数vsprintf()定义在linux/kernel/vsprintf.c中
extern int vsprintf(char * buf, const char * fmt, va_list args);

// 内核使用的显示函数.
int printk(const char *fmt, ...)
{
    8c41:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;							// va_list实际上是一个字符指针类型.
	int i;

	// 运行参数处理开始函数.然后使用格式串fmt将参数列表args输出到buf中.返回值i等于输出字符串的长度.再运行参数处理结束函数.最后调用控制台显示
	// 函数并返回显示字符数.
	va_start(args, fmt);
    8c44:	8d 44 24 24          	lea    0x24(%esp),%eax
    8c48:	89 44 24 0c          	mov    %eax,0xc(%esp)
	i = vsprintf(buf, fmt, args);
    8c4c:	8b 44 24 20          	mov    0x20(%esp),%eax
    8c50:	83 ec 04             	sub    $0x4,%esp
    8c53:	ff 74 24 10          	pushl  0x10(%esp)
    8c57:	50                   	push   %eax
    8c58:	68 60 fe 02 00       	push   $0x2fe60
    8c5d:	e8 0f 03 00 00       	call   8f71 <vsprintf>
    8c62:	83 c4 10             	add    $0x10,%esp
    8c65:	89 44 24 08          	mov    %eax,0x8(%esp)
	va_end(args);
	console_print(buf);						// chr_drv/console.c
    8c69:	83 ec 0c             	sub    $0xc,%esp
    8c6c:	68 60 fe 02 00       	push   $0x2fe60
    8c71:	e8 f2 47 01 00       	call   1d468 <console_print>
    8c76:	83 c4 10             	add    $0x10,%esp
	return i;
    8c79:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    8c7d:	83 c4 1c             	add    $0x1c,%esp
    8c80:	c3                   	ret    

00008c81 <strlen>:
// 计算字符串长度.
// 参数:s - 字符串
// %0 - ecx(__res),%1 - edi(字符串指针s),%2 - eax(0),%3 - ecx(0xffffffff).
// 返回:返回字符串长度.
static inline int strlen(const char * s)
{
    8c81:	57                   	push   %edi
register int __res __asm__("cx");       					// __res是寄存器变量(ecx).
__asm__(
    8c82:	8b 54 24 08          	mov    0x8(%esp),%edx
    8c86:	b8 00 00 00 00       	mov    $0x0,%eax
    8c8b:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    8c90:	89 d7                	mov    %edx,%edi
    8c92:	fc                   	cld    
    8c93:	f2 ae                	repnz scas %es:(%edi),%al
    8c95:	f7 d1                	not    %ecx
    8c97:	49                   	dec    %ecx
	"repne\n\t"												// al(0)与字符串中字符es:[edi比较,
	"scasb\n\t"												// 若不相等就一直比较.
	"notl %0\n\t"											// ecx取反.
	"decl %0"												// ecx--,得字符串的长度值.
	:"=c" (__res):"D" (s), "a" (0), "0" (0xffffffff));
return __res;												// 返回字符串长度值.
    8c98:	89 c8                	mov    %ecx,%eax
}
    8c9a:	5f                   	pop    %edi
    8c9b:	c3                   	ret    

00008c9c <skip_atoi>:
/* 我们使用下面的定义,这样我们就可以不使用ctype库了 */
#define is_digit(c)	((c) >= '0' && (c) <= '9')	// 判断字符c是否为数字字符.

// 该函数将字符数字串转换成整数.输入是数字串指针的指针,返回是结果数值.另外指针将前移.
static int skip_atoi(const char **s)
{
    8c9c:	53                   	push   %ebx
    8c9d:	83 ec 10             	sub    $0x10,%esp
	int i = 0;
    8ca0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    8ca7:	00 

	while (is_digit(**s))
    8ca8:	eb 2d                	jmp    8cd7 <skip_atoi+0x3b>
		i = i*10 + *((*s)++) - '0';
    8caa:	8b 54 24 0c          	mov    0xc(%esp),%edx
    8cae:	89 d0                	mov    %edx,%eax
    8cb0:	c1 e0 02             	shl    $0x2,%eax
    8cb3:	01 d0                	add    %edx,%eax
    8cb5:	01 c0                	add    %eax,%eax
    8cb7:	89 c3                	mov    %eax,%ebx
    8cb9:	8b 44 24 18          	mov    0x18(%esp),%eax
    8cbd:	8b 00                	mov    (%eax),%eax
    8cbf:	8d 48 01             	lea    0x1(%eax),%ecx
    8cc2:	8b 54 24 18          	mov    0x18(%esp),%edx
    8cc6:	89 0a                	mov    %ecx,(%edx)
    8cc8:	0f b6 00             	movzbl (%eax),%eax
    8ccb:	0f be c0             	movsbl %al,%eax
    8cce:	01 d8                	add    %ebx,%eax
    8cd0:	83 e8 30             	sub    $0x30,%eax
    8cd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (is_digit(**s))
    8cd7:	8b 44 24 18          	mov    0x18(%esp),%eax
    8cdb:	8b 00                	mov    (%eax),%eax
    8cdd:	0f b6 00             	movzbl (%eax),%eax
    8ce0:	3c 2f                	cmp    $0x2f,%al
    8ce2:	7e 0d                	jle    8cf1 <skip_atoi+0x55>
    8ce4:	8b 44 24 18          	mov    0x18(%esp),%eax
    8ce8:	8b 00                	mov    (%eax),%eax
    8cea:	0f b6 00             	movzbl (%eax),%eax
    8ced:	3c 39                	cmp    $0x39,%al
    8cef:	7e b9                	jle    8caa <skip_atoi+0xe>
	return i;
    8cf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    8cf5:	83 c4 10             	add    $0x10,%esp
    8cf8:	5b                   	pop    %ebx
    8cf9:	c3                   	ret    

00008cfa <number>:
// 将整数转换为指定进制的字符串.
// 输入: num-整数; base-进制; size-字符串长度;precision-数字长度(精度);type-类型选项.
// 输出: 数字转换成字符串后指向该字符串末端后面的指针.
static char * number(char * str, int num, int base, int size, int precision
	,int type)
{
    8cfa:	83 ec 40             	sub    $0x40,%esp
	char c,sign,tmp[36];
	const char *digits="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    8cfd:	c7 44 24 38 10 35 02 	movl   $0x23510,0x38(%esp)
    8d04:	00 
	int i;

	// 如果类型type指出用小写字母,则定义小写字母集.
	// 如果类型指出要左调整(靠左边界),则屏蔽类型中的填零标志.
	// 如果进制基数小于2或大于36,则退出处理,即本程序只能处理基数在2-36之间的数.
	if (type & SMALL) digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    8d05:	8b 44 24 58          	mov    0x58(%esp),%eax
    8d09:	83 e0 40             	and    $0x40,%eax
    8d0c:	85 c0                	test   %eax,%eax
    8d0e:	74 08                	je     8d18 <number+0x1e>
    8d10:	c7 44 24 38 38 35 02 	movl   $0x23538,0x38(%esp)
    8d17:	00 
	if (type & LEFT) type &= ~ZEROPAD;
    8d18:	8b 44 24 58          	mov    0x58(%esp),%eax
    8d1c:	83 e0 10             	and    $0x10,%eax
    8d1f:	85 c0                	test   %eax,%eax
    8d21:	74 05                	je     8d28 <number+0x2e>
    8d23:	83 64 24 58 fe       	andl   $0xfffffffe,0x58(%esp)
	if (base < 2 || base > 36)
    8d28:	83 7c 24 4c 01       	cmpl   $0x1,0x4c(%esp)
    8d2d:	7e 07                	jle    8d36 <number+0x3c>
    8d2f:	83 7c 24 4c 24       	cmpl   $0x24,0x4c(%esp)
    8d34:	7e 0a                	jle    8d40 <number+0x46>
		return 0;
    8d36:	b8 00 00 00 00       	mov    $0x0,%eax
    8d3b:	e9 2d 02 00 00       	jmp    8f6d <number+0x273>
	// 如果类型指出要填零,则置字符变量c='0',否则c等于空格字符.
	// 如果类型指出是带符号数并且数值num小于0,则置符号变量sign=负号,并使num取绝对值.
	// 否则如果类型指出是加号,则置sign=加号,否则若类型带空格标志则sign=空格,否则置0.
	c = (type & ZEROPAD) ? '0' : ' ' ;
    8d40:	8b 44 24 58          	mov    0x58(%esp),%eax
    8d44:	83 e0 01             	and    $0x1,%eax
    8d47:	85 c0                	test   %eax,%eax
    8d49:	74 07                	je     8d52 <number+0x58>
    8d4b:	b8 30 00 00 00       	mov    $0x30,%eax
    8d50:	eb 05                	jmp    8d57 <number+0x5d>
    8d52:	b8 20 00 00 00       	mov    $0x20,%eax
    8d57:	88 44 24 33          	mov    %al,0x33(%esp)
	if (type & SIGN && num < 0) {
    8d5b:	8b 44 24 58          	mov    0x58(%esp),%eax
    8d5f:	83 e0 02             	and    $0x2,%eax
    8d62:	85 c0                	test   %eax,%eax
    8d64:	74 12                	je     8d78 <number+0x7e>
    8d66:	83 7c 24 48 00       	cmpl   $0x0,0x48(%esp)
    8d6b:	79 0b                	jns    8d78 <number+0x7e>
		sign = '-';
    8d6d:	c6 44 24 3f 2d       	movb   $0x2d,0x3f(%esp)
		num = -num;
    8d72:	f7 5c 24 48          	negl   0x48(%esp)
    8d76:	eb 20                	jmp    8d98 <number+0x9e>
	} else
		sign = (type & PLUS) ? '+' : ((type & SPACE) ? ' ' : 0);
    8d78:	8b 44 24 58          	mov    0x58(%esp),%eax
    8d7c:	83 e0 04             	and    $0x4,%eax
    8d7f:	85 c0                	test   %eax,%eax
    8d81:	75 0c                	jne    8d8f <number+0x95>
    8d83:	8b 44 24 58          	mov    0x58(%esp),%eax
    8d87:	c1 e0 02             	shl    $0x2,%eax
    8d8a:	83 e0 20             	and    $0x20,%eax
    8d8d:	eb 05                	jmp    8d94 <number+0x9a>
    8d8f:	b8 2b 00 00 00       	mov    $0x2b,%eax
    8d94:	88 44 24 3f          	mov    %al,0x3f(%esp)
	// 若带符号,则宽度值减1.若类型指出是特殊转换,则对十六进制宽度再减少2位(用于0x),对于八进制宽度减1(用于八进制转换结果前放一个零).
	if (sign) size--;
    8d98:	80 7c 24 3f 00       	cmpb   $0x0,0x3f(%esp)
    8d9d:	74 05                	je     8da4 <number+0xaa>
    8d9f:	83 6c 24 50 01       	subl   $0x1,0x50(%esp)
	if (type & SPECIAL)
    8da4:	8b 44 24 58          	mov    0x58(%esp),%eax
    8da8:	83 e0 20             	and    $0x20,%eax
    8dab:	85 c0                	test   %eax,%eax
    8dad:	74 1a                	je     8dc9 <number+0xcf>
		if (base == 16) size -= 2;
    8daf:	83 7c 24 4c 10       	cmpl   $0x10,0x4c(%esp)
    8db4:	75 07                	jne    8dbd <number+0xc3>
    8db6:	83 6c 24 50 02       	subl   $0x2,0x50(%esp)
    8dbb:	eb 0c                	jmp    8dc9 <number+0xcf>
		else if (base == 8) size--;
    8dbd:	83 7c 24 4c 08       	cmpl   $0x8,0x4c(%esp)
    8dc2:	75 05                	jne    8dc9 <number+0xcf>
    8dc4:	83 6c 24 50 01       	subl   $0x1,0x50(%esp)
	// 如果数值num为0,则临时字符串='0';否则根据给定的基数将数值num转换成字符形式.
	i = 0;
    8dc9:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
    8dd0:	00 
	if (num == 0)
    8dd1:	83 7c 24 48 00       	cmpl   $0x0,0x48(%esp)
    8dd6:	75 48                	jne    8e20 <number+0x126>
		tmp[i++] = '0';
    8dd8:	8b 44 24 34          	mov    0x34(%esp),%eax
    8ddc:	8d 50 01             	lea    0x1(%eax),%edx
    8ddf:	89 54 24 34          	mov    %edx,0x34(%esp)
    8de3:	c6 44 04 08 30       	movb   $0x30,0x8(%esp,%eax,1)
    8de8:	eb 3d                	jmp    8e27 <number+0x12d>
	else while (num != 0)
		tmp[i++] = digits[do_div(num, base)];
    8dea:	8b 44 24 48          	mov    0x48(%esp),%eax
    8dee:	ba 00 00 00 00       	mov    $0x0,%edx
    8df3:	8b 4c 24 4c          	mov    0x4c(%esp),%ecx
    8df7:	f7 f1                	div    %ecx
    8df9:	89 44 24 48          	mov    %eax,0x48(%esp)
    8dfd:	89 54 24 2c          	mov    %edx,0x2c(%esp)
    8e01:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    8e05:	89 c2                	mov    %eax,%edx
    8e07:	8b 44 24 38          	mov    0x38(%esp),%eax
    8e0b:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
    8e0e:	8b 44 24 34          	mov    0x34(%esp),%eax
    8e12:	8d 50 01             	lea    0x1(%eax),%edx
    8e15:	89 54 24 34          	mov    %edx,0x34(%esp)
    8e19:	0f b6 11             	movzbl (%ecx),%edx
    8e1c:	88 54 04 08          	mov    %dl,0x8(%esp,%eax,1)
	else while (num != 0)
    8e20:	83 7c 24 48 00       	cmpl   $0x0,0x48(%esp)
    8e25:	75 c3                	jne    8dea <number+0xf0>
	// 若数值字符个数大于精度值,则精度值扩展为数字个数值.
	// 宽度值size减去用于存放数值字符的个数.
	if (i > precision) precision = i;
    8e27:	8b 44 24 34          	mov    0x34(%esp),%eax
    8e2b:	3b 44 24 54          	cmp    0x54(%esp),%eax
    8e2f:	7e 08                	jle    8e39 <number+0x13f>
    8e31:	8b 44 24 34          	mov    0x34(%esp),%eax
    8e35:	89 44 24 54          	mov    %eax,0x54(%esp)
	size -= precision;
    8e39:	8b 44 24 54          	mov    0x54(%esp),%eax
    8e3d:	29 44 24 50          	sub    %eax,0x50(%esp)
	// 从这里真正开始形成所需要的转换结果,并暂时放在字符串str中.
	// 若类型中没有填零(ZEROPAD)和左靠齐(左调整)标志,则在str中首先填放剩余宽度值指出的空格数.若需带符号位,则存入符号.
	if (!(type & (ZEROPAD + LEFT)))
    8e41:	8b 44 24 58          	mov    0x58(%esp),%eax
    8e45:	83 e0 11             	and    $0x11,%eax
    8e48:	85 c0                	test   %eax,%eax
    8e4a:	75 1f                	jne    8e6b <number+0x171>
		while(size-- > 0)
    8e4c:	eb 0e                	jmp    8e5c <number+0x162>
			*str++ = ' ';
    8e4e:	8b 44 24 44          	mov    0x44(%esp),%eax
    8e52:	8d 50 01             	lea    0x1(%eax),%edx
    8e55:	89 54 24 44          	mov    %edx,0x44(%esp)
    8e59:	c6 00 20             	movb   $0x20,(%eax)
		while(size-- > 0)
    8e5c:	8b 44 24 50          	mov    0x50(%esp),%eax
    8e60:	8d 50 ff             	lea    -0x1(%eax),%edx
    8e63:	89 54 24 50          	mov    %edx,0x50(%esp)
    8e67:	85 c0                	test   %eax,%eax
    8e69:	7f e3                	jg     8e4e <number+0x154>
	if (sign)
    8e6b:	80 7c 24 3f 00       	cmpb   $0x0,0x3f(%esp)
    8e70:	74 12                	je     8e84 <number+0x18a>
		*str++ = sign;
    8e72:	8b 44 24 44          	mov    0x44(%esp),%eax
    8e76:	8d 50 01             	lea    0x1(%eax),%edx
    8e79:	89 54 24 44          	mov    %edx,0x44(%esp)
    8e7d:	0f b6 54 24 3f       	movzbl 0x3f(%esp),%edx
    8e82:	88 10                	mov    %dl,(%eax)
	// 若类型指出是特殊转换,则对于八进制转换结果头一位放置一个'0';而对于十六进制则存放'0x'.
	if (type & SPECIAL)
    8e84:	8b 44 24 58          	mov    0x58(%esp),%eax
    8e88:	83 e0 20             	and    $0x20,%eax
    8e8b:	85 c0                	test   %eax,%eax
    8e8d:	74 41                	je     8ed0 <number+0x1d6>
		if (base == 8)
    8e8f:	83 7c 24 4c 08       	cmpl   $0x8,0x4c(%esp)
    8e94:	75 10                	jne    8ea6 <number+0x1ac>
			*str++ = '0';
    8e96:	8b 44 24 44          	mov    0x44(%esp),%eax
    8e9a:	8d 50 01             	lea    0x1(%eax),%edx
    8e9d:	89 54 24 44          	mov    %edx,0x44(%esp)
    8ea1:	c6 00 30             	movb   $0x30,(%eax)
    8ea4:	eb 2a                	jmp    8ed0 <number+0x1d6>
		else if (base == 16) {
    8ea6:	83 7c 24 4c 10       	cmpl   $0x10,0x4c(%esp)
    8eab:	75 23                	jne    8ed0 <number+0x1d6>
			*str++ = '0';
    8ead:	8b 44 24 44          	mov    0x44(%esp),%eax
    8eb1:	8d 50 01             	lea    0x1(%eax),%edx
    8eb4:	89 54 24 44          	mov    %edx,0x44(%esp)
    8eb8:	c6 00 30             	movb   $0x30,(%eax)
			*str++ = digits[33];						// 'X'或'x'
    8ebb:	8b 44 24 44          	mov    0x44(%esp),%eax
    8ebf:	8d 50 01             	lea    0x1(%eax),%edx
    8ec2:	89 54 24 44          	mov    %edx,0x44(%esp)
    8ec6:	8b 54 24 38          	mov    0x38(%esp),%edx
    8eca:	0f b6 52 21          	movzbl 0x21(%edx),%edx
    8ece:	88 10                	mov    %dl,(%eax)
		}
	// 若类型中没有左调整(左靠齐)标志,则在剩余宽度中存放c字符('0'或空格)
	if (!(type & LEFT))
    8ed0:	8b 44 24 58          	mov    0x58(%esp),%eax
    8ed4:	83 e0 10             	and    $0x10,%eax
    8ed7:	85 c0                	test   %eax,%eax
    8ed9:	75 33                	jne    8f0e <number+0x214>
		while(size-- > 0)
    8edb:	eb 12                	jmp    8eef <number+0x1f5>
			*str++ = c;
    8edd:	8b 44 24 44          	mov    0x44(%esp),%eax
    8ee1:	8d 50 01             	lea    0x1(%eax),%edx
    8ee4:	89 54 24 44          	mov    %edx,0x44(%esp)
    8ee8:	0f b6 54 24 33       	movzbl 0x33(%esp),%edx
    8eed:	88 10                	mov    %dl,(%eax)
		while(size-- > 0)
    8eef:	8b 44 24 50          	mov    0x50(%esp),%eax
    8ef3:	8d 50 ff             	lea    -0x1(%eax),%edx
    8ef6:	89 54 24 50          	mov    %edx,0x50(%esp)
    8efa:	85 c0                	test   %eax,%eax
    8efc:	7f df                	jg     8edd <number+0x1e3>
	// 此时i存有数值num的数字个数.若数字个数小于精度值,则str中放入(精度值-i)个'0'.
	while(i < precision--)
    8efe:	eb 0e                	jmp    8f0e <number+0x214>
		*str++ = '0';
    8f00:	8b 44 24 44          	mov    0x44(%esp),%eax
    8f04:	8d 50 01             	lea    0x1(%eax),%edx
    8f07:	89 54 24 44          	mov    %edx,0x44(%esp)
    8f0b:	c6 00 30             	movb   $0x30,(%eax)
	while(i < precision--)
    8f0e:	8b 44 24 54          	mov    0x54(%esp),%eax
    8f12:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f15:	89 54 24 54          	mov    %edx,0x54(%esp)
    8f19:	39 44 24 34          	cmp    %eax,0x34(%esp)
    8f1d:	7c e1                	jl     8f00 <number+0x206>
	// 将数值转换好的数字字符填入str中.共i个.
	while(i-- > 0)
    8f1f:	eb 1a                	jmp    8f3b <number+0x241>
		*str++ = tmp[i];
    8f21:	8b 44 24 44          	mov    0x44(%esp),%eax
    8f25:	8d 50 01             	lea    0x1(%eax),%edx
    8f28:	89 54 24 44          	mov    %edx,0x44(%esp)
    8f2c:	8d 4c 24 08          	lea    0x8(%esp),%ecx
    8f30:	8b 54 24 34          	mov    0x34(%esp),%edx
    8f34:	01 ca                	add    %ecx,%edx
    8f36:	0f b6 12             	movzbl (%edx),%edx
    8f39:	88 10                	mov    %dl,(%eax)
	while(i-- > 0)
    8f3b:	8b 44 24 34          	mov    0x34(%esp),%eax
    8f3f:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f42:	89 54 24 34          	mov    %edx,0x34(%esp)
    8f46:	85 c0                	test   %eax,%eax
    8f48:	7f d7                	jg     8f21 <number+0x227>
	// 若宽度值仍大于零,则表示类型标志中有左靠齐标志.则在剩余宽度中放入空格.
	while(size-- > 0)
    8f4a:	eb 0e                	jmp    8f5a <number+0x260>
		*str++ = ' ';
    8f4c:	8b 44 24 44          	mov    0x44(%esp),%eax
    8f50:	8d 50 01             	lea    0x1(%eax),%edx
    8f53:	89 54 24 44          	mov    %edx,0x44(%esp)
    8f57:	c6 00 20             	movb   $0x20,(%eax)
	while(size-- > 0)
    8f5a:	8b 44 24 50          	mov    0x50(%esp),%eax
    8f5e:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f61:	89 54 24 50          	mov    %edx,0x50(%esp)
    8f65:	85 c0                	test   %eax,%eax
    8f67:	7f e3                	jg     8f4c <number+0x252>
	return str;											// 返回转换好的指向字符串末端后的指针.
    8f69:	8b 44 24 44          	mov    0x44(%esp),%eax
}
    8f6d:	83 c4 40             	add    $0x40,%esp
    8f70:	c3                   	ret    

00008f71 <vsprintf>:

// 下面函数是送格式化输出到字符串中.
// 为了能在内核中使用格式化的输出,Linus在内核实现了该C标准函数.
// 其中参数fmt是格式字符串;args是个数变化的值;buf是输出字符串缓冲区.
int vsprintf(char *buf, const char *fmt, va_list args)
{
    8f71:	83 ec 30             	sub    $0x30,%esp
				   											number of chars for from string */
														/* min.整数数字个数;max.字符串中字符个数 */
	int qualifier;										/* 'h', 'l', or 'L' for integer fields */	/* 'h','l',或 'L'用于整数字段 */

	// 首先将字符指针指向buf,然后扫描格式字符串,对各个格式转换指示进行相应的处理.
	for (str=buf ; *fmt ; ++fmt) {
    8f74:	8b 44 24 34          	mov    0x34(%esp),%eax
    8f78:	89 44 24 24          	mov    %eax,0x24(%esp)
    8f7c:	e9 3d 04 00 00       	jmp    93be <vsprintf+0x44d>
		// 格式转换指示字符串均'%'开始,这里从fmt格式字符串中扫描'%',寻找格式转换字符串的开始.不是格式指示的一般字符均被依次存入str.
		if (*fmt != '%') {
    8f81:	8b 44 24 38          	mov    0x38(%esp),%eax
    8f85:	0f b6 00             	movzbl (%eax),%eax
    8f88:	3c 25                	cmp    $0x25,%al
    8f8a:	74 19                	je     8fa5 <vsprintf+0x34>
			*str++ = *fmt;
    8f8c:	8b 54 24 38          	mov    0x38(%esp),%edx
    8f90:	8b 44 24 24          	mov    0x24(%esp),%eax
    8f94:	8d 48 01             	lea    0x1(%eax),%ecx
    8f97:	89 4c 24 24          	mov    %ecx,0x24(%esp)
    8f9b:	0f b6 12             	movzbl (%edx),%edx
    8f9e:	88 10                	mov    %dl,(%eax)
			continue;
    8fa0:	e9 0e 04 00 00       	jmp    93b3 <vsprintf+0x442>
		}

		// 下面取得格式指示字符串中的标志域,并将标志常量放入flags变量中.
		/* process flags */
		flags = 0;
    8fa5:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    8fac:	00 
		repeat:
			++fmt;		/* this also skips first '%' */
    8fad:	8b 44 24 38          	mov    0x38(%esp),%eax
    8fb1:	83 c0 01             	add    $0x1,%eax
    8fb4:	89 44 24 38          	mov    %eax,0x38(%esp)
			switch (*fmt) {
    8fb8:	8b 44 24 38          	mov    0x38(%esp),%eax
    8fbc:	0f b6 00             	movzbl (%eax),%eax
    8fbf:	0f be c0             	movsbl %al,%eax
    8fc2:	83 e8 20             	sub    $0x20,%eax
    8fc5:	83 f8 10             	cmp    $0x10,%eax
    8fc8:	77 2c                	ja     8ff6 <vsprintf+0x85>
    8fca:	8b 04 85 60 35 02 00 	mov    0x23560(,%eax,4),%eax
    8fd1:	ff e0                	jmp    *%eax
				case '-': flags |= LEFT; goto repeat;		// 左靠齐调整
    8fd3:	83 4c 24 1c 10       	orl    $0x10,0x1c(%esp)
    8fd8:	eb d3                	jmp    8fad <vsprintf+0x3c>
				case '+': flags |= PLUS; goto repeat;		// 放加号
    8fda:	83 4c 24 1c 04       	orl    $0x4,0x1c(%esp)
    8fdf:	eb cc                	jmp    8fad <vsprintf+0x3c>
				case ' ': flags |= SPACE; goto repeat;		// 放空格
    8fe1:	83 4c 24 1c 08       	orl    $0x8,0x1c(%esp)
    8fe6:	eb c5                	jmp    8fad <vsprintf+0x3c>
				case '#': flags |= SPECIAL; goto repeat;	// 是特殊转换
    8fe8:	83 4c 24 1c 20       	orl    $0x20,0x1c(%esp)
    8fed:	eb be                	jmp    8fad <vsprintf+0x3c>
				case '0': flags |= ZEROPAD; goto repeat;	// 要填零(即'0')
    8fef:	83 4c 24 1c 01       	orl    $0x1,0x1c(%esp)
    8ff4:	eb b7                	jmp    8fad <vsprintf+0x3c>
				}

		// 取当前参数字段宽度域值,放入field_width变量中.如果宽度域中是数值则直接其为宽度值.如果宽度域中是字符'*',表示下一个参数指定宽度.因此
		// 调用va_arg取宽度值.若此时宽度值小于0,则该负数表示其带有标志域'-'标志(左靠齐),因此还需在标志变量中添入该标志,并将字段宽度值取为其绝对值.
		/* get field width */
		field_width = -1;
    8ff6:	c7 44 24 18 ff ff ff 	movl   $0xffffffff,0x18(%esp)
    8ffd:	ff 
		if (is_digit(*fmt))
    8ffe:	8b 44 24 38          	mov    0x38(%esp),%eax
    9002:	0f b6 00             	movzbl (%eax),%eax
    9005:	3c 2f                	cmp    $0x2f,%al
    9007:	7e 1e                	jle    9027 <vsprintf+0xb6>
    9009:	8b 44 24 38          	mov    0x38(%esp),%eax
    900d:	0f b6 00             	movzbl (%eax),%eax
    9010:	3c 39                	cmp    $0x39,%al
    9012:	7f 13                	jg     9027 <vsprintf+0xb6>
			field_width = skip_atoi(&fmt);
    9014:	8d 44 24 38          	lea    0x38(%esp),%eax
    9018:	50                   	push   %eax
    9019:	e8 7e fc ff ff       	call   8c9c <skip_atoi>
    901e:	83 c4 04             	add    $0x4,%esp
    9021:	89 44 24 18          	mov    %eax,0x18(%esp)
    9025:	eb 36                	jmp    905d <vsprintf+0xec>
		else if (*fmt == '*') {
    9027:	8b 44 24 38          	mov    0x38(%esp),%eax
    902b:	0f b6 00             	movzbl (%eax),%eax
    902e:	3c 2a                	cmp    $0x2a,%al
    9030:	75 2b                	jne    905d <vsprintf+0xec>
			/* it's the next argument */
			++fmt;
    9032:	8b 44 24 38          	mov    0x38(%esp),%eax
    9036:	83 c0 01             	add    $0x1,%eax
    9039:	89 44 24 38          	mov    %eax,0x38(%esp)
			field_width = va_arg(args, int);
    903d:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9042:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9046:	8b 40 fc             	mov    -0x4(%eax),%eax
    9049:	89 44 24 18          	mov    %eax,0x18(%esp)
			if (field_width < 0) {
    904d:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    9052:	79 09                	jns    905d <vsprintf+0xec>
				field_width = -field_width;
    9054:	f7 5c 24 18          	negl   0x18(%esp)
				flags |= LEFT;
    9058:	83 4c 24 1c 10       	orl    $0x10,0x1c(%esp)
		}

	// 下面这段代码,取格式转换串的精度域,并放入precision变量中.精度域开始的标志是'.'.其处理过程与上面宽度域的类似.如果精度域中是数值则直接取其为
	// 精度值.如果精度域中是字符'*',表示下一个参数指定精度.因此调用va_arg取精度值.若此时宽度值小于0,则将字段精度值取为0.
		/* get the precision */
		precision = -1;
    905d:	c7 44 24 14 ff ff ff 	movl   $0xffffffff,0x14(%esp)
    9064:	ff 
		if (*fmt == '.') {
    9065:	8b 44 24 38          	mov    0x38(%esp),%eax
    9069:	0f b6 00             	movzbl (%eax),%eax
    906c:	3c 2e                	cmp    $0x2e,%al
    906e:	75 69                	jne    90d9 <vsprintf+0x168>
			++fmt;
    9070:	8b 44 24 38          	mov    0x38(%esp),%eax
    9074:	83 c0 01             	add    $0x1,%eax
    9077:	89 44 24 38          	mov    %eax,0x38(%esp)
			if (is_digit(*fmt))
    907b:	8b 44 24 38          	mov    0x38(%esp),%eax
    907f:	0f b6 00             	movzbl (%eax),%eax
    9082:	3c 2f                	cmp    $0x2f,%al
    9084:	7e 1e                	jle    90a4 <vsprintf+0x133>
    9086:	8b 44 24 38          	mov    0x38(%esp),%eax
    908a:	0f b6 00             	movzbl (%eax),%eax
    908d:	3c 39                	cmp    $0x39,%al
    908f:	7f 13                	jg     90a4 <vsprintf+0x133>
				precision = skip_atoi(&fmt);
    9091:	8d 44 24 38          	lea    0x38(%esp),%eax
    9095:	50                   	push   %eax
    9096:	e8 01 fc ff ff       	call   8c9c <skip_atoi>
    909b:	83 c4 04             	add    $0x4,%esp
    909e:	89 44 24 14          	mov    %eax,0x14(%esp)
    90a2:	eb 26                	jmp    90ca <vsprintf+0x159>
			else if (*fmt == '*') {
    90a4:	8b 44 24 38          	mov    0x38(%esp),%eax
    90a8:	0f b6 00             	movzbl (%eax),%eax
    90ab:	3c 2a                	cmp    $0x2a,%al
    90ad:	75 1b                	jne    90ca <vsprintf+0x159>
				/* it's the next argument */
                                ++fmt;
    90af:	8b 44 24 38          	mov    0x38(%esp),%eax
    90b3:	83 c0 01             	add    $0x1,%eax
    90b6:	89 44 24 38          	mov    %eax,0x38(%esp)
				precision = va_arg(args, int);
    90ba:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    90bf:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    90c3:	8b 40 fc             	mov    -0x4(%eax),%eax
    90c6:	89 44 24 14          	mov    %eax,0x14(%esp)
			}
			if (precision < 0)
    90ca:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    90cf:	79 08                	jns    90d9 <vsprintf+0x168>
				precision = 0;
    90d1:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
    90d8:	00 
		}

		// 下面这段代码分析长度修饰符,并将其存入qualifer变量.
		/* get the conversion qualifier */
		qualifier = -1;
    90d9:	c7 44 24 10 ff ff ff 	movl   $0xffffffff,0x10(%esp)
    90e0:	ff 
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
    90e1:	8b 44 24 38          	mov    0x38(%esp),%eax
    90e5:	0f b6 00             	movzbl (%eax),%eax
    90e8:	3c 68                	cmp    $0x68,%al
    90ea:	74 16                	je     9102 <vsprintf+0x191>
    90ec:	8b 44 24 38          	mov    0x38(%esp),%eax
    90f0:	0f b6 00             	movzbl (%eax),%eax
    90f3:	3c 6c                	cmp    $0x6c,%al
    90f5:	74 0b                	je     9102 <vsprintf+0x191>
    90f7:	8b 44 24 38          	mov    0x38(%esp),%eax
    90fb:	0f b6 00             	movzbl (%eax),%eax
    90fe:	3c 4c                	cmp    $0x4c,%al
    9100:	75 19                	jne    911b <vsprintf+0x1aa>
			qualifier = *fmt;
    9102:	8b 44 24 38          	mov    0x38(%esp),%eax
    9106:	0f b6 00             	movzbl (%eax),%eax
    9109:	0f be c0             	movsbl %al,%eax
    910c:	89 44 24 10          	mov    %eax,0x10(%esp)
			++fmt;
    9110:	8b 44 24 38          	mov    0x38(%esp),%eax
    9114:	83 c0 01             	add    $0x1,%eax
    9117:	89 44 24 38          	mov    %eax,0x38(%esp)
		}

		// 下面分析转换指示符.
		switch (*fmt) {
    911b:	8b 44 24 38          	mov    0x38(%esp),%eax
    911f:	0f b6 00             	movzbl (%eax),%eax
    9122:	0f be c0             	movsbl %al,%eax
    9125:	83 e8 58             	sub    $0x58,%eax
    9128:	83 f8 20             	cmp    $0x20,%eax
    912b:	0f 87 3c 02 00 00    	ja     936d <vsprintf+0x3fc>
    9131:	8b 04 85 a4 35 02 00 	mov    0x235a4(,%eax,4),%eax
    9138:	ff e0                	jmp    *%eax
		// 如果转换指示符是'c',则表示对应参数应是字符.此时如果标志域表明不是左靠齐,则该字段前面放入'宽度域值-1'个空格字符,然后再放入参数字符.如果
		// 宽度域还大于0,则表示左靠齐,则在参数字符后面添加'宽度值-1'个空格字符.
		case 'c':
			if (!(flags & LEFT))
    913a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    913e:	83 e0 10             	and    $0x10,%eax
    9141:	85 c0                	test   %eax,%eax
    9143:	75 1c                	jne    9161 <vsprintf+0x1f0>
				while (--field_width > 0)
    9145:	eb 0e                	jmp    9155 <vsprintf+0x1e4>
					*str++ = ' ';
    9147:	8b 44 24 24          	mov    0x24(%esp),%eax
    914b:	8d 50 01             	lea    0x1(%eax),%edx
    914e:	89 54 24 24          	mov    %edx,0x24(%esp)
    9152:	c6 00 20             	movb   $0x20,(%eax)
				while (--field_width > 0)
    9155:	83 6c 24 18 01       	subl   $0x1,0x18(%esp)
    915a:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    915f:	7f e6                	jg     9147 <vsprintf+0x1d6>
			*str++ = (unsigned char) va_arg(args, int);
    9161:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9166:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    916a:	83 e8 04             	sub    $0x4,%eax
    916d:	8b 08                	mov    (%eax),%ecx
    916f:	8b 44 24 24          	mov    0x24(%esp),%eax
    9173:	8d 50 01             	lea    0x1(%eax),%edx
    9176:	89 54 24 24          	mov    %edx,0x24(%esp)
    917a:	89 ca                	mov    %ecx,%edx
    917c:	88 10                	mov    %dl,(%eax)
			while (--field_width > 0)
    917e:	eb 0e                	jmp    918e <vsprintf+0x21d>
				*str++ = ' ';
    9180:	8b 44 24 24          	mov    0x24(%esp),%eax
    9184:	8d 50 01             	lea    0x1(%eax),%edx
    9187:	89 54 24 24          	mov    %edx,0x24(%esp)
    918b:	c6 00 20             	movb   $0x20,(%eax)
			while (--field_width > 0)
    918e:	83 6c 24 18 01       	subl   $0x1,0x18(%esp)
    9193:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    9198:	7f e6                	jg     9180 <vsprintf+0x20f>
			break;
    919a:	e9 14 02 00 00       	jmp    93b3 <vsprintf+0x442>

		// 如果转换指示符是's',则表示对应参数是字符串.首先取参数字符串的长度,若其超过了精度域值,则扩展精度=字符串长度.此时如果标志域表明不是左靠齐,
		// 则该字段前放入'宽度值-字符串长度'个空格字符.然后再放入参数字符串.如果宽度域还大于0,则表示为左靠齐,则在参数字符串后面添加'宽度值-字符串长
		// 度'个空格字符.
		case 's':
			s = va_arg(args, char *);
    919f:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    91a4:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    91a8:	8b 40 fc             	mov    -0x4(%eax),%eax
    91ab:	89 44 24 20          	mov    %eax,0x20(%esp)
			len = strlen(s);
    91af:	ff 74 24 20          	pushl  0x20(%esp)
    91b3:	e8 c9 fa ff ff       	call   8c81 <strlen>
    91b8:	83 c4 04             	add    $0x4,%esp
    91bb:	89 44 24 2c          	mov    %eax,0x2c(%esp)
			if (precision < 0)
    91bf:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    91c4:	79 0a                	jns    91d0 <vsprintf+0x25f>
				precision = len;
    91c6:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    91ca:	89 44 24 14          	mov    %eax,0x14(%esp)
    91ce:	eb 12                	jmp    91e2 <vsprintf+0x271>
			else if (len > precision)
    91d0:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    91d4:	3b 44 24 14          	cmp    0x14(%esp),%eax
    91d8:	7e 08                	jle    91e2 <vsprintf+0x271>
				len = precision;
    91da:	8b 44 24 14          	mov    0x14(%esp),%eax
    91de:	89 44 24 2c          	mov    %eax,0x2c(%esp)

			if (!(flags & LEFT))
    91e2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    91e6:	83 e0 10             	and    $0x10,%eax
    91e9:	85 c0                	test   %eax,%eax
    91eb:	75 21                	jne    920e <vsprintf+0x29d>
				while (len < field_width--)
    91ed:	eb 0e                	jmp    91fd <vsprintf+0x28c>
					*str++ = ' ';
    91ef:	8b 44 24 24          	mov    0x24(%esp),%eax
    91f3:	8d 50 01             	lea    0x1(%eax),%edx
    91f6:	89 54 24 24          	mov    %edx,0x24(%esp)
    91fa:	c6 00 20             	movb   $0x20,(%eax)
				while (len < field_width--)
    91fd:	8b 44 24 18          	mov    0x18(%esp),%eax
    9201:	8d 50 ff             	lea    -0x1(%eax),%edx
    9204:	89 54 24 18          	mov    %edx,0x18(%esp)
    9208:	39 44 24 2c          	cmp    %eax,0x2c(%esp)
    920c:	7c e1                	jl     91ef <vsprintf+0x27e>
			for (i = 0; i < len; ++i)
    920e:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
    9215:	00 
    9216:	eb 20                	jmp    9238 <vsprintf+0x2c7>
				*str++ = *s++;
    9218:	8b 54 24 20          	mov    0x20(%esp),%edx
    921c:	8d 42 01             	lea    0x1(%edx),%eax
    921f:	89 44 24 20          	mov    %eax,0x20(%esp)
    9223:	8b 44 24 24          	mov    0x24(%esp),%eax
    9227:	8d 48 01             	lea    0x1(%eax),%ecx
    922a:	89 4c 24 24          	mov    %ecx,0x24(%esp)
    922e:	0f b6 12             	movzbl (%edx),%edx
    9231:	88 10                	mov    %dl,(%eax)
			for (i = 0; i < len; ++i)
    9233:	83 44 24 28 01       	addl   $0x1,0x28(%esp)
    9238:	8b 44 24 28          	mov    0x28(%esp),%eax
    923c:	3b 44 24 2c          	cmp    0x2c(%esp),%eax
    9240:	7c d6                	jl     9218 <vsprintf+0x2a7>
			while (len < field_width--)
    9242:	eb 0e                	jmp    9252 <vsprintf+0x2e1>
				*str++ = ' ';
    9244:	8b 44 24 24          	mov    0x24(%esp),%eax
    9248:	8d 50 01             	lea    0x1(%eax),%edx
    924b:	89 54 24 24          	mov    %edx,0x24(%esp)
    924f:	c6 00 20             	movb   $0x20,(%eax)
			while (len < field_width--)
    9252:	8b 44 24 18          	mov    0x18(%esp),%eax
    9256:	8d 50 ff             	lea    -0x1(%eax),%edx
    9259:	89 54 24 18          	mov    %edx,0x18(%esp)
    925d:	39 44 24 2c          	cmp    %eax,0x2c(%esp)
    9261:	7c e1                	jl     9244 <vsprintf+0x2d3>
			break;
    9263:	e9 4b 01 00 00       	jmp    93b3 <vsprintf+0x442>

		// 如果格式转换符是'o',表示需将对应的参数转换成八进制数的字符串.调用number()函数处理.
		case 'o':
			str = number(str, va_arg(args, unsigned long), 8,
    9268:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    926d:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9271:	83 e8 04             	sub    $0x4,%eax
    9274:	8b 00                	mov    (%eax),%eax
    9276:	ff 74 24 1c          	pushl  0x1c(%esp)
    927a:	ff 74 24 18          	pushl  0x18(%esp)
    927e:	ff 74 24 20          	pushl  0x20(%esp)
    9282:	6a 08                	push   $0x8
    9284:	50                   	push   %eax
    9285:	ff 74 24 38          	pushl  0x38(%esp)
    9289:	e8 6c fa ff ff       	call   8cfa <number>
    928e:	83 c4 18             	add    $0x18,%esp
    9291:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    9295:	e9 19 01 00 00       	jmp    93b3 <vsprintf+0x442>

		// 如果格式转换符是'p',表示对应参数是一个指针类型.此时若该参数没有设置宽度域,则默认宽度为8,并且需要添零.然后调用number()函数进行处理.
		case 'p':
			if (field_width == -1) {
    929a:	83 7c 24 18 ff       	cmpl   $0xffffffff,0x18(%esp)
    929f:	75 0d                	jne    92ae <vsprintf+0x33d>
				field_width = 8;
    92a1:	c7 44 24 18 08 00 00 	movl   $0x8,0x18(%esp)
    92a8:	00 
				flags |= ZEROPAD;
    92a9:	83 4c 24 1c 01       	orl    $0x1,0x1c(%esp)
			}
			str = number(str,
				(unsigned long) va_arg(args, void *), 16,
    92ae:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    92b3:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    92b7:	83 e8 04             	sub    $0x4,%eax
    92ba:	8b 00                	mov    (%eax),%eax
			str = number(str,
    92bc:	ff 74 24 1c          	pushl  0x1c(%esp)
    92c0:	ff 74 24 18          	pushl  0x18(%esp)
    92c4:	ff 74 24 20          	pushl  0x20(%esp)
    92c8:	6a 10                	push   $0x10
    92ca:	50                   	push   %eax
    92cb:	ff 74 24 38          	pushl  0x38(%esp)
    92cf:	e8 26 fa ff ff       	call   8cfa <number>
    92d4:	83 c4 18             	add    $0x18,%esp
    92d7:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    92db:	e9 d3 00 00 00       	jmp    93b3 <vsprintf+0x442>

		// 如果格式转换指示是'x'或'X',则表示对应参数需要打印成十六进制数输出.'x'表示用定字母表示.
		case 'x':
			flags |= SMALL;
    92e0:	83 4c 24 1c 40       	orl    $0x40,0x1c(%esp)
		case 'X':
			str = number(str, va_arg(args, unsigned long), 16,
    92e5:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    92ea:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    92ee:	83 e8 04             	sub    $0x4,%eax
    92f1:	8b 00                	mov    (%eax),%eax
    92f3:	ff 74 24 1c          	pushl  0x1c(%esp)
    92f7:	ff 74 24 18          	pushl  0x18(%esp)
    92fb:	ff 74 24 20          	pushl  0x20(%esp)
    92ff:	6a 10                	push   $0x10
    9301:	50                   	push   %eax
    9302:	ff 74 24 38          	pushl  0x38(%esp)
    9306:	e8 ef f9 ff ff       	call   8cfa <number>
    930b:	83 c4 18             	add    $0x18,%esp
    930e:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    9312:	e9 9c 00 00 00       	jmp    93b3 <vsprintf+0x442>

		// 如果格式转换字符是'd','i'或'u',则表示对应参数是整数,'d','i'代表符号整数,因此需要加上带符号标志.'u'代表无符号整数.
		case 'd':
		case 'i':
			flags |= SIGN;
    9317:	83 4c 24 1c 02       	orl    $0x2,0x1c(%esp)
		case 'u':
			str = number(str, va_arg(args, unsigned long), 10,
    931c:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9321:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9325:	83 e8 04             	sub    $0x4,%eax
    9328:	8b 00                	mov    (%eax),%eax
    932a:	ff 74 24 1c          	pushl  0x1c(%esp)
    932e:	ff 74 24 18          	pushl  0x18(%esp)
    9332:	ff 74 24 20          	pushl  0x20(%esp)
    9336:	6a 0a                	push   $0xa
    9338:	50                   	push   %eax
    9339:	ff 74 24 38          	pushl  0x38(%esp)
    933d:	e8 b8 f9 ff ff       	call   8cfa <number>
    9342:	83 c4 18             	add    $0x18,%esp
    9345:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    9349:	eb 68                	jmp    93b3 <vsprintf+0x442>

		// 若格式转换指示符是'n',则表示要把目前为止转换输出字符数保存到对应参数指针指定的位置中.首先利用va_arg()取得该参数指针,然后将已经转换好
		// 的字符数存入该指示的位置.
		case 'n':
			ip = va_arg(args, int *);
    934b:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9350:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9354:	8b 40 fc             	mov    -0x4(%eax),%eax
    9357:	89 44 24 0c          	mov    %eax,0xc(%esp)
			*ip = (str - buf);
    935b:	8b 44 24 24          	mov    0x24(%esp),%eax
    935f:	2b 44 24 34          	sub    0x34(%esp),%eax
    9363:	89 c2                	mov    %eax,%edx
    9365:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9369:	89 10                	mov    %edx,(%eax)
			break;
    936b:	eb 46                	jmp    93b3 <vsprintf+0x442>

		// 若格式转换符不是'%',则表示格式字符串有错,直接将一个'%'写入输出串中.
		// 如果格式转换符的位置处还有字符,则也直接将该字符写入输出串中,并返回前面继续处理格式字符串.否则表示已经处理到格式字符串的结尾处,则退出循环.
		default:
			if (*fmt != '%')
    936d:	8b 44 24 38          	mov    0x38(%esp),%eax
    9371:	0f b6 00             	movzbl (%eax),%eax
    9374:	3c 25                	cmp    $0x25,%al
    9376:	74 0e                	je     9386 <vsprintf+0x415>
				*str++ = '%';
    9378:	8b 44 24 24          	mov    0x24(%esp),%eax
    937c:	8d 50 01             	lea    0x1(%eax),%edx
    937f:	89 54 24 24          	mov    %edx,0x24(%esp)
    9383:	c6 00 25             	movb   $0x25,(%eax)
			if (*fmt)
    9386:	8b 44 24 38          	mov    0x38(%esp),%eax
    938a:	0f b6 00             	movzbl (%eax),%eax
    938d:	84 c0                	test   %al,%al
    938f:	74 16                	je     93a7 <vsprintf+0x436>
				*str++ = *fmt;
    9391:	8b 54 24 38          	mov    0x38(%esp),%edx
    9395:	8b 44 24 24          	mov    0x24(%esp),%eax
    9399:	8d 48 01             	lea    0x1(%eax),%ecx
    939c:	89 4c 24 24          	mov    %ecx,0x24(%esp)
    93a0:	0f b6 12             	movzbl (%edx),%edx
    93a3:	88 10                	mov    %dl,(%eax)
			else
				--fmt;
			break;
    93a5:	eb 0b                	jmp    93b2 <vsprintf+0x441>
				--fmt;
    93a7:	8b 44 24 38          	mov    0x38(%esp),%eax
    93ab:	83 e8 01             	sub    $0x1,%eax
    93ae:	89 44 24 38          	mov    %eax,0x38(%esp)
			break;
    93b2:	90                   	nop
	for (str=buf ; *fmt ; ++fmt) {
    93b3:	8b 44 24 38          	mov    0x38(%esp),%eax
    93b7:	83 c0 01             	add    $0x1,%eax
    93ba:	89 44 24 38          	mov    %eax,0x38(%esp)
    93be:	8b 44 24 38          	mov    0x38(%esp),%eax
    93c2:	0f b6 00             	movzbl (%eax),%eax
    93c5:	84 c0                	test   %al,%al
    93c7:	0f 85 b4 fb ff ff    	jne    8f81 <vsprintf+0x10>
		}
	}
	*str = '\0';										// 最后在转换好的字符串结尾处添上null.
    93cd:	8b 44 24 24          	mov    0x24(%esp),%eax
    93d1:	c6 00 00             	movb   $0x0,(%eax)
	return str - buf;									// 返回转换好的字符串长度值.
    93d4:	8b 44 24 24          	mov    0x24(%esp),%eax
    93d8:	2b 44 24 34          	sub    0x34(%esp),%eax
}
    93dc:	83 c4 30             	add    $0x30,%esp
    93df:	c3                   	ret    

000093e0 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
    93e0:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
    93e1:	8b 44 24 08          	mov    0x8(%esp),%eax
    93e5:	64 8a 00             	mov    %fs:(%eax),%al
    93e8:	89 c3                	mov    %eax,%ebx
	return _v;
    93ea:	89 d8                	mov    %ebx,%eax
}
    93ec:	5b                   	pop    %ebx
    93ed:	c3                   	ret    

000093ee <get_fs_word>:
//// 读取fs段中指定地址处的字.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的字.
static inline unsigned short get_fs_word(const unsigned short *addr)
{
    93ee:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;

	__asm__ ("movw %%fs:%1,%0":"=q" (_v):"m" (*addr));
    93f1:	8b 44 24 14          	mov    0x14(%esp),%eax
    93f5:	64 66 8b 00          	mov    %fs:(%eax),%ax
    93f9:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
    93fe:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
    9403:	83 c4 10             	add    $0x10,%esp
    9406:	c3                   	ret    

00009407 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
    9407:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
    940a:	8b 44 24 14          	mov    0x14(%esp),%eax
    940e:	64 8b 00             	mov    %fs:(%eax),%eax
    9411:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
    9415:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    9419:	83 c4 10             	add    $0x10,%esp
    941c:	c3                   	ret    

0000941d <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
    941d:	83 ec 04             	sub    $0x4,%esp
    9420:	8b 44 24 08          	mov    0x8(%esp),%eax
    9424:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
    9427:	0f b6 04 24          	movzbl (%esp),%eax
    942b:	8b 54 24 0c          	mov    0xc(%esp),%edx
    942f:	64 88 02             	mov    %al,%fs:(%edx)
}
    9432:	90                   	nop
    9433:	83 c4 04             	add    $0x4,%esp
    9436:	c3                   	ret    

00009437 <put_fs_word>:

//// 将一字存放在fs段中指定内存地址处.
// 参数:val - 字值;addr - 内存地址.
// %0 - 寄存器(字值val);%1 - (内存地址addr).
static inline void put_fs_word(short val,short * addr)
{
    9437:	83 ec 04             	sub    $0x4,%esp
    943a:	8b 44 24 08          	mov    0x8(%esp),%eax
    943e:	66 89 04 24          	mov    %ax,(%esp)
__asm__ ("movw %0,%%fs:%1"::"q" (val),"m" (*addr));
    9442:	0f b7 04 24          	movzwl (%esp),%eax
    9446:	8b 54 24 0c          	mov    0xc(%esp),%edx
    944a:	64 66 89 02          	mov    %ax,%fs:(%edx)
}
    944e:	90                   	nop
    944f:	83 c4 04             	add    $0x4,%esp
    9452:	c3                   	ret    

00009453 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
    9453:	8b 44 24 04          	mov    0x4(%esp),%eax
    9457:	8b 54 24 08          	mov    0x8(%esp),%edx
    945b:	64 89 02             	mov    %eax,%fs:(%edx)
}
    945e:	90                   	nop
    945f:	c3                   	ret    

00009460 <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
    9460:	57                   	push   %edi
    9461:	83 ec 04             	sub    $0x4,%esp
    9464:	8b 44 24 10          	mov    0x10(%esp),%eax
    9468:	88 04 24             	mov    %al,(%esp)
__asm__(
    946b:	0f b6 04 24          	movzbl (%esp),%eax
    946f:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9473:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    9477:	89 d7                	mov    %edx,%edi
    9479:	fc                   	cld    
    947a:	57                   	push   %edi
    947b:	f3 aa                	rep stos %al,%es:(%edi)
    947d:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
    947e:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    9482:	83 c4 04             	add    $0x4,%esp
    9485:	5f                   	pop    %edi
    9486:	c3                   	ret    

00009487 <sys_ftime>:

// 返回日期和时间（ftime - Fetch time）。
// 以下返回值是-ENOSYS的系统调用函数均表示在本版本内核中还未实现。
int sys_ftime()
{
	return -ENOSYS;
    9487:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    948c:	c3                   	ret    

0000948d <sys_break>:

int sys_break()
{
	return -ENOSYS;
    948d:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9492:	c3                   	ret    

00009493 <sys_ptrace>:

// 用于当前进程对子进程进行高度（debugging）。
int sys_ptrace()
{
	return -ENOSYS;
    9493:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9498:	c3                   	ret    

00009499 <sys_stty>:

// 改变并打印终端行设置。
int sys_stty()
{
	return -ENOSYS;
    9499:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    949e:	c3                   	ret    

0000949f <sys_gtty>:

// 取终端行设置信息。
int sys_gtty()
{
	return -ENOSYS;
    949f:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94a4:	c3                   	ret    

000094a5 <sys_rename>:

// 修改文件名。
int sys_rename()
{
	return -ENOSYS;
    94a5:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94aa:	c3                   	ret    

000094ab <sys_prof>:

int sys_prof()
{
	return -ENOSYS;
    94ab:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94b0:	c3                   	ret    

000094b1 <sys_setregid>:
// 设置当前任务的实际以及/或者有效组ID（gid）。如果任务没有超级用户特权，那么只能互换其实际组ID和有效组ID。
// 如果任务具有超级用户特权，就能任意设置有效的和实际的组ID。保留的gid（saved gid）被设置成与有效gid。实际
// 组ID是指进程当前的gid。
int sys_setregid(int rgid, int egid)
{
	if (rgid > 0) {
    94b1:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    94b6:	7e 3e                	jle    94f6 <sys_setregid+0x45>
		if ((current->gid == rgid) ||
    94b8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    94bd:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    94c4:	0f b7 c0             	movzwl %ax,%eax
    94c7:	39 44 24 04          	cmp    %eax,0x4(%esp)
    94cb:	74 11                	je     94de <sys_setregid+0x2d>
		    suser())
    94cd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    94d2:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
		if ((current->gid == rgid) ||
    94d9:	66 85 c0             	test   %ax,%ax
    94dc:	75 12                	jne    94f0 <sys_setregid+0x3f>
			current->gid = rgid;
    94de:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    94e3:	8b 54 24 04          	mov    0x4(%esp),%edx
    94e7:	66 89 90 d2 02 00 00 	mov    %dx,0x2d2(%eax)
    94ee:	eb 06                	jmp    94f6 <sys_setregid+0x45>
		else
			return(-EPERM);
    94f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    94f5:	c3                   	ret    
	}
	if (egid > 0) {
    94f6:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    94fb:	7e 63                	jle    9560 <sys_setregid+0xaf>
		if ((current->gid == egid) ||
    94fd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9502:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    9509:	0f b7 c0             	movzwl %ax,%eax
    950c:	39 44 24 08          	cmp    %eax,0x8(%esp)
    9510:	74 26                	je     9538 <sys_setregid+0x87>
		    (current->egid == egid) ||
    9512:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9517:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    951e:	0f b7 c0             	movzwl %ax,%eax
		if ((current->gid == egid) ||
    9521:	39 44 24 08          	cmp    %eax,0x8(%esp)
    9525:	74 11                	je     9538 <sys_setregid+0x87>
		    suser()) {
    9527:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    952c:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
		    (current->egid == egid) ||
    9533:	66 85 c0             	test   %ax,%ax
    9536:	75 22                	jne    955a <sys_setregid+0xa9>
			current->egid = egid;
    9538:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    953d:	8b 54 24 08          	mov    0x8(%esp),%edx
    9541:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
			current->sgid = egid;
    9548:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    954d:	8b 54 24 08          	mov    0x8(%esp),%edx
    9551:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%eax)
    9558:	eb 06                	jmp    9560 <sys_setregid+0xaf>
		} else
			return(-EPERM);
    955a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    955f:	c3                   	ret    
	}
	return 0;
    9560:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9565:	c3                   	ret    

00009566 <sys_setgid>:
// 设置进程组号（gid）。如果任务没有超级用户特权，它可以使用setgid()将其有效gid（effective gid）设置为成其保留
// gid（saved git）或其实际git（real gid）。如果任务有超级用户特权，则实际gid、有效gid和保留gid都被设置成参数
// 指定的gid。
int sys_setgid(int gid)
{
	if (suser())
    9566:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    956b:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9572:	66 85 c0             	test   %ax,%ax
    9575:	75 3a                	jne    95b1 <sys_setgid+0x4b>
		current->gid = current->egid = current->sgid = gid;
    9577:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    957d:	8b 44 24 04          	mov    0x4(%esp),%eax
    9581:	66 89 82 d6 02 00 00 	mov    %ax,0x2d6(%edx)
    9588:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    958d:	0f b7 92 d6 02 00 00 	movzwl 0x2d6(%edx),%edx
    9594:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
    959b:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    95a1:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    95a8:	66 89 82 d2 02 00 00 	mov    %ax,0x2d2(%edx)
    95af:	eb 42                	jmp    95f3 <sys_setgid+0x8d>
	else if ((gid == current->gid) || (gid == current->sgid))
    95b1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    95b6:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    95bd:	0f b7 c0             	movzwl %ax,%eax
    95c0:	39 44 24 04          	cmp    %eax,0x4(%esp)
    95c4:	74 15                	je     95db <sys_setgid+0x75>
    95c6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    95cb:	0f b7 80 d6 02 00 00 	movzwl 0x2d6(%eax),%eax
    95d2:	0f b7 c0             	movzwl %ax,%eax
    95d5:	39 44 24 04          	cmp    %eax,0x4(%esp)
    95d9:	75 12                	jne    95ed <sys_setgid+0x87>
		current->egid = gid;
    95db:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    95e0:	8b 54 24 04          	mov    0x4(%esp),%edx
    95e4:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
    95eb:	eb 06                	jmp    95f3 <sys_setgid+0x8d>
	else
		return -EPERM;
    95ed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    95f2:	c3                   	ret    
	return 0;
    95f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
    95f8:	c3                   	ret    

000095f9 <sys_acct>:

// 打开或关闭进程计账功能。
int sys_acct()
{
	return -ENOSYS;
    95f9:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    95fe:	c3                   	ret    

000095ff <sys_phys>:

// 映射任意物理内在到进程的虚拟地址空间。
int sys_phys()
{
	return -ENOSYS;
    95ff:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9604:	c3                   	ret    

00009605 <sys_lock>:

int sys_lock()
{
	return -ENOSYS;
    9605:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    960a:	c3                   	ret    

0000960b <sys_mpx>:

int sys_mpx()
{
	return -ENOSYS;
    960b:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9610:	c3                   	ret    

00009611 <sys_ulimit>:

int sys_ulimit()
{
	return -ENOSYS;
    9611:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9616:	c3                   	ret    

00009617 <sys_time>:

// 返回从1970年1月1日00:00:00 GMT开始计时的时间值（秒）。如果tloc不为null，则时间值也存储在那里。
// 由于参数是一个指针，而其所指位置在用户空间，因此需要使用函数put_fs_long()来访问该值。在进入内核中运行时，段
// 寄存器fs默认地指向当前用户数据空间。因此该函数就可利用fs来访问用户空间中的值。
int sys_time(long * tloc)
{
    9617:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	i = CURRENT_TIME;
    961a:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    961f:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    9625:	01 d0                	add    %edx,%eax
    9627:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    962c:	f7 e2                	mul    %edx
    962e:	c1 ea 05             	shr    $0x5,%edx
    9631:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    9636:	01 d0                	add    %edx,%eax
    9638:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (tloc) {
    963c:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9641:	74 25                	je     9668 <sys_time+0x51>
		verify_area(tloc,4);            				// 验证内存容量是否够（这里是4字节）。
    9643:	83 ec 08             	sub    $0x8,%esp
    9646:	6a 04                	push   $0x4
    9648:	ff 74 24 2c          	pushl  0x2c(%esp)
    964c:	e8 4a ed ff ff       	call   839b <verify_area>
    9651:	83 c4 10             	add    $0x10,%esp
		put_fs_long(i,(unsigned long *)tloc);   		// 放入用户数据段tloc处。
    9654:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9658:	83 ec 08             	sub    $0x8,%esp
    965b:	ff 74 24 28          	pushl  0x28(%esp)
    965f:	50                   	push   %eax
    9660:	e8 ee fd ff ff       	call   9453 <put_fs_long>
    9665:	83 c4 10             	add    $0x10,%esp
	}
	return i;
    9668:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    966c:	83 c4 1c             	add    $0x1c,%esp
    966f:	c3                   	ret    

00009670 <sys_setreuid>:
 * 用setuid()和保存的gid的程序将会与POSIX 100%兼容。
 */
// 设置任务的实际以及/或者有效的用户ID（uid）。如果任务没有超级用户特权，那么只能互换其实际的uid和有效的uid。如果
// 任务具有超级用户特权，就能任意设置有效的和实际的用户ID。保存的uid（saved uid）被设置成与有效uid同值。
int sys_setreuid(int ruid, int euid)
{
    9670:	83 ec 10             	sub    $0x10,%esp
	int old_ruid = current->uid;
    9673:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9678:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    967f:	0f b7 c0             	movzwl %ax,%eax
    9682:	89 44 24 0c          	mov    %eax,0xc(%esp)

	if (ruid > 0) {
    9686:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    968b:	7e 49                	jle    96d6 <sys_setreuid+0x66>
		if ((current->euid == ruid) ||
    968d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9692:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9699:	0f b7 c0             	movzwl %ax,%eax
    969c:	39 44 24 14          	cmp    %eax,0x14(%esp)
    96a0:	74 1b                	je     96bd <sys_setreuid+0x4d>
    96a2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    96a6:	3b 44 24 14          	cmp    0x14(%esp),%eax
    96aa:	74 11                	je     96bd <sys_setreuid+0x4d>
                    (old_ruid == ruid) ||
		    suser())
    96ac:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    96b1:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
                    (old_ruid == ruid) ||
    96b8:	66 85 c0             	test   %ax,%ax
    96bb:	75 12                	jne    96cf <sys_setreuid+0x5f>
			current->uid = ruid;
    96bd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    96c2:	8b 54 24 14          	mov    0x14(%esp),%edx
    96c6:	66 89 90 cc 02 00 00 	mov    %dx,0x2cc(%eax)
    96cd:	eb 07                	jmp    96d6 <sys_setreuid+0x66>
		else
			return(-EPERM);
    96cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    96d4:	eb 75                	jmp    974b <sys_setreuid+0xdb>
	}
	if (euid > 0) {
    96d6:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    96db:	7e 69                	jle    9746 <sys_setreuid+0xd6>
		if ((old_ruid == euid) ||
    96dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    96e1:	3b 44 24 18          	cmp    0x18(%esp),%eax
    96e5:	74 26                	je     970d <sys_setreuid+0x9d>
                    (current->euid == euid) ||
    96e7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    96ec:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    96f3:	0f b7 c0             	movzwl %ax,%eax
		if ((old_ruid == euid) ||
    96f6:	39 44 24 18          	cmp    %eax,0x18(%esp)
    96fa:	74 11                	je     970d <sys_setreuid+0x9d>
		    suser()) {
    96fc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9701:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
                    (current->euid == euid) ||
    9708:	66 85 c0             	test   %ax,%ax
    970b:	75 22                	jne    972f <sys_setreuid+0xbf>
			current->euid = euid;
    970d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9712:	8b 54 24 18          	mov    0x18(%esp),%edx
    9716:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
			current->suid = euid;
    971d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9722:	8b 54 24 18          	mov    0x18(%esp),%edx
    9726:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%eax)
    972d:	eb 17                	jmp    9746 <sys_setreuid+0xd6>
		} else {
			current->uid = old_ruid;
    972f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9734:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9738:	66 89 90 cc 02 00 00 	mov    %dx,0x2cc(%eax)
			return(-EPERM);
    973f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9744:	eb 05                	jmp    974b <sys_setreuid+0xdb>
		}
	}
	return 0;
    9746:	b8 00 00 00 00       	mov    $0x0,%eax
}
    974b:	83 c4 10             	add    $0x10,%esp
    974e:	c3                   	ret    

0000974f <sys_setuid>:
// 设置任务用户ID（uid）。如果任务没有超级用户特权，它可以使用setuid()将其有效的uid（effective uid）设置成其保存
// 的uid（saved uid）或其实际的uid（real uid）。如果用户有超级用户特权，则实际的uid、有效的uid和保存的uid都会被
// 设置成参数指定的uid。
int sys_setuid(int uid)
{
	if (suser())
    974f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9754:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    975b:	66 85 c0             	test   %ax,%ax
    975e:	75 3a                	jne    979a <sys_setuid+0x4b>
		current->uid = current->euid = current->suid = uid;
    9760:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    9766:	8b 44 24 04          	mov    0x4(%esp),%eax
    976a:	66 89 82 d0 02 00 00 	mov    %ax,0x2d0(%edx)
    9771:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9776:	0f b7 92 d0 02 00 00 	movzwl 0x2d0(%edx),%edx
    977d:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
    9784:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    978a:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9791:	66 89 82 cc 02 00 00 	mov    %ax,0x2cc(%edx)
    9798:	eb 42                	jmp    97dc <sys_setuid+0x8d>
	else if ((uid == current->uid) || (uid == current->suid))
    979a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    979f:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    97a6:	0f b7 c0             	movzwl %ax,%eax
    97a9:	39 44 24 04          	cmp    %eax,0x4(%esp)
    97ad:	74 15                	je     97c4 <sys_setuid+0x75>
    97af:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    97b4:	0f b7 80 d0 02 00 00 	movzwl 0x2d0(%eax),%eax
    97bb:	0f b7 c0             	movzwl %ax,%eax
    97be:	39 44 24 04          	cmp    %eax,0x4(%esp)
    97c2:	75 12                	jne    97d6 <sys_setuid+0x87>
		current->euid = uid;
    97c4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    97c9:	8b 54 24 04          	mov    0x4(%esp),%edx
    97cd:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
    97d4:	eb 06                	jmp    97dc <sys_setuid+0x8d>
	else
		return -EPERM;
    97d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    97db:	c3                   	ret    
	return(0);
    97dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
    97e1:	c3                   	ret    

000097e2 <sys_stime>:
// 由于参数是一个指针，而其所指位置在用户空间，因此需要使用函数get_fs_long()来访问该值。在进入内核中运行时，段
// 寄存器fs被默认地指向当前用户数据空间。因此该函数就可利用fs来访问用户空间中的值。函数参数提供的当前时间值减去
// 系统已经运行的时间秒值（jiffies/HZ）即是开机时间秒值。
int sys_stime(long * tptr)
{
	if (!suser())
    97e2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    97e7:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    97ee:	66 85 c0             	test   %ax,%ax
    97f1:	74 06                	je     97f9 <sys_stime+0x17>
		return -EPERM;          					// 如果不是超级用户则出错返回（许可）。
    97f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    97f8:	c3                   	ret    
	startup_time = get_fs_long((unsigned long *)tptr) - jiffies / HZ;
    97f9:	ff 74 24 04          	pushl  0x4(%esp)
    97fd:	e8 05 fc ff ff       	call   9407 <get_fs_long>
    9802:	83 c4 04             	add    $0x4,%esp
    9805:	89 c1                	mov    %eax,%ecx
    9807:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    980c:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9811:	f7 e2                	mul    %edx
    9813:	89 d0                	mov    %edx,%eax
    9815:	c1 e8 05             	shr    $0x5,%eax
    9818:	29 c1                	sub    %eax,%ecx
    981a:	89 c8                	mov    %ecx,%eax
    981c:	a3 04 fb 02 00       	mov    %eax,0x2fb04
	jiffies_offset = 0;
    9821:	c7 05 08 fb 02 00 00 	movl   $0x0,0x2fb08
    9828:	00 00 00 
	return 0;
    982b:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9830:	c3                   	ret    

00009831 <sys_times>:

// 获取当前任务运行时间统计值。
// 在tbuf所指用户数据空间处返回tms结构的任务运行时间统计值。tms结构中包括进程用户运行时间、内核（系统）时间、子进
// 程用户运行时间、子进程系统运行时间。函数返回值是系统运行到当前的嘀嗒数。
int sys_times(struct tms * tbuf)
{
    9831:	83 ec 0c             	sub    $0xc,%esp
	if (tbuf) {
    9834:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    9839:	0f 84 8b 00 00 00    	je     98ca <sys_times+0x99>
		verify_area(tbuf,sizeof *tbuf);
    983f:	83 ec 08             	sub    $0x8,%esp
    9842:	6a 10                	push   $0x10
    9844:	ff 74 24 1c          	pushl  0x1c(%esp)
    9848:	e8 4e eb ff ff       	call   839b <verify_area>
    984d:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->utime,(unsigned long *)&tbuf->tms_utime);
    9850:	8b 44 24 10          	mov    0x10(%esp),%eax
    9854:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    985a:	8b 92 e0 02 00 00    	mov    0x2e0(%edx),%edx
    9860:	83 ec 08             	sub    $0x8,%esp
    9863:	50                   	push   %eax
    9864:	52                   	push   %edx
    9865:	e8 e9 fb ff ff       	call   9453 <put_fs_long>
    986a:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->stime,(unsigned long *)&tbuf->tms_stime);
    986d:	8b 44 24 10          	mov    0x10(%esp),%eax
    9871:	8d 50 04             	lea    0x4(%eax),%edx
    9874:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9879:	8b 80 e4 02 00 00    	mov    0x2e4(%eax),%eax
    987f:	83 ec 08             	sub    $0x8,%esp
    9882:	52                   	push   %edx
    9883:	50                   	push   %eax
    9884:	e8 ca fb ff ff       	call   9453 <put_fs_long>
    9889:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->cutime,(unsigned long *)&tbuf->tms_cutime);
    988c:	8b 44 24 10          	mov    0x10(%esp),%eax
    9890:	8d 50 08             	lea    0x8(%eax),%edx
    9893:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9898:	8b 80 e8 02 00 00    	mov    0x2e8(%eax),%eax
    989e:	83 ec 08             	sub    $0x8,%esp
    98a1:	52                   	push   %edx
    98a2:	50                   	push   %eax
    98a3:	e8 ab fb ff ff       	call   9453 <put_fs_long>
    98a8:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->cstime,(unsigned long *)&tbuf->tms_cstime);
    98ab:	8b 44 24 10          	mov    0x10(%esp),%eax
    98af:	8d 50 0c             	lea    0xc(%eax),%edx
    98b2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    98b7:	8b 80 ec 02 00 00    	mov    0x2ec(%eax),%eax
    98bd:	83 ec 08             	sub    $0x8,%esp
    98c0:	52                   	push   %edx
    98c1:	50                   	push   %eax
    98c2:	e8 8c fb ff ff       	call   9453 <put_fs_long>
    98c7:	83 c4 10             	add    $0x10,%esp
	}
	return jiffies;
    98ca:	a1 00 fb 02 00       	mov    0x2fb00,%eax
}
    98cf:	83 c4 0c             	add    $0xc,%esp
    98d2:	c3                   	ret    

000098d3 <sys_brk>:
// end_data_seg指定的值。该值必须大于代码结尾并且要小于堆栈结尾16KB。返回值是数据段的新结尾值（如果返回值与要求不
// 同，则表明有错误发生)。该函数并不被用户直接调用，而由libc库函数进行包装，并且返回值也不一样。
int sys_brk(unsigned long end_data_seg)
{
	// 如果参数值大于代码结尾，并且小于（堆栈 - 16KB），则设置新数据段结尾值。
	if (end_data_seg >= current->end_code &&
    98d3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    98d8:	8b 80 1c 02 00 00    	mov    0x21c(%eax),%eax
    98de:	39 44 24 04          	cmp    %eax,0x4(%esp)
    98e2:	72 25                	jb     9909 <sys_brk+0x36>
	    end_data_seg < current->start_stack - 16384)
    98e4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    98e9:	8b 80 28 02 00 00    	mov    0x228(%eax),%eax
    98ef:	2d 00 40 00 00       	sub    $0x4000,%eax
	if (end_data_seg >= current->end_code &&
    98f4:	39 44 24 04          	cmp    %eax,0x4(%esp)
    98f8:	73 0f                	jae    9909 <sys_brk+0x36>
		current->brk = end_data_seg;
    98fa:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    98ff:	8b 54 24 04          	mov    0x4(%esp),%edx
    9903:	89 90 24 02 00 00    	mov    %edx,0x224(%eax)
	return current->brk;            			// 返回进程当前的数据段结尾值。
    9909:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    990e:	8b 80 24 02 00 00    	mov    0x224(%eax),%eax
}
    9914:	c3                   	ret    

00009915 <sys_setpgid>:
// 设置指定进程pid的进程组号为pgid。
// 参数pid是指定进程的进程号。如果它为0,则让pid等于当前进程的进程号。参数pgid是指定的进程组号。如果它为0,则让它等于
// 进程组号。如果该函数用于将进程从一个进程组移到另一个进程组，则这两个进程组必须属于同一个会话（session）。在这种情
// 况下，参数pgid指定了要加入的现在进程组ID，此时该组的会话ID必须与将要加入进程的相同。
int sys_setpgid(int pid, int pgid)
{
    9915:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 如果参数pid为0,则pid取值为当前进程的进程号pid。如果参数pgid为0,则pgid也取值为当前进程的pid。[??这里与POSIX标
	// 准的描述有出入]。若pgid小于0,则返回无效错误码。
	if (!pid)
    9918:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    991d:	75 0f                	jne    992e <sys_setpgid+0x19>
		pid = current->pid;
    991f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9924:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    992a:	89 44 24 20          	mov    %eax,0x20(%esp)
	if (!pgid)
    992e:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    9933:	75 0f                	jne    9944 <sys_setpgid+0x2f>
		pgid = current->pid;
    9935:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    993a:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    9940:	89 44 24 24          	mov    %eax,0x24(%esp)
	if (pgid < 0)
    9944:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    9949:	79 0a                	jns    9955 <sys_setpgid+0x40>
		return -EINVAL;
    994b:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9950:	e9 0e 01 00 00       	jmp    9a63 <sys_setpgid+0x14e>
	// 扫描任务数组，查找指定进程号pid的任务。如果找到了进程号是pid的进程，并且该进程的父进程就是当前进程或者该进程就是当
	// 前进程，那么若该任务已经是会话首领，则出错返回。若该任务的会话号（session）与当前进程的不同，或者指定的进程组号pgid
	// 与pid不同并且pgid进程组所属会话号与当前进程所属会话号不同，则也出错返回。否则把查找到的进程的pgrp设置为pgid，并
	// 返回0。若没有找到指定pid的进程，则返回进程不存在出错码。
	for (i = 0 ; i < NR_TASKS ; i++)
    9955:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    995c:	00 
    995d:	e9 f1 00 00 00       	jmp    9a53 <sys_setpgid+0x13e>
		if (task[i] && (task[i]->pid == pid) && ((task[i]->p_pptr == current) || (task[i] == current))) {
    9962:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9966:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    996d:	85 c0                	test   %eax,%eax
    996f:	0f 84 d9 00 00 00    	je     9a4e <sys_setpgid+0x139>
    9975:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9979:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    9980:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    9986:	39 44 24 20          	cmp    %eax,0x20(%esp)
    998a:	0f 85 be 00 00 00    	jne    9a4e <sys_setpgid+0x139>
    9990:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9994:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    999b:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    99a1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    99a6:	39 c2                	cmp    %eax,%edx
    99a8:	74 18                	je     99c2 <sys_setpgid+0xad>
    99aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    99ae:	8b 14 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%edx
    99b5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    99ba:	39 c2                	cmp    %eax,%edx
    99bc:	0f 85 8c 00 00 00    	jne    9a4e <sys_setpgid+0x139>
			if (task[i]->leader)
    99c2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    99c6:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    99cd:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
    99d3:	85 c0                	test   %eax,%eax
    99d5:	74 0a                	je     99e1 <sys_setpgid+0xcc>
				return -EPERM;
    99d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    99dc:	e9 82 00 00 00       	jmp    9a63 <sys_setpgid+0x14e>
			if ((task[i]->session != current->session) ||
    99e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    99e5:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    99ec:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    99f2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    99f7:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
    99fd:	39 c2                	cmp    %eax,%edx
    99ff:	75 2a                	jne    9a2b <sys_setpgid+0x116>
    9a01:	8b 44 24 24          	mov    0x24(%esp),%eax
    9a05:	3b 44 24 20          	cmp    0x20(%esp),%eax
    9a09:	74 27                	je     9a32 <sys_setpgid+0x11d>
			    ((pgid != pid) &&
			     (session_of_pgrp(pgid) != current->session)))
    9a0b:	83 ec 0c             	sub    $0xc,%esp
    9a0e:	ff 74 24 30          	pushl  0x30(%esp)
    9a12:	e8 4c 10 00 00       	call   aa63 <session_of_pgrp>
    9a17:	83 c4 10             	add    $0x10,%esp
    9a1a:	89 c2                	mov    %eax,%edx
    9a1c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9a21:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
			    ((pgid != pid) &&
    9a27:	39 c2                	cmp    %eax,%edx
    9a29:	74 07                	je     9a32 <sys_setpgid+0x11d>
				return -EPERM;
    9a2b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9a30:	eb 31                	jmp    9a63 <sys_setpgid+0x14e>
			task[i]->pgrp = pgid;
    9a32:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9a36:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    9a3d:	8b 54 24 24          	mov    0x24(%esp),%edx
    9a41:	89 90 30 02 00 00    	mov    %edx,0x230(%eax)
			return 0;
    9a47:	b8 00 00 00 00       	mov    $0x0,%eax
    9a4c:	eb 15                	jmp    9a63 <sys_setpgid+0x14e>
	for (i = 0 ; i < NR_TASKS ; i++)
    9a4e:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9a53:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    9a58:	0f 8e 04 ff ff ff    	jle    9962 <sys_setpgid+0x4d>
		}
	return -ESRCH;
    9a5e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
    9a63:	83 c4 1c             	add    $0x1c,%esp
    9a66:	c3                   	ret    

00009a67 <sys_getpgrp>:

// 返回当前进程的进程组号。与getpgid(0)等同。
int sys_getpgrp(void)
{
	return current->pgrp;
    9a67:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9a6c:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
}
    9a72:	c3                   	ret    

00009a73 <sys_setsid>:
// 创建一个会话（session）（即设置其leader = 1），并且设置其会话号=其组号=其进程号。
// 如果当前进程已是会话首领并且不是超级用户，则出错返回。否则设置当前进程为新会话首领（leader = 1），并且设置当前进程会话
// 号session和组号pgrp都等于进程号pid，而且设置当前进程没有控制终端。最后系统调用返回会话号。
int sys_setsid(void)
{
	if (current->leader && !suser())
    9a73:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9a78:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
    9a7e:	85 c0                	test   %eax,%eax
    9a80:	74 17                	je     9a99 <sys_setsid+0x26>
    9a82:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9a87:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9a8e:	66 85 c0             	test   %ax,%ax
    9a91:	74 06                	je     9a99 <sys_setsid+0x26>
		return -EPERM;
    9a93:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9a98:	c3                   	ret    
	current->leader = 1;
    9a99:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9a9e:	c7 80 38 02 00 00 01 	movl   $0x1,0x238(%eax)
    9aa5:	00 00 00 
	current->session = current->pgrp = current->pid;
    9aa8:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    9aae:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9ab3:	8b 92 2c 02 00 00    	mov    0x22c(%edx),%edx
    9ab9:	89 90 30 02 00 00    	mov    %edx,0x230(%eax)
    9abf:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    9ac5:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    9acb:	89 82 34 02 00 00    	mov    %eax,0x234(%edx)
	current->tty = -1;      				// 表示当前进程没有控制终端。
    9ad1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9ad6:	c7 80 2c 03 00 00 ff 	movl   $0xffffffff,0x32c(%eax)
    9add:	ff ff ff 
	return current->pgrp;
    9ae0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9ae5:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
}
    9aeb:	c3                   	ret    

00009aec <sys_getgroups>:
// 取当前进程其他辅助用户组号。
// 任务数据结构中groups[]数组保存着进程同时所属的多个用户组号。该数组共NGROUPS个项，若某项值是NOGROUP（即为-1），则
// 表示从该项开始以后所有项都空闲。否则数组项中保存的是用户组号。
// 参数gidsetsize是获取的用户组号个数；grouplist是存储这些用户组号的用户空间缓存。
int sys_getgroups(int gidsetsize, gid_t *grouplist)
{
    9aec:	83 ec 1c             	sub    $0x1c,%esp

	// 首先验证grouplist指针所指的用户缓存空间是否足够，然后从当前进程结构的groups[]数组中逐个取得用户组号并复制到用户缓存
	// 中。在复制过程中，如果groups[]中的项数大于给定的参数gitsetsize所指定的个数，则表示用户给出的缓存太小，不能容下当前
	// 进程所有组号，因此此次取组号操作会出错返回。若复制过程正常，则函数最后会返回复制的用户组号个数。（gidsetsize - gid
	// set size，用户组号集大小）。
	if (gidsetsize)
    9aef:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9af4:	74 16                	je     9b0c <sys_getgroups+0x20>
		verify_area(grouplist, sizeof(gid_t) * gidsetsize);
    9af6:	8b 44 24 20          	mov    0x20(%esp),%eax
    9afa:	01 c0                	add    %eax,%eax
    9afc:	83 ec 08             	sub    $0x8,%esp
    9aff:	50                   	push   %eax
    9b00:	ff 74 24 30          	pushl  0x30(%esp)
    9b04:	e8 92 e8 ff ff       	call   839b <verify_area>
    9b09:	83 c4 10             	add    $0x10,%esp

	for (i = 0; (i < NGROUPS) && (current->groups[i] != NOGROUP); i++, grouplist++) {
    9b0c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9b13:	00 
    9b14:	eb 46                	jmp    9b5c <sys_getgroups+0x70>
		if (gidsetsize) {
    9b16:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9b1b:	74 35                	je     9b52 <sys_getgroups+0x66>
			if (i >= gidsetsize)
    9b1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9b21:	3b 44 24 20          	cmp    0x20(%esp),%eax
    9b25:	7c 07                	jl     9b2e <sys_getgroups+0x42>
				return -EINVAL;
    9b27:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9b2c:	eb 51                	jmp    9b7f <sys_getgroups+0x93>
			put_fs_word(current->groups[i], (short *) grouplist);
    9b2e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9b33:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9b37:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9b3d:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
    9b41:	98                   	cwtl   
    9b42:	83 ec 08             	sub    $0x8,%esp
    9b45:	ff 74 24 2c          	pushl  0x2c(%esp)
    9b49:	50                   	push   %eax
    9b4a:	e8 e8 f8 ff ff       	call   9437 <put_fs_word>
    9b4f:	83 c4 10             	add    $0x10,%esp
	for (i = 0; (i < NGROUPS) && (current->groups[i] != NOGROUP); i++, grouplist++) {
    9b52:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9b57:	83 44 24 24 02       	addl   $0x2,0x24(%esp)
    9b5c:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
    9b61:	7f 18                	jg     9b7b <sys_getgroups+0x8f>
    9b63:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9b68:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9b6c:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9b72:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
    9b76:	83 f8 ff             	cmp    $0xffffffff,%eax
    9b79:	75 9b                	jne    9b16 <sys_getgroups+0x2a>
		}
	}
	return(i);              				// 返回实际含有的用户组号个数。
    9b7b:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    9b7f:	83 c4 1c             	add    $0x1c,%esp
    9b82:	c3                   	ret    

00009b83 <sys_setgroups>:

// 设置当前进程同时所属的其他辅助用户组号。
// 参数gidsetsize是将设置的用户组号个数；grouplist是含有用户组号的用户空间缓存。
int sys_setgroups(int gidsetsize, gid_t *grouplist)
{
    9b83:	83 ec 10             	sub    $0x10,%esp
	int	i;

	// 首先查权限和参数的有效性。只有超级用户可以修改或设置当前进程的辅助用户组号，而且设置的项数不能超过进程的groups[NGROUPS]
	// 数组的容量。然后从用户缓冲中逐个复制用户组号，共gidsetsize个。如果复制的个数没有填满group[]，则在随后一项上填上值为-1
	// 的项（NOGROUP）。最后函数返回0。
	if (!suser())
    9b86:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9b8b:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9b92:	66 85 c0             	test   %ax,%ax
    9b95:	74 07                	je     9b9e <sys_setgroups+0x1b>
		return -EPERM;
    9b97:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9b9c:	eb 73                	jmp    9c11 <sys_setgroups+0x8e>
	if (gidsetsize > NGROUPS)
    9b9e:	83 7c 24 14 20       	cmpl   $0x20,0x14(%esp)
    9ba3:	7e 07                	jle    9bac <sys_setgroups+0x29>
		return -EINVAL;
    9ba5:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9baa:	eb 65                	jmp    9c11 <sys_setgroups+0x8e>
	for (i = 0; i < gidsetsize; i++, grouplist++) {
    9bac:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9bb3:	00 
    9bb4:	eb 2e                	jmp    9be4 <sys_setgroups+0x61>
		current->groups[i] = get_fs_word((unsigned short *) grouplist);
    9bb6:	ff 74 24 18          	pushl  0x18(%esp)
    9bba:	e8 2f f8 ff ff       	call   93ee <get_fs_word>
    9bbf:	83 c4 04             	add    $0x4,%esp
    9bc2:	89 c2                	mov    %eax,%edx
    9bc4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9bc9:	0f b7 d2             	movzwl %dx,%edx
    9bcc:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    9bd0:	81 c1 8c 00 00 00    	add    $0x8c,%ecx
    9bd6:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
	for (i = 0; i < gidsetsize; i++, grouplist++) {
    9bda:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9bdf:	83 44 24 18 02       	addl   $0x2,0x18(%esp)
    9be4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9be8:	3b 44 24 14          	cmp    0x14(%esp),%eax
    9bec:	7c c8                	jl     9bb6 <sys_setgroups+0x33>
	}
	if (i < NGROUPS)
    9bee:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
    9bf3:	7f 17                	jg     9c0c <sys_setgroups+0x89>
		current->groups[i] = NOGROUP;
    9bf5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9bfa:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9bfe:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9c04:	c7 44 90 0c ff ff ff 	movl   $0xffffffff,0xc(%eax,%edx,4)
    9c0b:	ff 
	return 0;
    9c0c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9c11:	83 c4 10             	add    $0x10,%esp
    9c14:	c3                   	ret    

00009c15 <in_group_p>:

// 检查当前进程是否在指定的用户组grp中.是则返回1,否则返回0.
int in_group_p(gid_t grp)
{
    9c15:	83 ec 14             	sub    $0x14,%esp
    9c18:	8b 44 24 18          	mov    0x18(%esp),%eax
    9c1c:	66 89 04 24          	mov    %ax,(%esp)
	int	i;

	// 如果当前进程的有效组号就是grp,则表示进程属于grp进程组.函数返回1.否则就在进程的辅助用户组数组中扫描是否有grp进程组号.若
	// 有则函数也返回1.若扫描到值为NOGROUP的项,表示已扫描完全部有效项没有发现匹配的组号,因此函数返回0.
	if (grp == current->egid)
    9c20:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9c25:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    9c2c:	66 39 04 24          	cmp    %ax,(%esp)
    9c30:	75 07                	jne    9c39 <in_group_p+0x24>
		return 1;
    9c32:	b8 01 00 00 00       	mov    $0x1,%eax
    9c37:	eb 58                	jmp    9c91 <in_group_p+0x7c>

	for (i = 0; i < NGROUPS; i++) {
    9c39:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
    9c40:	00 
    9c41:	eb 3f                	jmp    9c82 <in_group_p+0x6d>
		if (current->groups[i] == NOGROUP)
    9c43:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9c48:	8b 54 24 10          	mov    0x10(%esp),%edx
    9c4c:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9c52:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
    9c56:	83 f8 ff             	cmp    $0xffffffff,%eax
    9c59:	74 30                	je     9c8b <in_group_p+0x76>
			break;
		if (current->groups[i] == grp)
    9c5b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9c60:	8b 54 24 10          	mov    0x10(%esp),%edx
    9c64:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9c6a:	8b 54 90 0c          	mov    0xc(%eax,%edx,4),%edx
    9c6e:	0f b7 04 24          	movzwl (%esp),%eax
    9c72:	39 c2                	cmp    %eax,%edx
    9c74:	75 07                	jne    9c7d <in_group_p+0x68>
			return 1;
    9c76:	b8 01 00 00 00       	mov    $0x1,%eax
    9c7b:	eb 14                	jmp    9c91 <in_group_p+0x7c>
	for (i = 0; i < NGROUPS; i++) {
    9c7d:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
    9c82:	83 7c 24 10 1f       	cmpl   $0x1f,0x10(%esp)
    9c87:	7e ba                	jle    9c43 <in_group_p+0x2e>
    9c89:	eb 01                	jmp    9c8c <in_group_p+0x77>
			break;
    9c8b:	90                   	nop
	}
	return 0;
    9c8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9c91:	83 c4 14             	add    $0x14,%esp
    9c94:	c3                   	ret    

00009c95 <sys_uname>:
	UTS_SYSNAME, UTS_NODENAME, UTS_RELEASE, UTS_VERSION, UTS_MACHINE
};

// 获取系统名称等信息。
int sys_uname(struct utsname * name)
{
    9c95:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	if (!name) return -ERROR;
    9c98:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9c9d:	75 07                	jne    9ca6 <sys_uname+0x11>
    9c9f:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
    9ca4:	eb 54                	jmp    9cfa <sys_uname+0x65>
	verify_area(name,sizeof *name);
    9ca6:	83 ec 08             	sub    $0x8,%esp
    9ca9:	6a 2d                	push   $0x2d
    9cab:	ff 74 24 2c          	pushl  0x2c(%esp)
    9caf:	e8 e7 e6 ff ff       	call   839b <verify_area>
    9cb4:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < sizeof *name; i++)
    9cb7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9cbe:	00 
    9cbf:	eb 2b                	jmp    9cec <sys_uname+0x57>
		put_fs_byte(((char *) &thisname)[i], i + (char *) name);
    9cc1:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9cc5:	8b 44 24 20          	mov    0x20(%esp),%eax
    9cc9:	01 c2                	add    %eax,%edx
    9ccb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9ccf:	05 e0 f2 02 00       	add    $0x2f2e0,%eax
    9cd4:	0f b6 00             	movzbl (%eax),%eax
    9cd7:	0f be c0             	movsbl %al,%eax
    9cda:	83 ec 08             	sub    $0x8,%esp
    9cdd:	52                   	push   %edx
    9cde:	50                   	push   %eax
    9cdf:	e8 39 f7 ff ff       	call   941d <put_fs_byte>
    9ce4:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < sizeof *name; i++)
    9ce7:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9cec:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9cf0:	83 f8 2c             	cmp    $0x2c,%eax
    9cf3:	76 cc                	jbe    9cc1 <sys_uname+0x2c>
	return 0;
    9cf5:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9cfa:	83 c4 1c             	add    $0x1c,%esp
    9cfd:	c3                   	ret    

00009cfe <sys_sethostname>:
 * 通过调用uname()只能实现sethostname和gethostname。
 */
// 设置系统主机名（系统的网络节点名）。
// 参数name指针指向用户数据区中含有主机名字符串的缓冲区；len是主机名字符串长度。
int sys_sethostname(char *name, int len)
{
    9cfe:	83 ec 10             	sub    $0x10,%esp
	int	i;

	// 系统主机名只能由超级用户设置或修改，并且主机名长度不能超过最大长度MAXHOSTNAMELEN。
	if (!suser())
    9d01:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9d06:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9d0d:	66 85 c0             	test   %ax,%ax
    9d10:	74 0a                	je     9d1c <sys_sethostname+0x1e>
		return -EPERM;
    9d12:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9d17:	e9 85 00 00 00       	jmp    9da1 <sys_sethostname+0xa3>
	if (len > MAXHOSTNAMELEN)
    9d1c:	83 7c 24 18 08       	cmpl   $0x8,0x18(%esp)
    9d21:	7e 07                	jle    9d2a <sys_sethostname+0x2c>
		return -EINVAL;
    9d23:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9d28:	eb 77                	jmp    9da1 <sys_sethostname+0xa3>
	for (i = 0; i < len; i++) {
    9d2a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9d31:	00 
    9d32:	eb 35                	jmp    9d69 <sys_sethostname+0x6b>
		if ((thisname.nodename[i] = get_fs_byte(name + i)) == 0)
    9d34:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9d38:	8b 44 24 14          	mov    0x14(%esp),%eax
    9d3c:	01 d0                	add    %edx,%eax
    9d3e:	50                   	push   %eax
    9d3f:	e8 9c f6 ff ff       	call   93e0 <get_fs_byte>
    9d44:	83 c4 04             	add    $0x4,%esp
    9d47:	89 c2                	mov    %eax,%edx
    9d49:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d4d:	05 e9 f2 02 00       	add    $0x2f2e9,%eax
    9d52:	88 10                	mov    %dl,(%eax)
    9d54:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d58:	05 e9 f2 02 00       	add    $0x2f2e9,%eax
    9d5d:	0f b6 00             	movzbl (%eax),%eax
    9d60:	84 c0                	test   %al,%al
    9d62:	74 11                	je     9d75 <sys_sethostname+0x77>
	for (i = 0; i < len; i++) {
    9d64:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9d69:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d6d:	3b 44 24 18          	cmp    0x18(%esp),%eax
    9d71:	7c c1                	jl     9d34 <sys_sethostname+0x36>
    9d73:	eb 01                	jmp    9d76 <sys_sethostname+0x78>
			break;
    9d75:	90                   	nop
	}
	// 在复制完毕后，如果用户提供的字符串没有包含NULL字符，那么若复制的主机名长度还没有超过MAXHOSTNAMELEN，则在主机名字
	// 符串后添加一个NULL。若已经填满MAXHOSTNAMELEN个字符，则把最后一个字符改成NULL字符。即thisname.nodename[min(
	// i,MAXHOSTNAMELEN)] = 0。
	if (thisname.nodename[i]) {
    9d76:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d7a:	05 e9 f2 02 00       	add    $0x2f2e9,%eax
    9d7f:	0f b6 00             	movzbl (%eax),%eax
    9d82:	84 c0                	test   %al,%al
    9d84:	74 16                	je     9d9c <sys_sethostname+0x9e>
		thisname.nodename[i > MAXHOSTNAMELEN ? MAXHOSTNAMELEN : i] = 0;
    9d86:	b8 08 00 00 00       	mov    $0x8,%eax
    9d8b:	83 7c 24 0c 08       	cmpl   $0x8,0xc(%esp)
    9d90:	0f 4e 44 24 0c       	cmovle 0xc(%esp),%eax
    9d95:	c6 80 e9 f2 02 00 00 	movb   $0x0,0x2f2e9(%eax)
	}
	return 0;
    9d9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9da1:	83 c4 10             	add    $0x10,%esp
    9da4:	c3                   	ret    

00009da5 <sys_getrlimit>:
// 界限（hard limit，即硬限制）。rlim[]数组的每一项对应系统对当前进程一种资源的界限信息。Linux 0.12系统共对6种资源
// 规定了界限，即RLIM_NLIMITS=6。请参考头文件include/sys/resource.h说明。
// 参数resource指定我们咨询的资源名称，实际上它是任务结构中rlim[]数组的索引项值。
// 参数rlim是指向rlimit结构的用户缓冲区指针，用于存放取得的资源界限信息。
int sys_getrlimit(int resource, struct rlimit *rlim)
{
    9da5:	83 ec 0c             	sub    $0xc,%esp
	// 所咨询的资源resource实际上是进程任务结构中rlim[]数组的索引项值。该索引值当然不能大于数组的最大项数RLIM_NLIMITS。
	// 在验证过rlim指针所指用户缓冲足够以后，这里就把参数指定的资源resource结构信息复制到用户缓冲区中，并返回0。
	if (resource >= RLIM_NLIMITS)
    9da8:	83 7c 24 10 05       	cmpl   $0x5,0x10(%esp)
    9dad:	7e 07                	jle    9db6 <sys_getrlimit+0x11>
		return -EINVAL;
    9daf:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9db4:	eb 5a                	jmp    9e10 <sys_getrlimit+0x6b>
	verify_area(rlim, sizeof *rlim);
    9db6:	83 ec 08             	sub    $0x8,%esp
    9db9:	6a 08                	push   $0x8
    9dbb:	ff 74 24 20          	pushl  0x20(%esp)
    9dbf:	e8 d7 e5 ff ff       	call   839b <verify_area>
    9dc4:	83 c4 10             	add    $0x10,%esp
	put_fs_long(current->rlim[resource].rlim_cur,           // 当前（软）限制值。
    9dc7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9dcc:	8b 54 24 10          	mov    0x10(%esp),%edx
    9dd0:	83 c2 5e             	add    $0x5e,%edx
    9dd3:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
    9dd7:	83 ec 08             	sub    $0x8,%esp
    9dda:	ff 74 24 1c          	pushl  0x1c(%esp)
    9dde:	50                   	push   %eax
    9ddf:	e8 6f f6 ff ff       	call   9453 <put_fs_long>
    9de4:	83 c4 10             	add    $0x10,%esp
		    (unsigned long *) rlim);
	put_fs_long(current->rlim[resource].rlim_max,           // 系统（硬）限制值。
    9de7:	8b 44 24 14          	mov    0x14(%esp),%eax
    9deb:	8d 50 04             	lea    0x4(%eax),%edx
    9dee:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9df3:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    9df7:	83 c1 5e             	add    $0x5e,%ecx
    9dfa:	8b 44 c8 08          	mov    0x8(%eax,%ecx,8),%eax
    9dfe:	83 ec 08             	sub    $0x8,%esp
    9e01:	52                   	push   %edx
    9e02:	50                   	push   %eax
    9e03:	e8 4b f6 ff ff       	call   9453 <put_fs_long>
    9e08:	83 c4 10             	add    $0x10,%esp
		    ((unsigned long *) rlim) + 1);
	return 0;
    9e0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9e10:	83 c4 0c             	add    $0xc,%esp
    9e13:	c3                   	ret    

00009e14 <sys_setrlimit>:

// 设置当前进程指定资源的界限值。
// 参数resource指定我们设置界限的资源名称，实际上它是任务结构中rlim[]数组的索引项值。
// 参数rlim是指向rlimit结构的用户缓冲区指针，用于内核读取新的资源界限信息。
int sys_setrlimit(int resource, struct rlimit *rlim)
{
    9e14:	83 ec 10             	sub    $0x10,%esp

	// 首先判断参数resource（任务结构rlim[]项索引值）有效性。然后先让rlimit结构指针old指向进程任务结构中指定资源的当前
	// rlimit结构信息。接着把用户提供的资源界限信息复制到临时rlimit结构new中。此时如果判断出new结构中的软界限值或硬界限
	// 值大于进程该资源原硬界限值，并且当前不是超级用户的话，就返回许可出错。否则表示new中信息合理或者进程是超级用户进程，
	// 则修改原进程指定资源信息等于new结构中的信息，并成功返回0。
	if (resource >= RLIM_NLIMITS)
    9e17:	83 7c 24 14 05       	cmpl   $0x5,0x14(%esp)
    9e1c:	7e 0a                	jle    9e28 <sys_setrlimit+0x14>
		return -EINVAL;
    9e1e:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9e23:	e9 88 00 00 00       	jmp    9eb0 <sys_setrlimit+0x9c>
	old = current->rlim + resource;
    9e28:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9e2d:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
    9e33:	8b 44 24 14          	mov    0x14(%esp),%eax
    9e37:	c1 e0 03             	shl    $0x3,%eax
    9e3a:	01 d0                	add    %edx,%eax
    9e3c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	new.rlim_cur = get_fs_long((unsigned long *) rlim);
    9e40:	ff 74 24 18          	pushl  0x18(%esp)
    9e44:	e8 be f5 ff ff       	call   9407 <get_fs_long>
    9e49:	83 c4 04             	add    $0x4,%esp
    9e4c:	89 44 24 04          	mov    %eax,0x4(%esp)
	new.rlim_max = get_fs_long(((unsigned long *) rlim) + 1);
    9e50:	8b 44 24 18          	mov    0x18(%esp),%eax
    9e54:	83 c0 04             	add    $0x4,%eax
    9e57:	50                   	push   %eax
    9e58:	e8 aa f5 ff ff       	call   9407 <get_fs_long>
    9e5d:	83 c4 04             	add    $0x4,%esp
    9e60:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (((new.rlim_cur > old->rlim_max) || (new.rlim_max > old->rlim_max)) && !suser())
    9e64:	8b 54 24 04          	mov    0x4(%esp),%edx
    9e68:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9e6c:	8b 40 04             	mov    0x4(%eax),%eax
    9e6f:	39 c2                	cmp    %eax,%edx
    9e71:	7f 0f                	jg     9e82 <sys_setrlimit+0x6e>
    9e73:	8b 54 24 08          	mov    0x8(%esp),%edx
    9e77:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9e7b:	8b 40 04             	mov    0x4(%eax),%eax
    9e7e:	39 c2                	cmp    %eax,%edx
    9e80:	7e 18                	jle    9e9a <sys_setrlimit+0x86>
    9e82:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9e87:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9e8e:	66 85 c0             	test   %ax,%ax
    9e91:	74 07                	je     9e9a <sys_setrlimit+0x86>
		return -EPERM;
    9e93:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9e98:	eb 16                	jmp    9eb0 <sys_setrlimit+0x9c>
	*old = new;
    9e9a:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    9e9e:	8b 44 24 04          	mov    0x4(%esp),%eax
    9ea2:	8b 54 24 08          	mov    0x8(%esp),%edx
    9ea6:	89 01                	mov    %eax,(%ecx)
    9ea8:	89 51 04             	mov    %edx,0x4(%ecx)
	return 0;
    9eab:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9eb0:	83 c4 10             	add    $0x10,%esp
    9eb3:	c3                   	ret    

00009eb4 <sys_getrusage>:
// 获取指定进程的资源利用信息。
// 本系统调用提供当前进程或其已终止的和等待着的子进程资源使用情况。如果参数who等于RUSAGE_SELF，则返回当前进程的资源利用
// 信息。如果指定进程who是RUSAGE_CHILDREN，则返回当前进程的已终止和等待着的子进程资源利用信息。符号常数RUSAGE_SELF和
// RUSAGE_CHILDREN以及rusage结构都定义在include/sys/resource.h文件中。
int sys_getrusage(int who, struct rusage *ru)
{
    9eb4:	83 ec 6c             	sub    $0x6c,%esp
	struct rusage r;
	unsigned long	*lp, *lpend, *dest;

	// 首先判断参数指定进程的有效性。如果who即不是RUSAGE_SELF（指定当前进程），也不是RUSAGE_CHILDREN（指定子进程），则以
	// 无效参数码返回。否则在验证了指针ru指定的用户缓冲区域后，把临时rusage结构区域r清零。
	if (who != RUSAGE_SELF && who != RUSAGE_CHILDREN)
    9eb7:	83 7c 24 70 00       	cmpl   $0x0,0x70(%esp)
    9ebc:	74 11                	je     9ecf <sys_getrusage+0x1b>
    9ebe:	83 7c 24 70 ff       	cmpl   $0xffffffff,0x70(%esp)
    9ec3:	74 0a                	je     9ecf <sys_getrusage+0x1b>
		return -EINVAL;
    9ec5:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9eca:	e9 d8 01 00 00       	jmp    a0a7 <sys_getrusage+0x1f3>
	verify_area(ru, sizeof *ru);
    9ecf:	83 ec 08             	sub    $0x8,%esp
    9ed2:	6a 48                	push   $0x48
    9ed4:	ff b4 24 80 00 00 00 	pushl  0x80(%esp)
    9edb:	e8 bb e4 ff ff       	call   839b <verify_area>
    9ee0:	83 c4 10             	add    $0x10,%esp
	memset((char *) &r, 0, sizeof(r));
    9ee3:	83 ec 04             	sub    $0x4,%esp
    9ee6:	6a 48                	push   $0x48
    9ee8:	6a 00                	push   $0x0
    9eea:	8d 44 24 18          	lea    0x18(%esp),%eax
    9eee:	50                   	push   %eax
    9eef:	e8 6c f5 ff ff       	call   9460 <memset>
    9ef4:	83 c4 10             	add    $0x10,%esp
	// 若参数who是RUSAGE_SELF，则复制当前进程资源利用信息到r结构中。若指定进程who是RUSAGE_CHILDREN，则复制当前进程的已终止
	// 和等待着的子进程资源利用信息到临时rusage结构r中。宏CT_TO_SECS和CT_TO_USECS用于把系统当前嘀嗒数转换成用秒值加微秒值
	// 表示。它们定义在include/linux/sched.h文件中。jiffies_offset是系统嘀嗒数误差调整数。
	if (who == RUSAGE_SELF) {
    9ef7:	83 7c 24 70 00       	cmpl   $0x0,0x70(%esp)
    9efc:	0f 85 af 00 00 00    	jne    9fb1 <sys_getrusage+0xfd>
		r.ru_utime.tv_sec = CT_TO_SECS(current->utime);
    9f02:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9f07:	8b 88 e0 02 00 00    	mov    0x2e0(%eax),%ecx
    9f0d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f12:	89 c8                	mov    %ecx,%eax
    9f14:	f7 ea                	imul   %edx
    9f16:	c1 fa 05             	sar    $0x5,%edx
    9f19:	89 c8                	mov    %ecx,%eax
    9f1b:	c1 f8 1f             	sar    $0x1f,%eax
    9f1e:	29 c2                	sub    %eax,%edx
    9f20:	89 d0                	mov    %edx,%eax
    9f22:	89 44 24 0c          	mov    %eax,0xc(%esp)
		r.ru_utime.tv_usec = CT_TO_USECS(current->utime);
    9f26:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9f2b:	8b 88 e0 02 00 00    	mov    0x2e0(%eax),%ecx
    9f31:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f36:	89 c8                	mov    %ecx,%eax
    9f38:	f7 ea                	imul   %edx
    9f3a:	c1 fa 05             	sar    $0x5,%edx
    9f3d:	89 c8                	mov    %ecx,%eax
    9f3f:	c1 f8 1f             	sar    $0x1f,%eax
    9f42:	29 c2                	sub    %eax,%edx
    9f44:	89 d0                	mov    %edx,%eax
    9f46:	6b c0 64             	imul   $0x64,%eax,%eax
    9f49:	29 c1                	sub    %eax,%ecx
    9f4b:	89 c8                	mov    %ecx,%eax
    9f4d:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
    9f53:	89 44 24 10          	mov    %eax,0x10(%esp)
		r.ru_stime.tv_sec = CT_TO_SECS(current->stime);
    9f57:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9f5c:	8b 88 e4 02 00 00    	mov    0x2e4(%eax),%ecx
    9f62:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f67:	89 c8                	mov    %ecx,%eax
    9f69:	f7 ea                	imul   %edx
    9f6b:	c1 fa 05             	sar    $0x5,%edx
    9f6e:	89 c8                	mov    %ecx,%eax
    9f70:	c1 f8 1f             	sar    $0x1f,%eax
    9f73:	29 c2                	sub    %eax,%edx
    9f75:	89 d0                	mov    %edx,%eax
    9f77:	89 44 24 14          	mov    %eax,0x14(%esp)
		r.ru_stime.tv_usec = CT_TO_USECS(current->stime);
    9f7b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9f80:	8b 88 e4 02 00 00    	mov    0x2e4(%eax),%ecx
    9f86:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f8b:	89 c8                	mov    %ecx,%eax
    9f8d:	f7 ea                	imul   %edx
    9f8f:	c1 fa 05             	sar    $0x5,%edx
    9f92:	89 c8                	mov    %ecx,%eax
    9f94:	c1 f8 1f             	sar    $0x1f,%eax
    9f97:	29 c2                	sub    %eax,%edx
    9f99:	89 d0                	mov    %edx,%eax
    9f9b:	6b c0 64             	imul   $0x64,%eax,%eax
    9f9e:	29 c1                	sub    %eax,%ecx
    9fa0:	89 c8                	mov    %ecx,%eax
    9fa2:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
    9fa8:	89 44 24 18          	mov    %eax,0x18(%esp)
    9fac:	e9 aa 00 00 00       	jmp    a05b <sys_getrusage+0x1a7>
	} else {
		r.ru_utime.tv_sec = CT_TO_SECS(current->cutime);
    9fb1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9fb6:	8b 88 e8 02 00 00    	mov    0x2e8(%eax),%ecx
    9fbc:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9fc1:	89 c8                	mov    %ecx,%eax
    9fc3:	f7 ea                	imul   %edx
    9fc5:	c1 fa 05             	sar    $0x5,%edx
    9fc8:	89 c8                	mov    %ecx,%eax
    9fca:	c1 f8 1f             	sar    $0x1f,%eax
    9fcd:	29 c2                	sub    %eax,%edx
    9fcf:	89 d0                	mov    %edx,%eax
    9fd1:	89 44 24 0c          	mov    %eax,0xc(%esp)
		r.ru_utime.tv_usec = CT_TO_USECS(current->cutime);
    9fd5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9fda:	8b 88 e8 02 00 00    	mov    0x2e8(%eax),%ecx
    9fe0:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9fe5:	89 c8                	mov    %ecx,%eax
    9fe7:	f7 ea                	imul   %edx
    9fe9:	c1 fa 05             	sar    $0x5,%edx
    9fec:	89 c8                	mov    %ecx,%eax
    9fee:	c1 f8 1f             	sar    $0x1f,%eax
    9ff1:	29 c2                	sub    %eax,%edx
    9ff3:	89 d0                	mov    %edx,%eax
    9ff5:	6b c0 64             	imul   $0x64,%eax,%eax
    9ff8:	29 c1                	sub    %eax,%ecx
    9ffa:	89 c8                	mov    %ecx,%eax
    9ffc:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
    a002:	89 44 24 10          	mov    %eax,0x10(%esp)
		r.ru_stime.tv_sec = CT_TO_SECS(current->cstime);
    a006:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a00b:	8b 88 ec 02 00 00    	mov    0x2ec(%eax),%ecx
    a011:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a016:	89 c8                	mov    %ecx,%eax
    a018:	f7 ea                	imul   %edx
    a01a:	c1 fa 05             	sar    $0x5,%edx
    a01d:	89 c8                	mov    %ecx,%eax
    a01f:	c1 f8 1f             	sar    $0x1f,%eax
    a022:	29 c2                	sub    %eax,%edx
    a024:	89 d0                	mov    %edx,%eax
    a026:	89 44 24 14          	mov    %eax,0x14(%esp)
		r.ru_stime.tv_usec = CT_TO_USECS(current->cstime);
    a02a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a02f:	8b 88 ec 02 00 00    	mov    0x2ec(%eax),%ecx
    a035:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a03a:	89 c8                	mov    %ecx,%eax
    a03c:	f7 ea                	imul   %edx
    a03e:	c1 fa 05             	sar    $0x5,%edx
    a041:	89 c8                	mov    %ecx,%eax
    a043:	c1 f8 1f             	sar    $0x1f,%eax
    a046:	29 c2                	sub    %eax,%edx
    a048:	89 d0                	mov    %edx,%eax
    a04a:	6b c0 64             	imul   $0x64,%eax,%eax
    a04d:	29 c1                	sub    %eax,%ecx
    a04f:	89 c8                	mov    %ecx,%eax
    a051:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
    a057:	89 44 24 18          	mov    %eax,0x18(%esp)
	}
	// 然后让lp指针指向r结构，lpend指向r结构末尾处，而dest指针指向用户空间中的ru结构。最后把r中信息复制到用户空间ru结构中，并
	// 返回0。
	lp = (unsigned long *) &r;
    a05b:	8d 44 24 0c          	lea    0xc(%esp),%eax
    a05f:	89 44 24 5c          	mov    %eax,0x5c(%esp)
	lpend = (unsigned long *) (&r + 1);
    a063:	8d 44 24 0c          	lea    0xc(%esp),%eax
    a067:	83 c0 48             	add    $0x48,%eax
    a06a:	89 44 24 54          	mov    %eax,0x54(%esp)
	dest = (unsigned long *) ru;
    a06e:	8b 44 24 74          	mov    0x74(%esp),%eax
    a072:	89 44 24 58          	mov    %eax,0x58(%esp)
	for (; lp < lpend; lp++, dest++)
    a076:	eb 20                	jmp    a098 <sys_getrusage+0x1e4>
		put_fs_long(*lp, dest);
    a078:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    a07c:	8b 00                	mov    (%eax),%eax
    a07e:	83 ec 08             	sub    $0x8,%esp
    a081:	ff 74 24 60          	pushl  0x60(%esp)
    a085:	50                   	push   %eax
    a086:	e8 c8 f3 ff ff       	call   9453 <put_fs_long>
    a08b:	83 c4 10             	add    $0x10,%esp
	for (; lp < lpend; lp++, dest++)
    a08e:	83 44 24 5c 04       	addl   $0x4,0x5c(%esp)
    a093:	83 44 24 58 04       	addl   $0x4,0x58(%esp)
    a098:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    a09c:	3b 44 24 54          	cmp    0x54(%esp),%eax
    a0a0:	72 d6                	jb     a078 <sys_getrusage+0x1c4>
	return(0);
    a0a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
    a0a7:	83 c4 6c             	add    $0x6c,%esp
    a0aa:	c3                   	ret    

0000a0ab <sys_gettimeofday>:
// 取得系统当前时间，并用指定格式返回。
// timeval结构和timezone结构都定义在include/sys/time.h文件中。timeval结构含有秒和微秒（tv_sec和tv_usec）两个
// 字段。timezone结构含有本地距格林尼治标准时间以西的分钟数（tz_minuteswest）和夏令时间调整类型（tz_dsttime）两上
// 字段。（dst -- Daylight Savings Time）
int sys_gettimeofday(struct timeval *tv, struct timezone *tz)
{
    a0ab:	53                   	push   %ebx
    a0ac:	83 ec 08             	sub    $0x8,%esp
	// 如果参数给定的timeval结构指针不空，则在该结构中返回当前时间（秒值和微秒值）;
	// 如果参数给定的用户数据空间中timezone结构的指针不空，则也返回该结构的信息。
	// 程序中startup_time是系统开机时间（秒值）。宏CT_TO_SECS和CT_TO_USECS用于把系统当前嘀嗒数转换成用秒值加微秒值表示。
	// 它们定义在include/linux/sched.h文件中。jiffies_offset是系统嘀嗒数误差调整数。
	if (tv) {
    a0af:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    a0b4:	0f 84 88 00 00 00    	je     a142 <sys_gettimeofday+0x97>
		verify_area(tv, sizeof *tv);
    a0ba:	83 ec 08             	sub    $0x8,%esp
    a0bd:	6a 08                	push   $0x8
    a0bf:	ff 74 24 1c          	pushl  0x1c(%esp)
    a0c3:	e8 d3 e2 ff ff       	call   839b <verify_area>
    a0c8:	83 c4 10             	add    $0x10,%esp
		put_fs_long(startup_time + CT_TO_SECS(jiffies + jiffies_offset),
    a0cb:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    a0d0:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    a0d6:	01 d0                	add    %edx,%eax
    a0d8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a0dd:	f7 e2                	mul    %edx
    a0df:	c1 ea 05             	shr    $0x5,%edx
    a0e2:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    a0e7:	01 d0                	add    %edx,%eax
    a0e9:	83 ec 08             	sub    $0x8,%esp
    a0ec:	ff 74 24 18          	pushl  0x18(%esp)
    a0f0:	50                   	push   %eax
    a0f1:	e8 5d f3 ff ff       	call   9453 <put_fs_long>
    a0f6:	83 c4 10             	add    $0x10,%esp
			    (unsigned long *) tv);
		put_fs_long(CT_TO_USECS(jiffies + jiffies_offset),
    a0f9:	8b 44 24 10          	mov    0x10(%esp),%eax
    a0fd:	8d 58 04             	lea    0x4(%eax),%ebx
    a100:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    a105:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    a10b:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
    a10e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a113:	89 c8                	mov    %ecx,%eax
    a115:	f7 e2                	mul    %edx
    a117:	89 d0                	mov    %edx,%eax
    a119:	c1 e8 05             	shr    $0x5,%eax
    a11c:	6b c0 64             	imul   $0x64,%eax,%eax
    a11f:	29 c1                	sub    %eax,%ecx
    a121:	89 c8                	mov    %ecx,%eax
    a123:	69 c0 40 42 0f 00    	imul   $0xf4240,%eax,%eax
    a129:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a12e:	f7 e2                	mul    %edx
    a130:	89 d0                	mov    %edx,%eax
    a132:	c1 e8 05             	shr    $0x5,%eax
    a135:	83 ec 08             	sub    $0x8,%esp
    a138:	53                   	push   %ebx
    a139:	50                   	push   %eax
    a13a:	e8 14 f3 ff ff       	call   9453 <put_fs_long>
    a13f:	83 c4 10             	add    $0x10,%esp
			    ((unsigned long *) tv) + 1);
	}
	if (tz) {
    a142:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    a147:	74 40                	je     a189 <sys_gettimeofday+0xde>
		verify_area(tz, sizeof *tz);
    a149:	83 ec 08             	sub    $0x8,%esp
    a14c:	6a 08                	push   $0x8
    a14e:	ff 74 24 20          	pushl  0x20(%esp)
    a152:	e8 44 e2 ff ff       	call   839b <verify_area>
    a157:	83 c4 10             	add    $0x10,%esp
		put_fs_long(sys_tz.tz_minuteswest, (unsigned long *) tz);
    a15a:	a1 60 02 03 00       	mov    0x30260,%eax
    a15f:	83 ec 08             	sub    $0x8,%esp
    a162:	ff 74 24 1c          	pushl  0x1c(%esp)
    a166:	50                   	push   %eax
    a167:	e8 e7 f2 ff ff       	call   9453 <put_fs_long>
    a16c:	83 c4 10             	add    $0x10,%esp
		put_fs_long(sys_tz.tz_dsttime, ((unsigned long *) tz) + 1);
    a16f:	8b 44 24 14          	mov    0x14(%esp),%eax
    a173:	83 c0 04             	add    $0x4,%eax
    a176:	8b 15 64 02 03 00    	mov    0x30264,%edx
    a17c:	83 ec 08             	sub    $0x8,%esp
    a17f:	50                   	push   %eax
    a180:	52                   	push   %edx
    a181:	e8 cd f2 ff ff       	call   9453 <put_fs_long>
    a186:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
    a189:	b8 00 00 00 00       	mov    $0x0,%eax
}
    a18e:	83 c4 08             	add    $0x8,%esp
    a191:	5b                   	pop    %ebx
    a192:	c3                   	ret    

0000a193 <sys_settimeofday>:
 */
// 设置系统当前时间。
// 参数tv是指向用户数据区中timeval结构信息的指针。参数tz是用户数据区中timezone结构的指针。该操作需要超级用户权限。如果
// 两者皆为空，则什么也不做，函数返回0。
int sys_settimeofday(struct timeval *tv, struct timezone *tz)
{
    a193:	53                   	push   %ebx
    a194:	83 ec 18             	sub    $0x18,%esp
	static int	firsttime = 1;
	void 		adjust_clock();

	// 设置系统当前时间需要超级用户权限。如果tz指针不空，则设置系统时区信息。即复制用户timezone结构信息到系统中的sys_tz结构
	// 中。如果是第1次调用本系统调用并且参数tv指针不空，则调整系统时钟值。
	if (!suser())
    a197:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a19c:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    a1a3:	66 85 c0             	test   %ax,%ax
    a1a6:	74 0a                	je     a1b2 <sys_settimeofday+0x1f>
		return -EPERM;
    a1a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    a1ad:	e9 e3 00 00 00       	jmp    a295 <sys_settimeofday+0x102>
	if (tz) {
    a1b2:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    a1b7:	74 45                	je     a1fe <sys_settimeofday+0x6b>
		sys_tz.tz_minuteswest = get_fs_long((unsigned long *) tz);
    a1b9:	ff 74 24 24          	pushl  0x24(%esp)
    a1bd:	e8 45 f2 ff ff       	call   9407 <get_fs_long>
    a1c2:	83 c4 04             	add    $0x4,%esp
    a1c5:	a3 60 02 03 00       	mov    %eax,0x30260
		sys_tz.tz_dsttime = get_fs_long(((unsigned long *) tz)+1);
    a1ca:	8b 44 24 24          	mov    0x24(%esp),%eax
    a1ce:	83 c0 04             	add    $0x4,%eax
    a1d1:	50                   	push   %eax
    a1d2:	e8 30 f2 ff ff       	call   9407 <get_fs_long>
    a1d7:	83 c4 04             	add    $0x4,%esp
    a1da:	a3 64 02 03 00       	mov    %eax,0x30264
		if (firsttime) {
    a1df:	a1 10 f3 02 00       	mov    0x2f310,%eax
    a1e4:	85 c0                	test   %eax,%eax
    a1e6:	74 16                	je     a1fe <sys_settimeofday+0x6b>
			firsttime = 0;
    a1e8:	c7 05 10 f3 02 00 00 	movl   $0x0,0x2f310
    a1ef:	00 00 00 
			if (!tv)
    a1f2:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    a1f7:	75 05                	jne    a1fe <sys_settimeofday+0x6b>
				adjust_clock();
    a1f9:	e8 9c 00 00 00       	call   a29a <adjust_clock>
		}
	}
	// 如果参数的timeval结构指针tv不空，则用该结构信息设置系统时钟。首先从tv所指处获取以秒值（sec）加微秒值（usec）表示的系统
	// 时间，然后用秒值修改系统开机时间全局变量startup_time值，并用微秒值设置系统嘀嗒误差值jiffies_offset。
	if (tv) {
    a1fe:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    a203:	0f 84 87 00 00 00    	je     a290 <sys_settimeofday+0xfd>
		int sec, usec;

		sec = get_fs_long((unsigned long *)tv);
    a209:	83 ec 0c             	sub    $0xc,%esp
    a20c:	ff 74 24 2c          	pushl  0x2c(%esp)
    a210:	e8 f2 f1 ff ff       	call   9407 <get_fs_long>
    a215:	83 c4 10             	add    $0x10,%esp
    a218:	89 44 24 0c          	mov    %eax,0xc(%esp)
		usec = get_fs_long(((unsigned long *)tv) + 1);
    a21c:	8b 44 24 20          	mov    0x20(%esp),%eax
    a220:	83 c0 04             	add    $0x4,%eax
    a223:	83 ec 0c             	sub    $0xc,%esp
    a226:	50                   	push   %eax
    a227:	e8 db f1 ff ff       	call   9407 <get_fs_long>
    a22c:	83 c4 10             	add    $0x10,%esp
    a22f:	89 44 24 08          	mov    %eax,0x8(%esp)

		startup_time = sec - jiffies / HZ;
    a233:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    a237:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    a23c:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a241:	f7 e2                	mul    %edx
    a243:	89 d0                	mov    %edx,%eax
    a245:	c1 e8 05             	shr    $0x5,%eax
    a248:	29 c1                	sub    %eax,%ecx
    a24a:	89 c8                	mov    %ecx,%eax
    a24c:	a3 04 fb 02 00       	mov    %eax,0x2fb04
		jiffies_offset = usec * HZ / 1000000 - jiffies % HZ;
    a251:	8b 4c 24 08          	mov    0x8(%esp),%ecx
    a255:	ba ad 8b db 68       	mov    $0x68db8bad,%edx
    a25a:	89 c8                	mov    %ecx,%eax
    a25c:	f7 ea                	imul   %edx
    a25e:	c1 fa 0c             	sar    $0xc,%edx
    a261:	89 c8                	mov    %ecx,%eax
    a263:	c1 f8 1f             	sar    $0x1f,%eax
    a266:	29 c2                	sub    %eax,%edx
    a268:	89 d0                	mov    %edx,%eax
    a26a:	89 c3                	mov    %eax,%ebx
    a26c:	8b 0d 00 fb 02 00    	mov    0x2fb00,%ecx
    a272:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a277:	89 c8                	mov    %ecx,%eax
    a279:	f7 e2                	mul    %edx
    a27b:	89 d0                	mov    %edx,%eax
    a27d:	c1 e8 05             	shr    $0x5,%eax
    a280:	6b c0 64             	imul   $0x64,%eax,%eax
    a283:	29 c1                	sub    %eax,%ecx
    a285:	89 c8                	mov    %ecx,%eax
    a287:	29 c3                	sub    %eax,%ebx
    a289:	89 d8                	mov    %ebx,%eax
    a28b:	a3 08 fb 02 00       	mov    %eax,0x2fb08
	}
	return 0;
    a290:	b8 00 00 00 00       	mov    $0x0,%eax
}
    a295:	83 c4 18             	add    $0x18,%esp
    a298:	5b                   	pop    %ebx
    a299:	c3                   	ret    

0000a29a <adjust_clock>:
 */
// 把系统启动时间调整为以GMT为标准的时间。
// startup_time是秒值，因此这里需要把时区分钟值乘上60。
void adjust_clock()
{
	startup_time += sys_tz.tz_minuteswest * 60;
    a29a:	a1 60 02 03 00       	mov    0x30260,%eax
    a29f:	6b c0 3c             	imul   $0x3c,%eax,%eax
    a2a2:	89 c2                	mov    %eax,%edx
    a2a4:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    a2a9:	01 d0                	add    %edx,%eax
    a2ab:	a3 04 fb 02 00       	mov    %eax,0x2fb04
}
    a2b0:	90                   	nop
    a2b1:	c3                   	ret    

0000a2b2 <sys_umask>:

// 设置当前进程创建文件属性屏蔽码为mask & 0777。并返回原屏蔽码。
int sys_umask(int mask)
{
    a2b2:	83 ec 10             	sub    $0x10,%esp
	int old = current->umask;
    a2b5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a2ba:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
    a2c1:	0f b7 c0             	movzwl %ax,%eax
    a2c4:	89 44 24 0c          	mov    %eax,0xc(%esp)

	current->umask = mask & 0777;
    a2c8:	8b 44 24 14          	mov    0x14(%esp),%eax
    a2cc:	89 c2                	mov    %eax,%edx
    a2ce:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a2d3:	66 81 e2 ff 01       	and    $0x1ff,%dx
    a2d8:	66 89 90 30 03 00 00 	mov    %dx,0x330(%eax)
	return (old);
    a2df:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    a2e3:	83 c4 10             	add    $0x10,%esp
    a2e6:	c3                   	ret    

0000a2e7 <sys_default>:

// 用于捕获未实现的System Call调用。
int sys_default(unsigned long arg1, unsigned long arg2, unsigned long arg3, unsigned long code){
    a2e7:	83 ec 0c             	sub    $0xc,%esp
    printk("System Call Number:%d\r\n",code);
    a2ea:	83 ec 08             	sub    $0x8,%esp
    a2ed:	ff 74 24 24          	pushl  0x24(%esp)
    a2f1:	68 28 36 02 00       	push   $0x23628
    a2f6:	e8 46 e9 ff ff       	call   8c41 <printk>
    a2fb:	83 c4 10             	add    $0x10,%esp
    printk("Arg1:%X\r\n",arg1);
    a2fe:	83 ec 08             	sub    $0x8,%esp
    a301:	ff 74 24 18          	pushl  0x18(%esp)
    a305:	68 40 36 02 00       	push   $0x23640
    a30a:	e8 32 e9 ff ff       	call   8c41 <printk>
    a30f:	83 c4 10             	add    $0x10,%esp
    printk("Arg2:%X\r\n",arg2);
    a312:	83 ec 08             	sub    $0x8,%esp
    a315:	ff 74 24 1c          	pushl  0x1c(%esp)
    a319:	68 4a 36 02 00       	push   $0x2364a
    a31e:	e8 1e e9 ff ff       	call   8c41 <printk>
    a323:	83 c4 10             	add    $0x10,%esp
    printk("Arg3:%X\r\n",arg3);
    a326:	83 ec 08             	sub    $0x8,%esp
    a329:	ff 74 24 20          	pushl  0x20(%esp)
    a32d:	68 54 36 02 00       	push   $0x23654
    a332:	e8 0a e9 ff ff       	call   8c41 <printk>
    a337:	83 c4 10             	add    $0x10,%esp
    for(;;);
    a33a:	eb fe                	jmp    a33a <sys_default+0x53>

0000a33c <put_fs_long>:
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
    a33c:	8b 44 24 04          	mov    0x4(%esp),%eax
    a340:	8b 54 24 08          	mov    0x8(%esp),%edx
    a344:	64 89 02             	mov    %eax,%fs:(%edx)
}
    a347:	90                   	nop
    a348:	c3                   	ret    

0000a349 <release>:
// 释放指定进程占用的任务槽及其任务数据结构占用的内在页面。
// 参数p是任务数据结构指针。该函数在后面的sys_kill()和sys_waitpid()函数中被调用。扫描任务指针数组表task[]
// 以寻找指定的任务。如果找到，则首先清空该任务槽，然后释放该任务数据结构所占用的内在页面，最后执行调度函数并返回
// 立即退出。如果在任务数组表中没有找到指定任务对应的项，则内核panic。
void release(struct task_struct * p)
{
    a349:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 如果给定的任务结构指针为NULL则退出。如果该指针指向当前进程则显示警告信息退出。
	if (!p)
    a34c:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    a351:	0f 84 f6 00 00 00    	je     a44d <release+0x104>
		return;
	if (p == current) {
    a357:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a35c:	39 44 24 20          	cmp    %eax,0x20(%esp)
    a360:	75 15                	jne    a377 <release+0x2e>
		printk("task releasing itself\n\r");
    a362:	83 ec 0c             	sub    $0xc,%esp
    a365:	68 60 36 02 00       	push   $0x23660
    a36a:	e8 d2 e8 ff ff       	call   8c41 <printk>
    a36f:	83 c4 10             	add    $0x10,%esp
		return;
    a372:	e9 d7 00 00 00       	jmp    a44e <release+0x105>
	}
	// 扫描任务结构指针数组，寻找指定的任务p。如果找到，则置空任务指针数组中对应项，并且更新任务结构之间的关联指针，释放
	// 任务p数据结构占用的内在页面。最后在执行调度程序返回后退出。如果没有找到指定的任务p，则说明内核代码出错了，则显示出错
	// 信息并死机。
	// 更新链接部分的代码会把指定任务p从双向链表中删除。
	for (i = 1 ; i < NR_TASKS ; i++)
    a377:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    a37e:	00 
    a37f:	e9 ac 00 00 00       	jmp    a430 <release+0xe7>
		if (task[i] == p) {
    a384:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a388:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a38f:	39 44 24 20          	cmp    %eax,0x20(%esp)
    a393:	0f 85 92 00 00 00    	jne    a42b <release+0xe2>
			task[i] = NULL;
    a399:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a39d:	c7 04 85 c0 f1 02 00 	movl   $0x0,0x2f1c0(,%eax,4)
    a3a4:	00 00 00 00 
			// 指向比邻的老进程。如果任务p就是最新的子进程，则还需要更新其父进程的最新子进程指针cptr为指向p的比邻子进程。
			// 指针osptr（old sibling pointer）指向比p先创建的兄弟进程。
			// 指针ysptr（younger sibling pointer）指向比p后创建的兄弟进程。
			// 指针pptr（parent pointer）指向p的父进程。
			// 指针cptr（child pointer）是父进程指向最新（最后）创建的子进程。
			if (p->p_osptr)
    a3a8:	8b 44 24 20          	mov    0x20(%esp),%eax
    a3ac:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a3b2:	85 c0                	test   %eax,%eax
    a3b4:	74 1a                	je     a3d0 <release+0x87>
				p->p_osptr->p_ysptr = p->p_ysptr;
    a3b6:	8b 44 24 20          	mov    0x20(%esp),%eax
    a3ba:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a3c0:	8b 54 24 20          	mov    0x20(%esp),%edx
    a3c4:	8b 92 c4 02 00 00    	mov    0x2c4(%edx),%edx
    a3ca:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
			if (p->p_ysptr)
    a3d0:	8b 44 24 20          	mov    0x20(%esp),%eax
    a3d4:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a3da:	85 c0                	test   %eax,%eax
    a3dc:	74 1c                	je     a3fa <release+0xb1>
				p->p_ysptr->p_osptr = p->p_osptr;
    a3de:	8b 44 24 20          	mov    0x20(%esp),%eax
    a3e2:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a3e8:	8b 54 24 20          	mov    0x20(%esp),%edx
    a3ec:	8b 92 c8 02 00 00    	mov    0x2c8(%edx),%edx
    a3f2:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%eax)
    a3f8:	eb 1a                	jmp    a414 <release+0xcb>
			else
				p->p_pptr->p_cptr = p->p_osptr;
    a3fa:	8b 44 24 20          	mov    0x20(%esp),%eax
    a3fe:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a404:	8b 54 24 20          	mov    0x20(%esp),%edx
    a408:	8b 92 c8 02 00 00    	mov    0x2c8(%edx),%edx
    a40e:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
			// 释放要释放的进程数据结构占用的那页内存
			free_page((long)p);
    a414:	8b 44 24 20          	mov    0x20(%esp),%eax
    a418:	83 ec 0c             	sub    $0xc,%esp
    a41b:	50                   	push   %eax
    a41c:	e8 51 18 00 00       	call   bc72 <free_page>
    a421:	83 c4 10             	add    $0x10,%esp
			// 重新调度进程
			schedule();
    a424:	e8 1a ca ff ff       	call   6e43 <schedule>
			return;
    a429:	eb 23                	jmp    a44e <release+0x105>
	for (i = 1 ; i < NR_TASKS ; i++)
    a42b:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    a430:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    a435:	0f 8e 49 ff ff ff    	jle    a384 <release+0x3b>
		}
	panic("trying to release non-existent task");
    a43b:	83 ec 0c             	sub    $0xc,%esp
    a43e:	68 78 36 02 00       	push   $0x23678
    a443:	e8 ba e7 ff ff       	call   8c02 <panic>
    a448:	83 c4 10             	add    $0x10,%esp
    a44b:	eb 01                	jmp    a44e <release+0x105>
		return;
    a44d:	90                   	nop
}
    a44e:	83 c4 1c             	add    $0x1c,%esp
    a451:	c3                   	ret    

0000a452 <bad_task_ptr>:
/*
 * 检查task[]数组中是否存在一个指定的task_struct结构指针p。
 */
// 检测任务结构指针p。
int bad_task_ptr(struct task_struct *p)
{
    a452:	83 ec 10             	sub    $0x10,%esp
	int 	i;

	if (!p)
    a455:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    a45a:	75 07                	jne    a463 <bad_task_ptr+0x11>
		return 0;
    a45c:	b8 00 00 00 00       	mov    $0x0,%eax
    a461:	eb 33                	jmp    a496 <bad_task_ptr+0x44>
	for (i = 0 ; i < NR_TASKS ; i++)
    a463:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    a46a:	00 
    a46b:	eb 1d                	jmp    a48a <bad_task_ptr+0x38>
		if (task[i] == p)
    a46d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a471:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a478:	39 44 24 14          	cmp    %eax,0x14(%esp)
    a47c:	75 07                	jne    a485 <bad_task_ptr+0x33>
			return 0;
    a47e:	b8 00 00 00 00       	mov    $0x0,%eax
    a483:	eb 11                	jmp    a496 <bad_task_ptr+0x44>
	for (i = 0 ; i < NR_TASKS ; i++)
    a485:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    a48a:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    a48f:	7e dc                	jle    a46d <bad_task_ptr+0x1b>
	return 1;
    a491:	b8 01 00 00 00       	mov    $0x1,%eax
}
    a496:	83 c4 10             	add    $0x10,%esp
    a499:	c3                   	ret    

0000a49a <audit_ptree>:
 * 该函数看上去要比实际的恐怖....其实我们仅仅验证了指针p_ysptr和p_osptr构成的双向链表，并检查
 * 了链表与指针p_cptr和p_pptr构成的进程树之间的关系。
 */
// 检查进程树。
void audit_ptree()
{
    a49a:	83 ec 1c             	sub    $0x1c,%esp
	int	i;

	// 扫描系统中的除任务0以外的所有任务，检查它们中4个指针（pptr、cptr、ysptr和osptr）的正确性。若任务数组槽（项）
	// 为空则跳过。
	for (i = 1 ; i < NR_TASKS ; i++) {
    a49d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    a4a4:	00 
    a4a5:	e9 a6 04 00 00       	jmp    a950 <audit_ptree+0x4b6>
		if (!task[i])
    a4aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a4ae:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a4b5:	85 c0                	test   %eax,%eax
    a4b7:	0f 84 8d 04 00 00    	je     a94a <audit_ptree+0x4b0>
			continue;
		// 如果任务的父进程指针p_pptr没的指向任何进程（即在任务数组中存在），则显示警告信息“警告，pid号N的父进程链接有问题”。
		// 以下语句对cptr、ysptr和osptr进行类似操作。
		if (bad_task_ptr(task[i]->p_pptr))
    a4bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a4c1:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a4c8:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a4ce:	50                   	push   %eax
    a4cf:	e8 7e ff ff ff       	call   a452 <bad_task_ptr>
    a4d4:	83 c4 04             	add    $0x4,%esp
    a4d7:	85 c0                	test   %eax,%eax
    a4d9:	74 22                	je     a4fd <audit_ptree+0x63>
			printk("Warning, pid %d's parent link is bad\n",
				task[i]->pid);
    a4db:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a4df:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
			printk("Warning, pid %d's parent link is bad\n",
    a4e6:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a4ec:	83 ec 08             	sub    $0x8,%esp
    a4ef:	50                   	push   %eax
    a4f0:	68 9c 36 02 00       	push   $0x2369c
    a4f5:	e8 47 e7 ff ff       	call   8c41 <printk>
    a4fa:	83 c4 10             	add    $0x10,%esp
		if (bad_task_ptr(task[i]->p_cptr))
    a4fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a501:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a508:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a50e:	83 ec 0c             	sub    $0xc,%esp
    a511:	50                   	push   %eax
    a512:	e8 3b ff ff ff       	call   a452 <bad_task_ptr>
    a517:	83 c4 10             	add    $0x10,%esp
    a51a:	85 c0                	test   %eax,%eax
    a51c:	74 22                	je     a540 <audit_ptree+0xa6>
			printk("Warning, pid %d's child link is bad\n",
				task[i]->pid);
    a51e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a522:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
			printk("Warning, pid %d's child link is bad\n",
    a529:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a52f:	83 ec 08             	sub    $0x8,%esp
    a532:	50                   	push   %eax
    a533:	68 c4 36 02 00       	push   $0x236c4
    a538:	e8 04 e7 ff ff       	call   8c41 <printk>
    a53d:	83 c4 10             	add    $0x10,%esp
		if (bad_task_ptr(task[i]->p_ysptr))
    a540:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a544:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a54b:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a551:	83 ec 0c             	sub    $0xc,%esp
    a554:	50                   	push   %eax
    a555:	e8 f8 fe ff ff       	call   a452 <bad_task_ptr>
    a55a:	83 c4 10             	add    $0x10,%esp
    a55d:	85 c0                	test   %eax,%eax
    a55f:	74 22                	je     a583 <audit_ptree+0xe9>
			printk("Warning, pid %d's ys link is bad\n",
				task[i]->pid);
    a561:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a565:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
			printk("Warning, pid %d's ys link is bad\n",
    a56c:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a572:	83 ec 08             	sub    $0x8,%esp
    a575:	50                   	push   %eax
    a576:	68 ec 36 02 00       	push   $0x236ec
    a57b:	e8 c1 e6 ff ff       	call   8c41 <printk>
    a580:	83 c4 10             	add    $0x10,%esp
		if (bad_task_ptr(task[i]->p_osptr))
    a583:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a587:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a58e:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a594:	83 ec 0c             	sub    $0xc,%esp
    a597:	50                   	push   %eax
    a598:	e8 b5 fe ff ff       	call   a452 <bad_task_ptr>
    a59d:	83 c4 10             	add    $0x10,%esp
    a5a0:	85 c0                	test   %eax,%eax
    a5a2:	74 22                	je     a5c6 <audit_ptree+0x12c>
			printk("Warning, pid %d's os link is bad\n",
				task[i]->pid);
    a5a4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5a8:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
			printk("Warning, pid %d's os link is bad\n",
    a5af:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a5b5:	83 ec 08             	sub    $0x8,%esp
    a5b8:	50                   	push   %eax
    a5b9:	68 10 37 02 00       	push   $0x23710
    a5be:	e8 7e e6 ff ff       	call   8c41 <printk>
    a5c3:	83 c4 10             	add    $0x10,%esp
		// 如果任务的父进程指针p_pptr指向了自己，则显示警告信息“警告，pid号N的父进程链接指针指向了自己”。以下语句对cptr、ysptr
		// 和osptr进行类似操作。
		if (task[i]->p_pptr == task[i])
    a5c6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5ca:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a5d1:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a5d7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5db:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a5e2:	39 c2                	cmp    %eax,%edx
    a5e4:	75 10                	jne    a5f6 <audit_ptree+0x15c>
			printk("Warning, pid %d parent link points to self\n");
    a5e6:	83 ec 0c             	sub    $0xc,%esp
    a5e9:	68 34 37 02 00       	push   $0x23734
    a5ee:	e8 4e e6 ff ff       	call   8c41 <printk>
    a5f3:	83 c4 10             	add    $0x10,%esp
		if (task[i]->p_cptr == task[i])
    a5f6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5fa:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a601:	8b 90 c0 02 00 00    	mov    0x2c0(%eax),%edx
    a607:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a60b:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a612:	39 c2                	cmp    %eax,%edx
    a614:	75 10                	jne    a626 <audit_ptree+0x18c>
			printk("Warning, pid %d child link points to self\n");
    a616:	83 ec 0c             	sub    $0xc,%esp
    a619:	68 60 37 02 00       	push   $0x23760
    a61e:	e8 1e e6 ff ff       	call   8c41 <printk>
    a623:	83 c4 10             	add    $0x10,%esp
		if (task[i]->p_ysptr == task[i])
    a626:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a62a:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a631:	8b 90 c4 02 00 00    	mov    0x2c4(%eax),%edx
    a637:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a63b:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a642:	39 c2                	cmp    %eax,%edx
    a644:	75 10                	jne    a656 <audit_ptree+0x1bc>
			printk("Warning, pid %d ys link points to self\n");
    a646:	83 ec 0c             	sub    $0xc,%esp
    a649:	68 8c 37 02 00       	push   $0x2378c
    a64e:	e8 ee e5 ff ff       	call   8c41 <printk>
    a653:	83 c4 10             	add    $0x10,%esp
		if (task[i]->p_osptr == task[i])
    a656:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a65a:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a661:	8b 90 c8 02 00 00    	mov    0x2c8(%eax),%edx
    a667:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a66b:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a672:	39 c2                	cmp    %eax,%edx
    a674:	75 10                	jne    a686 <audit_ptree+0x1ec>
			printk("Warning, pid %d os link points to self\n");
    a676:	83 ec 0c             	sub    $0xc,%esp
    a679:	68 b4 37 02 00       	push   $0x237b4
    a67e:	e8 be e5 ff ff       	call   8c41 <printk>
    a683:	83 c4 10             	add    $0x10,%esp
		// 如果任务有比自己先创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个老兄弟进程的ysptr指针是否正确地指向本
		// 进程。否则显示警告信息。
		if (task[i]->p_osptr) {
    a686:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a68a:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a691:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a697:	85 c0                	test   %eax,%eax
    a699:	0f 84 e1 00 00 00    	je     a780 <audit_ptree+0x2e6>
			if (task[i]->p_pptr != task[i]->p_osptr->p_pptr)
    a69f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6a3:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a6aa:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a6b0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6b4:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a6bb:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a6c1:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a6c7:	39 c2                	cmp    %eax,%edx
    a6c9:	74 55                	je     a720 <audit_ptree+0x286>
				printk(
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
    a6cb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6cf:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a6d6:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a6dc:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
				printk(
    a6e2:	8b 88 2c 02 00 00    	mov    0x22c(%eax),%ecx
				task[i]->pid, task[i]->p_osptr->pid,
    a6e8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6ec:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a6f3:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
				printk(
    a6f9:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
				task[i]->pid, task[i]->p_osptr->pid,
    a6ff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a703:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
				printk(
    a70a:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a710:	51                   	push   %ecx
    a711:	52                   	push   %edx
    a712:	50                   	push   %eax
    a713:	68 dc 37 02 00       	push   $0x237dc
    a718:	e8 24 e5 ff ff       	call   8c41 <printk>
    a71d:	83 c4 10             	add    $0x10,%esp
			if (task[i]->p_osptr->p_ysptr != task[i])
    a720:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a724:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a72b:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a731:	8b 90 c4 02 00 00    	mov    0x2c4(%eax),%edx
    a737:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a73b:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a742:	39 c2                	cmp    %eax,%edx
    a744:	74 3a                	je     a780 <audit_ptree+0x2e6>
				printk(
		"Warning, pid %d older sibling %d has mismatched ys link\n",
				task[i]->pid, task[i]->p_osptr->pid);
    a746:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a74a:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a751:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
				printk(
    a757:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
				task[i]->pid, task[i]->p_osptr->pid);
    a75d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a761:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
				printk(
    a768:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a76e:	83 ec 04             	sub    $0x4,%esp
    a771:	52                   	push   %edx
    a772:	50                   	push   %eax
    a773:	68 0c 38 02 00       	push   $0x2380c
    a778:	e8 c4 e4 ff ff       	call   8c41 <printk>
    a77d:	83 c4 10             	add    $0x10,%esp
		}
		// 如果任务有比自己后创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个小弟进程的osptr指针是否正确地指向本进程
		// 否则显示警告信息。
		if (task[i]->p_ysptr) {
    a780:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a784:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a78b:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a791:	85 c0                	test   %eax,%eax
    a793:	0f 84 e1 00 00 00    	je     a87a <audit_ptree+0x3e0>
			if (task[i]->p_pptr != task[i]->p_ysptr->p_pptr)
    a799:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a79d:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a7a4:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a7aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7ae:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a7b5:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a7bb:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a7c1:	39 c2                	cmp    %eax,%edx
    a7c3:	74 55                	je     a81a <audit_ptree+0x380>
				printk(
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
    a7c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7c9:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a7d0:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a7d6:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
				printk(
    a7dc:	8b 88 2c 02 00 00    	mov    0x22c(%eax),%ecx
				task[i]->pid, task[i]->p_osptr->pid,
    a7e2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7e6:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a7ed:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
				printk(
    a7f3:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
				task[i]->pid, task[i]->p_osptr->pid,
    a7f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7fd:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
				printk(
    a804:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a80a:	51                   	push   %ecx
    a80b:	52                   	push   %edx
    a80c:	50                   	push   %eax
    a80d:	68 48 38 02 00       	push   $0x23848
    a812:	e8 2a e4 ff ff       	call   8c41 <printk>
    a817:	83 c4 10             	add    $0x10,%esp
			if (task[i]->p_ysptr->p_osptr != task[i])
    a81a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a81e:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a825:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a82b:	8b 90 c8 02 00 00    	mov    0x2c8(%eax),%edx
    a831:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a835:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a83c:	39 c2                	cmp    %eax,%edx
    a83e:	74 3a                	je     a87a <audit_ptree+0x3e0>
				printk(
		"Warning, pid %d younger sibling %d has mismatched os link\n",
				task[i]->pid, task[i]->p_ysptr->pid);
    a840:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a844:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a84b:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
				printk(
    a851:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
				task[i]->pid, task[i]->p_ysptr->pid);
    a857:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a85b:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
				printk(
    a862:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a868:	83 ec 04             	sub    $0x4,%esp
    a86b:	52                   	push   %edx
    a86c:	50                   	push   %eax
    a86d:	68 7c 38 02 00       	push   $0x2387c
    a872:	e8 ca e3 ff ff       	call   8c41 <printk>
    a877:	83 c4 10             	add    $0x10,%esp
		}
		// 如果任务的最新子进程指针cptr不空，那么检查该子进程的父进程是否为本进程，并检查该子进程的小弟进程指针yspter是否为空。若不是
		// 则显示警告信息。
		if (task[i]->p_cptr) {
    a87a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a87e:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a885:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a88b:	85 c0                	test   %eax,%eax
    a88d:	0f 84 b8 00 00 00    	je     a94b <audit_ptree+0x4b1>
			if (task[i]->p_cptr->p_pptr != task[i])
    a893:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a897:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a89e:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a8a4:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a8aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8ae:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a8b5:	39 c2                	cmp    %eax,%edx
    a8b7:	74 3a                	je     a8f3 <audit_ptree+0x459>
				printk(
			"Warning, pid %d youngest child %d has mismatched parent link\n",
				task[i]->pid, task[i]->p_cptr->pid);
    a8b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8bd:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a8c4:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
				printk(
    a8ca:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
				task[i]->pid, task[i]->p_cptr->pid);
    a8d0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8d4:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
				printk(
    a8db:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a8e1:	83 ec 04             	sub    $0x4,%esp
    a8e4:	52                   	push   %edx
    a8e5:	50                   	push   %eax
    a8e6:	68 b8 38 02 00       	push   $0x238b8
    a8eb:	e8 51 e3 ff ff       	call   8c41 <printk>
    a8f0:	83 c4 10             	add    $0x10,%esp
			if (task[i]->p_cptr->p_ysptr)
    a8f3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8f7:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a8fe:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a904:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a90a:	85 c0                	test   %eax,%eax
    a90c:	74 3d                	je     a94b <audit_ptree+0x4b1>
				printk(
			"Warning, pid %d youngest child %d has non-NULL ys link\n",
				task[i]->pid, task[i]->p_cptr->pid);
    a90e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a912:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a919:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
				printk(
    a91f:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
				task[i]->pid, task[i]->p_cptr->pid);
    a925:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a929:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
				printk(
    a930:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a936:	83 ec 04             	sub    $0x4,%esp
    a939:	52                   	push   %edx
    a93a:	50                   	push   %eax
    a93b:	68 f8 38 02 00       	push   $0x238f8
    a940:	e8 fc e2 ff ff       	call   8c41 <printk>
    a945:	83 c4 10             	add    $0x10,%esp
    a948:	eb 01                	jmp    a94b <audit_ptree+0x4b1>
			continue;
    a94a:	90                   	nop
	for (i = 1 ; i < NR_TASKS ; i++) {
    a94b:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    a950:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    a955:	0f 8e 4f fb ff ff    	jle    a4aa <audit_ptree+0x10>
		}
	}
}
    a95b:	90                   	nop
    a95c:	83 c4 1c             	add    $0x1c,%esp
    a95f:	c3                   	ret    

0000a960 <send_sig>:

// 向指定任务p发送信号sig，权限为priv。
// 参数：sig - 信号值；p - 指定任务的指针；priv - 强制发送信号的标志。即不需要考虑进程用户属性或级别而能发
// 送信号sig并退出，否则返回未许可错误号。
static inline int send_sig(long sig, struct task_struct * p, int priv)
{
    a960:	53                   	push   %ebx
	// 如果没有权限，并且当前进程的有效用户ID与进程p的不同，并且也不是超级用户，则说明没有向p发送信号的权利。suser()
	// 定义为（current->euid==0），用于判断是否为超级用户。
	if (!p)
    a961:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    a966:	75 0a                	jne    a972 <send_sig+0x12>
		return -EINVAL;
    a968:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    a96d:	e9 ef 00 00 00       	jmp    aa61 <send_sig+0x101>
	if (!priv && (current->euid != p->euid) && !suser())
    a972:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    a977:	75 37                	jne    a9b0 <send_sig+0x50>
    a979:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a97e:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
    a985:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a989:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    a990:	66 39 c2             	cmp    %ax,%dx
    a993:	74 1b                	je     a9b0 <send_sig+0x50>
    a995:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a99a:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    a9a1:	66 85 c0             	test   %ax,%ax
    a9a4:	74 0a                	je     a9b0 <send_sig+0x50>
		return -EPERM;
    a9a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    a9ab:	e9 b1 00 00 00       	jmp    aa61 <send_sig+0x101>
	// 若需要发送的信号是SIGKILL或SIGCONT，那么如果此时接收信号的进程p正处于停止状态就置其为就绪（运行）状态。然后
	// 修改进程p的信号位图signal，去掉（复位）会导致进程停止的信号SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU。
	if ((sig == SIGKILL) || (sig == SIGCONT)) {
    a9b0:	83 7c 24 08 09       	cmpl   $0x9,0x8(%esp)
    a9b5:	74 07                	je     a9be <send_sig+0x5e>
    a9b7:	83 7c 24 08 12       	cmpl   $0x12,0x8(%esp)
    a9bc:	75 38                	jne    a9f6 <send_sig+0x96>
		if (p->state == TASK_STOPPED)
    a9be:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a9c2:	8b 00                	mov    (%eax),%eax
    a9c4:	83 f8 04             	cmp    $0x4,%eax
    a9c7:	75 0a                	jne    a9d3 <send_sig+0x73>
			p->state = TASK_RUNNING;
    a9c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a9cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		p->exit_code = 0;
    a9d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a9d7:	c7 80 14 02 00 00 00 	movl   $0x0,0x214(%eax)
    a9de:	00 00 00 
		p->signal &= ~( (1 << (SIGSTOP - 1)) | (1 << (SIGTSTP - 1)) |
    a9e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a9e5:	8b 40 0c             	mov    0xc(%eax),%eax
    a9e8:	25 ff ff c3 ff       	and    $0xffc3ffff,%eax
    a9ed:	89 c2                	mov    %eax,%edx
    a9ef:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a9f3:	89 50 0c             	mov    %edx,0xc(%eax)
				(1 << (SIGTTIN - 1)) | (1 << (SIGTTOU - 1)) );
	}
	/* If the signal will be ignored, don't even post it */
    /* 如果要发送的信号sig将被进程p忽略掉，那么就根本不用发送 */
	if ((int) p->sigaction[sig - 1].sa_handler == 1)
    a9f6:	8b 44 24 08          	mov    0x8(%esp),%eax
    a9fa:	8d 50 ff             	lea    -0x1(%eax),%edx
    a9fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa01:	83 c2 01             	add    $0x1,%edx
    aa04:	c1 e2 04             	shl    $0x4,%edx
    aa07:	01 d0                	add    %edx,%eax
    aa09:	8b 00                	mov    (%eax),%eax
    aa0b:	83 f8 01             	cmp    $0x1,%eax
    aa0e:	75 07                	jne    aa17 <send_sig+0xb7>
		return 0;
    aa10:	b8 00 00 00 00       	mov    $0x0,%eax
    aa15:	eb 4a                	jmp    aa61 <send_sig+0x101>
	/* Depends on order SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU */
   	/* 以下判断依赖于SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU */
	// 如果信号是SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU之一，那么说明要让接收信号的进程p停止运行。因此（若p的信号位图
	// 中有SIGCONT置位）就需要复位位图中继续运行的信号。
	if ((sig >= SIGSTOP) && (sig <= SIGTTOU))
    aa17:	83 7c 24 08 12       	cmpl   $0x12,0x8(%esp)
    aa1c:	7e 1c                	jle    aa3a <send_sig+0xda>
    aa1e:	83 7c 24 08 16       	cmpl   $0x16,0x8(%esp)
    aa23:	7f 15                	jg     aa3a <send_sig+0xda>
		p->signal &= ~(1 << (SIGCONT - 1));
    aa25:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa29:	8b 40 0c             	mov    0xc(%eax),%eax
    aa2c:	25 ff ff fd ff       	and    $0xfffdffff,%eax
    aa31:	89 c2                	mov    %eax,%edx
    aa33:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa37:	89 50 0c             	mov    %edx,0xc(%eax)
	/* Actually deliver the signal */
    /* 最后，我们向进程p发送信号p */
	p->signal |= (1 << (sig - 1));
    aa3a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa3e:	8b 40 0c             	mov    0xc(%eax),%eax
    aa41:	8b 54 24 08          	mov    0x8(%esp),%edx
    aa45:	83 ea 01             	sub    $0x1,%edx
    aa48:	bb 01 00 00 00       	mov    $0x1,%ebx
    aa4d:	89 d1                	mov    %edx,%ecx
    aa4f:	d3 e3                	shl    %cl,%ebx
    aa51:	89 da                	mov    %ebx,%edx
    aa53:	09 c2                	or     %eax,%edx
    aa55:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa59:	89 50 0c             	mov    %edx,0xc(%eax)
	return 0;
    aa5c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    aa61:	5b                   	pop    %ebx
    aa62:	c3                   	ret    

0000aa63 <session_of_pgrp>:

// 根据进程组号pgrp取得进程组所属的会话号。
// 扫描任务数组，寻找进程组号为pgrp的进程，并返回其会话号。如果没有找到指定的进程组号pgrp的任何进程，则返回-1.
int session_of_pgrp(int pgrp)
{
    aa63:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p;

 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    aa66:	c7 44 24 0c bc f2 02 	movl   $0x2f2bc,0xc(%esp)
    aa6d:	00 
    aa6e:	eb 25                	jmp    aa95 <session_of_pgrp+0x32>
		if ((*p)->pgrp == pgrp)
    aa70:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa74:	8b 00                	mov    (%eax),%eax
    aa76:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    aa7c:	39 44 24 14          	cmp    %eax,0x14(%esp)
    aa80:	75 0e                	jne    aa90 <session_of_pgrp+0x2d>
			return((*p)->session);
    aa82:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa86:	8b 00                	mov    (%eax),%eax
    aa88:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
    aa8e:	eb 14                	jmp    aaa4 <session_of_pgrp+0x41>
 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    aa90:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    aa95:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    aa9c:	00 
    aa9d:	77 d1                	ja     aa70 <session_of_pgrp+0xd>
	return -1;
    aa9f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    aaa4:	83 c4 10             	add    $0x10,%esp
    aaa7:	c3                   	ret    

0000aaa8 <kill_pg>:
// 参数：pgrp - 指定的进程组号；sig - 指定的信号；priv - 权限。
// 即向指定进程组pgrp中的每个进程发送指定信号sig。只要向一个进程发送成功最后就会返回0，否则如果没有找到指定进程
// 组号pgrp的任何一个进程，则返回出错号-ESRCH，若找到进程组号是pgrp的进程，但是发送信号失败，则返回发送失败的
// 错误码。
int kill_pg(int pgrp, int sig, int priv)
{
    aaa8:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p;
	int err,retval = -ESRCH;                // -ESRCH表示指定的进程不存在。
    aaab:	c7 44 24 08 fd ff ff 	movl   $0xfffffffd,0x8(%esp)
    aab2:	ff 
	int found = 0;
    aab3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    aaba:	00 

	// 首先判断给定的信号和进程组号是否有效。然后扫描系统中所有任务。若扫描到进程组号为pgrp的进程，就向其发送信号sig。
	// 只要有一次信号发送成功，函数最后就会返回0。
	if (sig < 1 || sig > 32 || pgrp <= 0)
    aabb:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    aac0:	7e 0e                	jle    aad0 <kill_pg+0x28>
    aac2:	83 7c 24 18 20       	cmpl   $0x20,0x18(%esp)
    aac7:	7f 07                	jg     aad0 <kill_pg+0x28>
    aac9:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    aace:	7f 07                	jg     aad7 <kill_pg+0x2f>
		return -EINVAL;
    aad0:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    aad5:	eb 72                	jmp    ab49 <kill_pg+0xa1>
 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    aad7:	c7 44 24 0c bc f2 02 	movl   $0x2f2bc,0xc(%esp)
    aade:	00 
    aadf:	eb 4c                	jmp    ab2d <kill_pg+0x85>
		if ((*p)->pgrp == pgrp) {
    aae1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aae5:	8b 00                	mov    (%eax),%eax
    aae7:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    aaed:	39 44 24 14          	cmp    %eax,0x14(%esp)
    aaf1:	75 35                	jne    ab28 <kill_pg+0x80>
			if (sig && (err = send_sig(sig, *p, priv)))
    aaf3:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    aaf8:	74 29                	je     ab23 <kill_pg+0x7b>
    aafa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aafe:	8b 00                	mov    (%eax),%eax
    ab00:	ff 74 24 1c          	pushl  0x1c(%esp)
    ab04:	50                   	push   %eax
    ab05:	ff 74 24 20          	pushl  0x20(%esp)
    ab09:	e8 52 fe ff ff       	call   a960 <send_sig>
    ab0e:	83 c4 0c             	add    $0xc,%esp
    ab11:	89 04 24             	mov    %eax,(%esp)
    ab14:	83 3c 24 00          	cmpl   $0x0,(%esp)
    ab18:	74 09                	je     ab23 <kill_pg+0x7b>
				retval = err;
    ab1a:	8b 04 24             	mov    (%esp),%eax
    ab1d:	89 44 24 08          	mov    %eax,0x8(%esp)
    ab21:	eb 05                	jmp    ab28 <kill_pg+0x80>
			else
				found++;
    ab23:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    ab28:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ab2d:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    ab34:	00 
    ab35:	77 aa                	ja     aae1 <kill_pg+0x39>
		}
	return(found ? 0 : retval);
    ab37:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ab3c:	75 06                	jne    ab44 <kill_pg+0x9c>
    ab3e:	8b 44 24 08          	mov    0x8(%esp),%eax
    ab42:	eb 05                	jmp    ab49 <kill_pg+0xa1>
    ab44:	b8 00 00 00 00       	mov    $0x0,%eax
}
    ab49:	83 c4 10             	add    $0x10,%esp
    ab4c:	c3                   	ret    

0000ab4d <kill_proc>:
// 终止进程（向进程发送信号）。
// 参数：pid - 进程号；sig - 指定信号；priv - 权限。
// 即向进程号为pid的进程发送指定信号sig。若找到指定pid的进程，那么若信号发送成功，则返回0，否则返回信号发送出错。
// 如果没有找到指定进程号pid的进程，则返回出错号-ESRCH（指定进程不存在）。
int kill_proc(int pid, int sig, int priv)
{
    ab4d:	83 ec 10             	sub    $0x10,%esp
 	struct task_struct **p;

	if (sig < 1 || sig > 32)
    ab50:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    ab55:	7e 07                	jle    ab5e <kill_proc+0x11>
    ab57:	83 7c 24 18 20       	cmpl   $0x20,0x18(%esp)
    ab5c:	7e 07                	jle    ab65 <kill_proc+0x18>
		return -EINVAL;
    ab5e:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    ab63:	eb 57                	jmp    abbc <kill_proc+0x6f>
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    ab65:	c7 44 24 0c bc f2 02 	movl   $0x2f2bc,0xc(%esp)
    ab6c:	00 
    ab6d:	eb 3e                	jmp    abad <kill_proc+0x60>
		if ((*p)->pid == pid)
    ab6f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ab73:	8b 00                	mov    (%eax),%eax
    ab75:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    ab7b:	39 44 24 14          	cmp    %eax,0x14(%esp)
    ab7f:	75 27                	jne    aba8 <kill_proc+0x5b>
			return(sig ? send_sig(sig, *p, priv) : 0);
    ab81:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    ab86:	74 19                	je     aba1 <kill_proc+0x54>
    ab88:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ab8c:	8b 00                	mov    (%eax),%eax
    ab8e:	ff 74 24 1c          	pushl  0x1c(%esp)
    ab92:	50                   	push   %eax
    ab93:	ff 74 24 20          	pushl  0x20(%esp)
    ab97:	e8 c4 fd ff ff       	call   a960 <send_sig>
    ab9c:	83 c4 0c             	add    $0xc,%esp
    ab9f:	eb 1b                	jmp    abbc <kill_proc+0x6f>
    aba1:	b8 00 00 00 00       	mov    $0x0,%eax
    aba6:	eb 14                	jmp    abbc <kill_proc+0x6f>
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    aba8:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    abad:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    abb4:	00 
    abb5:	77 b8                	ja     ab6f <kill_proc+0x22>
	return(-ESRCH);
    abb7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
    abbc:	83 c4 10             	add    $0x10,%esp
    abbf:	c3                   	ret    

0000abc0 <sys_kill>:
// 如果pid<-1，则信号sig将发送给进程组-pid的所有进程。
// 如果信号sig为0，则不发送信号，但仍会进行错误检查。如果成功则返回0.
// 该函数扫描任务数组表，并根据pid对满足条件的进程发送指定信号sig。若pid等于0，表明当前进程是进程组组长，因此需要
// 向所有组内的进程强制发送信号sig。
int sys_kill(int pid, int sig)
{
    abc0:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p = NR_TASKS + task;       // p指向任务数组最后一项。
    abc3:	c7 44 24 0c c0 f2 02 	movl   $0x2f2c0,0xc(%esp)
    abca:	00 
	int err, retval = 0;
    abcb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    abd2:	00 

	if (!pid)
    abd3:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    abd8:	75 1c                	jne    abf6 <sys_kill+0x36>
		return(kill_pg(current->pid, sig, 0));
    abda:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    abdf:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    abe5:	6a 00                	push   $0x0
    abe7:	ff 74 24 1c          	pushl  0x1c(%esp)
    abeb:	50                   	push   %eax
    abec:	e8 b7 fe ff ff       	call   aaa8 <kill_pg>
    abf1:	83 c4 0c             	add    $0xc,%esp
    abf4:	eb 76                	jmp    ac6c <sys_kill+0xac>
	if (pid == -1) {
    abf6:	83 7c 24 14 ff       	cmpl   $0xffffffff,0x14(%esp)
    abfb:	75 3f                	jne    ac3c <sys_kill+0x7c>
		while (--p > &FIRST_TASK)
    abfd:	eb 28                	jmp    ac27 <sys_kill+0x67>
			if (err = send_sig(sig, *p, 0))
    abff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ac03:	8b 00                	mov    (%eax),%eax
    ac05:	6a 00                	push   $0x0
    ac07:	50                   	push   %eax
    ac08:	ff 74 24 20          	pushl  0x20(%esp)
    ac0c:	e8 4f fd ff ff       	call   a960 <send_sig>
    ac11:	83 c4 0c             	add    $0xc,%esp
    ac14:	89 44 24 04          	mov    %eax,0x4(%esp)
    ac18:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ac1d:	74 08                	je     ac27 <sys_kill+0x67>
				retval = err;
    ac1f:	8b 44 24 04          	mov    0x4(%esp),%eax
    ac23:	89 44 24 08          	mov    %eax,0x8(%esp)
		while (--p > &FIRST_TASK)
    ac27:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ac2c:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    ac33:	00 
    ac34:	77 c9                	ja     abff <sys_kill+0x3f>
		return(retval);
    ac36:	8b 44 24 08          	mov    0x8(%esp),%eax
    ac3a:	eb 30                	jmp    ac6c <sys_kill+0xac>
	}
	if (pid < 0)
    ac3c:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    ac41:	79 17                	jns    ac5a <sys_kill+0x9a>
		return(kill_pg(-pid, sig, 0));
    ac43:	8b 44 24 14          	mov    0x14(%esp),%eax
    ac47:	f7 d8                	neg    %eax
    ac49:	6a 00                	push   $0x0
    ac4b:	ff 74 24 1c          	pushl  0x1c(%esp)
    ac4f:	50                   	push   %eax
    ac50:	e8 53 fe ff ff       	call   aaa8 <kill_pg>
    ac55:	83 c4 0c             	add    $0xc,%esp
    ac58:	eb 12                	jmp    ac6c <sys_kill+0xac>
	/* Normal kill */
	return(kill_proc(pid, sig, 0));
    ac5a:	6a 00                	push   $0x0
    ac5c:	ff 74 24 1c          	pushl  0x1c(%esp)
    ac60:	ff 74 24 1c          	pushl  0x1c(%esp)
    ac64:	e8 e4 fe ff ff       	call   ab4d <kill_proc>
    ac69:	83 c4 0c             	add    $0xc,%esp
}
    ac6c:	83 c4 10             	add    $0x10,%esp
    ac6f:	c3                   	ret    

0000ac70 <is_orphaned_pgrp>:
// 扫描任务数组。如果任务项空，或者进程的组号与指定的不同，或者进程已经处于僵死状态。或者进程的父进程是init进程，
// 则说明扫描的进程不是指定进程组的成员，或者不满足要求，于是跳过。否则说明该进程是指定组的成员并且其父进程不是init
// 进程。此时如果该进程父进程的组号不等于指定的组号pgrp，但父进程的会话号等于进程的会话号，则说明它们同属于一个会话。
// 因此指定的pgrp进程组肯定不是孤儿进程组。否则......
int is_orphaned_pgrp(int pgrp)
{
    ac70:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    ac73:	c7 44 24 0c bc f2 02 	movl   $0x2f2bc,0xc(%esp)
    ac7a:	00 
    ac7b:	e9 87 00 00 00       	jmp    ad07 <is_orphaned_pgrp+0x97>
		if (!(*p) ||
    ac80:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ac84:	8b 00                	mov    (%eax),%eax
    ac86:	85 c0                	test   %eax,%eax
    ac88:	74 77                	je     ad01 <is_orphaned_pgrp+0x91>
		    ((*p)->pgrp != pgrp) ||
    ac8a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ac8e:	8b 00                	mov    (%eax),%eax
    ac90:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
		if (!(*p) ||
    ac96:	39 44 24 14          	cmp    %eax,0x14(%esp)
    ac9a:	75 65                	jne    ad01 <is_orphaned_pgrp+0x91>
		    ((*p)->state == TASK_ZOMBIE) ||
    ac9c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aca0:	8b 00                	mov    (%eax),%eax
    aca2:	8b 00                	mov    (%eax),%eax
		    ((*p)->pgrp != pgrp) ||
    aca4:	83 f8 03             	cmp    $0x3,%eax
    aca7:	74 58                	je     ad01 <is_orphaned_pgrp+0x91>
		    ((*p)->p_pptr->pid == 1))
    aca9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    acad:	8b 00                	mov    (%eax),%eax
    acaf:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    acb5:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
		    ((*p)->state == TASK_ZOMBIE) ||
    acbb:	83 f8 01             	cmp    $0x1,%eax
    acbe:	74 41                	je     ad01 <is_orphaned_pgrp+0x91>
			continue;
		if (((*p)->p_pptr->pgrp != pgrp) &&
    acc0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    acc4:	8b 00                	mov    (%eax),%eax
    acc6:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    accc:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    acd2:	39 44 24 14          	cmp    %eax,0x14(%esp)
    acd6:	74 2a                	je     ad02 <is_orphaned_pgrp+0x92>
		    ((*p)->p_pptr->session == (*p)->session))
    acd8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    acdc:	8b 00                	mov    (%eax),%eax
    acde:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ace4:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    acea:	8b 44 24 0c          	mov    0xc(%esp),%eax
    acee:	8b 00                	mov    (%eax),%eax
    acf0:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
		if (((*p)->p_pptr->pgrp != pgrp) &&
    acf6:	39 c2                	cmp    %eax,%edx
    acf8:	75 08                	jne    ad02 <is_orphaned_pgrp+0x92>
			return 0;
    acfa:	b8 00 00 00 00       	mov    $0x0,%eax
    acff:	eb 19                	jmp    ad1a <is_orphaned_pgrp+0xaa>
			continue;
    ad01:	90                   	nop
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    ad02:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ad07:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    ad0e:	00 
    ad0f:	0f 87 6b ff ff ff    	ja     ac80 <is_orphaned_pgrp+0x10>
	}
	return(1);	/* (sighing) "Often!" */        /* (唉）是孤儿进程组！ */
    ad15:	b8 01 00 00 00       	mov    $0x1,%eax
}
    ad1a:	83 c4 10             	add    $0x10,%esp
    ad1d:	c3                   	ret    

0000ad1e <has_stopped_jobs>:

// 判断进程组中是否含有处于停止状态的作业（进程组）。有则返回1；无则返回0.
// 查找方法是扫描整个任务数组。检查属于指定组pgrp的任何进程是否处于停止状态。
static int has_stopped_jobs(int pgrp)
{
    ad1e:	83 ec 10             	sub    $0x10,%esp
	struct task_struct ** p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    ad21:	c7 44 24 0c bc f2 02 	movl   $0x2f2bc,0xc(%esp)
    ad28:	00 
    ad29:	eb 2c                	jmp    ad57 <has_stopped_jobs+0x39>
		if ((*p)->pgrp != pgrp)
    ad2b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad2f:	8b 00                	mov    (%eax),%eax
    ad31:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    ad37:	39 44 24 14          	cmp    %eax,0x14(%esp)
    ad3b:	75 14                	jne    ad51 <has_stopped_jobs+0x33>
			continue;
		if ((*p)->state == TASK_STOPPED)
    ad3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad41:	8b 00                	mov    (%eax),%eax
    ad43:	8b 00                	mov    (%eax),%eax
    ad45:	83 f8 04             	cmp    $0x4,%eax
    ad48:	75 08                	jne    ad52 <has_stopped_jobs+0x34>
			return(1);
    ad4a:	b8 01 00 00 00       	mov    $0x1,%eax
    ad4f:	eb 15                	jmp    ad66 <has_stopped_jobs+0x48>
			continue;
    ad51:	90                   	nop
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    ad52:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ad57:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    ad5e:	00 
    ad5f:	77 ca                	ja     ad2b <has_stopped_jobs+0xd>
	}
	return(0);
    ad61:	b8 00 00 00 00       	mov    $0x0,%eax
}
    ad66:	83 c4 10             	add    $0x10,%esp
    ad69:	c3                   	ret    

0000ad6a <do_exit>:

// 程序退出处理函数。
// 该函数将根据进程自身的特性对其进行处理，并把当前进程状态设置成僵死状态TASK_ZOMBIE，最后调用调度函数schedule()去
// 执行其他进程，不再返回。
void do_exit(long code)
{
    ad6a:	56                   	push   %esi
    ad6b:	53                   	push   %ebx
    ad6c:	83 ec 24             	sub    $0x24,%esp
	// 首先释放当前进程代码段和数据段所占的内存页。函数free_page_tables()的第1个参数（get_base()返回值）指明在CPU线性
	// 地址空间中起始其地址，第2个（get_limit()返回值）说明欲释放的字节长度值。get_base()宏中的current->ldt[1]给出进程
	// 代码段描述符的位置（current->ldt[2]给出进程数据段描述符的位置）；get_limit()中的0x0f是进程代码段的选择符（0x17是
	// 进程数据段的选择符）。即在取段其地址时使用该段的描述符所处地址作为参数，取段长度时使用该段的选择符作为参数。
	// free_page_tables()函数位于mm/memory.c文件；get_base()和get_limit()宏位于include/linux/sched.h头文件。
	free_page_tables(get_base(current->ldt[1]), get_limit(0x0f));
    ad6f:	b8 0f 00 00 00       	mov    $0xf,%eax
    ad74:	0f 03 c0             	lsl    %ax,%eax
    ad77:	40                   	inc    %eax
    ad78:	89 44 24 10          	mov    %eax,0x10(%esp)
    ad7c:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    ad80:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    ad85:	05 a0 03 00 00       	add    $0x3a0,%eax
    ad8a:	83 c0 02             	add    $0x2,%eax
    ad8d:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    ad93:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
    ad99:	8d 72 04             	lea    0x4(%edx),%esi
    ad9c:	8b 1d a0 f1 02 00    	mov    0x2f1a0,%ebx
    ada2:	81 c3 a0 03 00 00    	add    $0x3a0,%ebx
    ada8:	83 c3 07             	add    $0x7,%ebx
    adab:	8a 33                	mov    (%ebx),%dh
    adad:	8a 16                	mov    (%esi),%dl
    adaf:	c1 e2 10             	shl    $0x10,%edx
    adb2:	66 8b 10             	mov    (%eax),%dx
    adb5:	89 d0                	mov    %edx,%eax
    adb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
    adbb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    adbf:	83 ec 08             	sub    $0x8,%esp
    adc2:	51                   	push   %ecx
    adc3:	50                   	push   %eax
    adc4:	e8 23 0f 00 00       	call   bcec <free_page_tables>
    adc9:	83 c4 10             	add    $0x10,%esp
	free_page_tables(get_base(current->ldt[2]), get_limit(0x17));
    adcc:	b8 17 00 00 00       	mov    $0x17,%eax
    add1:	0f 03 c0             	lsl    %ax,%eax
    add4:	40                   	inc    %eax
    add5:	89 44 24 08          	mov    %eax,0x8(%esp)
    add9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
    addd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    ade2:	05 a8 03 00 00       	add    $0x3a8,%eax
    ade7:	83 c0 02             	add    $0x2,%eax
    adea:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    adf0:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
    adf6:	8d 72 04             	lea    0x4(%edx),%esi
    adf9:	8b 1d a0 f1 02 00    	mov    0x2f1a0,%ebx
    adff:	81 c3 a8 03 00 00    	add    $0x3a8,%ebx
    ae05:	83 c3 07             	add    $0x7,%ebx
    ae08:	8a 33                	mov    (%ebx),%dh
    ae0a:	8a 16                	mov    (%esi),%dl
    ae0c:	c1 e2 10             	shl    $0x10,%edx
    ae0f:	66 8b 10             	mov    (%eax),%dx
    ae12:	89 d0                	mov    %edx,%eax
    ae14:	89 44 24 04          	mov    %eax,0x4(%esp)
    ae18:	8b 44 24 04          	mov    0x4(%esp),%eax
    ae1c:	83 ec 08             	sub    $0x8,%esp
    ae1f:	51                   	push   %ecx
    ae20:	50                   	push   %eax
    ae21:	e8 c6 0e 00 00       	call   bcec <free_page_tables>
    ae26:	83 c4 10             	add    $0x10,%esp
	// 然后关闭当前进程打开着的所有文件。再对当前进程的工作目录pwd、根目录root、执行程序文件的i节点以及库文件进行同步操作，
	// 放回各个i节点并分别置空（释放）。接着把当前进程的状态设置为僵死状态（TASK_ZOMBIE），并设置进程退出码。
	for (i = 0 ; i < NR_OPEN ; i++)
    ae29:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
    ae30:	00 
    ae31:	eb 2b                	jmp    ae5e <do_exit+0xf4>
		if (current->filp[i])
    ae33:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    ae38:	8b 54 24 18          	mov    0x18(%esp),%edx
    ae3c:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    ae42:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    ae46:	85 c0                	test   %eax,%eax
    ae48:	74 0f                	je     ae59 <do_exit+0xef>
			sys_close(i);
    ae4a:	83 ec 0c             	sub    $0xc,%esp
    ae4d:	ff 74 24 24          	pushl  0x24(%esp)
    ae51:	e8 e8 2c 00 00       	call   db3e <sys_close>
    ae56:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < NR_OPEN ; i++)
    ae59:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
    ae5e:	83 7c 24 18 13       	cmpl   $0x13,0x18(%esp)
    ae63:	7e ce                	jle    ae33 <do_exit+0xc9>
	Log(LOG_INFO_TYPE, "<<<<< sys_exit process pid = %d, exit_code = %d >>>>>\n", current->pid, code);
    ae65:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    ae6a:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    ae70:	ff 74 24 30          	pushl  0x30(%esp)
    ae74:	50                   	push   %eax
    ae75:	68 30 39 02 00       	push   $0x23930
    ae7a:	6a 00                	push   $0x0
    ae7c:	e8 67 7a 01 00       	call   228e8 <Log>
    ae81:	83 c4 10             	add    $0x10,%esp
	iput(current->pwd);
    ae84:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    ae89:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    ae8f:	83 ec 0c             	sub    $0xc,%esp
    ae92:	50                   	push   %eax
    ae93:	e8 c7 37 00 00       	call   e65f <iput>
    ae98:	83 c4 10             	add    $0x10,%esp
	current->pwd = NULL;
    ae9b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    aea0:	c7 80 34 03 00 00 00 	movl   $0x0,0x334(%eax)
    aea7:	00 00 00 
	iput(current->root);
    aeaa:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    aeaf:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    aeb5:	83 ec 0c             	sub    $0xc,%esp
    aeb8:	50                   	push   %eax
    aeb9:	e8 a1 37 00 00       	call   e65f <iput>
    aebe:	83 c4 10             	add    $0x10,%esp
	current->root = NULL;
    aec1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    aec6:	c7 80 38 03 00 00 00 	movl   $0x0,0x338(%eax)
    aecd:	00 00 00 
	iput(current->executable);
    aed0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    aed5:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    aedb:	83 ec 0c             	sub    $0xc,%esp
    aede:	50                   	push   %eax
    aedf:	e8 7b 37 00 00       	call   e65f <iput>
    aee4:	83 c4 10             	add    $0x10,%esp
	current->executable = NULL;
    aee7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    aeec:	c7 80 3c 03 00 00 00 	movl   $0x0,0x33c(%eax)
    aef3:	00 00 00 
	iput(current->library);
    aef6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    aefb:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    af01:	83 ec 0c             	sub    $0xc,%esp
    af04:	50                   	push   %eax
    af05:	e8 55 37 00 00       	call   e65f <iput>
    af0a:	83 c4 10             	add    $0x10,%esp
	current->library = NULL;
    af0d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af12:	c7 80 40 03 00 00 00 	movl   $0x0,0x340(%eax)
    af19:	00 00 00 
	current->state = TASK_ZOMBIE;
    af1c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af21:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
	current->exit_code = code;
    af27:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af2c:	8b 54 24 30          	mov    0x30(%esp),%edx
    af30:	89 90 14 02 00 00    	mov    %edx,0x214(%eax)
     * 组将变成一个孤儿进程组。
     */
	// POSIX 3.2.2.2（1991版）是关于exit()函数的说明。如果父进程所在的进程组与当前进程的不同，但都处于同一个会话
	// （session）中，并且当前进程所在进程组将要变成孤儿进程了并且当前进程的进程组中含有处于停止状态的作业（进程），
	// 那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。
	if ((current->p_pptr->pgrp != current->pgrp) &&
    af36:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af3b:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    af41:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    af47:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af4c:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    af52:	39 c2                	cmp    %eax,%edx
    af54:	0f 84 8c 00 00 00    	je     afe6 <do_exit+0x27c>
	    (current->p_pptr->session == current->session) &&
    af5a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af5f:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    af65:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    af6b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af70:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
	if ((current->p_pptr->pgrp != current->pgrp) &&
    af76:	39 c2                	cmp    %eax,%edx
    af78:	75 6c                	jne    afe6 <do_exit+0x27c>
	    is_orphaned_pgrp(current->pgrp) &&
    af7a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af7f:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    af85:	83 ec 0c             	sub    $0xc,%esp
    af88:	50                   	push   %eax
    af89:	e8 e2 fc ff ff       	call   ac70 <is_orphaned_pgrp>
    af8e:	83 c4 10             	add    $0x10,%esp
	    (current->p_pptr->session == current->session) &&
    af91:	85 c0                	test   %eax,%eax
    af93:	74 51                	je     afe6 <do_exit+0x27c>
	    has_stopped_jobs(current->pgrp)) {
    af95:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af9a:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    afa0:	83 ec 0c             	sub    $0xc,%esp
    afa3:	50                   	push   %eax
    afa4:	e8 75 fd ff ff       	call   ad1e <has_stopped_jobs>
    afa9:	83 c4 10             	add    $0x10,%esp
	    is_orphaned_pgrp(current->pgrp) &&
    afac:	85 c0                	test   %eax,%eax
    afae:	74 36                	je     afe6 <do_exit+0x27c>
		kill_pg(current->pgrp,SIGHUP,1);
    afb0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    afb5:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    afbb:	83 ec 04             	sub    $0x4,%esp
    afbe:	6a 01                	push   $0x1
    afc0:	6a 01                	push   $0x1
    afc2:	50                   	push   %eax
    afc3:	e8 e0 fa ff ff       	call   aaa8 <kill_pg>
    afc8:	83 c4 10             	add    $0x10,%esp
		kill_pg(current->pgrp,SIGCONT,1);
    afcb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    afd0:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    afd6:	83 ec 04             	sub    $0x4,%esp
    afd9:	6a 01                	push   $0x1
    afdb:	6a 12                	push   $0x12
    afdd:	50                   	push   %eax
    afde:	e8 c5 fa ff ff       	call   aaa8 <kill_pg>
    afe3:	83 c4 10             	add    $0x10,%esp
	}
	/* Let father know we died */           /* 通知父进程当前进程将终止 */
	current->p_pptr->signal |= (1 << (SIGCHLD - 1));
    afe6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    afeb:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    aff1:	8b 50 0c             	mov    0xc(%eax),%edx
    aff4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    aff9:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    afff:	81 ca 00 00 01 00    	or     $0x10000,%edx
    b005:	89 50 0c             	mov    %edx,0xc(%eax)
     * B. 检查当前进程的退出是否会造成任何进程组变成孤儿进程组。如果有，并且有处于停止状态
     * （TASK_STOPPED）的组员，则向它们发送一个SIGHUP信号和一个SIGCONT信号。（POSIX 3.2.2.2节要求）
     */
	// 如果当前进程有子进程（其p_cptr指针指向最近创建的子进程），则让进程1（init进程）成为其所有子进程的父进程。如果
	// 子进程已经处于僵死状态，则向init进程（父进程）发送子进程已终止信号SIGCHLD。
	if (p = current->p_cptr) {
    b008:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b00d:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    b013:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    b017:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    b01c:	0f 84 41 01 00 00    	je     b163 <do_exit+0x3f9>
		while (1) {
			p->p_pptr = task[1];
    b022:	8b 15 c4 f1 02 00    	mov    0x2f1c4,%edx
    b028:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b02c:	89 90 bc 02 00 00    	mov    %edx,0x2bc(%eax)
			if (p->state == TASK_ZOMBIE)
    b032:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b036:	8b 00                	mov    (%eax),%eax
    b038:	83 f8 03             	cmp    $0x3,%eax
    b03b:	75 16                	jne    b053 <do_exit+0x2e9>
				task[1]->signal |= (1 << (SIGCHLD - 1));
    b03d:	a1 c4 f1 02 00       	mov    0x2f1c4,%eax
    b042:	8b 50 0c             	mov    0xc(%eax),%edx
    b045:	a1 c4 f1 02 00       	mov    0x2f1c4,%eax
    b04a:	81 ca 00 00 01 00    	or     $0x10000,%edx
    b050:	89 50 0c             	mov    %edx,0xc(%eax)
             * 因此现在子进程所有进程组将变成孤儿进程组了。
             */
			// 如果子进程与当前进程不在同一个进程组但属于同一个session中，并且当前进程所在进程组将要变成孤儿进程了，并且当前
			// 进程的进程组中含有处于停止状态的作业（进程），那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。如果
			// 该子进程有兄弟进程，则继续循环处理这些兄弟进程。
			if ((p->pgrp != current->pgrp) &&
    b053:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b057:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    b05d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b062:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b068:	39 c2                	cmp    %eax,%edx
    b06a:	0f 84 81 00 00 00    	je     b0f1 <do_exit+0x387>
			    (p->session == current->session) &&
    b070:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b074:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    b07a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b07f:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
			if ((p->pgrp != current->pgrp) &&
    b085:	39 c2                	cmp    %eax,%edx
    b087:	75 68                	jne    b0f1 <do_exit+0x387>
			    is_orphaned_pgrp(p->pgrp) &&
    b089:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b08d:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b093:	83 ec 0c             	sub    $0xc,%esp
    b096:	50                   	push   %eax
    b097:	e8 d4 fb ff ff       	call   ac70 <is_orphaned_pgrp>
    b09c:	83 c4 10             	add    $0x10,%esp
			    (p->session == current->session) &&
    b09f:	85 c0                	test   %eax,%eax
    b0a1:	74 4e                	je     b0f1 <do_exit+0x387>
			    has_stopped_jobs(p->pgrp)) {
    b0a3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0a7:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b0ad:	83 ec 0c             	sub    $0xc,%esp
    b0b0:	50                   	push   %eax
    b0b1:	e8 68 fc ff ff       	call   ad1e <has_stopped_jobs>
    b0b6:	83 c4 10             	add    $0x10,%esp
			    is_orphaned_pgrp(p->pgrp) &&
    b0b9:	85 c0                	test   %eax,%eax
    b0bb:	74 34                	je     b0f1 <do_exit+0x387>
				kill_pg(p->pgrp,SIGHUP,1);
    b0bd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0c1:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b0c7:	83 ec 04             	sub    $0x4,%esp
    b0ca:	6a 01                	push   $0x1
    b0cc:	6a 01                	push   $0x1
    b0ce:	50                   	push   %eax
    b0cf:	e8 d4 f9 ff ff       	call   aaa8 <kill_pg>
    b0d4:	83 c4 10             	add    $0x10,%esp
				kill_pg(p->pgrp,SIGCONT,1);
    b0d7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0db:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b0e1:	83 ec 04             	sub    $0x4,%esp
    b0e4:	6a 01                	push   $0x1
    b0e6:	6a 12                	push   $0x12
    b0e8:	50                   	push   %eax
    b0e9:	e8 ba f9 ff ff       	call   aaa8 <kill_pg>
    b0ee:	83 c4 10             	add    $0x10,%esp
			}
			if (p->p_osptr) {
    b0f1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0f5:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    b0fb:	85 c0                	test   %eax,%eax
    b0fd:	74 13                	je     b112 <do_exit+0x3a8>
				p = p->p_osptr;
    b0ff:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b103:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    b109:	89 44 24 1c          	mov    %eax,0x1c(%esp)
			p->p_pptr = task[1];
    b10d:	e9 10 ff ff ff       	jmp    b022 <do_exit+0x2b8>
             */
			// 通过上面处理，当前进程子进程的所有兄弟子进程都已经处理过。此时p指向最老的兄弟子进程。于是把这些兄弟子进程全部加入
			// init进程的子进程双向链表表头部中。加入后，init进程的p_cptr指向当前进程原子进程中最年轻的（the youngest）子进程
			// 而原子进程中最老的（the oldest）兄弟子进程p_osptr指向原init进程的最年轻进程，而原init进程中最年轻进程的p_ysptr
			// 指向原子进程中最老的兄弟子进程。最后把当前进程的p_cptr指针置空，并退出循环。
			p->p_osptr = task[1]->p_cptr;
    b112:	a1 c4 f1 02 00       	mov    0x2f1c4,%eax
    b117:	8b 90 c0 02 00 00    	mov    0x2c0(%eax),%edx
    b11d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b121:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%eax)
			task[1]->p_cptr->p_ysptr = p;
    b127:	a1 c4 f1 02 00       	mov    0x2f1c4,%eax
    b12c:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    b132:	8b 54 24 1c          	mov    0x1c(%esp),%edx
    b136:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
			task[1]->p_cptr = current->p_cptr;
    b13c:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    b142:	a1 c4 f1 02 00       	mov    0x2f1c4,%eax
    b147:	8b 92 c0 02 00 00    	mov    0x2c0(%edx),%edx
    b14d:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
			current->p_cptr = 0;
    b153:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b158:	c7 80 c0 02 00 00 00 	movl   $0x0,0x2c0(%eax)
    b15f:	00 00 00 
			break;
    b162:	90                   	nop
		}
	}
	// 如果当前进程是会话头领（leader）进程，那么若它有控制终端，则首先向使用该控制终端的进程组发送挂断信号SIGHUP，然后释放
	// 该终端。接着扫描任务数组，把属于当前进程会话中进程的终端置空（取消）。
	if (current->leader) {
    b163:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b168:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
    b16e:	85 c0                	test   %eax,%eax
    b170:	0f 84 e7 00 00 00    	je     b25d <do_exit+0x4f3>
		struct task_struct **p;
		struct tty_struct *tty;

		if (current->tty >= 0) {
    b176:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b17b:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b181:	85 c0                	test   %eax,%eax
    b183:	0f 88 90 00 00 00    	js     b219 <do_exit+0x4af>
			tty = TTY_TABLE(current->tty);
    b189:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b18e:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b194:	85 c0                	test   %eax,%eax
    b196:	74 3d                	je     b1d5 <do_exit+0x46b>
    b198:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b19d:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b1a3:	83 f8 3f             	cmp    $0x3f,%eax
    b1a6:	7f 18                	jg     b1c0 <do_exit+0x456>
    b1a8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b1ad:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b1b3:	83 e8 01             	sub    $0x1,%eax
    b1b6:	c1 e0 06             	shl    $0x6,%eax
    b1b9:	05 20 28 04 00       	add    $0x42820,%eax
    b1be:	eb 22                	jmp    b1e2 <do_exit+0x478>
    b1c0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b1c5:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b1cb:	c1 e0 06             	shl    $0x6,%eax
    b1ce:	05 20 28 04 00       	add    $0x42820,%eax
    b1d3:	eb 0d                	jmp    b1e2 <do_exit+0x478>
    b1d5:	a1 80 22 03 00       	mov    0x32280,%eax
    b1da:	c1 e0 06             	shl    $0x6,%eax
    b1dd:	05 20 28 04 00       	add    $0x42820,%eax
    b1e2:	89 04 24             	mov    %eax,(%esp)
			if (tty->pgrp>0)
    b1e5:	8b 04 24             	mov    (%esp),%eax
    b1e8:	8b 40 24             	mov    0x24(%eax),%eax
    b1eb:	85 c0                	test   %eax,%eax
    b1ed:	7e 16                	jle    b205 <do_exit+0x49b>
				kill_pg(tty->pgrp, SIGHUP, 1);
    b1ef:	8b 04 24             	mov    (%esp),%eax
    b1f2:	8b 40 24             	mov    0x24(%eax),%eax
    b1f5:	83 ec 04             	sub    $0x4,%esp
    b1f8:	6a 01                	push   $0x1
    b1fa:	6a 01                	push   $0x1
    b1fc:	50                   	push   %eax
    b1fd:	e8 a6 f8 ff ff       	call   aaa8 <kill_pg>
    b202:	83 c4 10             	add    $0x10,%esp
			tty->pgrp = 0;
    b205:	8b 04 24             	mov    (%esp),%eax
    b208:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
			tty->session = 0;
    b20f:	8b 04 24             	mov    (%esp),%eax
    b212:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
		}
	 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    b219:	c7 44 24 14 bc f2 02 	movl   $0x2f2bc,0x14(%esp)
    b220:	00 
    b221:	eb 30                	jmp    b253 <do_exit+0x4e9>
			if ((*p)->session == current->session)
    b223:	8b 44 24 14          	mov    0x14(%esp),%eax
    b227:	8b 00                	mov    (%eax),%eax
    b229:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    b22f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b234:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
    b23a:	39 c2                	cmp    %eax,%edx
    b23c:	75 10                	jne    b24e <do_exit+0x4e4>
				(*p)->tty = -1;
    b23e:	8b 44 24 14          	mov    0x14(%esp),%eax
    b242:	8b 00                	mov    (%eax),%eax
    b244:	c7 80 2c 03 00 00 ff 	movl   $0xffffffff,0x32c(%eax)
    b24b:	ff ff ff 
	 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    b24e:	83 6c 24 14 04       	subl   $0x4,0x14(%esp)
    b253:	81 7c 24 14 c0 f1 02 	cmpl   $0x2f1c0,0x14(%esp)
    b25a:	00 
    b25b:	77 c6                	ja     b223 <do_exit+0x4b9>
	}
	// 如果当前进程上次使用过协处理器，则把记录此信息的指针置空。若定义了调试进程树符号，则调用进程树检测显示函数。最后调用调度
	// 函数，重新调度进程运行，以让父进程能够处理僵死进程的其他善后事宜。
	if (last_task_used_math == current)
    b25d:	8b 15 0c fb 02 00    	mov    0x2fb0c,%edx
    b263:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b268:	39 c2                	cmp    %eax,%edx
    b26a:	75 0a                	jne    b276 <do_exit+0x50c>
		last_task_used_math = NULL;
    b26c:	c7 05 0c fb 02 00 00 	movl   $0x0,0x2fb0c
    b273:	00 00 00 
#ifdef DEBUG_PROC_TREE
	audit_ptree();
    b276:	e8 1f f2 ff ff       	call   a49a <audit_ptree>
#endif
	schedule();
    b27b:	e8 c3 bb ff ff       	call   6e43 <schedule>
}
    b280:	90                   	nop
    b281:	83 c4 24             	add    $0x24,%esp
    b284:	5b                   	pop    %ebx
    b285:	5e                   	pop    %esi
    b286:	c3                   	ret    

0000b287 <sys_exit>:
// 系统调用exit()。终止进程。
// 参数error_code是用户程序提供的退出状态信息，只有低字节有效。把error_code左移8位是wait()或waitpid()函数的要求。
// 低字节中将用来保存wait()的状态信息。例如，如果进程处于暂停状态（TASK_STOPPED），那么其低字节就等于0x7f。参见
// sys/wait.h文件。wait()或waitpid()利用这些宏就可以取得子进程的退出状态码或子进程终止的原因（信号）。
int sys_exit(int error_code)
{
    b287:	83 ec 0c             	sub    $0xc,%esp
	do_exit((error_code & 0xff) << 8);
    b28a:	8b 44 24 10          	mov    0x10(%esp),%eax
    b28e:	c1 e0 08             	shl    $0x8,%eax
    b291:	0f b7 c0             	movzwl %ax,%eax
    b294:	83 ec 0c             	sub    $0xc,%esp
    b297:	50                   	push   %eax
    b298:	e8 cd fa ff ff       	call   ad6a <do_exit>
    b29d:	83 c4 10             	add    $0x10,%esp
}
    b2a0:	90                   	nop
    b2a1:	83 c4 0c             	add    $0xc,%esp
    b2a4:	c3                   	ret    

0000b2a5 <sys_waitpid>:
// 若options = WUNTRACED，表示如果子进程是停止的，也马上返回（无须跟踪）。
// 若options = WNOHANG，表示如果没有子进程退出或终止就马上返回。
// 如果返回状态指针stat_addr不为空，则就将状态信息保存到那里。
// 参数pid是进程号；*stat_addr是保存状态信息位置的指针；options是waitpid选项。
int sys_waitpid(pid_t pid, unsigned long * stat_addr, int options)
{
    b2a5:	83 ec 1c             	sub    $0x1c,%esp
	int flag;               				// 该标志用于后面所选出的子进程处于就绪或睡眠态。
	struct task_struct *p;
	unsigned long oldblocked;

	// 首先验证将在存放状态信息的位置处内在空间足够。然后复位标志flag。接着从当前进程的最年轻子进程开始扫描子进程兄弟链表。
	verify_area(stat_addr, 4);
    b2a8:	83 ec 08             	sub    $0x8,%esp
    b2ab:	6a 04                	push   $0x4
    b2ad:	ff 74 24 30          	pushl  0x30(%esp)
    b2b1:	e8 e5 d0 ff ff       	call   839b <verify_area>
    b2b6:	83 c4 10             	add    $0x10,%esp
repeat:
	flag = 0;
    b2b9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    b2c0:	00 
	for (p = current->p_cptr ; p ; p = p->p_osptr) {
    b2c1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b2c6:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    b2cc:	89 44 24 08          	mov    %eax,0x8(%esp)
    b2d0:	e9 ab 01 00 00       	jmp    b480 <sys_waitpid+0x1db>
		// 如果等待的子进程号pid>0，但与被扫描子进程p的pid不相等，说明它是当前进程另外的子进程，于是跳过该进程，接着扫描下一
		// 个进程。
		if (pid > 0) {
    b2d5:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    b2da:	7e 15                	jle    b2f1 <sys_waitpid+0x4c>
			if (p->pid != pid)
    b2dc:	8b 44 24 08          	mov    0x8(%esp),%eax
    b2e0:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b2e6:	39 44 24 20          	cmp    %eax,0x20(%esp)
    b2ea:	74 49                	je     b335 <sys_waitpid+0x90>
				continue;
    b2ec:	e9 81 01 00 00       	jmp    b472 <sys_waitpid+0x1cd>
		// 否则，如果指定等待进程的pid=0，表示正在等待进程组号等于当前进程组号的任何子进程。如果此时被扫描进程p的进程组号与当前
		// 进程的组号不等，则跳过。
		} else if (!pid) {
    b2f1:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    b2f6:	75 1e                	jne    b316 <sys_waitpid+0x71>
			if (p->pgrp != current->pgrp)
    b2f8:	8b 44 24 08          	mov    0x8(%esp),%eax
    b2fc:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    b302:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b307:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b30d:	39 c2                	cmp    %eax,%edx
    b30f:	74 24                	je     b335 <sys_waitpid+0x90>
				continue;
    b311:	e9 5c 01 00 00       	jmp    b472 <sys_waitpid+0x1cd>
		// 否则，如果指定的pid<-1，表示正在等待进程组号等于pid绝对值的任何子进程。如果此时被扫描进程p的组号与pid的绝对值
		// 不等，则跳过。
		} else if (pid != -1) {
    b316:	83 7c 24 20 ff       	cmpl   $0xffffffff,0x20(%esp)
    b31b:	74 18                	je     b335 <sys_waitpid+0x90>
			if (p->pgrp != -pid)
    b31d:	8b 44 24 08          	mov    0x8(%esp),%eax
    b321:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b327:	8b 54 24 20          	mov    0x20(%esp),%edx
    b32b:	f7 da                	neg    %edx
    b32d:	39 d0                	cmp    %edx,%eax
    b32f:	0f 85 39 01 00 00    	jne    b46e <sys_waitpid+0x1c9>
		// pid等于-1）。接下来根据这个子进程p所处的状态来处理。
		// 当子进程p停止状态时，如果此时参数选项options中WUNTRACED标志没有置位，表示程序无须立刻返回，或者子进程此时的退出码等于
		// 0，于是继续扫描处理其他子进程。如果WUNTRACED置位且子进程退出码不为0,则把退出码移入高字节，同状态信息0x7f进行或运算后
		// 放入*stat_addr，在复位子进程退出码后立刻返回子进程号pid。这里0x7f表示的返回状态使WIFSTOPPED()宏为值。参见include/
		// sys/wait.h。
		switch (p->state) {
    b335:	8b 44 24 08          	mov    0x8(%esp),%eax
    b339:	8b 00                	mov    (%eax),%eax
    b33b:	83 f8 03             	cmp    $0x3,%eax
    b33e:	74 67                	je     b3a7 <sys_waitpid+0x102>
    b340:	83 f8 04             	cmp    $0x4,%eax
    b343:	0f 85 1b 01 00 00    	jne    b464 <sys_waitpid+0x1bf>
			case TASK_STOPPED:
				if (!(options & WUNTRACED) ||
    b349:	8b 44 24 28          	mov    0x28(%esp),%eax
    b34d:	83 e0 02             	and    $0x2,%eax
    b350:	85 c0                	test   %eax,%eax
    b352:	0f 84 19 01 00 00    	je     b471 <sys_waitpid+0x1cc>
				    !p->exit_code)
    b358:	8b 44 24 08          	mov    0x8(%esp),%eax
    b35c:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
				if (!(options & WUNTRACED) ||
    b362:	85 c0                	test   %eax,%eax
    b364:	0f 84 07 01 00 00    	je     b471 <sys_waitpid+0x1cc>
					continue;
				put_fs_long((p->exit_code << 8) | 0x7f,
    b36a:	8b 44 24 08          	mov    0x8(%esp),%eax
    b36e:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
    b374:	c1 e0 08             	shl    $0x8,%eax
    b377:	83 c8 7f             	or     $0x7f,%eax
    b37a:	83 ec 08             	sub    $0x8,%esp
    b37d:	ff 74 24 2c          	pushl  0x2c(%esp)
    b381:	50                   	push   %eax
    b382:	e8 b5 ef ff ff       	call   a33c <put_fs_long>
    b387:	83 c4 10             	add    $0x10,%esp
					stat_addr);
				p->exit_code = 0;
    b38a:	8b 44 24 08          	mov    0x8(%esp),%eax
    b38e:	c7 80 14 02 00 00 00 	movl   $0x0,0x214(%eax)
    b395:	00 00 00 
				return p->pid;
    b398:	8b 44 24 08          	mov    0x8(%esp),%eax
    b39c:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b3a2:	e9 7b 01 00 00       	jmp    b522 <sys_waitpid+0x27d>
			// 如果子进程p处于僵死状态，则首先把它在用户态和内核态运行的时间分别累计到当前进程（父进程）中，然后取出子进程pid和退出码，
			// 把退出码放入返回状态位置stat_addr处并释放该子进程。最后返回子进程的退出码和pid。若定义了调试进程树符号，则调用进程树
			// 检测显示函数。
			case TASK_ZOMBIE:
				current->cutime += p->utime;
    b3a7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b3ac:	8b 88 e8 02 00 00    	mov    0x2e8(%eax),%ecx
    b3b2:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3b6:	8b 90 e0 02 00 00    	mov    0x2e0(%eax),%edx
    b3bc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b3c1:	01 ca                	add    %ecx,%edx
    b3c3:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%eax)
				current->cstime += p->stime;
    b3c9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b3ce:	8b 88 ec 02 00 00    	mov    0x2ec(%eax),%ecx
    b3d4:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3d8:	8b 90 e4 02 00 00    	mov    0x2e4(%eax),%edx
    b3de:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b3e3:	01 ca                	add    %ecx,%edx
    b3e5:	89 90 ec 02 00 00    	mov    %edx,0x2ec(%eax)
				flag = p->pid;
    b3eb:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3ef:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b3f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
				Log(LOG_INFO_TYPE, "<<<<< sys_waitpid current_pid = %d, child_pid = %d, exit_code = %d >>>>>\n", current->pid, p->pid, p->exit_code);
    b3f9:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3fd:	8b 88 14 02 00 00    	mov    0x214(%eax),%ecx
    b403:	8b 44 24 08          	mov    0x8(%esp),%eax
    b407:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    b40d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b412:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b418:	83 ec 0c             	sub    $0xc,%esp
    b41b:	51                   	push   %ecx
    b41c:	52                   	push   %edx
    b41d:	50                   	push   %eax
    b41e:	68 68 39 02 00       	push   $0x23968
    b423:	6a 00                	push   $0x0
    b425:	e8 be 74 01 00       	call   228e8 <Log>
    b42a:	83 c4 20             	add    $0x20,%esp
				put_fs_long(p->exit_code, stat_addr);
    b42d:	8b 44 24 08          	mov    0x8(%esp),%eax
    b431:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
    b437:	83 ec 08             	sub    $0x8,%esp
    b43a:	ff 74 24 2c          	pushl  0x2c(%esp)
    b43e:	50                   	push   %eax
    b43f:	e8 f8 ee ff ff       	call   a33c <put_fs_long>
    b444:	83 c4 10             	add    $0x10,%esp
				release(p);
    b447:	83 ec 0c             	sub    $0xc,%esp
    b44a:	ff 74 24 14          	pushl  0x14(%esp)
    b44e:	e8 f6 ee ff ff       	call   a349 <release>
    b453:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_PROC_TREE
				audit_ptree();
    b456:	e8 3f f0 ff ff       	call   a49a <audit_ptree>
#endif
				return flag;
    b45b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    b45f:	e9 be 00 00 00       	jmp    b522 <sys_waitpid+0x27d>
			// 如果这个子进程p的状态即是不停止也不是僵死，那么就置flag = 1。表示找到过一个符合要求的子进程，但是它处于运行态或睡眠态。
			default:
				flag = 1;
    b464:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    b46b:	00 
				continue;
    b46c:	eb 04                	jmp    b472 <sys_waitpid+0x1cd>
				continue;
    b46e:	90                   	nop
    b46f:	eb 01                	jmp    b472 <sys_waitpid+0x1cd>
					continue;
    b471:	90                   	nop
	for (p = current->p_cptr ; p ; p = p->p_osptr) {
    b472:	8b 44 24 08          	mov    0x8(%esp),%eax
    b476:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    b47c:	89 44 24 08          	mov    %eax,0x8(%esp)
    b480:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    b485:	0f 85 4a fe ff ff    	jne    b2d5 <sys_waitpid+0x30>
    }
	// 在上面对任务数组扫描结束后，如果flag被置位，说明了有符合等待要求的子进程并没有处于退出立刻或僵死状态。此时如果已设置
	// WNOHANG选项（表示若没有子进程处于退出或终止态就返回），就立刻返回0,退出。否则把当前进程置为可中断等待状态，保留并修改当前
	// 进程信号阻塞位图，允许其接收SIGCHLD信号。然后执行调度程序。当系统又开始执行本进程时，如果本进程收到除SIGCHLD以外的
	// 其他未屏蔽信号，则以退出码“重新启动系统调用”返回。否则跳转到函数开始处repeat标号处重重复处理。
	if (flag) {
    b48b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    b490:	0f 84 87 00 00 00    	je     b51d <sys_waitpid+0x278>
		if (options & WNOHANG)
    b496:	8b 44 24 28          	mov    0x28(%esp),%eax
    b49a:	83 e0 01             	and    $0x1,%eax
    b49d:	85 c0                	test   %eax,%eax
    b49f:	74 07                	je     b4a8 <sys_waitpid+0x203>
			return 0;
    b4a1:	b8 00 00 00 00       	mov    $0x0,%eax
    b4a6:	eb 7a                	jmp    b522 <sys_waitpid+0x27d>
		current->state = TASK_INTERRUPTIBLE;
    b4a8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b4ad:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
		oldblocked = current->blocked;
    b4b3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b4b8:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    b4be:	89 44 24 04          	mov    %eax,0x4(%esp)
		current->blocked &= ~(1 << (SIGCHLD - 1));
    b4c2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b4c7:	8b 90 10 02 00 00    	mov    0x210(%eax),%edx
    b4cd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b4d2:	81 e2 ff ff fe ff    	and    $0xfffeffff,%edx
    b4d8:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
		schedule();
    b4de:	e8 60 b9 ff ff       	call   6e43 <schedule>
		current->blocked = oldblocked;
    b4e3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b4e8:	8b 54 24 04          	mov    0x4(%esp),%edx
    b4ec:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
		if (current->signal & ~(current->blocked | (1 << (SIGCHLD - 1))))
    b4f2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b4f7:	8b 50 0c             	mov    0xc(%eax),%edx
    b4fa:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b4ff:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    b505:	0d 00 00 01 00       	or     $0x10000,%eax
    b50a:	f7 d0                	not    %eax
    b50c:	21 d0                	and    %edx,%eax
    b50e:	85 c0                	test   %eax,%eax
    b510:	0f 84 a3 fd ff ff    	je     b2b9 <sys_waitpid+0x14>
			return -ERESTARTSYS;
    b516:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
    b51b:	eb 05                	jmp    b522 <sys_waitpid+0x27d>
		else
			goto repeat;
	}
	// 若flag = 0，表示没有找到符合要求的子进程，则返回出错码（子进程不存在）。
	return -ECHILD;
    b51d:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
}
    b522:	83 c4 1c             	add    $0x1c,%esp
    b525:	c3                   	ret    

0000b526 <get_fs_byte>:
{
    b526:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
    b527:	8b 44 24 08          	mov    0x8(%esp),%eax
    b52b:	64 8a 00             	mov    %fs:(%eax),%al
    b52e:	89 c3                	mov    %eax,%ebx
	return _v;
    b530:	89 d8                	mov    %ebx,%eax
}
    b532:	5b                   	pop    %ebx
    b533:	c3                   	ret    

0000b534 <put_fs_byte>:
{
    b534:	83 ec 04             	sub    $0x4,%esp
    b537:	8b 44 24 08          	mov    0x8(%esp),%eax
    b53b:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
    b53e:	0f b6 04 24          	movzbl (%esp),%eax
    b542:	8b 54 24 0c          	mov    0xc(%esp),%edx
    b546:	64 88 02             	mov    %al,%fs:(%edx)
}
    b549:	90                   	nop
    b54a:	83 c4 04             	add    $0x4,%esp
    b54d:	c3                   	ret    

0000b54e <put_fs_long>:
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
    b54e:	8b 44 24 04          	mov    0x4(%esp),%eax
    b552:	8b 54 24 08          	mov    0x8(%esp),%edx
    b556:	64 89 02             	mov    %eax,%fs:(%edx)
}
    b559:	90                   	nop
    b55a:	c3                   	ret    

0000b55b <sys_sgetmask>:
#include <errno.h>

// 获取当前任务信号屏蔽位图（屏蔽码或阻塞码）。sgetmask可分解为signal-get-mask。以下类似。
int sys_sgetmask()
{
	return current->blocked;
    b55b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b560:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
}
    b566:	c3                   	ret    

0000b567 <sys_ssetmask>:

// 设置新的信号屏蔽位图。信号SIGKILL和SIGSTOP不能被屏蔽。返回值是原信号屏蔽位图。
int sys_ssetmask(int newmask)
{
    b567:	83 ec 10             	sub    $0x10,%esp
	int old = current->blocked;
    b56a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b56f:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    b575:	89 44 24 0c          	mov    %eax,0xc(%esp)

	current->blocked = newmask & ~(1 << (SIGKILL - 1)) & ~(1 << (SIGSTOP - 1));
    b579:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b57e:	8b 54 24 14          	mov    0x14(%esp),%edx
    b582:	81 e2 ff fe fb ff    	and    $0xfffbfeff,%edx
    b588:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
	return old;
    b58e:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    b592:	83 c4 10             	add    $0x10,%esp
    b595:	c3                   	ret    

0000b596 <sys_sigpending>:

// 检测并取得进程收到的但被屏蔽（阻塞）的信号。还未处理信号的位图将被放入set中。
int sys_sigpending(sigset_t *set)
{
    b596:	83 ec 0c             	sub    $0xc,%esp
    /* fill in "set" with signals pending but blocked. */
    /* 用还未处理并且被阻塞信号的位图填入set指针所指位置处 */
	// 首先验证进程提供的用户存储空间就有4个字节。然后把还未处理并且被阻塞信号的位图填入set指针所指位置处。
    verify_area(set, 4);
    b599:	83 ec 08             	sub    $0x8,%esp
    b59c:	6a 04                	push   $0x4
    b59e:	ff 74 24 1c          	pushl  0x1c(%esp)
    b5a2:	e8 f4 cd ff ff       	call   839b <verify_area>
    b5a7:	83 c4 10             	add    $0x10,%esp
    put_fs_long(current->blocked & current->signal, (unsigned long *)set);
    b5aa:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b5af:	8b 90 10 02 00 00    	mov    0x210(%eax),%edx
    b5b5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b5ba:	8b 40 0c             	mov    0xc(%eax),%eax
    b5bd:	21 d0                	and    %edx,%eax
    b5bf:	83 ec 08             	sub    $0x8,%esp
    b5c2:	ff 74 24 18          	pushl  0x18(%esp)
    b5c6:	50                   	push   %eax
    b5c7:	e8 82 ff ff ff       	call   b54e <put_fs_long>
    b5cc:	83 c4 10             	add    $0x10,%esp
    return 0;
    b5cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b5d4:	83 c4 0c             	add    $0xc,%esp
    b5d7:	c3                   	ret    

0000b5d8 <sys_sigsuspend>:
// 该系统调用临时把进程信号屏蔽码替换成参数中给定的set，然后挂起进程，直到收到一个信号为止。
// restart是一个被中断的系统调用重新启动标志。当第1次调用该系统调用时，这是0.并且在该函数中会把进程原来的阻塞码
// blocked保存起来（old_mask），并设置restart为非0值。因此当进程第2次调用该系统调用时，它就会恢复进程原来保存在
// old_mask中的阻塞码。
int sys_sigsuspend(int restart, unsigned long old_mask, unsigned long set)
{
    b5d8:	83 ec 0c             	sub    $0xc,%esp
	// 相应的信号捕获函数。
    extern int sys_pause(void);

	// 如果restart标志不为0,表示重新让程序运行起来。于是恢复前面保存在old_mask中的原进程阻塞码。并返回码-EINTR（系统
	// 调用被信号中断）。
    if (restart) {
    b5db:	8b 44 24 10          	mov    0x10(%esp),%eax
    b5df:	85 c0                	test   %eax,%eax
    b5e1:	74 16                	je     b5f9 <sys_sigsuspend+0x21>
			/* we're restarting */  /* 我们正在重新启动系统调用 */
			current->blocked = old_mask;
    b5e3:	8b 54 24 14          	mov    0x14(%esp),%edx
    b5e7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b5ec:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
			return -EINTR;
    b5f2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
    b5f7:	eb 30                	jmp    b629 <sys_sigsuspend+0x51>
	// 进程会去执行信号处理函数，然后本调用返回-ERESTARTNOINTR码退出。这个返回码说明在处理完信号后要求返回到本系统调用中继续
	// 运行，即本系统调用不会被中断。
    /* we're not restarting.  do the work */
    /* 我们不是重新运行，那么就干活吧 */
    //*(&restart) = 1;
	__asm__("movl $1, %0\n\t" \
    b5f9:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
    b600:	00 
			: \
			:"m"(restart));
    //*(&old_mask) = current->blocked;
	__asm__("movl %%eax, %0\n\t" \
			: \
			:"m"(old_mask), "a"(current->blocked));
    b601:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b606:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
	__asm__("movl %%eax, %0\n\t" \
    b60c:	89 44 24 14          	mov    %eax,0x14(%esp)
    current->blocked = set;
    b610:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b615:	8b 54 24 18          	mov    0x18(%esp),%edx
    b619:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
    (void) sys_pause();			/* return after a signal arrives */
    b61f:	e8 20 ba ff ff       	call   7044 <sys_pause>
    return -ERESTARTNOINTR;		/* handle the signal, and come back */
    b624:	b8 ff fd ff ff       	mov    $0xfffffdff,%eax
}
    b629:	83 c4 0c             	add    $0xc,%esp
    b62c:	c3                   	ret    

0000b62d <save_old>:

// 复制sigaction数据到fs数据段to处。即从内核空间复制到用户（任务）数据段中。
static inline void save_old(char * from, char * to)
{
    b62d:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 首先验证to处的内存空间是否足够大。然后把一个sigaction结构信息复制到fs段（用户）空间中。宏函数put_fs_byte()在
	// include/asm/segment.h中实现。
	verify_area(to, sizeof(struct sigaction));
    b630:	83 ec 08             	sub    $0x8,%esp
    b633:	6a 10                	push   $0x10
    b635:	ff 74 24 30          	pushl  0x30(%esp)
    b639:	e8 5d cd ff ff       	call   839b <verify_area>
    b63e:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < sizeof(struct sigaction) ; i++) {
    b641:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    b648:	00 
    b649:	eb 29                	jmp    b674 <save_old+0x47>
		put_fs_byte(*from, to);
    b64b:	8b 44 24 20          	mov    0x20(%esp),%eax
    b64f:	0f b6 00             	movzbl (%eax),%eax
    b652:	0f be c0             	movsbl %al,%eax
    b655:	83 ec 08             	sub    $0x8,%esp
    b658:	ff 74 24 2c          	pushl  0x2c(%esp)
    b65c:	50                   	push   %eax
    b65d:	e8 d2 fe ff ff       	call   b534 <put_fs_byte>
    b662:	83 c4 10             	add    $0x10,%esp
		from++;
    b665:	83 44 24 20 01       	addl   $0x1,0x20(%esp)
		to++;
    b66a:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
	for (i = 0 ; i < sizeof(struct sigaction) ; i++) {
    b66f:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    b674:	8b 44 24 0c          	mov    0xc(%esp),%eax
    b678:	83 f8 0f             	cmp    $0xf,%eax
    b67b:	76 ce                	jbe    b64b <save_old+0x1e>
	}
}
    b67d:	90                   	nop
    b67e:	83 c4 1c             	add    $0x1c,%esp
    b681:	c3                   	ret    

0000b682 <get_new>:

// 把sigaction数据从fs数据段from位置复制到to处。即从用户数据空间取到内核数据段中。
static inline void get_new(char * from, char * to)
{
    b682:	83 ec 10             	sub    $0x10,%esp
	int i;

	for (i = 0 ; i < sizeof(struct sigaction) ; i++)
    b685:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    b68c:	00 
    b68d:	eb 2a                	jmp    b6b9 <get_new+0x37>
		*(to++) = get_fs_byte(from++);
    b68f:	8b 44 24 14          	mov    0x14(%esp),%eax
    b693:	8d 50 01             	lea    0x1(%eax),%edx
    b696:	89 54 24 14          	mov    %edx,0x14(%esp)
    b69a:	50                   	push   %eax
    b69b:	e8 86 fe ff ff       	call   b526 <get_fs_byte>
    b6a0:	83 c4 04             	add    $0x4,%esp
    b6a3:	89 c1                	mov    %eax,%ecx
    b6a5:	8b 44 24 18          	mov    0x18(%esp),%eax
    b6a9:	8d 50 01             	lea    0x1(%eax),%edx
    b6ac:	89 54 24 18          	mov    %edx,0x18(%esp)
    b6b0:	89 ca                	mov    %ecx,%edx
    b6b2:	88 10                	mov    %dl,(%eax)
	for (i = 0 ; i < sizeof(struct sigaction) ; i++)
    b6b4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    b6b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    b6bd:	83 f8 0f             	cmp    $0xf,%eax
    b6c0:	76 cd                	jbe    b68f <get_new+0xd>
}
    b6c2:	90                   	nop
    b6c3:	83 c4 10             	add    $0x10,%esp
    b6c6:	c3                   	ret    

0000b6c7 <sys_signal>:
// 信号句柄可以是用户指定的函数，也可以是SIG_DFL（默认句柄）或SIG_IGN（忽略）。
// 参数signum -- 指定的信号； handler -- 指定的句柄； restorer -- 恢复函数指针，该函数由Libc库提供。用于在信号
// 处理程序结束后恢复系统调用返回时几个寄存器的原有值以及系统调用的返回值，就好像系统调用没有执行过信号处理程序而直接
// 返回到用户程序一样。函数返回原信号句柄。
int sys_signal(int signum, long handler, long restorer)
{
    b6c7:	83 ec 10             	sub    $0x10,%esp
	struct sigaction tmp;

	// 首先验证信号值在有效范围（1--32）内，并且不得是信号SIGKILL和SIGSTOP。因为这两个信号不能被进程捕获。
	if (signum < 1 || signum > 32 || signum == SIGKILL || signum == SIGSTOP)
    b6ca:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    b6cf:	7e 15                	jle    b6e6 <sys_signal+0x1f>
    b6d1:	83 7c 24 14 20       	cmpl   $0x20,0x14(%esp)
    b6d6:	7f 0e                	jg     b6e6 <sys_signal+0x1f>
    b6d8:	83 7c 24 14 09       	cmpl   $0x9,0x14(%esp)
    b6dd:	74 07                	je     b6e6 <sys_signal+0x1f>
    b6df:	83 7c 24 14 13       	cmpl   $0x13,0x14(%esp)
    b6e4:	75 07                	jne    b6ed <sys_signal+0x26>
		return -EINVAL;
    b6e6:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    b6eb:	eb 6b                	jmp    b758 <sys_signal+0x91>
	// 然后根据提供的参数组建sigaction结构内容。sa_handler是指定的信号处理句柄（函数）。sa_mask是执行信号处理句柄时的
	// 信号屏蔽码。sa_flags是执行时的一些标志组合。这里设定该信号处理句柄只使用1次后就恢复到默认值，并允许信号在自己的处理
	// 句柄中收到。
	tmp.sa_handler = (void (*)(int)) handler;
    b6ed:	8b 44 24 18          	mov    0x18(%esp),%eax
    b6f1:	89 04 24             	mov    %eax,(%esp)
	tmp.sa_mask = 0;
    b6f4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    b6fb:	00 
	tmp.sa_flags = SA_ONESHOT | SA_NOMASK;
    b6fc:	c7 44 24 08 00 00 00 	movl   $0xc0000000,0x8(%esp)
    b703:	c0 
	tmp.sa_restorer = (void (*)(void)) restorer;    				// 保存恢复处理函数指针。
    b704:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b708:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 接着取该信号原来的处理句柄，并设置该信号的sigaction结构。最后返回原信号句柄。
	handler = (long) current->sigaction[signum - 1].sa_handler;
    b70c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b711:	8b 54 24 14          	mov    0x14(%esp),%edx
    b715:	83 ea 01             	sub    $0x1,%edx
    b718:	83 c2 01             	add    $0x1,%edx
    b71b:	c1 e2 04             	shl    $0x4,%edx
    b71e:	01 d0                	add    %edx,%eax
    b720:	8b 00                	mov    (%eax),%eax
    b722:	89 44 24 18          	mov    %eax,0x18(%esp)
	current->sigaction[signum - 1] = tmp;
    b726:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b72b:	8b 54 24 14          	mov    0x14(%esp),%edx
    b72f:	83 ea 01             	sub    $0x1,%edx
    b732:	83 c2 01             	add    $0x1,%edx
    b735:	c1 e2 04             	shl    $0x4,%edx
    b738:	01 d0                	add    %edx,%eax
    b73a:	8b 14 24             	mov    (%esp),%edx
    b73d:	89 10                	mov    %edx,(%eax)
    b73f:	8b 54 24 04          	mov    0x4(%esp),%edx
    b743:	89 50 04             	mov    %edx,0x4(%eax)
    b746:	8b 54 24 08          	mov    0x8(%esp),%edx
    b74a:	89 50 08             	mov    %edx,0x8(%eax)
    b74d:	8b 54 24 0c          	mov    0xc(%esp),%edx
    b751:	89 50 0c             	mov    %edx,0xc(%eax)
	return handler;
    b754:	8b 44 24 18          	mov    0x18(%esp),%eax
}
    b758:	83 c4 10             	add    $0x10,%esp
    b75b:	c3                   	ret    

0000b75c <sys_sigaction>:

// sigaction()系统调用。改变进程在收到一个信号时的操作。signum是除了SIGKILL以外的任何信号。[如果新操作（action）不为空]
// 则新操作被安装。如果oldaction指针不为空，则原操作被保留到oldaction。成功则返回0,否则为-EINVAL。
int sys_sigaction(int signum, const struct sigaction * action,
	struct sigaction * oldaction)
{
    b75c:	53                   	push   %ebx
    b75d:	83 ec 18             	sub    $0x18,%esp
	struct sigaction tmp;

	// 首先验证信号值在有效范围（1--32）内，并且不得是信号SIGKILL和SIGSTOP。因为这两个信号不能被进程捕获。
	if (signum < 1 || signum > 32 || signum == SIGKILL || signum == SIGSTOP)
    b760:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    b765:	7e 15                	jle    b77c <sys_sigaction+0x20>
    b767:	83 7c 24 20 20       	cmpl   $0x20,0x20(%esp)
    b76c:	7f 0e                	jg     b77c <sys_sigaction+0x20>
    b76e:	83 7c 24 20 09       	cmpl   $0x9,0x20(%esp)
    b773:	74 07                	je     b77c <sys_sigaction+0x20>
    b775:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    b77a:	75 0a                	jne    b786 <sys_sigaction+0x2a>
		return -EINVAL;
    b77c:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    b781:	e9 fa 00 00 00       	jmp    b880 <sys_sigaction+0x124>
	// 在信号的sigaction结构中设置新的操作（动作）。如果oldaction指针不为空的话，则将原操作指针保存到oldaction所指的位置。
	tmp = current->sigaction[signum - 1];
    b786:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b78b:	8b 54 24 20          	mov    0x20(%esp),%edx
    b78f:	83 ea 01             	sub    $0x1,%edx
    b792:	83 c2 01             	add    $0x1,%edx
    b795:	c1 e2 04             	shl    $0x4,%edx
    b798:	01 d0                	add    %edx,%eax
    b79a:	8b 10                	mov    (%eax),%edx
    b79c:	89 14 24             	mov    %edx,(%esp)
    b79f:	8b 50 04             	mov    0x4(%eax),%edx
    b7a2:	89 54 24 04          	mov    %edx,0x4(%esp)
    b7a6:	8b 50 08             	mov    0x8(%eax),%edx
    b7a9:	89 54 24 08          	mov    %edx,0x8(%esp)
    b7ad:	8b 40 0c             	mov    0xc(%eax),%eax
    b7b0:	89 44 24 0c          	mov    %eax,0xc(%esp)
	get_new((char *) action,
		(char *) (signum - 1 + current->sigaction));
    b7b4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b7b9:	8d 50 10             	lea    0x10(%eax),%edx
    b7bc:	8b 44 24 20          	mov    0x20(%esp),%eax
	get_new((char *) action,
    b7c0:	05 ff ff ff 0f       	add    $0xfffffff,%eax
    b7c5:	c1 e0 04             	shl    $0x4,%eax
    b7c8:	01 d0                	add    %edx,%eax
    b7ca:	50                   	push   %eax
    b7cb:	ff 74 24 28          	pushl  0x28(%esp)
    b7cf:	e8 ae fe ff ff       	call   b682 <get_new>
    b7d4:	83 c4 08             	add    $0x8,%esp
	if (oldaction)
    b7d7:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    b7dc:	74 14                	je     b7f2 <sys_sigaction+0x96>
		save_old((char *) &tmp,(char *) oldaction);
    b7de:	83 ec 08             	sub    $0x8,%esp
    b7e1:	ff 74 24 30          	pushl  0x30(%esp)
    b7e5:	8d 44 24 0c          	lea    0xc(%esp),%eax
    b7e9:	50                   	push   %eax
    b7ea:	e8 3e fe ff ff       	call   b62d <save_old>
    b7ef:	83 c4 10             	add    $0x10,%esp
	// 如果允许信号在自己的信号句柄中收到，则令屏蔽码为0,否则设置屏蔽本信号。
	if (current->sigaction[signum - 1].sa_flags & SA_NOMASK)
    b7f2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b7f7:	8b 54 24 20          	mov    0x20(%esp),%edx
    b7fb:	83 ea 01             	sub    $0x1,%edx
    b7fe:	83 c2 01             	add    $0x1,%edx
    b801:	c1 e2 04             	shl    $0x4,%edx
    b804:	01 d0                	add    %edx,%eax
    b806:	83 c0 08             	add    $0x8,%eax
    b809:	8b 00                	mov    (%eax),%eax
    b80b:	25 00 00 00 40       	and    $0x40000000,%eax
    b810:	85 c0                	test   %eax,%eax
    b812:	74 1f                	je     b833 <sys_sigaction+0xd7>
		current->sigaction[signum - 1].sa_mask = 0;
    b814:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b819:	8b 54 24 20          	mov    0x20(%esp),%edx
    b81d:	83 ea 01             	sub    $0x1,%edx
    b820:	83 c2 01             	add    $0x1,%edx
    b823:	c1 e2 04             	shl    $0x4,%edx
    b826:	01 d0                	add    %edx,%eax
    b828:	83 c0 04             	add    $0x4,%eax
    b82b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    b831:	eb 48                	jmp    b87b <sys_sigaction+0x11f>
	else
		current->sigaction[signum - 1].sa_mask |= (1 << (signum - 1));
    b833:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b838:	8b 54 24 20          	mov    0x20(%esp),%edx
    b83c:	83 ea 01             	sub    $0x1,%edx
    b83f:	83 c2 01             	add    $0x1,%edx
    b842:	c1 e2 04             	shl    $0x4,%edx
    b845:	01 d0                	add    %edx,%eax
    b847:	83 c0 04             	add    $0x4,%eax
    b84a:	8b 10                	mov    (%eax),%edx
    b84c:	8b 44 24 20          	mov    0x20(%esp),%eax
    b850:	83 e8 01             	sub    $0x1,%eax
    b853:	bb 01 00 00 00       	mov    $0x1,%ebx
    b858:	89 c1                	mov    %eax,%ecx
    b85a:	d3 e3                	shl    %cl,%ebx
    b85c:	89 d8                	mov    %ebx,%eax
    b85e:	89 c3                	mov    %eax,%ebx
    b860:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b865:	8b 4c 24 20          	mov    0x20(%esp),%ecx
    b869:	83 e9 01             	sub    $0x1,%ecx
    b86c:	09 da                	or     %ebx,%edx
    b86e:	83 c1 01             	add    $0x1,%ecx
    b871:	c1 e1 04             	shl    $0x4,%ecx
    b874:	01 c8                	add    %ecx,%eax
    b876:	83 c0 04             	add    $0x4,%eax
    b879:	89 10                	mov    %edx,(%eax)
	return 0;
    b87b:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b880:	83 c4 18             	add    $0x18,%esp
    b883:	5b                   	pop    %ebx
    b884:	c3                   	ret    

0000b885 <core_dump>:
/*
 * 在当前目录中产生core dump映像文件的子程序。目前还没有实现。
 */
int core_dump(long signr)
{
	return(0);	/* We didn't do a dump */
    b885:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b88a:	c3                   	ret    

0000b88b <do_signal>:
// 4、第124行压入栈中的当前处理的信号值（signr）。
int do_signal(long signr, long eax, long ebx, long ecx, long edx, long orig_eax,
	long fs, long es, long ds,
	long eip, long cs, long eflags,
	unsigned long * esp, long ss)
{
    b88b:	83 ec 2c             	sub    $0x2c,%esp
	unsigned long sa_handler;
	long old_eip = eip;
    b88e:	8b 44 24 54          	mov    0x54(%esp),%eax
    b892:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	struct sigaction * sa = current->sigaction + signr - 1;			// 得到对应信号的处理数据结构
    b896:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b89b:	8d 50 10             	lea    0x10(%eax),%edx
    b89e:	8b 44 24 30          	mov    0x30(%esp),%eax
    b8a2:	05 ff ff ff 0f       	add    $0xfffffff,%eax
    b8a7:	c1 e0 04             	shl    $0x4,%eax
    b8aa:	01 d0                	add    %edx,%eax
    b8ac:	89 44 24 14          	mov    %eax,0x14(%esp)
	// 当前读数据但没有读到任何数据等情况下，进程收到了任何一个非阻塞的信号，则都会-ERESTARTSYS返回值返回。它表示进程可以被
	// 中断，但是在继续执行后会重新启动系统调用。返回码-ERESTARTNOINTR说明在处理完信号后要求返回到原系统调用中继续运行，即系统
	// 调用不会被中断。
	// 因此下面语句说明如果是在系统调用中调用的本函数，并且相应系统调用的返回码eax等于-ERESTARTSYS或-ERESTARTNOINTR时进行下面
	// 的处理（实际上还没有真正回到用户程序中）。
	if ((orig_eax != -1) &&
    b8b0:	83 7c 24 44 ff       	cmpl   $0xffffffff,0x44(%esp)
    b8b5:	74 5e                	je     b915 <do_signal+0x8a>
	    ((eax == -ERESTARTSYS) || (eax == -ERESTARTNOINTR))) {
    b8b7:	8b 44 24 34          	mov    0x34(%esp),%eax
	if ((orig_eax != -1) &&
    b8bb:	3d 00 fe ff ff       	cmp    $0xfffffe00,%eax
    b8c0:	74 0b                	je     b8cd <do_signal+0x42>
	    ((eax == -ERESTARTSYS) || (eax == -ERESTARTNOINTR))) {
    b8c2:	8b 44 24 34          	mov    0x34(%esp),%eax
    b8c6:	3d ff fd ff ff       	cmp    $0xfffffdff,%eax
    b8cb:	75 48                	jne    b915 <do_signal+0x8a>
		// 如果系统调用返回码是-ERESTARTSYS（重新启动系统调用），并且sigaction中含有标志SA_INTERRUPT（系统调用被信号中断后不重新
		// 启动系统调用）或者信号值小于SIGCONT或者信号值大于SIGTTOU（即信号不是SIGCONT、SIGSTOP、SIGTSTP、SIGTTIN或SIGTTOU），
		// 则修改系统调用的返回值为eax = -EINTR，即被信号中断的系统调用。
		if ((eax == -ERESTARTSYS) && ((sa->sa_flags & SA_INTERRUPT) ||
    b8cd:	8b 44 24 34          	mov    0x34(%esp),%eax
    b8d1:	3d 00 fe ff ff       	cmp    $0xfffffe00,%eax
    b8d6:	75 28                	jne    b900 <do_signal+0x75>
    b8d8:	8b 44 24 14          	mov    0x14(%esp),%eax
    b8dc:	8b 40 08             	mov    0x8(%eax),%eax
    b8df:	25 00 00 00 20       	and    $0x20000000,%eax
    b8e4:	85 c0                	test   %eax,%eax
    b8e6:	75 0e                	jne    b8f6 <do_signal+0x6b>
    b8e8:	83 7c 24 30 11       	cmpl   $0x11,0x30(%esp)
    b8ed:	7e 07                	jle    b8f6 <do_signal+0x6b>
		    signr < SIGCONT || signr > SIGTTOU))
    b8ef:	83 7c 24 30 16       	cmpl   $0x16,0x30(%esp)
    b8f4:	7e 0a                	jle    b900 <do_signal+0x75>
			*(&eax) = -EINTR;
    b8f6:	c7 44 24 34 fc ff ff 	movl   $0xfffffffc,0x34(%esp)
    b8fd:	ff 
    b8fe:	eb 15                	jmp    b915 <do_signal+0x8a>
		// 否则就恢复进程寄存器eax在调用系统调用之前的值，并且把源程序指令指针回调2个字节。即当返回用户程序时，让程序重新启动执行被信号
		// 中断的系统调用。
		else {
			*(&eax) = orig_eax;     				// orig_eax系统调用号
    b900:	8b 44 24 44          	mov    0x44(%esp),%eax
    b904:	89 44 24 34          	mov    %eax,0x34(%esp)
			//*(&eip) = old_eip -= 2;
			// 系统调用返回到用户态的时候再次执行本次系统调用
			old_eip -= 2;
    b908:	83 6c 24 1c 02       	subl   $0x2,0x1c(%esp)
			__asm__ ("movl %%eax, %0\n\t" \
    b90d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b911:	89 44 24 54          	mov    %eax,0x54(%esp)
					: \
					:"m"(eip), "a"(old_eip));
		}
	}
	// 如果信号句柄为SIG_IGN（1,默认忽略句柄）则不对信号进行处理而直接返回。
	sa_handler = (unsigned long) sa->sa_handler;
    b915:	8b 44 24 14          	mov    0x14(%esp),%eax
    b919:	8b 00                	mov    (%eax),%eax
    b91b:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (sa_handler == 1)
    b91f:	83 7c 24 10 01       	cmpl   $0x1,0x10(%esp)
    b924:	75 0a                	jne    b930 <do_signal+0xa5>
		return(1);   								/* Ignore, see if there are more signals... */
    b926:	b8 01 00 00 00       	mov    $0x1,%eax
    b92b:	e9 4a 02 00 00       	jmp    bb7a <do_signal+0x2ef>
	// 如果句柄为SIG_DFL（0,默认处理），则根据具体的信号进行分别处理。
	if (!sa_handler) {
    b930:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    b935:	0f 85 b2 00 00 00    	jne    b9ed <do_signal+0x162>
		switch (signr) {
    b93b:	8b 44 24 30          	mov    0x30(%esp),%eax
    b93f:	83 e8 03             	sub    $0x3,%eax
    b942:	83 f8 13             	cmp    $0x13,%eax
    b945:	0f 87 93 00 00 00    	ja     b9de <do_signal+0x153>
    b94b:	8b 04 85 b4 39 02 00 	mov    0x239b4(,%eax,4),%eax
    b952:	ff e0                	jmp    *%eax
		// 如果信号是以下两个则也忽略之，并返回
		case SIGCONT:
		case SIGCHLD:
			return(1);  							/* Ignore, ... */
    b954:	b8 01 00 00 00       	mov    $0x1,%eax
    b959:	e9 1c 02 00 00       	jmp    bb7a <do_signal+0x2ef>
		// 信号。
		case SIGSTOP:
		case SIGTSTP:
		case SIGTTIN:
		case SIGTTOU:
			current->state = TASK_STOPPED;
    b95e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b963:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
			current->exit_code = signr;
    b969:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b96e:	8b 54 24 30          	mov    0x30(%esp),%edx
    b972:	89 90 14 02 00 00    	mov    %edx,0x214(%eax)
			if (!(current->p_pptr->sigaction[SIGCHLD - 1].sa_flags &
    b978:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b97d:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    b983:	8b 80 18 01 00 00    	mov    0x118(%eax),%eax
    b989:	83 e0 01             	and    $0x1,%eax
    b98c:	85 c0                	test   %eax,%eax
    b98e:	75 22                	jne    b9b2 <do_signal+0x127>
					SA_NOCLDSTOP))
				current->p_pptr->signal |= (1 << (SIGCHLD - 1));
    b990:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b995:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    b99b:	8b 50 0c             	mov    0xc(%eax),%edx
    b99e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b9a3:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    b9a9:	81 ca 00 00 01 00    	or     $0x10000,%edx
    b9af:	89 50 0c             	mov    %edx,0xc(%eax)
			return(1);  							/* Reschedule another event */
    b9b2:	b8 01 00 00 00       	mov    $0x1,%eax
    b9b7:	e9 be 01 00 00       	jmp    bb7a <do_signal+0x2ef>
		case SIGILL:
		case SIGTRAP:
		case SIGIOT:
		case SIGFPE:
		case SIGSEGV:
			if (core_dump(signr))
    b9bc:	ff 74 24 30          	pushl  0x30(%esp)
    b9c0:	e8 c0 fe ff ff       	call   b885 <core_dump>
    b9c5:	83 c4 04             	add    $0x4,%esp
    b9c8:	85 c0                	test   %eax,%eax
    b9ca:	74 12                	je     b9de <do_signal+0x153>
				do_exit(signr | 0x80);
    b9cc:	8b 44 24 30          	mov    0x30(%esp),%eax
    b9d0:	0c 80                	or     $0x80,%al
    b9d2:	83 ec 0c             	sub    $0xc,%esp
    b9d5:	50                   	push   %eax
    b9d6:	e8 8f f3 ff ff       	call   ad6a <do_exit>
    b9db:	83 c4 10             	add    $0x10,%esp
			/* fall through */
		default:
			do_exit(signr);
    b9de:	83 ec 0c             	sub    $0xc,%esp
    b9e1:	ff 74 24 3c          	pushl  0x3c(%esp)
    b9e5:	e8 80 f3 ff ff       	call   ad6a <do_exit>
    b9ea:	83 c4 10             	add    $0x10,%esp
	// 如果该信号句柄只需被调用一次，则将该句柄置空。注意，该信号句柄前面已经保存在sa_handler指针中。
	// 在系统调用进程内核时，用户程序返回地址（eip、cs）被保存在内核态栈中。下面这段代码修改内核态堆栈上用户调用时
	// 的代码指针eip为指向信号处理句柄，同时也将sa_restorer、signr、进程屏蔽码（如果SA_NOMASK没置位）、eax、
	// ecx、edx作为参数以及原调用系统调用的程序返回指针及标志寄存器值压入用户堆栈。因此在本次系统调用中断返回用户
	// 程序时会首先执行用户信号句柄程序，然后继续执行用户程序。
	if (sa->sa_flags & SA_ONESHOT)
    b9ed:	8b 44 24 14          	mov    0x14(%esp),%eax
    b9f1:	8b 40 08             	mov    0x8(%eax),%eax
    b9f4:	85 c0                	test   %eax,%eax
    b9f6:	79 0a                	jns    ba02 <do_signal+0x177>
		sa->sa_handler = NULL;
    b9f8:	8b 44 24 14          	mov    0x14(%esp),%eax
    b9fc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// 调用者丢弃。这里之所以可以使用这种方式，是因为该函数是从汇编程序中被调用的，并且在函数返回后汇编程序并没有把
	// 调用do_signal()时的所有参数都丢弃。eip等仍然在堆栈中。
	// sigaction结构的sa_mask字段给出了在当前信号句柄（信号描述符）程序执行期间应该被屏蔽的信号集。同时，引起本
	// 信号句柄执行的信号也会被屏蔽。不过若sa_flags中使用了SA_NOMASK标志，那么引起本信号句柄执行的信号将不会被屏蔽
	// 掉。如果允许信号自己的处理句柄程序收到信号自己，则也需要将进程的信号阻塞码压入堆栈。
	*(&eip) = sa_handler;
    ba02:	8b 44 24 10          	mov    0x10(%esp),%eax
    ba06:	89 44 24 54          	mov    %eax,0x54(%esp)
	longs = (sa->sa_flags & SA_NOMASK)?7:8;
    ba0a:	8b 44 24 14          	mov    0x14(%esp),%eax
    ba0e:	8b 40 08             	mov    0x8(%eax),%eax
    ba11:	25 00 00 00 40       	and    $0x40000000,%eax
    ba16:	85 c0                	test   %eax,%eax
    ba18:	74 07                	je     ba21 <do_signal+0x196>
    ba1a:	b8 07 00 00 00       	mov    $0x7,%eax
    ba1f:	eb 05                	jmp    ba26 <do_signal+0x19b>
    ba21:	b8 08 00 00 00       	mov    $0x8,%eax
    ba26:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 将原调用程序的用户堆栈指针向下扩展7（或8）个长字（用来存放调用信号句柄的参数等），并检查内存使用情况（如内存超
	// 界则分配新页等）。
	//*(&esp) -= longs;
	__asm__("subl %1, %0\n\t" \
			: \
			:"m"(esp), "a"(longs * 4));
    ba2a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ba2e:	c1 e0 02             	shl    $0x2,%eax
	__asm__("subl %1, %0\n\t" \
    ba31:	29 44 24 60          	sub    %eax,0x60(%esp)
	verify_area(esp, longs * 4);
    ba35:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ba39:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    ba40:	8b 44 24 60          	mov    0x60(%esp),%eax
    ba44:	83 ec 08             	sub    $0x8,%esp
    ba47:	52                   	push   %edx
    ba48:	50                   	push   %eax
    ba49:	e8 4d c9 ff ff       	call   839b <verify_area>
    ba4e:	83 c4 10             	add    $0x10,%esp
	// 在用户堆栈中从下到上存放sa_restorer、信号signr、屏蔽码blocked（如果SA_NOMASK置位）、eax、ecx、edx、eflags
	// 和用户程序原代码指针。
	tmp_esp = esp;
    ba51:	8b 44 24 60          	mov    0x60(%esp),%eax
    ba55:	89 44 24 18          	mov    %eax,0x18(%esp)
	put_fs_long((long) sa->sa_restorer, tmp_esp++);
    ba59:	8b 44 24 18          	mov    0x18(%esp),%eax
    ba5d:	8d 50 04             	lea    0x4(%eax),%edx
    ba60:	89 54 24 18          	mov    %edx,0x18(%esp)
    ba64:	8b 54 24 14          	mov    0x14(%esp),%edx
    ba68:	8b 52 0c             	mov    0xc(%edx),%edx
    ba6b:	83 ec 08             	sub    $0x8,%esp
    ba6e:	50                   	push   %eax
    ba6f:	52                   	push   %edx
    ba70:	e8 d9 fa ff ff       	call   b54e <put_fs_long>
    ba75:	83 c4 10             	add    $0x10,%esp
	put_fs_long(signr, tmp_esp++);
    ba78:	8b 44 24 18          	mov    0x18(%esp),%eax
    ba7c:	8d 50 04             	lea    0x4(%eax),%edx
    ba7f:	89 54 24 18          	mov    %edx,0x18(%esp)
    ba83:	8b 54 24 30          	mov    0x30(%esp),%edx
    ba87:	83 ec 08             	sub    $0x8,%esp
    ba8a:	50                   	push   %eax
    ba8b:	52                   	push   %edx
    ba8c:	e8 bd fa ff ff       	call   b54e <put_fs_long>
    ba91:	83 c4 10             	add    $0x10,%esp
	if (!(sa->sa_flags & SA_NOMASK))
    ba94:	8b 44 24 14          	mov    0x14(%esp),%eax
    ba98:	8b 40 08             	mov    0x8(%eax),%eax
    ba9b:	25 00 00 00 40       	and    $0x40000000,%eax
    baa0:	85 c0                	test   %eax,%eax
    baa2:	75 24                	jne    bac8 <do_signal+0x23d>
		put_fs_long(current->blocked, tmp_esp++);
    baa4:	8b 44 24 18          	mov    0x18(%esp),%eax
    baa8:	8d 50 04             	lea    0x4(%eax),%edx
    baab:	89 54 24 18          	mov    %edx,0x18(%esp)
    baaf:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    bab5:	8b 92 10 02 00 00    	mov    0x210(%edx),%edx
    babb:	83 ec 08             	sub    $0x8,%esp
    babe:	50                   	push   %eax
    babf:	52                   	push   %edx
    bac0:	e8 89 fa ff ff       	call   b54e <put_fs_long>
    bac5:	83 c4 10             	add    $0x10,%esp
	put_fs_long(eax, tmp_esp++);
    bac8:	8b 44 24 18          	mov    0x18(%esp),%eax
    bacc:	8d 50 04             	lea    0x4(%eax),%edx
    bacf:	89 54 24 18          	mov    %edx,0x18(%esp)
    bad3:	8b 54 24 34          	mov    0x34(%esp),%edx
    bad7:	83 ec 08             	sub    $0x8,%esp
    bada:	50                   	push   %eax
    badb:	52                   	push   %edx
    badc:	e8 6d fa ff ff       	call   b54e <put_fs_long>
    bae1:	83 c4 10             	add    $0x10,%esp
	put_fs_long(ecx, tmp_esp++);
    bae4:	8b 44 24 18          	mov    0x18(%esp),%eax
    bae8:	8d 50 04             	lea    0x4(%eax),%edx
    baeb:	89 54 24 18          	mov    %edx,0x18(%esp)
    baef:	8b 54 24 3c          	mov    0x3c(%esp),%edx
    baf3:	83 ec 08             	sub    $0x8,%esp
    baf6:	50                   	push   %eax
    baf7:	52                   	push   %edx
    baf8:	e8 51 fa ff ff       	call   b54e <put_fs_long>
    bafd:	83 c4 10             	add    $0x10,%esp
	put_fs_long(edx, tmp_esp++);
    bb00:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb04:	8d 50 04             	lea    0x4(%eax),%edx
    bb07:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb0b:	8b 54 24 40          	mov    0x40(%esp),%edx
    bb0f:	83 ec 08             	sub    $0x8,%esp
    bb12:	50                   	push   %eax
    bb13:	52                   	push   %edx
    bb14:	e8 35 fa ff ff       	call   b54e <put_fs_long>
    bb19:	83 c4 10             	add    $0x10,%esp
	put_fs_long(eflags, tmp_esp++);
    bb1c:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb20:	8d 50 04             	lea    0x4(%eax),%edx
    bb23:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb27:	8b 54 24 5c          	mov    0x5c(%esp),%edx
    bb2b:	83 ec 08             	sub    $0x8,%esp
    bb2e:	50                   	push   %eax
    bb2f:	52                   	push   %edx
    bb30:	e8 19 fa ff ff       	call   b54e <put_fs_long>
    bb35:	83 c4 10             	add    $0x10,%esp
	put_fs_long(old_eip, tmp_esp++);
    bb38:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb3c:	8d 50 04             	lea    0x4(%eax),%edx
    bb3f:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb43:	8b 54 24 1c          	mov    0x1c(%esp),%edx
    bb47:	83 ec 08             	sub    $0x8,%esp
    bb4a:	50                   	push   %eax
    bb4b:	52                   	push   %edx
    bb4c:	e8 fd f9 ff ff       	call   b54e <put_fs_long>
    bb51:	83 c4 10             	add    $0x10,%esp
	current->blocked |= sa->sa_mask;                // 进程阻塞码（屏蔽码）添上as_mask中的码。
    bb54:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    bb59:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    bb5f:	89 c2                	mov    %eax,%edx
    bb61:	8b 44 24 14          	mov    0x14(%esp),%eax
    bb65:	8b 40 04             	mov    0x4(%eax),%eax
    bb68:	09 c2                	or     %eax,%edx
    bb6a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    bb6f:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
	return(0);										/* Continue, execute handler */
    bb75:	b8 00 00 00 00       	mov    $0x0,%eax
}
    bb7a:	83 c4 2c             	add    $0x2c,%esp
    bb7d:	c3                   	ret    

0000bb7e <kernel_mktime>:
};

// 该函数计算从1970年1月1日0时起到开机当日经过的秒数,作为开机时间.
// 参数tm中各字段已经在init/main.c中被赋值,信息取自CMOS.
long kernel_mktime(struct tm * tm)
{
    bb7e:	83 ec 10             	sub    $0x10,%esp
	// if(tm->tm_year<70) tm->tm_year += 100;由于UNIX计年份y是从1970年算起.到1972年就是一个闰年,因此过3年(71,72,73)
	// 就是第1个闰年,这样从1970年开始的闰年数计算方法就应该是1+(y-3)/4,即为(y+1)/4.res=这些年经过的秒数时间+每个闰年时多1天
	// 的秒数时间+当年到当月时的秒数.另外,month[]数组中已经在2月份的天数中包含进了闰年时的天数,即2月份天数多算了1天.因此,若
	// 当年不是闰年并且当前月份大于2月份的话,我们就要减去这天.因为人70开始算起,所以当年是闰年的判断方法是(y+2)能被4除尽.若不能
	// 除尽(有余数)就不是闰年.
	if(tm->tm_year < 70) tm->tm_year += 100;				//处理2000年问题
    bb81:	8b 44 24 14          	mov    0x14(%esp),%eax
    bb85:	8b 40 14             	mov    0x14(%eax),%eax
    bb88:	83 f8 45             	cmp    $0x45,%eax
    bb8b:	7f 11                	jg     bb9e <kernel_mktime+0x20>
    bb8d:	8b 44 24 14          	mov    0x14(%esp),%eax
    bb91:	8b 40 14             	mov    0x14(%eax),%eax
    bb94:	8d 50 64             	lea    0x64(%eax),%edx
    bb97:	8b 44 24 14          	mov    0x14(%esp),%eax
    bb9b:	89 50 14             	mov    %edx,0x14(%eax)
	year = tm->tm_year - 70;
    bb9e:	8b 44 24 14          	mov    0x14(%esp),%eax
    bba2:	8b 40 14             	mov    0x14(%eax),%eax
    bba5:	83 e8 46             	sub    $0x46,%eax
    bba8:	89 44 24 08          	mov    %eax,0x8(%esp)
	/* magic offsets (y+1) needed to get leapyears right.*/
	/* 为了获得正确的闰年数,这里需要这样一个魔幻值(y+1) */
	res = YEAR * year + DAY * ((year + 1) / 4);
    bbac:	8b 44 24 08          	mov    0x8(%esp),%eax
    bbb0:	69 d0 80 33 e1 01    	imul   $0x1e13380,%eax,%edx
    bbb6:	8b 44 24 08          	mov    0x8(%esp),%eax
    bbba:	83 c0 01             	add    $0x1,%eax
    bbbd:	8d 48 03             	lea    0x3(%eax),%ecx
    bbc0:	85 c0                	test   %eax,%eax
    bbc2:	0f 48 c1             	cmovs  %ecx,%eax
    bbc5:	c1 f8 02             	sar    $0x2,%eax
    bbc8:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
    bbce:	01 d0                	add    %edx,%eax
    bbd0:	89 44 24 0c          	mov    %eax,0xc(%esp)
	res += month[tm->tm_mon];
    bbd4:	8b 44 24 14          	mov    0x14(%esp),%eax
    bbd8:	8b 40 10             	mov    0x10(%eax),%eax
    bbdb:	8b 04 85 20 f3 02 00 	mov    0x2f320(,%eax,4),%eax
    bbe2:	01 44 24 0c          	add    %eax,0xc(%esp)
	/* and (y+2) here. If it wasn't a leap-year, we have to adjust */
	/* 以及(y+2).如果(y+2)不是闰年,那么我们就必须进行调整(减去一天的秒数时间). */
	if (tm->tm_mon > 1 && ((year + 2) % 4))
    bbe6:	8b 44 24 14          	mov    0x14(%esp),%eax
    bbea:	8b 40 10             	mov    0x10(%eax),%eax
    bbed:	83 f8 01             	cmp    $0x1,%eax
    bbf0:	7e 16                	jle    bc08 <kernel_mktime+0x8a>
    bbf2:	8b 44 24 08          	mov    0x8(%esp),%eax
    bbf6:	83 c0 02             	add    $0x2,%eax
    bbf9:	83 e0 03             	and    $0x3,%eax
    bbfc:	85 c0                	test   %eax,%eax
    bbfe:	74 08                	je     bc08 <kernel_mktime+0x8a>
		res -= DAY;
    bc00:	81 6c 24 0c 80 51 01 	subl   $0x15180,0xc(%esp)
    bc07:	00 
	res += DAY * (tm->tm_mday - 1);							// 再加上本月过去的天数的秒数时间.
    bc08:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc0c:	8b 40 0c             	mov    0xc(%eax),%eax
    bc0f:	83 e8 01             	sub    $0x1,%eax
    bc12:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
    bc18:	01 44 24 0c          	add    %eax,0xc(%esp)
	res += HOUR * tm->tm_hour;								// 再加上当天过去的小时数的秒数时间.
    bc1c:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc20:	8b 40 08             	mov    0x8(%eax),%eax
    bc23:	69 c0 10 0e 00 00    	imul   $0xe10,%eax,%eax
    bc29:	01 44 24 0c          	add    %eax,0xc(%esp)
	res += MINUTE * tm->tm_min;								// 再加上1小时内过去的分钟数的秒数时间.
    bc2d:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc31:	8b 40 04             	mov    0x4(%eax),%eax
    bc34:	6b c0 3c             	imul   $0x3c,%eax,%eax
    bc37:	01 44 24 0c          	add    %eax,0xc(%esp)
	res += tm->tm_sec;										// 再加上1分钟内已过的秒数.
    bc3b:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc3f:	8b 00                	mov    (%eax),%eax
    bc41:	01 44 24 0c          	add    %eax,0xc(%esp)
	return res;												// 即等于从1970年以来经过的秒数时间.
    bc45:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    bc49:	83 c4 10             	add    $0x10,%esp
    bc4c:	c3                   	ret    

0000bc4d <oom>:
void swap_in(unsigned long *table_ptr);                                             // 把页表项是table_ptr的一页物理内存换出到交换空间

// 下面函数名前关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好的代码,更重要的是使用这个关键字可以避免产生某些(未
//　初始化变量的)假警告信息.
static inline void oom(void)
{
    bc4d:	83 ec 0c             	sub    $0xc,%esp
	printk("out of memory\n\r");
    bc50:	83 ec 0c             	sub    $0xc,%esp
    bc53:	68 04 3a 02 00       	push   $0x23a04
    bc58:	e8 e4 cf ff ff       	call   8c41 <printk>
    bc5d:	83 c4 10             	add    $0x10,%esp
    //　do_exit()应该使用退出代码,这里用了信息值SIGSEGV(11).相同值的出错码含义是"资源暂不可用",正好同义.
	do_exit(SIGSEGV);
    bc60:	83 ec 0c             	sub    $0xc,%esp
    bc63:	6a 0b                	push   $0xb
    bc65:	e8 00 f1 ff ff       	call   ad6a <do_exit>
    bc6a:	83 c4 10             	add    $0x10,%esp
}
    bc6d:	90                   	nop
    bc6e:	83 c4 0c             	add    $0xc,%esp
    bc71:	c3                   	ret    

0000bc72 <free_page>:
 * 释放物理地址"addr"处的一页内存.用于函数free_page_tables().
 */
// 释放物理地址addr开始的1页面内存.
// 物理地址1MB以下的内存空间用于内核程序和缓冲,不作为分配页面的内存空间.因此参数addr需要大于1MB
void free_page(unsigned long addr)
{
    bc72:	83 ec 0c             	sub    $0xc,%esp
	// 首先判断参数给定的物理地址addr的合理性.如果物理地址addr小于内存低端(1MB),则表示在内核程序或高速缓冲中,对此不予处理.如果物理地址
	// addr >=系统所含物理内存最高端,则显示出错信息并且内核停止工作.
	if (addr < LOW_MEM) return;
    bc75:	81 7c 24 10 ff ff 0f 	cmpl   $0xfffff,0x10(%esp)
    bc7c:	00 
    bc7d:	76 65                	jbe    bce4 <free_page+0x72>
	if (addr >= HIGH_MEMORY)
    bc7f:	a1 80 02 03 00       	mov    0x30280,%eax
    bc84:	39 44 24 10          	cmp    %eax,0x10(%esp)
    bc88:	72 10                	jb     bc9a <free_page+0x28>
		panic("trying to free nonexistent page");
    bc8a:	83 ec 0c             	sub    $0xc,%esp
    bc8d:	68 14 3a 02 00       	push   $0x23a14
    bc92:	e8 6b cf ff ff       	call   8c02 <panic>
    bc97:	83 c4 10             	add    $0x10,%esp
	// 如果对参数addr验证通过,那么就根据这个物理地址换算出内存低端开始计起的内存页面号.页面号 = (addr - LOW_MEME)/4096.可见页面号从0号
	// 开始计起.此时addr中存放着页面号.如果该页面号对应的页面映射字节不等于0,则减1返回.此时该映射字节值应该为0,表示页面已释放.如果对应页面原本就
	// 是0,表示该物理页面本来就是空闲的,说明内核代码出问题.于是显示出错信息并停机.
	addr -= LOW_MEM;
    bc9a:	81 6c 24 10 00 00 10 	subl   $0x100000,0x10(%esp)
    bca1:	00 
	addr >>= 12;
    bca2:	c1 6c 24 10 0c       	shrl   $0xc,0x10(%esp)
	if (mem_map[addr]--) return;
    bca7:	8b 44 24 10          	mov    0x10(%esp),%eax
    bcab:	05 a0 02 03 00       	add    $0x302a0,%eax
    bcb0:	0f b6 00             	movzbl (%eax),%eax
    bcb3:	8d 50 ff             	lea    -0x1(%eax),%edx
    bcb6:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    bcba:	81 c1 a0 02 03 00    	add    $0x302a0,%ecx
    bcc0:	88 11                	mov    %dl,(%ecx)
    bcc2:	84 c0                	test   %al,%al
    bcc4:	75 21                	jne    bce7 <free_page+0x75>
	// 执行到此处表示要释放空闲的页面，则将该页面的引用次数重置为0
	mem_map[addr] = 0;
    bcc6:	8b 44 24 10          	mov    0x10(%esp),%eax
    bcca:	05 a0 02 03 00       	add    $0x302a0,%eax
    bccf:	c6 00 00             	movb   $0x0,(%eax)
	panic("trying to free free page");
    bcd2:	83 ec 0c             	sub    $0xc,%esp
    bcd5:	68 34 3a 02 00       	push   $0x23a34
    bcda:	e8 23 cf ff ff       	call   8c02 <panic>
    bcdf:	83 c4 10             	add    $0x10,%esp
    bce2:	eb 04                	jmp    bce8 <free_page+0x76>
	if (addr < LOW_MEM) return;
    bce4:	90                   	nop
    bce5:	eb 01                	jmp    bce8 <free_page+0x76>
	if (mem_map[addr]--) return;
    bce7:	90                   	nop
}
    bce8:	83 c4 0c             	add    $0xc,%esp
    bceb:	c3                   	ret    

0000bcec <free_page_tables>:
// 页目录位于物理地址0开始处,共1024项,每项4字节,共占4KB.每个目录项指定一个页表.内核页表物理地址0x1000处开始(紧接着目录空间),
// 共4个页表.每个页表有1024项,每项4B.因此也占4KB(1页)内存.各进程(除了在内核代码中的进程0和1)的页表所占据的页面在进程被创建时由
// 内核为其在主内存区申请得到.每个页表项对应1页物理内存,因此一个页表最多可映射4MB的物理内存.
// 参数:from - 起始线性基地址;size - 释放的字节长度.
int free_page_tables(unsigned long from, unsigned long size)
{
    bcec:	83 ec 1c             	sub    $0x1c,%esp
	unsigned long *pg_table;
	unsigned long * dir, nr;

	// 首先检测参数from给出的线性基地址是否在4MB的边界处.因为该函数只能处理这种情况.若from = 0,则出错.说明试图释放内核和缓冲所占空间.
	if (from & 0x3fffff)
    bcef:	8b 44 24 20          	mov    0x20(%esp),%eax
    bcf3:	25 ff ff 3f 00       	and    $0x3fffff,%eax
    bcf8:	85 c0                	test   %eax,%eax
    bcfa:	74 10                	je     bd0c <free_page_tables+0x20>
		panic("free_page_tables called with wrong alignment");
    bcfc:	83 ec 0c             	sub    $0xc,%esp
    bcff:	68 50 3a 02 00       	push   $0x23a50
    bd04:	e8 f9 ce ff ff       	call   8c02 <panic>
    bd09:	83 c4 10             	add    $0x10,%esp
	if (!from)
    bd0c:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    bd11:	75 10                	jne    bd23 <free_page_tables+0x37>
		panic("Trying to free up swapper memory space");
    bd13:	83 ec 0c             	sub    $0xc,%esp
    bd16:	68 80 3a 02 00       	push   $0x23a80
    bd1b:	e8 e2 ce ff ff       	call   8c02 <panic>
    bd20:	83 c4 10             	add    $0x10,%esp
	// 然后计算参数size给出的长度所占的页目录数(4MB的进位整数倍),也即所占页表数.
	// 因为1个页表可管理4MB物理内存,所以这里用右移22位的方式把需要复制的内存长度值除以4MB.其中加上0x3fffff(即4MB-1)用于得到进位整数倍
	// 结果,即除操作若有余数则进1.例如,如果原size = 4.01MB,那么可得到结果size = 2.
	size = (size + 0x3fffff) >> 22;
    bd23:	8b 44 24 24          	mov    0x24(%esp),%eax
    bd27:	05 ff ff 3f 00       	add    $0x3fffff,%eax
    bd2c:	c1 e8 16             	shr    $0x16,%eax
    bd2f:	89 44 24 24          	mov    %eax,0x24(%esp)
	// 接着计算给出的线性基地址对应的起始目录项, 对应的目录项号 = from >>22.因为每项点4字节,并且由于页目录表从物理地址0开始存放,
	// 因此实际目录项指针 = 目录项号<<2,也即(from >> 20),"与"上0xffc确保目录项指针范围有效.
	// dir表示起始的页目录项物理地址
	dir = (unsigned long *) ((from >> 20) & 0xffc); 			/* _pg_dir = 0 */
    bd33:	8b 44 24 20          	mov    0x20(%esp),%eax
    bd37:	c1 e8 14             	shr    $0x14,%eax
    bd3a:	25 fc 0f 00 00       	and    $0xffc,%eax
    bd3f:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 此时size是释放的页表个数,即页目录项数,而dir是起始目录项指针.现在开始循环操作页目录项,依次释放每个页表中的页表项.如果当前目录项无效(
	// P位=0),表示该目录项没有使用(对应的页表不存在),则继续处理下一个页表项.否则从目录项中取出页表地址pg_table,并对该页表中的1024个表项
	// 进行处理,释放有效页表(P位=1)对应的物理内存页面,或者从交换设备中释放无效页表项(P位=0)对应的页面,即释放交换设备中对应的内存页面(因为
	// 页面可能已经交换出去).然后把该页表项清零,并继续处理下一页表项.当一个页表所有表项都处理完毕就释放该页表自身占据的内存页面,并继续处理下
	// 一页目录项.最后刷新页变换高速缓冲,并返回0.
	for ( ; size-- > 0 ; dir++) {
    bd43:	e9 b5 00 00 00       	jmp    bdfd <free_page_tables+0x111>
		// 如果该目录项不存在页表项，则直接跳过该页表项
		if (!(1 & *dir))
    bd48:	8b 44 24 08          	mov    0x8(%esp),%eax
    bd4c:	8b 00                	mov    (%eax),%eax
    bd4e:	83 e0 01             	and    $0x1,%eax
    bd51:	85 c0                	test   %eax,%eax
    bd53:	0f 84 9e 00 00 00    	je     bdf7 <free_page_tables+0x10b>
			continue;
		pg_table = (unsigned long *) (0xfffff000 & *dir);		// 取页表地址.
    bd59:	8b 44 24 08          	mov    0x8(%esp),%eax
    bd5d:	8b 00                	mov    (%eax),%eax
    bd5f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    bd64:	89 44 24 0c          	mov    %eax,0xc(%esp)
		for (nr = 0 ; nr < 1024 ; nr++) {
    bd68:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    bd6f:	00 
    bd70:	eb 58                	jmp    bdca <free_page_tables+0xde>
			if (*pg_table) {									// 若所指页表项内容不为0,则若该项有效,则释放对应面.
    bd72:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bd76:	8b 00                	mov    (%eax),%eax
    bd78:	85 c0                	test   %eax,%eax
    bd7a:	74 44                	je     bdc0 <free_page_tables+0xd4>
				if (1 & *pg_table)
    bd7c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bd80:	8b 00                	mov    (%eax),%eax
    bd82:	83 e0 01             	and    $0x1,%eax
    bd85:	85 c0                	test   %eax,%eax
    bd87:	74 19                	je     bda2 <free_page_tables+0xb6>
					free_page(0xfffff000 & *pg_table);
    bd89:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bd8d:	8b 00                	mov    (%eax),%eax
    bd8f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    bd94:	83 ec 0c             	sub    $0xc,%esp
    bd97:	50                   	push   %eax
    bd98:	e8 d5 fe ff ff       	call   bc72 <free_page>
    bd9d:	83 c4 10             	add    $0x10,%esp
    bda0:	eb 14                	jmp    bdb6 <free_page_tables+0xca>
				else											// 否则释放交换设备中对应页.
					swap_free(*pg_table >> 1);
    bda2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bda6:	8b 00                	mov    (%eax),%eax
    bda8:	d1 e8                	shr    %eax
    bdaa:	83 ec 0c             	sub    $0xc,%esp
    bdad:	50                   	push   %eax
    bdae:	e8 f6 0e 00 00       	call   cca9 <swap_free>
    bdb3:	83 c4 10             	add    $0x10,%esp
				*pg_table = 0;									// 该页表项内容清零.
    bdb6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bdba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
			pg_table++;											//指向页表中下一项.
    bdc0:	83 44 24 0c 04       	addl   $0x4,0xc(%esp)
		for (nr = 0 ; nr < 1024 ; nr++) {
    bdc5:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
    bdca:	81 7c 24 04 ff 03 00 	cmpl   $0x3ff,0x4(%esp)
    bdd1:	00 
    bdd2:	76 9e                	jbe    bd72 <free_page_tables+0x86>
		}
		free_page(0xfffff000 & *dir);							// 释放该页表所占内存页面.
    bdd4:	8b 44 24 08          	mov    0x8(%esp),%eax
    bdd8:	8b 00                	mov    (%eax),%eax
    bdda:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    bddf:	83 ec 0c             	sub    $0xc,%esp
    bde2:	50                   	push   %eax
    bde3:	e8 8a fe ff ff       	call   bc72 <free_page>
    bde8:	83 c4 10             	add    $0x10,%esp
		*dir = 0;												// 对应页表的目录项清零.
    bdeb:	8b 44 24 08          	mov    0x8(%esp),%eax
    bdef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    bdf5:	eb 01                	jmp    bdf8 <free_page_tables+0x10c>
			continue;
    bdf7:	90                   	nop
	for ( ; size-- > 0 ; dir++) {
    bdf8:	83 44 24 08 04       	addl   $0x4,0x8(%esp)
    bdfd:	8b 44 24 24          	mov    0x24(%esp),%eax
    be01:	8d 50 ff             	lea    -0x1(%eax),%edx
    be04:	89 54 24 24          	mov    %edx,0x24(%esp)
    be08:	85 c0                	test   %eax,%eax
    be0a:	0f 85 38 ff ff ff    	jne    bd48 <free_page_tables+0x5c>
	}
	invalidate();												// 刷新CPU页变换高速缓冲.
    be10:	b8 00 00 00 00       	mov    $0x0,%eax
    be15:	0f 22 d8             	mov    %eax,%cr3
	return 0;
    be18:	b8 00 00 00 00       	mov    $0x0,%eax
}
    be1d:	83 c4 1c             	add    $0x1c,%esp
    be20:	c3                   	ret    

0000be21 <copy_page_tables>:
// 复制指定线性地址和长度内存对应的页目录项和页表项,从而被复制的页目录和页表对应的原物理内存页面区被两套页表映射而共享使用.复制时,需申请
// 新页面来存放新页表,原物理内存区将被共享.此后两个进程(父进程和其子进程)将共享内存区,直到有一个进程执行写操作时,内核才会为写操作进程分配
// 新的内存页(写时复制机制).
// 参数from,to是线性地址,size是需要复制(共享)的内存长度,单位是字节.
int copy_page_tables(unsigned long from, unsigned long to, long size)
{
    be21:	83 ec 2c             	sub    $0x2c,%esp
	unsigned long nr;

	// 首先检测参数给出的源地址from和目的地址to的有效性.源地址和目的地址都需要在4MB内存边界地址上.否则出错死机.作这样的要求是因为一个页表的
	// 1024项可管理4MB内存.源地址from和目的地址to只有满足这个要求才能保证从一个页表的第1项开始复制页表项,并且新页表最初所有项都是有效的.然后
	// 取得源地址和目的地址的起始目录项指针(from_dir和do_dir).再根据参数给出的长度size计算要复制的内存块占用的页表数(即目录项数)
	if ((from & 0x3fffff) || (to & 0x3fffff))
    be24:	8b 44 24 30          	mov    0x30(%esp),%eax
    be28:	25 ff ff 3f 00       	and    $0x3fffff,%eax
    be2d:	85 c0                	test   %eax,%eax
    be2f:	75 0d                	jne    be3e <copy_page_tables+0x1d>
    be31:	8b 44 24 34          	mov    0x34(%esp),%eax
    be35:	25 ff ff 3f 00       	and    $0x3fffff,%eax
    be3a:	85 c0                	test   %eax,%eax
    be3c:	74 10                	je     be4e <copy_page_tables+0x2d>
		panic("copy_page_tables called with wrong alignment");
    be3e:	83 ec 0c             	sub    $0xc,%esp
    be41:	68 a8 3a 02 00       	push   $0x23aa8
    be46:	e8 b7 cd ff ff       	call   8c02 <panic>
    be4b:	83 c4 10             	add    $0x10,%esp
	from_dir = (unsigned long *) ((from >> 20) & 0xffc); 				/* _pg_dir = 0 */
    be4e:	8b 44 24 30          	mov    0x30(%esp),%eax
    be52:	c1 e8 14             	shr    $0x14,%eax
    be55:	25 fc 0f 00 00       	and    $0xffc,%eax
    be5a:	89 44 24 14          	mov    %eax,0x14(%esp)
	to_dir = (unsigned long *) ((to >> 20) & 0xffc);
    be5e:	8b 44 24 34          	mov    0x34(%esp),%eax
    be62:	c1 e8 14             	shr    $0x14,%eax
    be65:	25 fc 0f 00 00       	and    $0xffc,%eax
    be6a:	89 44 24 10          	mov    %eax,0x10(%esp)
	size = ((unsigned) (size + 0x3fffff)) >> 22;
    be6e:	8b 44 24 38          	mov    0x38(%esp),%eax
    be72:	05 ff ff 3f 00       	add    $0x3fffff,%eax
    be77:	c1 e8 16             	shr    $0x16,%eax
    be7a:	89 44 24 38          	mov    %eax,0x38(%esp)
	// 在得到了源起始目录项指针from_dir和目的起始目录项指针to_dir以及需要复制的页表个数size后,下面开始对每个页目录项依次申请1页内存来保存对应的面表,
	// 并且开始页表项复制操作.如果目的目录项指定的页表已经存在(P=1),则出错死机.如果源目录项无效,即指定的页表不存在(P=0),则继续循环处理下一个页目录项.
	for( ; size-- > 0 ; from_dir++, to_dir++) {
    be7e:	e9 6c 01 00 00       	jmp    bfef <copy_page_tables+0x1ce>
		if (1 & *to_dir)
    be83:	8b 44 24 10          	mov    0x10(%esp),%eax
    be87:	8b 00                	mov    (%eax),%eax
    be89:	83 e0 01             	and    $0x1,%eax
    be8c:	85 c0                	test   %eax,%eax
    be8e:	74 10                	je     bea0 <copy_page_tables+0x7f>
			panic("copy_page_tables: already exist");
    be90:	83 ec 0c             	sub    $0xc,%esp
    be93:	68 d8 3a 02 00       	push   $0x23ad8
    be98:	e8 65 cd ff ff       	call   8c02 <panic>
    be9d:	83 c4 10             	add    $0x10,%esp
		if (!(1 & *from_dir))
    bea0:	8b 44 24 14          	mov    0x14(%esp),%eax
    bea4:	8b 00                	mov    (%eax),%eax
    bea6:	83 e0 01             	and    $0x1,%eax
    bea9:	85 c0                	test   %eax,%eax
    beab:	0f 84 33 01 00 00    	je     bfe4 <copy_page_tables+0x1c3>
			continue;
		// 在验证了当前源目录项和目的项正常之后,取源目录项中页表地址from_page_table.为了保存目的目录项对应的页表,需要在主内存区中申请1页空闲内存页.如果取
		// 空闲页面函数get_free_page()返回0,则说明没有申请到空闲内存页面,可能是内存不够.于是返回-1值退出.
		from_page_table = (unsigned long *) (0xfffff000 & *from_dir);
    beb1:	8b 44 24 14          	mov    0x14(%esp),%eax
    beb5:	8b 00                	mov    (%eax),%eax
    beb7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    bebc:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		if (!(to_page_table = (unsigned long *) get_free_page()))
    bec0:	e8 3c 11 00 00       	call   d001 <get_free_page>
    bec5:	89 44 24 18          	mov    %eax,0x18(%esp)
    bec9:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    bece:	75 0a                	jne    beda <copy_page_tables+0xb9>
			return -1;													/* Out of memory, see freeing */
    bed0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    bed5:	e9 35 01 00 00       	jmp    c00f <copy_page_tables+0x1ee>
		// 否则我们设置目的目录项信息,把最后3位置位,即当前目的目录项"或"上7,表示对应页表映射的内存页面是用户级的,并且可读写,存在(User,R/W,Present).(如果
		// U/S位是0,则R/W就没有作用.如果U/S是1,而R/W是0,那么运行在用户层的代码就只能读页面.如果U/S和R/W都置位,则就有读写的权限).
		*to_dir = ((unsigned long) to_page_table) | 7;
    beda:	8b 44 24 18          	mov    0x18(%esp),%eax
    bede:	83 c8 07             	or     $0x7,%eax
    bee1:	89 c2                	mov    %eax,%edx
    bee3:	8b 44 24 10          	mov    0x10(%esp),%eax
    bee7:	89 10                	mov    %edx,(%eax)
		// 然后针对当前处理的页目录项对应的页表,设置需要复制的页面项数.如果是在内核空间,则仅需复制头160页对应的页表项(nr = 160),
		// 对应于开始640KB物理内存.否则需要复制一个页表中的所有1024个页表项(nr= 1024),可映射4MB物理内存.
		nr = (from == 0) ? 0xA0 : 1024;
    bee9:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    beee:	75 07                	jne    bef7 <copy_page_tables+0xd6>
    bef0:	b8 a0 00 00 00       	mov    $0xa0,%eax
    bef5:	eb 05                	jmp    befc <copy_page_tables+0xdb>
    bef7:	b8 00 04 00 00       	mov    $0x400,%eax
    befc:	89 44 24 0c          	mov    %eax,0xc(%esp)
		// 此时对于当前页表,开始循环复制指定的nr个内存页面表项.先取出源页表项内容,如果当前源页面没有使用(项内容为0),则不用复制该表项,继续处理下一项.
		for ( ; nr-- > 0 ; from_page_table++, to_page_table++) {
    bf00:	e9 ca 00 00 00       	jmp    bfcf <copy_page_tables+0x1ae>
			this_page = *from_page_table;
    bf05:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    bf09:	8b 00                	mov    (%eax),%eax
    bf0b:	89 44 24 08          	mov    %eax,0x8(%esp)
			// 如果源页表不存在，则直接拷贝下一页表
			if (!this_page)
    bf0f:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    bf14:	0f 84 aa 00 00 00    	je     bfc4 <copy_page_tables+0x1a3>
				continue;
			// 如果该表项有内容,但是其存在位P=0,则该表项对应的页面可能在交换设备中.于是先申请1页内存,并从交换设备中读入该页面(若交换设备中有的话).然后将该页表项复制到
			// 目的页表项中.并修改源页表项内容指向该新申请的内存页.
			if (!(1 & this_page)) {
    bf1a:	8b 44 24 08          	mov    0x8(%esp),%eax
    bf1e:	83 e0 01             	and    $0x1,%eax
    bf21:	85 c0                	test   %eax,%eax
    bf23:	75 53                	jne    bf78 <copy_page_tables+0x157>
				// 申请一页新的内存然后将交换设备中的数据读取到该页面中
				if (!(new_page = get_free_page()))
    bf25:	e8 d7 10 00 00       	call   d001 <get_free_page>
    bf2a:	89 44 24 04          	mov    %eax,0x4(%esp)
    bf2e:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    bf33:	75 0a                	jne    bf3f <copy_page_tables+0x11e>
					return -1;
    bf35:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    bf3a:	e9 d0 00 00 00       	jmp    c00f <copy_page_tables+0x1ee>
				// 从交换设备中将页面读取出来
				read_swap_page(this_page >> 1, (char *) new_page);
    bf3f:	8b 54 24 04          	mov    0x4(%esp),%edx
    bf43:	8b 44 24 08          	mov    0x8(%esp),%eax
    bf47:	d1 e8                	shr    %eax
    bf49:	89 c1                	mov    %eax,%ecx
    bf4b:	a1 a0 11 03 00       	mov    0x311a0,%eax
    bf50:	52                   	push   %edx
    bf51:	51                   	push   %ecx
    bf52:	50                   	push   %eax
    bf53:	6a 00                	push   $0x0
    bf55:	e8 a1 a8 00 00       	call   167fb <ll_rw_page>
    bf5a:	83 c4 10             	add    $0x10,%esp
				// 目的页表项指向源页表项值
				*to_page_table = this_page;
    bf5d:	8b 44 24 18          	mov    0x18(%esp),%eax
    bf61:	8b 54 24 08          	mov    0x8(%esp),%edx
    bf65:	89 10                	mov    %edx,(%eax)
				// 并修改源页表项内容指向该新申请的内存页,并设置表项标志为"页面脏"加上7
				*from_page_table = new_page | (PAGE_DIRTY | 7);
    bf67:	8b 44 24 04          	mov    0x4(%esp),%eax
    bf6b:	83 c8 47             	or     $0x47,%eax
    bf6e:	89 c2                	mov    %eax,%edx
    bf70:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    bf74:	89 10                	mov    %edx,(%eax)
				// 继续处理下一页表项
				continue;
    bf76:	eb 4d                	jmp    bfc5 <copy_page_tables+0x1a4>
			}
			// 复位页表项中R/W标志(位1置0),即让页表项对应的内存页面只读,然后将该页表项复制到目的页表中
			this_page &= ~2;
    bf78:	83 64 24 08 fd       	andl   $0xfffffffd,0x8(%esp)
			*to_page_table = this_page;
    bf7d:	8b 44 24 18          	mov    0x18(%esp),%eax
    bf81:	8b 54 24 08          	mov    0x8(%esp),%edx
    bf85:	89 10                	mov    %edx,(%eax)
			// 的页面,说明是内核页面,因此不需要对mem_map[]进行设置.因为mem_map[]仅用于管理主内存区中的页面使用请问.因此对于内核移动到任务0中并且调用fork()创建任务1时
			// (用于运行init()),由于此时复制的页面还仍然都在内核代码区域,因此以下判断中的语句不会执行,任务0的页面仍然可以随时读写.只有当调用fork()的父进程代码处于主内存
			// (页面位置大于1MB)时才会执行.这种情况需要在进程调用execve(),并装载执行了新程序代码时才会出现.
			// 157行语句含义是令源页表项所指内存页也为只读.因为现在开始已有两个进程共用内存区了.若其中1个进程需要进行操作,则可以通过页异常写保护处理为执行写操作的进程分配
			// 1页新空闲页面,也即进行写时复制(copy_on_write)操作.
			if (this_page > LOW_MEM) {
    bf87:	81 7c 24 08 00 00 10 	cmpl   $0x100000,0x8(%esp)
    bf8e:	00 
    bf8f:	76 34                	jbe    bfc5 <copy_page_tables+0x1a4>
				*from_page_table = this_page;		// 令源页表项也只读.
    bf91:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    bf95:	8b 54 24 08          	mov    0x8(%esp),%edx
    bf99:	89 10                	mov    %edx,(%eax)
				this_page -= LOW_MEM;
    bf9b:	81 6c 24 08 00 00 10 	subl   $0x100000,0x8(%esp)
    bfa2:	00 
				this_page >>= 12;
    bfa3:	c1 6c 24 08 0c       	shrl   $0xc,0x8(%esp)
				mem_map[this_page]++;
    bfa8:	8b 44 24 08          	mov    0x8(%esp),%eax
    bfac:	05 a0 02 03 00       	add    $0x302a0,%eax
    bfb1:	0f b6 00             	movzbl (%eax),%eax
    bfb4:	8d 50 01             	lea    0x1(%eax),%edx
    bfb7:	8b 44 24 08          	mov    0x8(%esp),%eax
    bfbb:	05 a0 02 03 00       	add    $0x302a0,%eax
    bfc0:	88 10                	mov    %dl,(%eax)
    bfc2:	eb 01                	jmp    bfc5 <copy_page_tables+0x1a4>
				continue;
    bfc4:	90                   	nop
		for ( ; nr-- > 0 ; from_page_table++, to_page_table++) {
    bfc5:	83 44 24 1c 04       	addl   $0x4,0x1c(%esp)
    bfca:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
    bfcf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bfd3:	8d 50 ff             	lea    -0x1(%eax),%edx
    bfd6:	89 54 24 0c          	mov    %edx,0xc(%esp)
    bfda:	85 c0                	test   %eax,%eax
    bfdc:	0f 85 23 ff ff ff    	jne    bf05 <copy_page_tables+0xe4>
    bfe2:	eb 01                	jmp    bfe5 <copy_page_tables+0x1c4>
			continue;
    bfe4:	90                   	nop
	for( ; size-- > 0 ; from_dir++, to_dir++) {
    bfe5:	83 44 24 14 04       	addl   $0x4,0x14(%esp)
    bfea:	83 44 24 10 04       	addl   $0x4,0x10(%esp)
    bfef:	8b 44 24 38          	mov    0x38(%esp),%eax
    bff3:	8d 50 ff             	lea    -0x1(%eax),%edx
    bff6:	89 54 24 38          	mov    %edx,0x38(%esp)
    bffa:	85 c0                	test   %eax,%eax
    bffc:	0f 8f 81 fe ff ff    	jg     be83 <copy_page_tables+0x62>
			}
        }
    }
	invalidate();									// 刷新页变换高速缓冲.
    c002:	b8 00 00 00 00       	mov    $0x0,%eax
    c007:	0f 22 d8             	mov    %eax,%cr3
	return 0;
    c00a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    c00f:	83 c4 2c             	add    $0x2c,%esp
    c012:	c3                   	ret    

0000c013 <put_page>:
// 或者说是把线性地址空间中指定地址address处的页面映射到主内存区页面page上.主要工作是在相关页目录项和页表项中设置指定页面的信息.若成功则返回物理页面地址.
// 在处理缺页异常的C函数do_no_page()中会调用此函数.对于缺页引起的异常,由于任何缺页缘故而对页表作修改时,并不需要刷新CPU的页变换缓冲(或称Translation Lookaside
// Buffer,TLB),即使页表项中标志P被从0修改成1.因为无效页项不会被缓冲,因此当修改了一个无效的页表项时不需要刷新.在此就表现为不用调用Invalidate()函数.
// 参数page是分配的主内存区中某一页面(页帧,页框)的指针;address是线性地址.
static unsigned long put_page(unsigned long page, unsigned long address)
{
    c013:	83 ec 1c             	sub    $0x1c,%esp
	/* 注意!!!这里使用了页目录表基地址pg_dir=0的条件 */

	// 首先判断参数给定物理内存页面page的有效性.如果该页面位置低于LOW_MEM(1MB)或超出系统实际含有内存高端HIGH_MEMORY,则发出警告.LOW_MEM是主内存区可能有的
	// 最小起始位置.当系统后果内存小于或等于6MB时,主内存区始于LOW_MEM处.再查看一下该page页面是不已经申请的页面,即判断其在内存页面映射字节图mem_map[]中相应
	// 字节是否以置位.若没有则需发出警告.
	if (page < LOW_MEM || page >= HIGH_MEMORY)
    c016:	81 7c 24 20 ff ff 0f 	cmpl   $0xfffff,0x20(%esp)
    c01d:	00 
    c01e:	76 0b                	jbe    c02b <put_page+0x18>
    c020:	a1 80 02 03 00       	mov    0x30280,%eax
    c025:	39 44 24 20          	cmp    %eax,0x20(%esp)
    c029:	72 18                	jb     c043 <put_page+0x30>
		printk("Trying to put page %p at %p\n", page, address);
    c02b:	83 ec 04             	sub    $0x4,%esp
    c02e:	ff 74 24 28          	pushl  0x28(%esp)
    c032:	ff 74 24 28          	pushl  0x28(%esp)
    c036:	68 f8 3a 02 00       	push   $0x23af8
    c03b:	e8 01 cc ff ff       	call   8c41 <printk>
    c040:	83 c4 10             	add    $0x10,%esp
	if (mem_map[(page - LOW_MEM) >> 12] != 1)
    c043:	8b 44 24 20          	mov    0x20(%esp),%eax
    c047:	2d 00 00 10 00       	sub    $0x100000,%eax
    c04c:	c1 e8 0c             	shr    $0xc,%eax
    c04f:	0f b6 80 a0 02 03 00 	movzbl 0x302a0(%eax),%eax
    c056:	3c 01                	cmp    $0x1,%al
    c058:	74 18                	je     c072 <put_page+0x5f>
		printk("mem_map disagrees with %p at %p\n", page, address);
    c05a:	83 ec 04             	sub    $0x4,%esp
    c05d:	ff 74 24 28          	pushl  0x28(%esp)
    c061:	ff 74 24 28          	pushl  0x28(%esp)
    c065:	68 18 3b 02 00       	push   $0x23b18
    c06a:	e8 d2 cb ff ff       	call   8c41 <printk>
    c06f:	83 c4 10             	add    $0x10,%esp
	// 然后根据参数指定的线性地址address计算其在页目录表中对应的目录项指针,并从中取得一级页表地址.如果该目录项有效(P=1),即指定的页表在内存中,则从中取得指定页表
	// 地址放到page_table变量中.否则申请一空闲页面给页表使用,并在对应目录项中置相应标志(7 - User,U/S,R/W).然后将该页表地址放到page_table变量中.
	page_table = (unsigned long *) ((address >> 20) & 0xffc);
    c072:	8b 44 24 24          	mov    0x24(%esp),%eax
    c076:	c1 e8 14             	shr    $0x14,%eax
    c079:	25 fc 0f 00 00       	and    $0xffc,%eax
    c07e:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if ((*page_table) & 1)
    c082:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c086:	8b 00                	mov    (%eax),%eax
    c088:	83 e0 01             	and    $0x1,%eax
    c08b:	85 c0                	test   %eax,%eax
    c08d:	74 11                	je     c0a0 <put_page+0x8d>
		page_table = (unsigned long *) (0xfffff000 & *page_table);
    c08f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c093:	8b 00                	mov    (%eax),%eax
    c095:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c09a:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c09e:	eb 2e                	jmp    c0ce <put_page+0xbb>
	else {
		if (!(tmp = get_free_page()))
    c0a0:	e8 5c 0f 00 00       	call   d001 <get_free_page>
    c0a5:	89 44 24 08          	mov    %eax,0x8(%esp)
    c0a9:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    c0ae:	75 07                	jne    c0b7 <put_page+0xa4>
			return 0;
    c0b0:	b8 00 00 00 00       	mov    $0x0,%eax
    c0b5:	eb 3d                	jmp    c0f4 <put_page+0xe1>
		*page_table = tmp | 7;
    c0b7:	8b 44 24 08          	mov    0x8(%esp),%eax
    c0bb:	83 c8 07             	or     $0x7,%eax
    c0be:	89 c2                	mov    %eax,%edx
    c0c0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c0c4:	89 10                	mov    %edx,(%eax)
		page_table = (unsigned long *) tmp;
    c0c6:	8b 44 24 08          	mov    0x8(%esp),%eax
    c0ca:	89 44 24 0c          	mov    %eax,0xc(%esp)
	}
	// 最后在找到的页表page_table中设置相关页表项内容,即把物理页面page的地址填入表项同时置位3个标志(U/S,W/R,P).该页表项在页表中的索引值等于线性地址位21~位12
	// 组成的10位的值.每个页表共可有1024项(0~0x3ff).
	page_table[(address >> 12) & 0x3ff] = page | 7;
    c0ce:	8b 44 24 24          	mov    0x24(%esp),%eax
    c0d2:	c1 e8 0c             	shr    $0xc,%eax
    c0d5:	25 ff 03 00 00       	and    $0x3ff,%eax
    c0da:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    c0e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c0e5:	01 d0                	add    %edx,%eax
    c0e7:	8b 54 24 20          	mov    0x20(%esp),%edx
    c0eb:	83 ca 07             	or     $0x7,%edx
    c0ee:	89 10                	mov    %edx,(%eax)
	/* no need for invalidate */
	/* 不需要刷新页变换高速缓冲 */
	return page;					// 返回物理页面地址.
    c0f0:	8b 44 24 20          	mov    0x20(%esp),%eax
}
    c0f4:	83 c4 1c             	add    $0x1c,%esp
    c0f7:	c3                   	ret    

0000c0f8 <put_dirty_page>:
 * 已修改状态标志.因而下面就有了与上面相同的函数,但是该函数在放置页面时会把页面标志为已修改状态.
 */
// 把一内容已修改过的物理内存页面映射到线性地址空间指定处.
// 该函数与一个函数put_page()几乎完全一样,除了本函数在第223行设置页表项内容时,同时还设置了页面已修改标志(位6,PAGE_DIRTY).
unsigned long put_dirty_page(unsigned long page, unsigned long address)
{
    c0f8:	83 ec 1c             	sub    $0x1c,%esp
	/* NOTE !!! This uses the fact that _pg_dir=0 */

	// 首先判断参数给定物理内存页面page的有效性.如果该页面位置低于LOW_MEM(1MB)或超出系统实际含有内存高端HIGH_MEMORY,则发出警告.LOW_MEM是主内存区可能有的
	// 最小起始位置.当系统后果内存小于或等于6MB时,主内存区始于LOW_MEM处.再查看一下该page页面是不已经申请的页面,即判断其在内存页面映射字节图mem_map[]中相应
	// 字节是否以置位.若没有则需发出警告.
	if (page < LOW_MEM || page >= HIGH_MEMORY)
    c0fb:	81 7c 24 20 ff ff 0f 	cmpl   $0xfffff,0x20(%esp)
    c102:	00 
    c103:	76 0b                	jbe    c110 <put_dirty_page+0x18>
    c105:	a1 80 02 03 00       	mov    0x30280,%eax
    c10a:	39 44 24 20          	cmp    %eax,0x20(%esp)
    c10e:	72 18                	jb     c128 <put_dirty_page+0x30>
		printk("Trying to put page %p at %p\n", page, address);
    c110:	83 ec 04             	sub    $0x4,%esp
    c113:	ff 74 24 28          	pushl  0x28(%esp)
    c117:	ff 74 24 28          	pushl  0x28(%esp)
    c11b:	68 f8 3a 02 00       	push   $0x23af8
    c120:	e8 1c cb ff ff       	call   8c41 <printk>
    c125:	83 c4 10             	add    $0x10,%esp
	if (mem_map[(page-LOW_MEM)>>12] != 1)
    c128:	8b 44 24 20          	mov    0x20(%esp),%eax
    c12c:	2d 00 00 10 00       	sub    $0x100000,%eax
    c131:	c1 e8 0c             	shr    $0xc,%eax
    c134:	0f b6 80 a0 02 03 00 	movzbl 0x302a0(%eax),%eax
    c13b:	3c 01                	cmp    $0x1,%al
    c13d:	74 18                	je     c157 <put_dirty_page+0x5f>
		printk("mem_map disagrees with %p at %p\n", page, address);
    c13f:	83 ec 04             	sub    $0x4,%esp
    c142:	ff 74 24 28          	pushl  0x28(%esp)
    c146:	ff 74 24 28          	pushl  0x28(%esp)
    c14a:	68 18 3b 02 00       	push   $0x23b18
    c14f:	e8 ed ca ff ff       	call   8c41 <printk>
    c154:	83 c4 10             	add    $0x10,%esp
	// 然后根据参数指定的线性地址address计算其在页目录表中对应的目录项指针,并从中取得一级页表地址.如果该目录项有效(P=1),即指定的页表在内存中,则从中取得指定页表
	// 地址放到page_table变量中.否则申请一空闲页面给页表使用,并在对应目录项中置相应标志(7 - User,U/S,R/W).然后将该页表地址放到page_table变量中.
	page_table = (unsigned long *) ((address >> 20) & 0xffc);
    c157:	8b 44 24 24          	mov    0x24(%esp),%eax
    c15b:	c1 e8 14             	shr    $0x14,%eax
    c15e:	25 fc 0f 00 00       	and    $0xffc,%eax
    c163:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if ((*page_table) & 1)
    c167:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c16b:	8b 00                	mov    (%eax),%eax
    c16d:	83 e0 01             	and    $0x1,%eax
    c170:	85 c0                	test   %eax,%eax
    c172:	74 11                	je     c185 <put_dirty_page+0x8d>
		page_table = (unsigned long *) (0xfffff000 & *page_table);
    c174:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c178:	8b 00                	mov    (%eax),%eax
    c17a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c17f:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c183:	eb 2e                	jmp    c1b3 <put_dirty_page+0xbb>
	else {
		if (!(tmp = get_free_page()))
    c185:	e8 77 0e 00 00       	call   d001 <get_free_page>
    c18a:	89 44 24 08          	mov    %eax,0x8(%esp)
    c18e:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    c193:	75 07                	jne    c19c <put_dirty_page+0xa4>
			return 0;
    c195:	b8 00 00 00 00       	mov    $0x0,%eax
    c19a:	eb 3d                	jmp    c1d9 <put_dirty_page+0xe1>
		*page_table = tmp | 7;
    c19c:	8b 44 24 08          	mov    0x8(%esp),%eax
    c1a0:	83 c8 07             	or     $0x7,%eax
    c1a3:	89 c2                	mov    %eax,%edx
    c1a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c1a9:	89 10                	mov    %edx,(%eax)
		page_table = (unsigned long *) tmp;
    c1ab:	8b 44 24 08          	mov    0x8(%esp),%eax
    c1af:	89 44 24 0c          	mov    %eax,0xc(%esp)
	}
	// 最后在找到的页表page_table中设置相关页表项内容,即把物理页面page的地址填入表项同时置位3个标志(U/S,W/R,P).该页表项在页表中的索引值等于线性地址位21~位12
	// 组成的10位的值.每个页表共可有1024项(0~0x3ff).
	page_table[(address >> 12) & 0x3ff] = page | (PAGE_DIRTY | 7);
    c1b3:	8b 44 24 24          	mov    0x24(%esp),%eax
    c1b7:	c1 e8 0c             	shr    $0xc,%eax
    c1ba:	25 ff 03 00 00       	and    $0x3ff,%eax
    c1bf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    c1c6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c1ca:	01 d0                	add    %edx,%eax
    c1cc:	8b 54 24 20          	mov    0x20(%esp),%edx
    c1d0:	83 ca 47             	or     $0x47,%edx
    c1d3:	89 10                	mov    %edx,(%eax)
	/* no need for invalidate */
	/* 不需要刷新页变换高速缓冲 */
	return page;
    c1d5:	8b 44 24 20          	mov    0x20(%esp),%eax
}
    c1d9:	83 c4 1c             	add    $0x1c,%esp
    c1dc:	c3                   	ret    

0000c1dd <un_wp_page>:
// 用于页异常中断过程中写保护异常的处理(写时复制).在内核创建进程时,新进程与父进程被设置成共享代码和数据内存页面,并且所有这些页面均被设置成只读页面.而当新进程或原
// 进程需要向内存页面写数据时,CPU就会检测到这个情况并产生页面写保护异常.于是在这个函数中内核就会首先判断要写的页面是否被共享.若没有则把页面设置成可写然后退出.若页面
// 处于共享状态,则要重新申请一新页面并复制被写页面内容,以供写进程单独使用.共享被取消.
// 输入参数为页面表项指针,是物理地址.[un_wp_page -- Un-Write Protect Page]
void un_wp_page(unsigned long * table_entry)
{
    c1dd:	57                   	push   %edi
    c1de:	56                   	push   %esi
    c1df:	83 ec 14             	sub    $0x14,%esp
	unsigned long old_page, new_page;

	// 首先取参数指定的页表项中物理页面位置(地址)并判断该页面是不是共享页面.如果原页面地址大于内存低端LOW_MEM(表示在主内存区中),并且其在页面映射字节图数组中值为1(表示
	// 页面仅被引用1次,页面没有被共享),则在该页面的页表项中 R/W标志(可写),并刷新页变换高速缓冲,然后返回.即如果该内存页面此时只被一个进程使用,并且不是内核中的进程,就直接
	// 把属性改为可写即可,不必重新申请一个新页面.
	old_page = 0xfffff000 & *table_entry;				// 取指定页表项中物理页面地址.
    c1e2:	8b 44 24 20          	mov    0x20(%esp),%eax
    c1e6:	8b 00                	mov    (%eax),%eax
    c1e8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c1ed:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (old_page >= LOW_MEM && mem_map[MAP_NR(old_page)] == 1) {
    c1f1:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
    c1f8:	00 
    c1f9:	76 32                	jbe    c22d <un_wp_page+0x50>
    c1fb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c1ff:	2d 00 00 10 00       	sub    $0x100000,%eax
    c204:	c1 e8 0c             	shr    $0xc,%eax
    c207:	0f b6 80 a0 02 03 00 	movzbl 0x302a0(%eax),%eax
    c20e:	3c 01                	cmp    $0x1,%al
    c210:	75 1b                	jne    c22d <un_wp_page+0x50>
		*table_entry |= 2;
    c212:	8b 44 24 20          	mov    0x20(%esp),%eax
    c216:	8b 00                	mov    (%eax),%eax
    c218:	83 c8 02             	or     $0x2,%eax
    c21b:	89 c2                	mov    %eax,%edx
    c21d:	8b 44 24 20          	mov    0x20(%esp),%eax
    c221:	89 10                	mov    %edx,(%eax)
		invalidate();
    c223:	b8 00 00 00 00       	mov    $0x0,%eax
    c228:	0f 22 d8             	mov    %eax,%cr3
		return;
    c22b:	eb 6a                	jmp    c297 <un_wp_page+0xba>
	}
	// 否则就需要在主内存区内申请一页空闲页面给执行写操作的进程单独使用,取消页面共享.如果原页面大于内存低端(则意味着mem_map[]>1,页面是共享的),则将原页面的页面映射字节数组
	// 值递减1.然后将指定页表项内容更新为新页面地址,并置可读写标志(U/S,R/W,P).在刷新页变换高速缓冲之后,最后将原页面内容复制到新页面.
	if (!(new_page = get_free_page()))
    c22d:	e8 cf 0d 00 00       	call   d001 <get_free_page>
    c232:	89 44 24 08          	mov    %eax,0x8(%esp)
    c236:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    c23b:	75 05                	jne    c242 <un_wp_page+0x65>
		oom();											// 内存不够处理.
    c23d:	e8 0b fa ff ff       	call   bc4d <oom>
	if (old_page >= LOW_MEM)
    c242:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
    c249:	00 
    c24a:	76 1c                	jbe    c268 <un_wp_page+0x8b>
		mem_map[MAP_NR(old_page)]--;
    c24c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c250:	2d 00 00 10 00       	sub    $0x100000,%eax
    c255:	c1 e8 0c             	shr    $0xc,%eax
    c258:	0f b6 90 a0 02 03 00 	movzbl 0x302a0(%eax),%edx
    c25f:	83 ea 01             	sub    $0x1,%edx
    c262:	88 90 a0 02 03 00    	mov    %dl,0x302a0(%eax)
	copy_page(old_page, new_page);
    c268:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c26c:	8b 54 24 08          	mov    0x8(%esp),%edx
    c270:	b9 00 04 00 00       	mov    $0x400,%ecx
    c275:	89 c6                	mov    %eax,%esi
    c277:	89 d7                	mov    %edx,%edi
    c279:	57                   	push   %edi
    c27a:	56                   	push   %esi
    c27b:	fc                   	cld    
    c27c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    c27e:	5e                   	pop    %esi
    c27f:	5f                   	pop    %edi
	// 将新的页面设置为可读可写且存在
	*table_entry = new_page | 7;
    c280:	8b 44 24 08          	mov    0x8(%esp),%eax
    c284:	83 c8 07             	or     $0x7,%eax
    c287:	89 c2                	mov    %eax,%edx
    c289:	8b 44 24 20          	mov    0x20(%esp),%eax
    c28d:	89 10                	mov    %edx,(%eax)
	// 刷新高速缓冲
	invalidate();
    c28f:	b8 00 00 00 00       	mov    $0x0,%eax
    c294:	0f 22 d8             	mov    %eax,%cr3
}
    c297:	83 c4 14             	add    $0x14,%esp
    c29a:	5e                   	pop    %esi
    c29b:	5f                   	pop    %edi
    c29c:	c3                   	ret    

0000c29d <do_wp_page>:
// 执行写保护页面处理.
// 是写共享页面处理函数.是页异常中断处理过程中调用的C函数.在page.s程序中被调用.
// 函数参数error_code和address是进程在写写保护页面时由CPU产生异常而自动生成的.error_code指出出错类型;address是产生异常的页面
// 线性地址.写共享页面时需复制页面(写时复制).
void do_wp_page(unsigned long error_code, unsigned long address)
{
    c29d:	83 ec 0c             	sub    $0xc,%esp
	// 首先判断CPU控制寄存器CR2给出的引起页面异常的线性地址在什么范围中.如果address小于TASK_SIZE(0x4000000,即64MB),表示异常页面位置
	// 在内核或任务0和任务1所处的线性地址范围内,于是发出警告信息"内核范围内存被写保护";如果(address - 当前进程代码起始地址)大于一个进程的
	// 长度(64MB),表示address所指的线性地址不在引起异常的进程线性地址空间范围内,则在发出出错信息后退出.
	if (address < TASK_SIZE)
    c2a0:	81 7c 24 14 ff ff ff 	cmpl   $0x3ffffff,0x14(%esp)
    c2a7:	03 
    c2a8:	77 10                	ja     c2ba <do_wp_page+0x1d>
		printk("\n\rBAD! KERNEL MEMORY WP-ERR!\n\r");
    c2aa:	83 ec 0c             	sub    $0xc,%esp
    c2ad:	68 3c 3b 02 00       	push   $0x23b3c
    c2b2:	e8 8a c9 ff ff       	call   8c41 <printk>
    c2b7:	83 c4 10             	add    $0x10,%esp
	if (address - current->start_code > TASK_SIZE) {
    c2ba:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c2bf:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c2c5:	8b 54 24 14          	mov    0x14(%esp),%edx
    c2c9:	29 c2                	sub    %eax,%edx
    c2cb:	89 d0                	mov    %edx,%eax
    c2cd:	3d 00 00 00 04       	cmp    $0x4000000,%eax
    c2d2:	76 1d                	jbe    c2f1 <do_wp_page+0x54>
		printk("Bad things happen: page error in do_wp_page\n\r");
    c2d4:	83 ec 0c             	sub    $0xc,%esp
    c2d7:	68 5c 3b 02 00       	push   $0x23b5c
    c2dc:	e8 60 c9 ff ff       	call   8c41 <printk>
    c2e1:	83 c4 10             	add    $0x10,%esp
		do_exit(SIGSEGV);
    c2e4:	83 ec 0c             	sub    $0xc,%esp
    c2e7:	6a 0b                	push   $0xb
    c2e9:	e8 7c ea ff ff       	call   ad6a <do_exit>
    c2ee:	83 c4 10             	add    $0x10,%esp
	// 目录项索引值中最后2位.因为只移动了20位,因此最后2位是页表索引的内容,应该屏蔽掉.而*((address>>20)&0xffc)则是取指定目录表项内容中对应页表
	// 的物理地址.最后与上0xffffff000用于屏蔽掉页目录项内容中的一些标志位(目录项低12位).直观表示为(0xffffff000 & *((unsigned long *) (((
	// address>>22) & 0x3ff)<<2))).3:由1中页表项在页表中偏移地址加上2中目录表项内容中对应页表的物理地址即可得到页表项的指针(物理地址).这里对
	// 共享的页面进行复制.
	un_wp_page((unsigned long *)
		(((address >> 10) & 0xffc) + (0xfffff000 &
    c2f1:	8b 44 24 14          	mov    0x14(%esp),%eax
    c2f5:	c1 e8 0a             	shr    $0xa,%eax
    c2f8:	25 fc 0f 00 00       	and    $0xffc,%eax
    c2fd:	89 c2                	mov    %eax,%edx
		*((unsigned long *) ((address >> 20) & 0xffc)))));
    c2ff:	8b 44 24 14          	mov    0x14(%esp),%eax
    c303:	c1 e8 14             	shr    $0x14,%eax
    c306:	25 fc 0f 00 00       	and    $0xffc,%eax
    c30b:	8b 00                	mov    (%eax),%eax
		(((address >> 10) & 0xffc) + (0xfffff000 &
    c30d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c312:	09 d0                	or     %edx,%eax
	un_wp_page((unsigned long *)
    c314:	83 ec 0c             	sub    $0xc,%esp
    c317:	50                   	push   %eax
    c318:	e8 c0 fe ff ff       	call   c1dd <un_wp_page>
    c31d:	83 c4 10             	add    $0x10,%esp

}
    c320:	90                   	nop
    c321:	83 c4 0c             	add    $0xc,%esp
    c324:	c3                   	ret    

0000c325 <write_verify>:

// 写页面验证.
// 若页面不可写,则复制页面.在fork.c中被内存验证通用函数verify_area()调用.
// 参数address是指定页面在4GB空间中的线性地址.
void write_verify(unsigned long address)
{
    c325:	83 ec 1c             	sub    $0x1c,%esp

	// 首先取指定线性地址对应的页目录项,根据目录项中的存在位(P)判断目录项对应的页表是否存在(存在位P=1?),若不存在(P=0)则返回.这样处理
	// 是因为对于不存在的页面没有共享和写时复制可言,并且若程序对此不存在的页面执行写操作时,系统就会因为缺页异常而去执行do_no_page(),
	// 并为这个地方使用put_page()函数映射一个物理页面.接着程序从目录项中取页表地址,加上指定页面在页表中的页表项偏移值,得对应地址的页表
	// 项指针.在该表项中包含着给定线性地址对应的物理页面.
	if (!( (page = *((unsigned long *) ((address >> 20) & 0xffc)) ) & 1))
    c328:	8b 44 24 20          	mov    0x20(%esp),%eax
    c32c:	c1 e8 14             	shr    $0x14,%eax
    c32f:	25 fc 0f 00 00       	and    $0xffc,%eax
    c334:	8b 00                	mov    (%eax),%eax
    c336:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c33a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c33e:	83 e0 01             	and    $0x1,%eax
    c341:	85 c0                	test   %eax,%eax
    c343:	74 39                	je     c37e <write_verify+0x59>
		return;
	page &= 0xfffff000;
    c345:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    c34c:	ff 
	// 得到页表项的物理地址
	page += ((address >> 10) & 0xffc);
    c34d:	8b 44 24 20          	mov    0x20(%esp),%eax
    c351:	c1 e8 0a             	shr    $0xa,%eax
    c354:	25 fc 0f 00 00       	and    $0xffc,%eax
    c359:	01 44 24 0c          	add    %eax,0xc(%esp)
	// 然后判断该页表项中位1(P/W),位0(P)标志.如果该页面不可写(R/W=0)且存在,那么就执行共享检验和复制页面操作(写时复制).否则什么也不做,
	// 直接退出.
	if ((3 & *(unsigned long *) page) == 1)  /* non-writeable, present */
    c35d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c361:	8b 00                	mov    (%eax),%eax
    c363:	83 e0 03             	and    $0x3,%eax
    c366:	83 f8 01             	cmp    $0x1,%eax
    c369:	75 16                	jne    c381 <write_verify+0x5c>
		un_wp_page((unsigned long *) page);
    c36b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c36f:	83 ec 0c             	sub    $0xc,%esp
    c372:	50                   	push   %eax
    c373:	e8 65 fe ff ff       	call   c1dd <un_wp_page>
    c378:	83 c4 10             	add    $0x10,%esp
	return;
    c37b:	90                   	nop
    c37c:	eb 03                	jmp    c381 <write_verify+0x5c>
		return;
    c37e:	90                   	nop
    c37f:	eb 01                	jmp    c382 <write_verify+0x5d>
	return;
    c381:	90                   	nop
}
    c382:	83 c4 1c             	add    $0x1c,%esp
    c385:	c3                   	ret    

0000c386 <get_empty_page>:

// 取得一页空闲内存并映射到指定线性地址处.
// get_free_page()仅是申请取得了主内存区的一页物理内存.而本函数则不仅是获取到一页物理内存页面,还进一步调用put_page(),将物理页面映射到指定的线性地址处.
// 参数address是指定页面的线性地址.
void get_empty_page(unsigned long address)
{
    c386:	83 ec 1c             	sub    $0x1c,%esp
	unsigned long tmp;

	// 若不能取得一空闲页面,或者不能将所取页面放置到指定地址处,则显示内存不够的信息.292行上英文注释的含义是:free_page()函数的参数tmp是0也没有关系,该函数会忽略它
	// 并能正常返回.
	if (!(tmp = get_free_page()) || !put_page(tmp, address)) {
    c389:	e8 73 0c 00 00       	call   d001 <get_free_page>
    c38e:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c392:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    c397:	74 17                	je     c3b0 <get_empty_page+0x2a>
    c399:	83 ec 08             	sub    $0x8,%esp
    c39c:	ff 74 24 28          	pushl  0x28(%esp)
    c3a0:	ff 74 24 18          	pushl  0x18(%esp)
    c3a4:	e8 6a fc ff ff       	call   c013 <put_page>
    c3a9:	83 c4 10             	add    $0x10,%esp
    c3ac:	85 c0                	test   %eax,%eax
    c3ae:	75 14                	jne    c3c4 <get_empty_page+0x3e>
		free_page(tmp);		/* 0 is ok - ignored */
    c3b0:	83 ec 0c             	sub    $0xc,%esp
    c3b3:	ff 74 24 18          	pushl  0x18(%esp)
    c3b7:	e8 b6 f8 ff ff       	call   bc72 <free_page>
    c3bc:	83 c4 10             	add    $0x10,%esp
		oom();
    c3bf:	e8 89 f8 ff ff       	call   bc4d <oom>
	}
}
    c3c4:	90                   	nop
    c3c5:	83 c4 1c             	add    $0x1c,%esp
    c3c8:	c3                   	ret    

0000c3c9 <try_to_share>:
// 段内容作过修改那么数据段内容也应一样。参数address是进程中的逻辑地址，即是当前进程欲与p进程共享页面的逻辑页面地址。进程
// p是将被共享页面的进程。如果p进程address处的页面存在并且没有被修改过的话，就让当前进程与p进程共享之。同时还需要验证指定
// 的地址处是否已经申请了页面，若是则出错，死机。
// 返回：1 - 页面共享处理成功；0 - 失败。
static int try_to_share(unsigned long address, struct task_struct * p)
{
    c3c9:	83 ec 2c             	sub    $0x2c,%esp

	// 首先分别求得指定进程p中和当前进程中逻辑地址address对应的页目录项。为了计算方便先求出指定逻辑地址address处的“逻辑”页
	// 目录号，即以进程空间（0 - 64MB）算出的页目录项号。该“逻辑”页目录项号加上进程p在CPU 4GB线性空间中起始地址对应的页目录
	// 项，即得到进程p中地址address处页面所对应的4GB线性空间中实际页目录项from_page。而“逻辑”页目录项号加上当前进程CPU 4GB
	// 线性空间中的实际页目录项to_page。
	from_page = to_page = ((address >> 20) & 0xffc);
    c3cc:	8b 44 24 30          	mov    0x30(%esp),%eax
    c3d0:	c1 e8 14             	shr    $0x14,%eax
    c3d3:	25 fc 0f 00 00       	and    $0xffc,%eax
    c3d8:	89 44 24 18          	mov    %eax,0x18(%esp)
    c3dc:	8b 44 24 18          	mov    0x18(%esp),%eax
    c3e0:	89 44 24 14          	mov    %eax,0x14(%esp)
	from_page += ((p->start_code >> 20) & 0xffc);             		// p进程目录项。
    c3e4:	8b 44 24 34          	mov    0x34(%esp),%eax
    c3e8:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c3ee:	c1 e8 14             	shr    $0x14,%eax
    c3f1:	25 fc 0f 00 00       	and    $0xffc,%eax
    c3f6:	01 44 24 14          	add    %eax,0x14(%esp)
	to_page += ((current->start_code >> 20) & 0xffc);         		// 当前进程目录项。
    c3fa:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c3ff:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c405:	c1 e8 14             	shr    $0x14,%eax
    c408:	25 fc 0f 00 00       	and    $0xffc,%eax
    c40d:	01 44 24 18          	add    %eax,0x18(%esp)
	// address对应的物理内在页面地址，并且该物理页面存在，而且干净（没有被修改过，不脏）。
	// 方法是先取目录项内容。如果该目录项元效（P=0），表示目录项对应的二级页表不存在，于是返回。否则取该目录项对应页表地址from，
	// 从而计算出逻辑地址address对应的页表项指针，并取出该面表项内容临时保存在phys_addr中。
	/* is there a page-directory at from? */
	/* 在from处是否存在页目录项？ */
	from = *(unsigned long *) from_page;                    		// p进程目录项内容。
    c411:	8b 44 24 14          	mov    0x14(%esp),%eax
    c415:	8b 00                	mov    (%eax),%eax
    c417:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (!(from & 1))
    c41b:	8b 44 24 10          	mov    0x10(%esp),%eax
    c41f:	83 e0 01             	and    $0x1,%eax
    c422:	85 c0                	test   %eax,%eax
    c424:	75 0a                	jne    c430 <try_to_share+0x67>
		return 0;
    c426:	b8 00 00 00 00       	mov    $0x0,%eax
    c42b:	e9 2c 01 00 00       	jmp    c55c <try_to_share+0x193>
	from &= 0xfffff000;                                     		// 页表地址。
    c430:	81 64 24 10 00 f0 ff 	andl   $0xfffff000,0x10(%esp)
    c437:	ff 
	from_page = from + ((address >> 10) & 0xffc);             		// 页表项指针。
    c438:	8b 44 24 30          	mov    0x30(%esp),%eax
    c43c:	c1 e8 0a             	shr    $0xa,%eax
    c43f:	25 fc 0f 00 00       	and    $0xffc,%eax
    c444:	89 c2                	mov    %eax,%edx
    c446:	8b 44 24 10          	mov    0x10(%esp),%eax
    c44a:	01 d0                	add    %edx,%eax
    c44c:	89 44 24 14          	mov    %eax,0x14(%esp)
	phys_addr = *(unsigned long *) from_page;               		// 页表项内容。
    c450:	8b 44 24 14          	mov    0x14(%esp),%eax
    c454:	8b 00                	mov    (%eax),%eax
    c456:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 接着看看页表项映射的物理页面是否存在并且干净。0x41对应页表项中的D（Dirty）和P（present）标志。如果页面不干净或无效则返回。
	// 然后我们从该表项中取出物理页面地址再保存在phys_addr中。最后我们再检查一下这个物理页面地址的有效性，即它不应该超过机器最大
	// 物理地址值，也不应该小于内在低端（1MB）。
	/* is the page clean and present? */
	/* 物理页面干净并且存在吗？ */
	if ((phys_addr & 0x41) != 0x01)
    c45a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c45e:	83 e0 41             	and    $0x41,%eax
    c461:	83 f8 01             	cmp    $0x1,%eax
    c464:	74 0a                	je     c470 <try_to_share+0xa7>
		return 0;
    c466:	b8 00 00 00 00       	mov    $0x0,%eax
    c46b:	e9 ec 00 00 00       	jmp    c55c <try_to_share+0x193>
	phys_addr &= 0xfffff000;                                		// 物理页面地址。
    c470:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    c477:	ff 
	if (phys_addr >= HIGH_MEMORY || phys_addr < LOW_MEM)
    c478:	a1 80 02 03 00       	mov    0x30280,%eax
    c47d:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    c481:	73 0a                	jae    c48d <try_to_share+0xc4>
    c483:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
    c48a:	00 
    c48b:	77 0a                	ja     c497 <try_to_share+0xce>
		return 0;
    c48d:	b8 00 00 00 00       	mov    $0x0,%eax
    c492:	e9 c5 00 00 00       	jmp    c55c <try_to_share+0x193>
	// 下面首先对当前进程的表项进行操作。目标是取得当前进程中address对应的页表项地址，并且该页表项还没有映射物理页面，即其P=0。
	// 首先取当前进程页目录项内容->to。如果该目录项元效（P=0），即目录项对应的二级页表不存在，则申请一空闲页面来存放页表，并更新
	// 目录项to_page内容，让其指向该内存页面。
	to = *(unsigned long *) to_page;                        		// 当前进程目录项内容。
    c497:	8b 44 24 18          	mov    0x18(%esp),%eax
    c49b:	8b 00                	mov    (%eax),%eax
    c49d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!(to & 1))
    c4a1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c4a5:	83 e0 01             	and    $0x1,%eax
    c4a8:	85 c0                	test   %eax,%eax
    c4aa:	75 24                	jne    c4d0 <try_to_share+0x107>
		if (to = get_free_page())
    c4ac:	e8 50 0b 00 00       	call   d001 <get_free_page>
    c4b1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    c4b5:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    c4ba:	74 0f                	je     c4cb <try_to_share+0x102>
			*(unsigned long *) to_page = to | 7;
    c4bc:	8b 44 24 18          	mov    0x18(%esp),%eax
    c4c0:	8b 54 24 1c          	mov    0x1c(%esp),%edx
    c4c4:	83 ca 07             	or     $0x7,%edx
    c4c7:	89 10                	mov    %edx,(%eax)
    c4c9:	eb 05                	jmp    c4d0 <try_to_share+0x107>
		else
			oom();
    c4cb:	e8 7d f7 ff ff       	call   bc4d <oom>
	// 否则取目录项中的页表地址->to，加上页表索引值<<2，即页表项在表中偏移地址，得到页表项地址->to_page。针对该页表项，如果
	// 此时我们检查出其对应的物理页面已经存在，即页表项的存在位P=1,则说明原本我们想共享进程p中对应的物理页面，但现在我们自己已经
	// 占有了（映射有）物理页面。于是说明内核出错，死机。
	to &= 0xfffff000;                                       		// 当前进程的页表地址。
    c4d0:	81 64 24 1c 00 f0 ff 	andl   $0xfffff000,0x1c(%esp)
    c4d7:	ff 
	to_page = to + ((address >> 10) & 0xffc);                 		// 当前进程的页表项地址。
    c4d8:	8b 44 24 30          	mov    0x30(%esp),%eax
    c4dc:	c1 e8 0a             	shr    $0xa,%eax
    c4df:	25 fc 0f 00 00       	and    $0xffc,%eax
    c4e4:	89 c2                	mov    %eax,%edx
    c4e6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c4ea:	01 d0                	add    %edx,%eax
    c4ec:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (1 & *(unsigned long *) to_page)
    c4f0:	8b 44 24 18          	mov    0x18(%esp),%eax
    c4f4:	8b 00                	mov    (%eax),%eax
    c4f6:	83 e0 01             	and    $0x1,%eax
    c4f9:	85 c0                	test   %eax,%eax
    c4fb:	74 10                	je     c50d <try_to_share+0x144>
		panic("try_to_share: to_page already exists");
    c4fd:	83 ec 0c             	sub    $0xc,%esp
    c500:	68 8c 3b 02 00       	push   $0x23b8c
    c505:	e8 f8 c6 ff ff       	call   8c02 <panic>
    c50a:	83 c4 10             	add    $0x10,%esp
	/* share them: write-protect */
	/* 对它们进行共享处理：写保护区*/
	*(unsigned long *) from_page &= ~2;
    c50d:	8b 44 24 14          	mov    0x14(%esp),%eax
    c511:	8b 10                	mov    (%eax),%edx
    c513:	8b 44 24 14          	mov    0x14(%esp),%eax
    c517:	83 e2 fd             	and    $0xfffffffd,%edx
    c51a:	89 10                	mov    %edx,(%eax)
	*(unsigned long *) to_page = *(unsigned long *) from_page;
    c51c:	8b 54 24 14          	mov    0x14(%esp),%edx
    c520:	8b 44 24 18          	mov    0x18(%esp),%eax
    c524:	8b 12                	mov    (%edx),%edx
    c526:	89 10                	mov    %edx,(%eax)
	// 随后刷新页变换高速缓冲。计算所操作物理页面的页面号，并将对应页面映射字节数组项中的引用递增1.最后返回1,表示共享处理成功。
	invalidate();
    c528:	b8 00 00 00 00       	mov    $0x0,%eax
    c52d:	0f 22 d8             	mov    %eax,%cr3
	phys_addr -= LOW_MEM;
    c530:	81 6c 24 0c 00 00 10 	subl   $0x100000,0xc(%esp)
    c537:	00 
	phys_addr >>= 12;                       						// 得页面号。
    c538:	c1 6c 24 0c 0c       	shrl   $0xc,0xc(%esp)
	mem_map[phys_addr]++;
    c53d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c541:	05 a0 02 03 00       	add    $0x302a0,%eax
    c546:	0f b6 00             	movzbl (%eax),%eax
    c549:	8d 50 01             	lea    0x1(%eax),%edx
    c54c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c550:	05 a0 02 03 00       	add    $0x302a0,%eax
    c555:	88 10                	mov    %dl,(%eax)
	return 1;
    c557:	b8 01 00 00 00       	mov    $0x1,%eax
}
    c55c:	83 c4 2c             	add    $0x2c,%esp
    c55f:	c3                   	ret    

0000c560 <share_page>:
// 点.根据该i节点的引用次数i_count我们可以进行这种判断.若节点的i_count值大于1,则表明系统中有两个进程正在运行同一个执行文件(或库
// 文件),于是可以再对任务结构数组中所有任务比较是否有相同的executable字段(或library字段)来最后确定多个进程运行着相同执行文件的
// 情况.参数inode是欲进行共享页面进程执行文件的内存i节点.address是进程中的逻辑地址,即当前进程欲与p进程共享页面的逻辑页面地址.返
// 回1 - 共享操作成功,0 - 失败.
static int share_page(struct m_inode * inode, unsigned long address)
{
    c560:	83 ec 1c             	sub    $0x1c,%esp
	struct task_struct ** p;

	// 首先检查一下参数指定的内存i节点引用计数值.如果该内存i节点的引用计数值等于1(executalbe->i_count=1)或者i节点指针空,表示当前系
	// 统中只有1个进程在运行该执行文件或者提供的i节点无效.因此无共享可言,直接退出函数.
	if (inode->i_count < 2 || !inode)
    c563:	8b 44 24 20          	mov    0x20(%esp),%eax
    c567:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    c56b:	66 83 f8 01          	cmp    $0x1,%ax
    c56f:	76 07                	jbe    c578 <share_page+0x18>
    c571:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    c576:	75 0a                	jne    c582 <share_page+0x22>
		return 0;
    c578:	b8 00 00 00 00       	mov    $0x0,%eax
    c57d:	e9 8f 00 00 00       	jmp    c611 <share_page+0xb1>
	// 辑地址address小于进程库文件在逻辑地址空间的起始地址LIBRARY_OFFSET,则表明共享的页面在进程执行文件对应的逻辑地址空间范围内,于是
	// 检查一下指定i节点是否与进程的执行文件i节点(即进程executable相同,若不相同则继续寻找.若进程逻辑地址address大于等于进程库文件在
	// 逻辑地址空间的起始地址LIBRARY_OFFSET,则表明想要共享的页面在进程使用的库文件中,于是检查指定节点inode是否与进程的库文件i节点相同,
	// 若不相同则继续寻找.如果找到某个进程p,其executable或library与指定的节点inode相同,则调用页面试探函数try_to_share()尝试页面共
	// 享.若共享操作成功,则函数返回1.否则返回0,表示共享页面操作失败.
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    c582:	c7 44 24 0c bc f2 02 	movl   $0x2f2bc,0xc(%esp)
    c589:	00 
    c58a:	eb 76                	jmp    c602 <share_page+0xa2>
		if (!*p)								// 如果该任务项空闲,则继续寻找.
    c58c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c590:	8b 00                	mov    (%eax),%eax
    c592:	85 c0                	test   %eax,%eax
    c594:	74 60                	je     c5f6 <share_page+0x96>
			continue;
		if (current == *p)						// 如果是当前任务,也继续寻找.
    c596:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c59a:	8b 10                	mov    (%eax),%edx
    c59c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c5a1:	39 c2                	cmp    %eax,%edx
    c5a3:	74 54                	je     c5f9 <share_page+0x99>
			continue;
		if (address < LIBRARY_OFFSET) {
    c5a5:	81 7c 24 24 ff ff bf 	cmpl   $0x3bfffff,0x24(%esp)
    c5ac:	03 
    c5ad:	77 14                	ja     c5c3 <share_page+0x63>
			if (inode != (*p)->executable)		// 进程执行文件i节点.
    c5af:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c5b3:	8b 00                	mov    (%eax),%eax
    c5b5:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    c5bb:	39 44 24 20          	cmp    %eax,0x20(%esp)
    c5bf:	74 14                	je     c5d5 <share_page+0x75>
				continue;
    c5c1:	eb 3a                	jmp    c5fd <share_page+0x9d>
		} else {
			if (inode != (*p)->library)			// 进程使用库文件i节点.
    c5c3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c5c7:	8b 00                	mov    (%eax),%eax
    c5c9:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    c5cf:	39 44 24 20          	cmp    %eax,0x20(%esp)
    c5d3:	75 27                	jne    c5fc <share_page+0x9c>
				continue;
		}
		if (try_to_share(address, *p))			// 尝试共享页面.
    c5d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c5d9:	8b 00                	mov    (%eax),%eax
    c5db:	83 ec 08             	sub    $0x8,%esp
    c5de:	50                   	push   %eax
    c5df:	ff 74 24 30          	pushl  0x30(%esp)
    c5e3:	e8 e1 fd ff ff       	call   c3c9 <try_to_share>
    c5e8:	83 c4 10             	add    $0x10,%esp
    c5eb:	85 c0                	test   %eax,%eax
    c5ed:	74 0e                	je     c5fd <share_page+0x9d>
			return 1;
    c5ef:	b8 01 00 00 00       	mov    $0x1,%eax
    c5f4:	eb 1b                	jmp    c611 <share_page+0xb1>
			continue;
    c5f6:	90                   	nop
    c5f7:	eb 04                	jmp    c5fd <share_page+0x9d>
			continue;
    c5f9:	90                   	nop
    c5fa:	eb 01                	jmp    c5fd <share_page+0x9d>
				continue;
    c5fc:	90                   	nop
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    c5fd:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    c602:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    c609:	00 
    c60a:	77 80                	ja     c58c <share_page+0x2c>
	}
	return 0;
    c60c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    c611:	83 c4 1c             	add    $0x1c,%esp
    c614:	c3                   	ret    

0000c615 <do_no_page>:
// 是访问不存在页面处理函数.页异常中断处理过程中调用的函数.在page.s程序中被调用.函数参数error_code和address是进程在访问页面时由CPU因
// 缺页产生异常而自动生成.error_code指出出错类型;address产生异常的页面线性地址.
// 该函数首先查看所缺页是否在交换设备中,若是则交换进来.否则尝试与已加载的相同文件进行页面共享,或者只是由于进程动态申请内存页面而只需映射一页
// 物理内存页即可.若共享操作不成功,那么只能从相应文件中读入所缺的数据页面到指定线性地址处.
void do_no_page(unsigned long error_code, unsigned long address)
{
    c615:	83 ec 3c             	sub    $0x3c,%esp
	struct m_inode * inode;

	// 首先判断CPU控制寄存器CR2给出的引起页面异常的线性地址在什么范围中.如果address小于TASK_SIZE(0x4000000,即64MB),表示异常页面位置在内核
	// 或任务0和任务1所处的线性地址范围内,于是发出警告信息"内核范围内存被写保护";如果(address-当前进程代码起始地址)大于一个进程的长度(64MB),表示
	// address所指的线性地址不在引起异常的进程线性地址空间范围内,则在发出出错信息后退出
	if (address < TASK_SIZE)
    c618:	81 7c 24 44 ff ff ff 	cmpl   $0x3ffffff,0x44(%esp)
    c61f:	03 
    c620:	77 10                	ja     c632 <do_no_page+0x1d>
		printk("\n\rBAD!! KERNEL PAGE MISSING\n\r");
    c622:	83 ec 0c             	sub    $0xc,%esp
    c625:	68 b1 3b 02 00       	push   $0x23bb1
    c62a:	e8 12 c6 ff ff       	call   8c41 <printk>
    c62f:	83 c4 10             	add    $0x10,%esp
	if (address - current->start_code > TASK_SIZE) {
    c632:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c637:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c63d:	8b 54 24 44          	mov    0x44(%esp),%edx
    c641:	29 c2                	sub    %eax,%edx
    c643:	89 d0                	mov    %edx,%eax
    c645:	3d 00 00 00 04       	cmp    $0x4000000,%eax
    c64a:	76 1d                	jbe    c669 <do_no_page+0x54>
		printk("Bad things happen: nonexistent page error in do_no_page\n\r");
    c64c:	83 ec 0c             	sub    $0xc,%esp
    c64f:	68 d0 3b 02 00       	push   $0x23bd0
    c654:	e8 e8 c5 ff ff       	call   8c41 <printk>
    c659:	83 c4 10             	add    $0x10,%esp
		do_exit(SIGSEGV);
    c65c:	83 ec 0c             	sub    $0xc,%esp
    c65f:	6a 0b                	push   $0xb
    c661:	e8 04 e7 ff ff       	call   ad6a <do_exit>
    c666:	83 c4 10             	add    $0x10,%esp
	}
	// 然后根据指定的线性地址address求出其对应的二级页表项指针,并根据该页表项内容判断address处的页面是否在交换设备中.若是则调入页面并退出.方法是首先
	// 取指定线性地址address对应的目录项内容.如果对应的二级页表存在,则取出该目录项中二级页表的地址,加上页表项偏移值即得到线性地址address处页面对应的
	// 页表项指针,从而获得页表项内容.若页表内容不为0并且页表项存在位P=0,则说明该页表项指定的物理页面应该在交换设备中.于是从交换设备中调入指定页面后退出函数.
	page = *(unsigned long *) ((address >> 20) & 0xffc);				// 取目录项内容.
    c669:	8b 44 24 44          	mov    0x44(%esp),%eax
    c66d:	c1 e8 14             	shr    $0x14,%eax
    c670:	25 fc 0f 00 00       	and    $0xffc,%eax
    c675:	8b 00                	mov    (%eax),%eax
    c677:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (page & 1) {
    c67b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c67f:	83 e0 01             	and    $0x1,%eax
    c682:	85 c0                	test   %eax,%eax
    c684:	74 49                	je     c6cf <do_no_page+0xba>
		page &= 0xfffff000;												// 二级页表地址.
    c686:	81 64 24 1c 00 f0 ff 	andl   $0xfffff000,0x1c(%esp)
    c68d:	ff 
		page += (address >> 10) & 0xffc;								// 页表项指针.
    c68e:	8b 44 24 44          	mov    0x44(%esp),%eax
    c692:	c1 e8 0a             	shr    $0xa,%eax
    c695:	25 fc 0f 00 00       	and    $0xffc,%eax
    c69a:	01 44 24 1c          	add    %eax,0x1c(%esp)
		tmp = *(unsigned long *) page;									// 页表项内容.
    c69e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c6a2:	8b 00                	mov    (%eax),%eax
    c6a4:	89 44 24 2c          	mov    %eax,0x2c(%esp)
		if (tmp && !(1 & tmp)) {
    c6a8:	83 7c 24 2c 00       	cmpl   $0x0,0x2c(%esp)
    c6ad:	74 20                	je     c6cf <do_no_page+0xba>
    c6af:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c6b3:	83 e0 01             	and    $0x1,%eax
    c6b6:	85 c0                	test   %eax,%eax
    c6b8:	75 15                	jne    c6cf <do_no_page+0xba>
			swap_in((unsigned long *) page);							// 从交换设备读页面.
    c6ba:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c6be:	83 ec 0c             	sub    $0xc,%esp
    c6c1:	50                   	push   %eax
    c6c2:	e8 31 06 00 00       	call   ccf8 <swap_in>
    c6c7:	83 c4 10             	add    $0x10,%esp
			return;
    c6ca:	e9 b9 01 00 00       	jmp    c888 <do_no_page+0x273>
		}
	}
	// 否则取线性空间中指定地址address处页面地址,并算出指定线性地址在进程空间中相对于进程基址的偏移长度值tmp,即对应的逻辑地址.从而可以算出缺页页面在执行文件映像
	// 中或在库文件中的具体起始数据块号.
	address &= 0xfffff000;												// address处缺页页面地址.
    c6cf:	81 64 24 44 00 f0 ff 	andl   $0xfffff000,0x44(%esp)
    c6d6:	ff 
	tmp = address - current->start_code;								// 缺页页面对应逻辑地址.
    c6d7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c6dc:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c6e2:	8b 54 24 44          	mov    0x44(%esp),%edx
    c6e6:	29 c2                	sub    %eax,%edx
    c6e8:	89 d0                	mov    %edx,%eax
    c6ea:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	// 如果缺页对应的逻辑地址tmp大于库映像文件在进程逻辑空间中的起始位置,说明缺少的页面在库映像文件中.于是从当前进程任务数据结构中可以取得库映像文件的i节点library,
	// 并计算出该缺页在库文件中的起始数据块号block.
	// 因为设置上存放的执行文件映像第1块数据是程序头结构,因此在读取该文件时需要跳过第1块数据.所以需要首先计算缺页所在数据块号.因为每块数据长度为BLOCK_SIZE = 1KB,因此
	// 一页内存可存放4个数据块.进程逻辑地址tmp除以数据块大小再加1即可得出缺少的页面在执行映像文件中的起始块号block.
	if (tmp >= LIBRARY_OFFSET ) {
    c6ee:	81 7c 24 2c ff ff bf 	cmpl   $0x3bfffff,0x2c(%esp)
    c6f5:	03 
    c6f6:	76 24                	jbe    c71c <do_no_page+0x107>
		inode = current->library;										// 库文件i节点和缺页起始块号.
    c6f8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c6fd:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    c703:	89 44 24 20          	mov    %eax,0x20(%esp)
		block = 1 + (tmp - LIBRARY_OFFSET) / BLOCK_SIZE;
    c707:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c70b:	2d 00 00 c0 03       	sub    $0x3c00000,%eax
    c710:	c1 e8 0a             	shr    $0xa,%eax
    c713:	83 c0 01             	add    $0x1,%eax
    c716:	89 44 24 28          	mov    %eax,0x28(%esp)
    c71a:	eb 40                	jmp    c75c <do_no_page+0x147>
	// 如果缺页对应的逻辑地址tmp小于进程的执行映像文件在逻辑地址空间的末端位置,则说明缺少的页面在进程执行文件映像中,于是可
	// 以从当前进程任务数据机构中取得执行文件的i节点号executable,并计算出该缺页在执行文件映像中的起始数据块号block.若逻辑地址tmp既不在执行文件映像的地址范围内,
	} else if (tmp < current->end_data) {
    c71c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c721:	8b 80 20 02 00 00    	mov    0x220(%eax),%eax
    c727:	39 44 24 2c          	cmp    %eax,0x2c(%esp)
    c72b:	73 1f                	jae    c74c <do_no_page+0x137>
		inode = current->executable;									// 执行文件i节点和缺页起始块号.
    c72d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c732:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    c738:	89 44 24 20          	mov    %eax,0x20(%esp)
		block = 1 + tmp / BLOCK_SIZE;
    c73c:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c740:	c1 e8 0a             	shr    $0xa,%eax
    c743:	83 c0 01             	add    $0x1,%eax
    c746:	89 44 24 28          	mov    %eax,0x28(%esp)
    c74a:	eb 10                	jmp    c75c <do_no_page+0x147>
	// 也不在库文件空间范围内,则说明缺页是进程访问动态申请的内存页面数据所致,因此没有对应i节点和数据块号(都置空).
	} else {
		inode = NULL;													// 是动态申请的数据或栈内存页面.
    c74c:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%esp)
    c753:	00 
		block = 0;
    c754:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
    c75b:	00 
	}
	// 若是进程访问其动态申请的页面或为了存放栈信息而引起的缺页异常,则直接申请一页物理内存页面并映射到线性地址address处即可.
	if (!inode) {														// 是动态申请的数据内存页面.
    c75c:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    c761:	75 14                	jne    c777 <do_no_page+0x162>
		get_empty_page(address);
    c763:	83 ec 0c             	sub    $0xc,%esp
    c766:	ff 74 24 50          	pushl  0x50(%esp)
    c76a:	e8 17 fc ff ff       	call   c386 <get_empty_page>
    c76f:	83 c4 10             	add    $0x10,%esp
		return;
    c772:	e9 11 01 00 00       	jmp    c888 <do_no_page+0x273>
	}
	// 否则说明所缺页面进程执行文件或库文件范围内,于是就尝试共享页面操作,若成功则退出.
	if (share_page(inode, tmp))											// 尝试逻辑地址tmp处页面的共享.
    c777:	83 ec 08             	sub    $0x8,%esp
    c77a:	ff 74 24 34          	pushl  0x34(%esp)
    c77e:	ff 74 24 2c          	pushl  0x2c(%esp)
    c782:	e8 d9 fd ff ff       	call   c560 <share_page>
    c787:	83 c4 10             	add    $0x10,%esp
    c78a:	85 c0                	test   %eax,%eax
    c78c:	0f 85 f2 00 00 00    	jne    c884 <do_no_page+0x26f>
		return;
	// 如果共享不成功就只能申请一页物理内存页面page,然后从设备上读取执行文件中的相应页面并放置(映射)到进程页面逻辑地址tmp处.
	if (!(page = get_free_page()))										// 申请一页物理内存.
    c792:	e8 6a 08 00 00       	call   d001 <get_free_page>
    c797:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    c79b:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    c7a0:	75 05                	jne    c7a7 <do_no_page+0x192>
		oom();
    c7a2:	e8 a6 f4 ff ff       	call   bc4d <oom>
	/* remember that 1 block is used for header */
	/* 记住,(程序)头要使用1个数据块 */
	// 根据这个块号和执行文件的i节点,我们就可以从映射位图中找到对应块设备中对应的设备逻辑块号(保存在nr[]数组中).利用break_page()
	// 即可把这4个逻辑块读入到物理页面page中.
	for (i = 0 ; i < 4 ; block++, i++)
    c7a7:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
    c7ae:	00 
    c7af:	eb 27                	jmp    c7d8 <do_no_page+0x1c3>
		nr[i] = bmap(inode, block);
    c7b1:	83 ec 08             	sub    $0x8,%esp
    c7b4:	ff 74 24 30          	pushl  0x30(%esp)
    c7b8:	ff 74 24 2c          	pushl  0x2c(%esp)
    c7bc:	e8 66 1e 00 00       	call   e627 <bmap>
    c7c1:	83 c4 10             	add    $0x10,%esp
    c7c4:	89 c2                	mov    %eax,%edx
    c7c6:	8b 44 24 24          	mov    0x24(%esp),%eax
    c7ca:	89 54 84 0c          	mov    %edx,0xc(%esp,%eax,4)
	for (i = 0 ; i < 4 ; block++, i++)
    c7ce:	83 44 24 28 01       	addl   $0x1,0x28(%esp)
    c7d3:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
    c7d8:	83 7c 24 24 03       	cmpl   $0x3,0x24(%esp)
    c7dd:	7e d2                	jle    c7b1 <do_no_page+0x19c>
	bread_page(page, inode->i_dev, nr);
    c7df:	8b 44 24 20          	mov    0x20(%esp),%eax
    c7e3:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    c7e7:	0f b7 c0             	movzwl %ax,%eax
    c7ea:	83 ec 04             	sub    $0x4,%esp
    c7ed:	8d 54 24 10          	lea    0x10(%esp),%edx
    c7f1:	52                   	push   %edx
    c7f2:	50                   	push   %eax
    c7f3:	ff 74 24 28          	pushl  0x28(%esp)
    c7f7:	e8 d7 2e 00 00       	call   f6d3 <bread_page>
    c7fc:	83 c4 10             	add    $0x10,%esp
	// 在读设备逻辑块操作时,可能会出现这样一种情况,即在执行文件中的读取页面位置可能离文件尾不到1个页面的长度.因此就可能读入一些无用
	// 的信息.下面的操作就是把这部分超出执行文件end_data以后的部分进行清零处理.当然,若该页面离末端超过1页,说明不是从执行文件映像中
	// 读取的页面,而是从库文件中读取的,因此不用执行清零操作.
	i = tmp + 4096 - current->end_data;									// 超出的字节长度值.
    c7ff:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c804:	8b 80 20 02 00 00    	mov    0x220(%eax),%eax
    c80a:	8b 54 24 2c          	mov    0x2c(%esp),%edx
    c80e:	29 c2                	sub    %eax,%edx
    c810:	89 d0                	mov    %edx,%eax
    c812:	05 00 10 00 00       	add    $0x1000,%eax
    c817:	89 44 24 24          	mov    %eax,0x24(%esp)
	if (i > 4095)														// 离末端超过1页则不用清零.
    c81b:	81 7c 24 24 ff 0f 00 	cmpl   $0xfff,0x24(%esp)
    c822:	00 
    c823:	7e 08                	jle    c82d <do_no_page+0x218>
		i = 0;
    c825:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
    c82c:	00 
	tmp = page + 4096;
    c82d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c831:	05 00 10 00 00       	add    $0x1000,%eax
    c836:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	while (i-- > 0) {
    c83a:	eb 0c                	jmp    c848 <do_no_page+0x233>
		tmp--;															// tmp指向页面末端.
    c83c:	83 6c 24 2c 01       	subl   $0x1,0x2c(%esp)
		*(char *)tmp = 0;       										// 页面末端i字节清零.
    c841:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c845:	c6 00 00             	movb   $0x0,(%eax)
	while (i-- > 0) {
    c848:	8b 44 24 24          	mov    0x24(%esp),%eax
    c84c:	8d 50 ff             	lea    -0x1(%eax),%edx
    c84f:	89 54 24 24          	mov    %edx,0x24(%esp)
    c853:	85 c0                	test   %eax,%eax
    c855:	7f e5                	jg     c83c <do_no_page+0x227>
	}
	// 最后把引起缺页异常的一页物理页面映射到指定线性地址address处.若操作成功就返回.否则就释放内存页,显示内存不够.
	if (put_page(page, address))
    c857:	83 ec 08             	sub    $0x8,%esp
    c85a:	ff 74 24 4c          	pushl  0x4c(%esp)
    c85e:	ff 74 24 28          	pushl  0x28(%esp)
    c862:	e8 ac f7 ff ff       	call   c013 <put_page>
    c867:	83 c4 10             	add    $0x10,%esp
    c86a:	85 c0                	test   %eax,%eax
    c86c:	75 19                	jne    c887 <do_no_page+0x272>
		return;
	free_page(page);
    c86e:	83 ec 0c             	sub    $0xc,%esp
    c871:	ff 74 24 28          	pushl  0x28(%esp)
    c875:	e8 f8 f3 ff ff       	call   bc72 <free_page>
    c87a:	83 c4 10             	add    $0x10,%esp
	oom();
    c87d:	e8 cb f3 ff ff       	call   bc4d <oom>
    c882:	eb 04                	jmp    c888 <do_no_page+0x273>
		return;
    c884:	90                   	nop
    c885:	eb 01                	jmp    c888 <do_no_page+0x273>
		return;
    c887:	90                   	nop
}
    c888:	83 c4 3c             	add    $0x3c,%esp
    c88b:	c3                   	ret    

0000c88c <mem_init>:
// 不用.对于具有16MB内存的PC系统,在没有设置虚拟盘RAMDISK的情况下,共有3072个物理页面可供分配.而范围0~1MB内存空间用于内核系统(其实内核
// 只使用0~640KB,剩下的部分被部分高速缓冲和设备内存占用).
// 参数start_mem是可用作页面分配的主内存区起始地址(已去除RAMDISK所占内存空间).end_mem是实际物理内存最大地址.而地址范围start_mem到
// end_mem是主内存区.
void mem_init(long start_mem, long end_mem)
{
    c88c:	83 ec 10             	sub    $0x10,%esp
	int i;

	// 首先将1MB到16MB范围内所有内存页面对应的内存映射字节数组项置为已占用状态,即各项字节值全部设置成USED(100).PAGING_PAGES被定义为(
	// PAGING_MEMORY>>12),即1MB以上所有物理内存分页后的内存页面数(15MB/4KB = 3840).
	HIGH_MEMORY = end_mem;									// 设置内存最高端(16MB).
    c88f:	8b 44 24 18          	mov    0x18(%esp),%eax
    c893:	a3 80 02 03 00       	mov    %eax,0x30280
	for (i = 0; i < PAGING_PAGES; i++)
    c898:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    c89f:	00 
    c8a0:	eb 11                	jmp    c8b3 <mem_init+0x27>
		mem_map[i] = USED;
    c8a2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c8a6:	05 a0 02 03 00       	add    $0x302a0,%eax
    c8ab:	c6 00 64             	movb   $0x64,(%eax)
	for (i = 0; i < PAGING_PAGES; i++)
    c8ae:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    c8b3:	81 7c 24 0c ff 0e 00 	cmpl   $0xeff,0xc(%esp)
    c8ba:	00 
    c8bb:	7e e5                	jle    c8a2 <mem_init+0x16>
	// 然后计算主内存区起始内存start_mem处页面对应内存映射字节数组中项号i和主内存区页面数.此时mem_map[]数组的第i项正对应主内存区中第1个页面.
	// 最后将主内存区中页面对应的数组项清零(表示空闲).对于具有16MB物理内存的系统,mem_map[]中对应4MB~16MB主内存区的项被清零.
	i = MAP_NR(start_mem);									// 主内存区起始位置处页面号.
    c8bd:	8b 44 24 14          	mov    0x14(%esp),%eax
    c8c1:	2d 00 00 10 00       	sub    $0x100000,%eax
    c8c6:	c1 f8 0c             	sar    $0xc,%eax
    c8c9:	89 44 24 0c          	mov    %eax,0xc(%esp)
	end_mem -= start_mem;
    c8cd:	8b 44 24 14          	mov    0x14(%esp),%eax
    c8d1:	29 44 24 18          	sub    %eax,0x18(%esp)
	// 得到主内存区的页面的数量
	end_mem >>= 12;											// 主内存区中的总页面数.
    c8d5:	c1 7c 24 18 0c       	sarl   $0xc,0x18(%esp)
	// 将主内存区对应的页面数的应用数置零
	while (end_mem-- > 0)
    c8da:	eb 12                	jmp    c8ee <mem_init+0x62>
		mem_map[i++] = 0;									// 主内存区页面对应字节值清零.
    c8dc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c8e0:	8d 50 01             	lea    0x1(%eax),%edx
    c8e3:	89 54 24 0c          	mov    %edx,0xc(%esp)
    c8e7:	c6 80 a0 02 03 00 00 	movb   $0x0,0x302a0(%eax)
	while (end_mem-- > 0)
    c8ee:	8b 44 24 18          	mov    0x18(%esp),%eax
    c8f2:	8d 50 ff             	lea    -0x1(%eax),%edx
    c8f5:	89 54 24 18          	mov    %edx,0x18(%esp)
    c8f9:	85 c0                	test   %eax,%eax
    c8fb:	7f df                	jg     c8dc <mem_init+0x50>
}
    c8fd:	90                   	nop
    c8fe:	83 c4 10             	add    $0x10,%esp
    c901:	c3                   	ret    

0000c902 <show_mem>:
// 显示系统内存信息.
// 根据内存映射字节数组mem_map[]中的信息以及页目录和页表内容统计系统中使用的内存页面数和主内存区中总物理内存页面数.该函数在chr_drv/keyboard.S程序
// 被调用.
// 即当按下"Shift + Scroll Lock"组合键时会显示系统内存统计信息.
void show_mem(void)
{
    c902:	83 ec 2c             	sub    $0x2c,%esp
	int i, j, k, free = 0, total = 0;
    c905:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
    c90c:	00 
    c90d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    c914:	00 
	int shared = 0;
    c915:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    c91c:	00 
	unsigned long * pg_tbl;

	// 根据内存映射字节数组mem_map[],统计系统主内存区页面总数total,以及其中空闲页面数free和被共享的页面数shared.并显示这些信息.
	printk("Mem-info:\n\r");
    c91d:	83 ec 0c             	sub    $0xc,%esp
    c920:	68 0a 3c 02 00       	push   $0x23c0a
    c925:	e8 17 c3 ff ff       	call   8c41 <printk>
    c92a:	83 c4 10             	add    $0x10,%esp
	for(i = 0 ; i < PAGING_PAGES ; i++) {
    c92d:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    c934:	00 
    c935:	eb 4a                	jmp    c981 <show_mem+0x7f>
		if (mem_map[i] == USED)								// 1MB以上内存系统占用的页面.
    c937:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c93b:	05 a0 02 03 00       	add    $0x302a0,%eax
    c940:	0f b6 00             	movzbl (%eax),%eax
    c943:	3c 64                	cmp    $0x64,%al
    c945:	74 34                	je     c97b <show_mem+0x79>
			continue;
		// 统计主内存中的页面数
		total++;
    c947:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
		if (!mem_map[i])
    c94c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c950:	05 a0 02 03 00       	add    $0x302a0,%eax
    c955:	0f b6 00             	movzbl (%eax),%eax
    c958:	84 c0                	test   %al,%al
    c95a:	75 07                	jne    c963 <show_mem+0x61>
			// 统计未使用的主内存页面数
			free++;											// 主内存区空闲页面统计.
    c95c:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
    c961:	eb 19                	jmp    c97c <show_mem+0x7a>
		else
			// 统计共享页面数
			shared += mem_map[i] - 1;						// 共享的页面数(字节值>1)
    c963:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c967:	05 a0 02 03 00       	add    $0x302a0,%eax
    c96c:	0f b6 00             	movzbl (%eax),%eax
    c96f:	0f b6 c0             	movzbl %al,%eax
    c972:	83 e8 01             	sub    $0x1,%eax
    c975:	01 44 24 08          	add    %eax,0x8(%esp)
    c979:	eb 01                	jmp    c97c <show_mem+0x7a>
			continue;
    c97b:	90                   	nop
	for(i = 0 ; i < PAGING_PAGES ; i++) {
    c97c:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
    c981:	81 7c 24 1c ff 0e 00 	cmpl   $0xeff,0x1c(%esp)
    c988:	00 
    c989:	7e ac                	jle    c937 <show_mem+0x35>
	}
	printk("%d free pages of %d\n\r", free, total);
    c98b:	83 ec 04             	sub    $0x4,%esp
    c98e:	ff 74 24 10          	pushl  0x10(%esp)
    c992:	ff 74 24 18          	pushl  0x18(%esp)
    c996:	68 16 3c 02 00       	push   $0x23c16
    c99b:	e8 a1 c2 ff ff       	call   8c41 <printk>
    c9a0:	83 c4 10             	add    $0x10,%esp
	printk("%d pages shared\n\r", shared);
    c9a3:	83 ec 08             	sub    $0x8,%esp
    c9a6:	ff 74 24 10          	pushl  0x10(%esp)
    c9aa:	68 2c 3c 02 00       	push   $0x23c2c
    c9af:	e8 8d c2 ff ff       	call   8c41 <printk>
    c9b4:	83 c4 10             	add    $0x10,%esp
	// 统计处理器分页管理逻辑页面数.页目录表前4项供内核代码使用,不列为统计范围,因此扫描处理的页目录项从第5项开始.方法是循环处理所有页目录项
	// (除前4个项),若对应的二级页表存在,那么先统计二级页表本身占用的内存页面,然后对该页表中所有页表项对应页面情况进行统计.
	k = 0;													// 一个进程占用页面统计值.
    c9b7:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
    c9be:	00 
	for(i = 4 ; i < 1024 ;) {
    c9bf:	c7 44 24 1c 04 00 00 	movl   $0x4,0x1c(%esp)
    c9c6:	00 
    c9c7:	e9 6c 01 00 00       	jmp    cb38 <show_mem+0x236>
		if (1 & pg_dir[i]) {
    c9cc:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c9d0:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    c9d7:	83 e0 01             	and    $0x1,%eax
    c9da:	85 c0                	test   %eax,%eax
    c9dc:	0f 84 0e 01 00 00    	je     caf0 <show_mem+0x1ee>
			// (如果页目录项对应二级页表地址大于机器最高物理内存地址HIGH_MEMORY,说明该目录项有问题.于是显示该目录项信息并继续处理下一个目录项.
			if (pg_dir[i] > HIGH_MEMORY) {					// 目录项内容不正常.
    c9e2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c9e6:	8b 14 85 00 00 00 00 	mov    0x0(,%eax,4),%edx
    c9ed:	a1 80 02 03 00       	mov    0x30280,%eax
    c9f2:	39 c2                	cmp    %eax,%edx
    c9f4:	76 25                	jbe    ca1b <show_mem+0x119>
				printk("page directory[%d]: %08X\n\r",
    c9f6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c9fa:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    ca01:	83 ec 04             	sub    $0x4,%esp
    ca04:	50                   	push   %eax
    ca05:	ff 74 24 24          	pushl  0x24(%esp)
    ca09:	68 3e 3c 02 00       	push   $0x23c3e
    ca0e:	e8 2e c2 ff ff       	call   8c41 <printk>
    ca13:	83 c4 10             	add    $0x10,%esp
					i, pg_dir[i]);
				continue;
    ca16:	e9 1d 01 00 00       	jmp    cb38 <show_mem+0x236>
			}
			// 如果页目录项对应二级页表的"地址"大于LOW_MEM(即1MB),则把一个进程占用的物理内存页统计值k增1,把系统占用的所有物理内存页统计值free增1.
			// 然后邓对应页表地址pg_tb1,并对该页表中所有页表项进行统计.如果当前页表项所指物理页面存在并且该物理页面"地址"大于LOW_MEME,那么就将页表项对应页面
			// 纳入统计值.
			if (pg_dir[i] > LOW_MEM)
    ca1b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca1f:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    ca26:	3d 00 00 10 00       	cmp    $0x100000,%eax
    ca2b:	76 0a                	jbe    ca37 <show_mem+0x135>
				free++, k++;								// 统计页表占用页面.
    ca2d:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
    ca32:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
			pg_tbl = (unsigned long *) (0xfffff000 & pg_dir[i]);
    ca37:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca3b:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    ca42:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    ca47:	89 44 24 04          	mov    %eax,0x4(%esp)
			for(j = 0 ; j < 1024 ; j++)
    ca4b:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
    ca52:	00 
    ca53:	e9 8a 00 00 00       	jmp    cae2 <show_mem+0x1e0>
				if ((pg_tbl[j]&1) && pg_tbl[j] > LOW_MEM)
    ca58:	8b 44 24 18          	mov    0x18(%esp),%eax
    ca5c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    ca63:	8b 44 24 04          	mov    0x4(%esp),%eax
    ca67:	01 d0                	add    %edx,%eax
    ca69:	8b 00                	mov    (%eax),%eax
    ca6b:	83 e0 01             	and    $0x1,%eax
    ca6e:	85 c0                	test   %eax,%eax
    ca70:	74 6b                	je     cadd <show_mem+0x1db>
    ca72:	8b 44 24 18          	mov    0x18(%esp),%eax
    ca76:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    ca7d:	8b 44 24 04          	mov    0x4(%esp),%eax
    ca81:	01 d0                	add    %edx,%eax
    ca83:	8b 00                	mov    (%eax),%eax
    ca85:	3d 00 00 10 00       	cmp    $0x100000,%eax
    ca8a:	76 51                	jbe    cadd <show_mem+0x1db>
					// (若该物理页面地址大于机器最高物理内存地址HIGH_MEMORY,则说明该页表项内容有问题,于是显示该页表项内容.否则将页表项对应页面纳入统计值.)
					if (pg_tbl[j] > HIGH_MEMORY)
    ca8c:	8b 44 24 18          	mov    0x18(%esp),%eax
    ca90:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    ca97:	8b 44 24 04          	mov    0x4(%esp),%eax
    ca9b:	01 d0                	add    %edx,%eax
    ca9d:	8b 10                	mov    (%eax),%edx
    ca9f:	a1 80 02 03 00       	mov    0x30280,%eax
    caa4:	39 c2                	cmp    %eax,%edx
    caa6:	76 2b                	jbe    cad3 <show_mem+0x1d1>
						printk("page_dir[%d][%d]: %08X\n\r",
							i, j, pg_tbl[j]);
    caa8:	8b 44 24 18          	mov    0x18(%esp),%eax
    caac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    cab3:	8b 44 24 04          	mov    0x4(%esp),%eax
    cab7:	01 d0                	add    %edx,%eax
						printk("page_dir[%d][%d]: %08X\n\r",
    cab9:	8b 00                	mov    (%eax),%eax
    cabb:	50                   	push   %eax
    cabc:	ff 74 24 1c          	pushl  0x1c(%esp)
    cac0:	ff 74 24 24          	pushl  0x24(%esp)
    cac4:	68 59 3c 02 00       	push   $0x23c59
    cac9:	e8 73 c1 ff ff       	call   8c41 <printk>
    cace:	83 c4 10             	add    $0x10,%esp
    cad1:	eb 0a                	jmp    cadd <show_mem+0x1db>
					else
						k++, free++;						// 统计责表项对应页面.
    cad3:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
    cad8:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
			for(j = 0 ; j < 1024 ; j++)
    cadd:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
    cae2:	81 7c 24 18 ff 03 00 	cmpl   $0x3ff,0x18(%esp)
    cae9:	00 
    caea:	0f 8e 68 ff ff ff    	jle    ca58 <show_mem+0x156>
		}
		// 因每个任务线性空间长度是64MB,所以一个任务占用16个目录项.因此这每统计了16个目录项就把进程的任务结构占用的页表统计进来.若此时k=0则表示当前的16个页
		// 目录所对应的进程在系统中不存在(没有创建或者已经终止).在显示了对应进程号和其占用的物理内存页统计值k后,将k清零,以用于统计下一个进程占用的内存页面数.
		i++;
    caf0:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		if (!(i & 15) && k) {
    caf5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    caf9:	83 e0 0f             	and    $0xf,%eax
    cafc:	85 c0                	test   %eax,%eax
    cafe:	75 38                	jne    cb38 <show_mem+0x236>
    cb00:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    cb05:	74 31                	je     cb38 <show_mem+0x236>
			k++, free++;									/* one page/process for task_struct */
    cb07:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
    cb0c:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
			printk("Process %d: %d pages\n\r", (i >> 4) - 1, k);
    cb11:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    cb15:	c1 f8 04             	sar    $0x4,%eax
    cb18:	83 e8 01             	sub    $0x1,%eax
    cb1b:	83 ec 04             	sub    $0x4,%esp
    cb1e:	ff 74 24 18          	pushl  0x18(%esp)
    cb22:	50                   	push   %eax
    cb23:	68 72 3c 02 00       	push   $0x23c72
    cb28:	e8 14 c1 ff ff       	call   8c41 <printk>
    cb2d:	83 c4 10             	add    $0x10,%esp
			k = 0;
    cb30:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
    cb37:	00 
	for(i = 4 ; i < 1024 ;) {
    cb38:	81 7c 24 1c ff 03 00 	cmpl   $0x3ff,0x1c(%esp)
    cb3f:	00 
    cb40:	0f 8e 86 fe ff ff    	jle    c9cc <show_mem+0xca>
		}
	}
	// 最后显示系统中正在使用的内存页面和主内存区中总的内存页面数.
	printk("Memory found: %d (%d)\n\r\n\r", free - shared, total);
    cb46:	8b 44 24 10          	mov    0x10(%esp),%eax
    cb4a:	2b 44 24 08          	sub    0x8(%esp),%eax
    cb4e:	83 ec 04             	sub    $0x4,%esp
    cb51:	ff 74 24 10          	pushl  0x10(%esp)
    cb55:	50                   	push   %eax
    cb56:	68 89 3c 02 00       	push   $0x23c89
    cb5b:	e8 e1 c0 ff ff       	call   8c41 <printk>
    cb60:	83 c4 10             	add    $0x10,%esp
}
    cb63:	90                   	nop
    cb64:	83 c4 2c             	add    $0x2c,%esp
    cb67:	c3                   	ret    

0000cb68 <strncmp>:
// 字符串与字符串2的前count个字符进行比较.
// 参数:cs - 字符串1,ct - 字符串2,count - 比较的字符数.
// %0 - eax(__res)返回值,%1 - edi(cs)字符串1指针,%2 - esi(ct)字符串2指针,%3 - ecx(count).
// 返回:如果串1>串2,则返回1;串1=串2,则返回0;串1<串2,则返回-1.
static inline int strncmp(const char * cs, const char * ct, int count)
{
    cb68:	57                   	push   %edi
    cb69:	56                   	push   %esi
register int __res __asm__("ax");							// __res是寄存器变量(eax).
__asm__(
    cb6a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cb6e:	8b 54 24 10          	mov    0x10(%esp),%edx
    cb72:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cb76:	89 c7                	mov    %eax,%edi
    cb78:	89 d6                	mov    %edx,%esi
    cb7a:	fc                   	cld    
    cb7b:	49                   	dec    %ecx
    cb7c:	78 08                	js     cb86 <strncmp+0x1e>
    cb7e:	ac                   	lods   %ds:(%esi),%al
    cb7f:	ae                   	scas   %es:(%edi),%al
    cb80:	75 08                	jne    cb8a <strncmp+0x22>
    cb82:	84 c0                	test   %al,%al
    cb84:	75 f5                	jne    cb7b <strncmp+0x13>
    cb86:	31 c0                	xor    %eax,%eax
    cb88:	eb 09                	jmp    cb93 <strncmp+0x2b>
    cb8a:	b8 01 00 00 00       	mov    $0x1,%eax
    cb8f:	7c 02                	jl     cb93 <strncmp+0x2b>
    cb91:	f7 d8                	neg    %eax
	"jl 4f\n\t"												// 如果前面比较中串2字符<串1字符,则返回1结束.
	"negl %%eax\n"											// 否则eax=-eax,返回负值,结束.
	"4:"
	:"=a" (__res):"D" (cs), "S" (ct), "c" (count):);
return __res;												// 返回比较结果.
}
    cb93:	5e                   	pop    %esi
    cb94:	5f                   	pop    %edi
    cb95:	c3                   	ret    

0000cb96 <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
    cb96:	57                   	push   %edi
    cb97:	83 ec 04             	sub    $0x4,%esp
    cb9a:	8b 44 24 10          	mov    0x10(%esp),%eax
    cb9e:	88 04 24             	mov    %al,(%esp)
__asm__(
    cba1:	0f b6 04 24          	movzbl (%esp),%eax
    cba5:	8b 54 24 0c          	mov    0xc(%esp),%edx
    cba9:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cbad:	89 d7                	mov    %edx,%edi
    cbaf:	fc                   	cld    
    cbb0:	57                   	push   %edi
    cbb1:	f3 aa                	rep stos %al,%es:(%edi)
    cbb3:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
    cbb4:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    cbb8:	83 c4 04             	add    $0x4,%esp
    cbbb:	5f                   	pop    %edi
    cbbc:	c3                   	ret    

0000cbbd <oom>:
{
    cbbd:	83 ec 0c             	sub    $0xc,%esp
	printk("out of memory\n\r");
    cbc0:	83 ec 0c             	sub    $0xc,%esp
    cbc3:	68 a4 3c 02 00       	push   $0x23ca4
    cbc8:	e8 74 c0 ff ff       	call   8c41 <printk>
    cbcd:	83 c4 10             	add    $0x10,%esp
	do_exit(SIGSEGV);
    cbd0:	83 ec 0c             	sub    $0xc,%esp
    cbd3:	6a 0b                	push   $0xb
    cbd5:	e8 90 e1 ff ff       	call   ad6a <do_exit>
    cbda:	83 c4 10             	add    $0x10,%esp
}
    cbdd:	90                   	nop
    cbde:	83 c4 0c             	add    $0xc,%esp
    cbe1:	c3                   	ret    

0000cbe2 <bit>:
:"r" (nr),"m" (*(addr)),"0" (0)); \
return __res; \
}

// 这里根据不同的op字符定义3个内嵌函数.
bitop(bit, "")								// 定义内嵌函数bit(char * addr, unsigned int nr).
    cbe2:	83 ec 10             	sub    $0x10,%esp
    cbe5:	8b 54 24 18          	mov    0x18(%esp),%edx
    cbe9:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cbed:	b8 00 00 00 00       	mov    $0x0,%eax
    cbf2:	b8 00 00 00 00       	mov    $0x0,%eax
    cbf7:	0f a3 11             	bt     %edx,(%ecx)
    cbfa:	83 d0 00             	adc    $0x0,%eax
    cbfd:	89 44 24 0c          	mov    %eax,0xc(%esp)
    cc01:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cc05:	83 c4 10             	add    $0x10,%esp
    cc08:	c3                   	ret    

0000cc09 <setbit>:
bitop(setbit, "s")							// 定义内嵌函数setbit(char * addr, unsigned int nr).
    cc09:	83 ec 10             	sub    $0x10,%esp
    cc0c:	8b 54 24 18          	mov    0x18(%esp),%edx
    cc10:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cc14:	b8 00 00 00 00       	mov    $0x0,%eax
    cc19:	b8 00 00 00 00       	mov    $0x0,%eax
    cc1e:	0f ab 11             	bts    %edx,(%ecx)
    cc21:	83 d0 00             	adc    $0x0,%eax
    cc24:	89 44 24 0c          	mov    %eax,0xc(%esp)
    cc28:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cc2c:	83 c4 10             	add    $0x10,%esp
    cc2f:	c3                   	ret    

0000cc30 <clrbit>:
bitop(clrbit, "r")							// 定义内嵌函数clrbit(char * addr, unsigned int nr).
    cc30:	83 ec 10             	sub    $0x10,%esp
    cc33:	8b 54 24 18          	mov    0x18(%esp),%edx
    cc37:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cc3b:	b8 00 00 00 00       	mov    $0x0,%eax
    cc40:	b8 00 00 00 00       	mov    $0x0,%eax
    cc45:	0f b3 11             	btr    %edx,(%ecx)
    cc48:	83 d0 00             	adc    $0x0,%eax
    cc4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
    cc4f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cc53:	83 c4 10             	add    $0x10,%esp
    cc56:	c3                   	ret    

0000cc57 <get_swap_page>:
#define VM_PAGES (LAST_VM_PAGE - FIRST_VM_PAGE)					// = 1032192(从0开始计)(用总的页面数减去第0个任务的页面数)

// 申请1页交换页面.
// 扫描整个交换映射位图(除对应位图本身的位0以外),返回值为1的第一个比特位号,即目前空闲的交换页面号.若操作成功则返回交换页面号,否则返回0.
static int get_swap_page(void)
{
    cc57:	83 ec 10             	sub    $0x10,%esp
	int nr;

	if (!swap_bitmap)
    cc5a:	a1 a4 11 03 00       	mov    0x311a4,%eax
    cc5f:	85 c0                	test   %eax,%eax
    cc61:	75 07                	jne    cc6a <get_swap_page+0x13>
		return 0;
    cc63:	b8 00 00 00 00       	mov    $0x0,%eax
    cc68:	eb 3b                	jmp    cca5 <get_swap_page+0x4e>
	for (nr = 1; nr < 32768 ; nr++)
    cc6a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    cc71:	00 
    cc72:	eb 22                	jmp    cc96 <get_swap_page+0x3f>
		if (clrbit(swap_bitmap, nr))
    cc74:	8b 54 24 0c          	mov    0xc(%esp),%edx
    cc78:	a1 a4 11 03 00       	mov    0x311a4,%eax
    cc7d:	52                   	push   %edx
    cc7e:	50                   	push   %eax
    cc7f:	e8 ac ff ff ff       	call   cc30 <clrbit>
    cc84:	83 c4 08             	add    $0x8,%esp
    cc87:	85 c0                	test   %eax,%eax
    cc89:	74 06                	je     cc91 <get_swap_page+0x3a>
			return nr;					// 返回目前空闲的交换页面号.
    cc8b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cc8f:	eb 14                	jmp    cca5 <get_swap_page+0x4e>
	for (nr = 1; nr < 32768 ; nr++)
    cc91:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    cc96:	81 7c 24 0c ff 7f 00 	cmpl   $0x7fff,0xc(%esp)
    cc9d:	00 
    cc9e:	7e d4                	jle    cc74 <get_swap_page+0x1d>
	return 0;
    cca0:	b8 00 00 00 00       	mov    $0x0,%eax
}
    cca5:	83 c4 10             	add    $0x10,%esp
    cca8:	c3                   	ret    

0000cca9 <swap_free>:

// 释放交换设备中指定的交换页面.
// 在交换位图中设置指定页面号对应的位(置1).若原来该位就等于1,则表示交换设备中原来该页面就没有被占用,或者位图出错.于是显示出错信息并返回.
// 参数指定交换页面号.
void swap_free(int swap_nr)
{
    cca9:	83 ec 0c             	sub    $0xc,%esp
	if (!swap_nr)
    ccac:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    ccb1:	74 3d                	je     ccf0 <swap_free+0x47>
		return;
	if (swap_bitmap && swap_nr < SWAP_BITS)
    ccb3:	a1 a4 11 03 00       	mov    0x311a4,%eax
    ccb8:	85 c0                	test   %eax,%eax
    ccba:	74 21                	je     ccdd <swap_free+0x34>
    ccbc:	81 7c 24 10 ff 7f 00 	cmpl   $0x7fff,0x10(%esp)
    ccc3:	00 
    ccc4:	7f 17                	jg     ccdd <swap_free+0x34>
		if (!setbit(swap_bitmap, swap_nr))
    ccc6:	8b 54 24 10          	mov    0x10(%esp),%edx
    ccca:	a1 a4 11 03 00       	mov    0x311a4,%eax
    cccf:	52                   	push   %edx
    ccd0:	50                   	push   %eax
    ccd1:	e8 33 ff ff ff       	call   cc09 <setbit>
    ccd6:	83 c4 08             	add    $0x8,%esp
    ccd9:	85 c0                	test   %eax,%eax
    ccdb:	74 16                	je     ccf3 <swap_free+0x4a>
			return;
	printk("Swap-space bad (swap_free())\n\r");
    ccdd:	83 ec 0c             	sub    $0xc,%esp
    cce0:	68 b4 3c 02 00       	push   $0x23cb4
    cce5:	e8 57 bf ff ff       	call   8c41 <printk>
    ccea:	83 c4 10             	add    $0x10,%esp
	return;
    cced:	90                   	nop
    ccee:	eb 04                	jmp    ccf4 <swap_free+0x4b>
		return;
    ccf0:	90                   	nop
    ccf1:	eb 01                	jmp    ccf4 <swap_free+0x4b>
			return;
    ccf3:	90                   	nop
}
    ccf4:	83 c4 0c             	add    $0xc,%esp
    ccf7:	c3                   	ret    

0000ccf8 <swap_in>:

// 把指定页面交换进内存中
// 把指定页表项的对应页面从交换设备中读入到新申请的内存页面中.修改交换位图中对应位(置位),同时修改页表项内容,让它指向该内存页面,并设置相应标志.
void swap_in(unsigned long *table_ptr)
{
    ccf8:	83 ec 1c             	sub    $0x1c,%esp
	int swap_nr;
	unsigned long page;

	// 首先检查交换位图和参数有效性.如果交换位图不存在,或者指定页表项对应的页面已存在于内存中,或者交换页面号为0,则显示警告信息并退出.对于已放到交换
	// 设备中去的内存页面,相应页表项中存放的应是交换页面号*2,即(swap_nr << 1).
	if (!swap_bitmap) {
    ccfb:	a1 a4 11 03 00       	mov    0x311a4,%eax
    cd00:	85 c0                	test   %eax,%eax
    cd02:	75 15                	jne    cd19 <swap_in+0x21>
		printk("Trying to swap in without swap bit-map");
    cd04:	83 ec 0c             	sub    $0xc,%esp
    cd07:	68 d4 3c 02 00       	push   $0x23cd4
    cd0c:	e8 30 bf ff ff       	call   8c41 <printk>
    cd11:	83 c4 10             	add    $0x10,%esp
		return;
    cd14:	e9 ae 00 00 00       	jmp    cdc7 <swap_in+0xcf>
	}
	if (1 & *table_ptr) {
    cd19:	8b 44 24 20          	mov    0x20(%esp),%eax
    cd1d:	8b 00                	mov    (%eax),%eax
    cd1f:	83 e0 01             	and    $0x1,%eax
    cd22:	85 c0                	test   %eax,%eax
    cd24:	74 15                	je     cd3b <swap_in+0x43>
		printk("trying to swap in present page\n\r");
    cd26:	83 ec 0c             	sub    $0xc,%esp
    cd29:	68 fc 3c 02 00       	push   $0x23cfc
    cd2e:	e8 0e bf ff ff       	call   8c41 <printk>
    cd33:	83 c4 10             	add    $0x10,%esp
		return;
    cd36:	e9 8c 00 00 00       	jmp    cdc7 <swap_in+0xcf>
	}
	swap_nr = *table_ptr >> 1;
    cd3b:	8b 44 24 20          	mov    0x20(%esp),%eax
    cd3f:	8b 00                	mov    (%eax),%eax
    cd41:	d1 e8                	shr    %eax
    cd43:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!swap_nr) {
    cd47:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    cd4c:	75 12                	jne    cd60 <swap_in+0x68>
		printk("No swap page in swap_in\n\r");
    cd4e:	83 ec 0c             	sub    $0xc,%esp
    cd51:	68 1d 3d 02 00       	push   $0x23d1d
    cd56:	e8 e6 be ff ff       	call   8c41 <printk>
    cd5b:	83 c4 10             	add    $0x10,%esp
		return;
    cd5e:	eb 67                	jmp    cdc7 <swap_in+0xcf>
	}
	// 然后申请一页物理内存并从交换设备中读入页面号为swap_nr的页面.在把页面交换进来后,就把交换位图中对应比特位置位.如果其原本就是置位的,说明此次是再次
	// 从交换设备中读入相同的页面,于是显示一下警告信息.最后让页表指向该物理页面,并设置页面已修改,用户可读写和存在标志(Dirty,U/S,R/W,P).
	if (!(page = get_free_page()))
    cd60:	e8 9c 02 00 00       	call   d001 <get_free_page>
    cd65:	89 44 24 08          	mov    %eax,0x8(%esp)
    cd69:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    cd6e:	75 05                	jne    cd75 <swap_in+0x7d>
		oom();
    cd70:	e8 48 fe ff ff       	call   cbbd <oom>
	read_swap_page(swap_nr, (char *) page);
    cd75:	8b 54 24 08          	mov    0x8(%esp),%edx
    cd79:	a1 a0 11 03 00       	mov    0x311a0,%eax
    cd7e:	52                   	push   %edx
    cd7f:	ff 74 24 10          	pushl  0x10(%esp)
    cd83:	50                   	push   %eax
    cd84:	6a 00                	push   $0x0
    cd86:	e8 70 9a 00 00       	call   167fb <ll_rw_page>
    cd8b:	83 c4 10             	add    $0x10,%esp
	if (setbit(swap_bitmap, swap_nr))
    cd8e:	8b 54 24 0c          	mov    0xc(%esp),%edx
    cd92:	a1 a4 11 03 00       	mov    0x311a4,%eax
    cd97:	83 ec 08             	sub    $0x8,%esp
    cd9a:	52                   	push   %edx
    cd9b:	50                   	push   %eax
    cd9c:	e8 68 fe ff ff       	call   cc09 <setbit>
    cda1:	83 c4 10             	add    $0x10,%esp
    cda4:	85 c0                	test   %eax,%eax
    cda6:	74 10                	je     cdb8 <swap_in+0xc0>
		printk("swapping in multiply from same page\n\r");
    cda8:	83 ec 0c             	sub    $0xc,%esp
    cdab:	68 38 3d 02 00       	push   $0x23d38
    cdb0:	e8 8c be ff ff       	call   8c41 <printk>
    cdb5:	83 c4 10             	add    $0x10,%esp
	*table_ptr = page | (PAGE_DIRTY | 7);
    cdb8:	8b 44 24 08          	mov    0x8(%esp),%eax
    cdbc:	83 c8 47             	or     $0x47,%eax
    cdbf:	89 c2                	mov    %eax,%edx
    cdc1:	8b 44 24 20          	mov    0x20(%esp),%eax
    cdc5:	89 10                	mov    %edx,(%eax)
}
    cdc7:	83 c4 1c             	add    $0x1c,%esp
    cdca:	c3                   	ret    

0000cdcb <try_to_swap_out>:

// 尝试把页面交换出去.
// 若页面没有被修改过则不必保存在交换设备中,因为对应页面还可以再直接从相应映像文件中读入.于是可以直接释放掉相应物理页面了事.否则就申请一个交换页面号,然后
// 把页面交换出去.此时交换页面号要保存在对应页表项中,并且仍需要保持页表项存在位P=0.参数是页表项指针.页面换或释放成功返回1,否则返回0.
int try_to_swap_out(unsigned long * table_ptr)
{
    cdcb:	83 ec 1c             	sub    $0x1c,%esp
	unsigned long page;
	unsigned long swap_nr;

	// 首先判断参数的有效性.若需要交换出去的内存页面并不存在(或称无效),则即可退出.若页表项指定的物理页面地址大于分页管理的内存高端PAGING_MEMORY(15MB),
	// 也退出.
	page = *table_ptr;
    cdce:	8b 44 24 20          	mov    0x20(%esp),%eax
    cdd2:	8b 00                	mov    (%eax),%eax
    cdd4:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!(PAGE_PRESENT & page))
    cdd8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cddc:	83 e0 01             	and    $0x1,%eax
    cddf:	85 c0                	test   %eax,%eax
    cde1:	75 0a                	jne    cded <try_to_swap_out+0x22>
		return 0;
    cde3:	b8 00 00 00 00       	mov    $0x0,%eax
    cde8:	e9 d4 00 00 00       	jmp    cec1 <try_to_swap_out+0xf6>
	if (page - LOW_MEM > PAGING_MEMORY)
    cded:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cdf1:	2d 00 00 10 00       	sub    $0x100000,%eax
    cdf6:	3d 00 00 f0 00       	cmp    $0xf00000,%eax
    cdfb:	76 0a                	jbe    ce07 <try_to_swap_out+0x3c>
		return 0;
    cdfd:	b8 00 00 00 00       	mov    $0x0,%eax
    ce02:	e9 ba 00 00 00       	jmp    cec1 <try_to_swap_out+0xf6>
	// 若内存页面已被修改过,但是该页面是被共享的,那么为了提高运行效率,此类页面不宜被交换出去,于是直接退出,函数返回0.否则就申请一交换页面号,并把它保存在页表
	// 项中,然后把页面交换出去并释放对应物理内存页面.
	if (PAGE_DIRTY & page) {
    ce07:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce0b:	83 e0 40             	and    $0x40,%eax
    ce0e:	85 c0                	test   %eax,%eax
    ce10:	0f 84 85 00 00 00    	je     ce9b <try_to_swap_out+0xd0>
		page &= 0xfffff000;									// 取物理页面地址.
    ce16:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    ce1d:	ff 
		if (mem_map[MAP_NR(page)] != 1)
    ce1e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce22:	2d 00 00 10 00       	sub    $0x100000,%eax
    ce27:	c1 e8 0c             	shr    $0xc,%eax
    ce2a:	0f b6 80 a0 02 03 00 	movzbl 0x302a0(%eax),%eax
    ce31:	3c 01                	cmp    $0x1,%al
    ce33:	74 0a                	je     ce3f <try_to_swap_out+0x74>
			return 0;
    ce35:	b8 00 00 00 00       	mov    $0x0,%eax
    ce3a:	e9 82 00 00 00       	jmp    cec1 <try_to_swap_out+0xf6>
		if (!(swap_nr = get_swap_page()))					// 申请交换页面号.
    ce3f:	e8 13 fe ff ff       	call   cc57 <get_swap_page>
    ce44:	89 44 24 08          	mov    %eax,0x8(%esp)
    ce48:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    ce4d:	75 07                	jne    ce56 <try_to_swap_out+0x8b>
			return 0;
    ce4f:	b8 00 00 00 00       	mov    $0x0,%eax
    ce54:	eb 6b                	jmp    cec1 <try_to_swap_out+0xf6>
		// 对于要交换设备中的页面,相应页表项中将存放的是(swap_nr << 1).乘2(左移1位)是为了空出原来页表项的存在位(P).只有存在位P=0并且页表项内容不为0的页面才会在
		// 交换设备中.Intel手册中明确指出,当一个表项的存在位P=0时(无效页表项),所有其他位(位31-1)可供随意使用.下面写交换页函数write_swap_page(nr,buffer)被
		// 定义为ll_rw_page(WRITE,SWAP_DEV,(nr),(buffer)).
		*table_ptr = swap_nr << 1;
    ce56:	8b 44 24 08          	mov    0x8(%esp),%eax
    ce5a:	8d 14 00             	lea    (%eax,%eax,1),%edx
    ce5d:	8b 44 24 20          	mov    0x20(%esp),%eax
    ce61:	89 10                	mov    %edx,(%eax)
		invalidate();										// 刷新CPU页变换高速缓冲.
    ce63:	b8 00 00 00 00       	mov    $0x0,%eax
    ce68:	0f 22 d8             	mov    %eax,%cr3
		write_swap_page(swap_nr, (char *) page);
    ce6b:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    ce6f:	8b 54 24 08          	mov    0x8(%esp),%edx
    ce73:	a1 a0 11 03 00       	mov    0x311a0,%eax
    ce78:	51                   	push   %ecx
    ce79:	52                   	push   %edx
    ce7a:	50                   	push   %eax
    ce7b:	6a 01                	push   $0x1
    ce7d:	e8 79 99 00 00       	call   167fb <ll_rw_page>
    ce82:	83 c4 10             	add    $0x10,%esp
		free_page(page);
    ce85:	83 ec 0c             	sub    $0xc,%esp
    ce88:	ff 74 24 18          	pushl  0x18(%esp)
    ce8c:	e8 e1 ed ff ff       	call   bc72 <free_page>
    ce91:	83 c4 10             	add    $0x10,%esp
		return 1;
    ce94:	b8 01 00 00 00       	mov    $0x1,%eax
    ce99:	eb 26                	jmp    cec1 <try_to_swap_out+0xf6>
	}
	// 否则表明页面没有修改过.那么就不用交换出去,而直接释放即可.
	*table_ptr = 0;
    ce9b:	8b 44 24 20          	mov    0x20(%esp),%eax
    ce9f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	invalidate();
    cea5:	b8 00 00 00 00       	mov    $0x0,%eax
    ceaa:	0f 22 d8             	mov    %eax,%cr3
	free_page(page);
    cead:	83 ec 0c             	sub    $0xc,%esp
    ceb0:	ff 74 24 18          	pushl  0x18(%esp)
    ceb4:	e8 b9 ed ff ff       	call   bc72 <free_page>
    ceb9:	83 c4 10             	add    $0x10,%esp
	return 1;
    cebc:	b8 01 00 00 00       	mov    $0x1,%eax
}
    cec1:	83 c4 1c             	add    $0x1c,%esp
    cec4:	c3                   	ret    

0000cec5 <swap_out>:
 */
// 把内存页面放到交换设备中.
// 从线性地址64MB对应的目录项(FIRST_VM_PAGE>>10)开始,搜索整个4GB线性空间,对有效页目录二级页表指定的物理内存页面执行交换
// 到交换设备中去的尝试.一旦成功地交换出一个页面,就返回-1.否则返回0.该函数会在get_free_page()中被调用.
int swap_out(void)
{
    cec5:	83 ec 1c             	sub    $0x1c,%esp
	static int dir_entry = FIRST_VM_PAGE >> 10;	// 即任务1的第1个目录项索引.
	static int page_entry = -1;
	int counter = VM_PAGES;						// 表示除去任务0以外的其他任务的所有页数目
    cec8:	c7 44 24 0c 00 c0 0f 	movl   $0xfc000,0xc(%esp)
    cecf:	00 
	int pg_table;

	// 首先搜索页目录表,查找二级页表存在的页目录项pg_table.找到则退出循环,否则高速页目录项数对应剩余二级页表项数counter,然后继续
	// 检测下一项目录项.若全部搜索完还没有找到适合的(存在的)页目录项,就重新搜索.
	while (counter > 0) {
    ced0:	eb 46                	jmp    cf18 <swap_out+0x53>
		pg_table = pg_dir[dir_entry];			// 页目录项内容.
    ced2:	a1 50 f3 02 00       	mov    0x2f350,%eax
    ced7:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    cede:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (pg_table & 1)
    cee2:	8b 44 24 08          	mov    0x8(%esp),%eax
    cee6:	83 e0 01             	and    $0x1,%eax
    cee9:	85 c0                	test   %eax,%eax
    ceeb:	75 34                	jne    cf21 <swap_out+0x5c>
			break;
		counter -= 1024;						// 1个页表对应1024个页帧
    ceed:	81 6c 24 0c 00 04 00 	subl   $0x400,0xc(%esp)
    cef4:	00 
		dir_entry++;							// 下一目录项.
    cef5:	a1 50 f3 02 00       	mov    0x2f350,%eax
    cefa:	83 c0 01             	add    $0x1,%eax
    cefd:	a3 50 f3 02 00       	mov    %eax,0x2f350
		// 如果整个4GB的1024个页目录项检查完了则又回到第1个任务重新开始检查
		if (dir_entry >= 1024)
    cf02:	a1 50 f3 02 00       	mov    0x2f350,%eax
    cf07:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    cf0c:	7e 0a                	jle    cf18 <swap_out+0x53>
			dir_entry = FIRST_VM_PAGE >> 10;
    cf0e:	c7 05 50 f3 02 00 10 	movl   $0x10,0x2f350
    cf15:	00 00 00 
	while (counter > 0) {
    cf18:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    cf1d:	7f b3                	jg     ced2 <swap_out+0xd>
    cf1f:	eb 01                	jmp    cf22 <swap_out+0x5d>
			break;
    cf21:	90                   	nop
	}
	// 在取得当前目录项的页表指针后,针对该页表中的所有1024个页面,逐一调用交换函数try_to_swap_out()尝试交换出去.一旦某个页面成功交换到交换设备
	// 中就返回1.若对所有目录项的所有页表都已尝试失败,则显示"交换内存用完"的警告,并返回0.
	pg_table &= 0xfffff000;						// 页表指针(地址)(页对齐)
    cf22:	81 64 24 08 00 f0 ff 	andl   $0xfffff000,0x8(%esp)
    cf29:	ff 
	while (counter-- > 0) {
    cf2a:	e9 a3 00 00 00       	jmp    cfd2 <swap_out+0x10d>
		page_entry++;
    cf2f:	a1 54 f3 02 00       	mov    0x2f354,%eax
    cf34:	83 c0 01             	add    $0x1,%eax
    cf37:	a3 54 f3 02 00       	mov    %eax,0x2f354
		// 如果已经尝试处理完当前页表所有项还没有能够成功地交换出一个页面,即此时页表项索引大于等于1024,则如同前面第135-143行执行相同的处理来选出一个
		// 二级页表存在的页目录项,并取得相应二级页表指针.
		if (page_entry >= 1024) {
    cf3c:	a1 54 f3 02 00       	mov    0x2f354,%eax
    cf41:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    cf46:	7e 61                	jle    cfa9 <swap_out+0xe4>
			page_entry = 0;
    cf48:	c7 05 54 f3 02 00 00 	movl   $0x0,0x2f354
    cf4f:	00 00 00 
		repeat:
			dir_entry++;
    cf52:	a1 50 f3 02 00       	mov    0x2f350,%eax
    cf57:	83 c0 01             	add    $0x1,%eax
    cf5a:	a3 50 f3 02 00       	mov    %eax,0x2f350
			if (dir_entry >= 1024)
    cf5f:	a1 50 f3 02 00       	mov    0x2f350,%eax
    cf64:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    cf69:	7e 0a                	jle    cf75 <swap_out+0xb0>
				dir_entry = FIRST_VM_PAGE >> 10;
    cf6b:	c7 05 50 f3 02 00 10 	movl   $0x10,0x2f350
    cf72:	00 00 00 
			pg_table = pg_dir[dir_entry];		// 页目录项内容.
    cf75:	a1 50 f3 02 00       	mov    0x2f350,%eax
    cf7a:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    cf81:	89 44 24 08          	mov    %eax,0x8(%esp)
			if (!(pg_table & 1))
    cf85:	8b 44 24 08          	mov    0x8(%esp),%eax
    cf89:	83 e0 01             	and    $0x1,%eax
    cf8c:	85 c0                	test   %eax,%eax
    cf8e:	75 11                	jne    cfa1 <swap_out+0xdc>
				if ((counter -= 1024) > 0)
    cf90:	81 6c 24 0c 00 04 00 	subl   $0x400,0xc(%esp)
    cf97:	00 
    cf98:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    cf9d:	7e 48                	jle    cfe7 <swap_out+0x122>
					goto repeat;
    cf9f:	eb b1                	jmp    cf52 <swap_out+0x8d>
				else
					break;
			pg_table &= 0xfffff000;				// 页表指针.
    cfa1:	81 64 24 08 00 f0 ff 	andl   $0xfffff000,0x8(%esp)
    cfa8:	ff 
		}
		if (try_to_swap_out(page_entry + (unsigned long *) pg_table))
    cfa9:	a1 54 f3 02 00       	mov    0x2f354,%eax
    cfae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    cfb5:	8b 44 24 08          	mov    0x8(%esp),%eax
    cfb9:	01 d0                	add    %edx,%eax
    cfbb:	83 ec 0c             	sub    $0xc,%esp
    cfbe:	50                   	push   %eax
    cfbf:	e8 07 fe ff ff       	call   cdcb <try_to_swap_out>
    cfc4:	83 c4 10             	add    $0x10,%esp
    cfc7:	85 c0                	test   %eax,%eax
    cfc9:	74 07                	je     cfd2 <swap_out+0x10d>
			return 1;
    cfcb:	b8 01 00 00 00       	mov    $0x1,%eax
    cfd0:	eb 2b                	jmp    cffd <swap_out+0x138>
	while (counter-- > 0) {
    cfd2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cfd6:	8d 50 ff             	lea    -0x1(%eax),%edx
    cfd9:	89 54 24 0c          	mov    %edx,0xc(%esp)
    cfdd:	85 c0                	test   %eax,%eax
    cfdf:	0f 8f 4a ff ff ff    	jg     cf2f <swap_out+0x6a>
    cfe5:	eb 01                	jmp    cfe8 <swap_out+0x123>
					break;
    cfe7:	90                   	nop
        }
	printk("Out of swap-memory\n\r");
    cfe8:	83 ec 0c             	sub    $0xc,%esp
    cfeb:	68 5e 3d 02 00       	push   $0x23d5e
    cff0:	e8 4c bc ff ff       	call   8c41 <printk>
    cff5:	83 c4 10             	add    $0x10,%esp
	return 0;
    cff8:	b8 00 00 00 00       	mov    $0x0,%eax
}
    cffd:	83 c4 1c             	add    $0x1c,%esp
    d000:	c3                   	ret    

0000d001 <get_free_page>:
// 上面%4寄存器实际指向mem_map[]内存字节位图的最后一个字节.本函数从位图末端开始向前扫描所有页面标志(页面总数为PAGING_AGES),若有页面空闲
// (内存位图字节为0)则返回页面地址.注意!本函数只是指出在主内存区的一页空闲物理页面,但并没有映射到某个进程的地址空间中去.后面的put_page()函数
// 即用于把指定页面映射到某个进程的地址空间中.当然对于内核使用本函数并不需要再使用put_page()进行映射,因为内核代码和数据空间(16MB)已经对等
// 地映射到物理地址空间.
unsigned long get_free_page(void)
{
    d001:	57                   	push   %edi
    d002:	53                   	push   %ebx
    d003:	83 ec 04             	sub    $0x4,%esp
		"movl %%edx, %%eax							/* 将页面起始地址->eax(返回值). */\n\t"
		"1:\n\t"
		"cld"
		:"=a" (__res)
		:"0" (0), "i" (LOW_MEM), "c" (PAGING_PAGES),
		"D" (mem_map + PAGING_PAGES - 1)
    d006:	bb 9f 11 03 00       	mov    $0x3119f,%ebx
	__asm__(
    d00b:	b8 00 00 00 00       	mov    $0x0,%eax
    d010:	b9 00 0f 00 00       	mov    $0xf00,%ecx
    d015:	89 df                	mov    %ebx,%edi
    d017:	fd                   	std    
    d018:	f2 ae                	repnz scas %es:(%edi),%al
    d01a:	75 1e                	jne    d03a <get_free_page+0x39>
    d01c:	c6 47 01 01          	movb   $0x1,0x1(%edi)
    d020:	c1 e1 0c             	shl    $0xc,%ecx
    d023:	81 c1 00 00 10 00    	add    $0x100000,%ecx
    d029:	89 ca                	mov    %ecx,%edx
    d02b:	b9 00 04 00 00       	mov    $0x400,%ecx
    d030:	8d ba fc 0f 00 00    	lea    0xffc(%edx),%edi
    d036:	f3 ab                	rep stos %eax,%es:(%edi)
    d038:	89 d0                	mov    %edx,%eax
    d03a:	fc                   	cld    
    d03b:	89 c3                	mov    %eax,%ebx
		:"dx");
	if (__res >= HIGH_MEMORY)						// 页面地址大于实际内存容量则重新寻找
    d03d:	a1 80 02 03 00       	mov    0x30280,%eax
    d042:	39 c3                	cmp    %eax,%ebx
    d044:	72 02                	jb     d048 <get_free_page+0x47>
		goto repeat;
    d046:	eb be                	jmp    d006 <get_free_page+0x5>
	if (!__res && swap_out())						// 若没有得到空闲页面则执行交换处理,并重新查找.
    d048:	85 db                	test   %ebx,%ebx
    d04a:	75 0b                	jne    d057 <get_free_page+0x56>
    d04c:	e8 74 fe ff ff       	call   cec5 <swap_out>
    d051:	85 c0                	test   %eax,%eax
    d053:	74 02                	je     d057 <get_free_page+0x56>
		goto repeat;
    d055:	eb af                	jmp    d006 <get_free_page+0x5>
	return __res;									// 返回空闲物理页面地址.
    d057:	89 d8                	mov    %ebx,%eax
}
    d059:	83 c4 04             	add    $0x4,%esp
    d05c:	5b                   	pop    %ebx
    d05d:	5f                   	pop    %edi
    d05e:	c3                   	ret    

0000d05f <init_swapping>:

// 内存交换初始化.
void init_swapping(void)
{
    d05f:	83 ec 1c             	sub    $0x1c,%esp
	// blk_size[]指向指定主设备号的块设备块数数组.该块数数组每一项对应一个设备上所拥有的数据块总数(1块大小=1KB).
	extern int *blk_size[];							// blk_drv/ll_rw_blk.c
	int swap_size, i, j;

	// 如果没有定义交换设备则返回.如果交换设备没有设置块数数组,则显示并返回.
	if (!SWAP_DEV)
    d062:	a1 a0 11 03 00       	mov    0x311a0,%eax
    d067:	85 c0                	test   %eax,%eax
    d069:	0f 84 2c 02 00 00    	je     d29b <init_swapping+0x23c>
		return;
	if (!blk_size[MAJOR(SWAP_DEV)]) {
    d06f:	a1 a0 11 03 00       	mov    0x311a0,%eax
    d074:	c1 e8 08             	shr    $0x8,%eax
    d077:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
    d07e:	85 c0                	test   %eax,%eax
    d080:	75 15                	jne    d097 <init_swapping+0x38>
		printk("Unable to get size of swap device\n\r");
    d082:	83 ec 0c             	sub    $0xc,%esp
    d085:	68 74 3d 02 00       	push   $0x23d74
    d08a:	e8 b2 bb ff ff       	call   8c41 <printk>
    d08f:	83 c4 10             	add    $0x10,%esp
		return;
    d092:	e9 08 02 00 00       	jmp    d29f <init_swapping+0x240>
	}
	// 取指定交换设备号的交换区数据块总数swap_size.若为0则返回,若总块数小于100块则显示信息"交换设备区太小",然后退出.
	swap_size = blk_size[MAJOR(SWAP_DEV)][MINOR(SWAP_DEV)];
    d097:	a1 a0 11 03 00       	mov    0x311a0,%eax
    d09c:	c1 e8 08             	shr    $0x8,%eax
    d09f:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
    d0a6:	8b 15 a0 11 03 00    	mov    0x311a0,%edx
    d0ac:	0f b6 d2             	movzbl %dl,%edx
    d0af:	c1 e2 02             	shl    $0x2,%edx
    d0b2:	01 d0                	add    %edx,%eax
    d0b4:	8b 00                	mov    (%eax),%eax
    d0b6:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!swap_size)
    d0ba:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d0bf:	0f 84 d9 01 00 00    	je     d29e <init_swapping+0x23f>
		return;
	if (swap_size < 100) {
    d0c5:	83 7c 24 0c 63       	cmpl   $0x63,0xc(%esp)
    d0ca:	7f 19                	jg     d0e5 <init_swapping+0x86>
		printk("Swap device too small (%d blocks)\n\r", swap_size);
    d0cc:	83 ec 08             	sub    $0x8,%esp
    d0cf:	ff 74 24 14          	pushl  0x14(%esp)
    d0d3:	68 98 3d 02 00       	push   $0x23d98
    d0d8:	e8 64 bb ff ff       	call   8c41 <printk>
    d0dd:	83 c4 10             	add    $0x10,%esp
		return;
    d0e0:	e9 ba 01 00 00       	jmp    d29f <init_swapping+0x240>
	}
	// 每页4个数据块,所以swap_size >>= 2计算出交换页面总数.
	// 交换数据块总数转换成对应可交换页面总数.该值不能大于SWAP_BITS所能表示的页面数.即交换页面总数不得大于32768.
	swap_size >>= 2;
    d0e5:	c1 7c 24 0c 02       	sarl   $0x2,0xc(%esp)
	if (swap_size > SWAP_BITS)
    d0ea:	81 7c 24 0c 00 80 00 	cmpl   $0x8000,0xc(%esp)
    d0f1:	00 
    d0f2:	7e 08                	jle    d0fc <init_swapping+0x9d>
		swap_size = SWAP_BITS;
    d0f4:	c7 44 24 0c 00 80 00 	movl   $0x8000,0xc(%esp)
    d0fb:	00 
	// 然后申请一页物理内存来存放交换页面映射数组swap_bitmap,其中每1比特代表1页交换页面
	swap_bitmap = (char *) get_free_page();
    d0fc:	e8 00 ff ff ff       	call   d001 <get_free_page>
    d101:	a3 a4 11 03 00       	mov    %eax,0x311a4
	if (!swap_bitmap) {
    d106:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d10b:	85 c0                	test   %eax,%eax
    d10d:	75 15                	jne    d124 <init_swapping+0xc5>
		printk("Unable to start swapping: out of memory :-)\n\r");
    d10f:	83 ec 0c             	sub    $0xc,%esp
    d112:	68 bc 3d 02 00       	push   $0x23dbc
    d117:	e8 25 bb ff ff       	call   8c41 <printk>
    d11c:	83 c4 10             	add    $0x10,%esp
		return;
    d11f:	e9 7b 01 00 00       	jmp    d29f <init_swapping+0x240>
	}
	// read_swap_page(nr,buffer)被定义为ll_rw_page(READ,SWAP_DEV,(nr),(buffer)).这里把交换设备上的页面０读到swap_bitmap页面中.该页面
	//　是交换区管理页面.其中第4086字节开始处含有１０个字符的交换设备特征字符串"SWAP-SPACE".若没有找到该特征字符串,则说明不是一个有效的交换设备.
	// 于是显示信息,释放刚申请的物理页面并退出函数.否则将特征字符串字节清零.
	read_swap_page(0, swap_bitmap);
    d124:	8b 15 a4 11 03 00    	mov    0x311a4,%edx
    d12a:	a1 a0 11 03 00       	mov    0x311a0,%eax
    d12f:	52                   	push   %edx
    d130:	6a 00                	push   $0x0
    d132:	50                   	push   %eax
    d133:	6a 00                	push   $0x0
    d135:	e8 c1 96 00 00       	call   167fb <ll_rw_page>
    d13a:	83 c4 10             	add    $0x10,%esp
	if (strncmp("SWAP-SPACE", swap_bitmap + 4086, 10)) {
    d13d:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d142:	05 f6 0f 00 00       	add    $0xff6,%eax
    d147:	83 ec 04             	sub    $0x4,%esp
    d14a:	6a 0a                	push   $0xa
    d14c:	50                   	push   %eax
    d14d:	68 ea 3d 02 00       	push   $0x23dea
    d152:	e8 11 fa ff ff       	call   cb68 <strncmp>
    d157:	83 c4 10             	add    $0x10,%esp
    d15a:	85 c0                	test   %eax,%eax
    d15c:	74 30                	je     d18e <init_swapping+0x12f>
		printk("Unable to find swap-space signature\n\r");
    d15e:	83 ec 0c             	sub    $0xc,%esp
    d161:	68 f8 3d 02 00       	push   $0x23df8
    d166:	e8 d6 ba ff ff       	call   8c41 <printk>
    d16b:	83 c4 10             	add    $0x10,%esp
		free_page((long) swap_bitmap);
    d16e:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d173:	83 ec 0c             	sub    $0xc,%esp
    d176:	50                   	push   %eax
    d177:	e8 f6 ea ff ff       	call   bc72 <free_page>
    d17c:	83 c4 10             	add    $0x10,%esp
		swap_bitmap = NULL;
    d17f:	c7 05 a4 11 03 00 00 	movl   $0x0,0x311a4
    d186:	00 00 00 
		return;
    d189:	e9 11 01 00 00       	jmp    d29f <init_swapping+0x240>
	}
	// 将交换设备的标志字符串"SWAP-SPACE"字符串清空
	memset(swap_bitmap + 4086, 0, 10);
    d18e:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d193:	05 f6 0f 00 00       	add    $0xff6,%eax
    d198:	83 ec 04             	sub    $0x4,%esp
    d19b:	6a 0a                	push   $0xa
    d19d:	6a 00                	push   $0x0
    d19f:	50                   	push   %eax
    d1a0:	e8 f1 f9 ff ff       	call   cb96 <memset>
    d1a5:	83 c4 10             	add    $0x10,%esp
	// 然后检查读入的交换位映射图.应该32768个位全为0,若位图中有置位的位0,则表示位图有问题,于是显示出错信息,释放位图占用的页面并退出函数.为了加快检查速度,
	// 这里首先仅挑选查看位图0和最后一个交换页面对应的位,即swap_size交换页面对应的位,以及随后到SWAP_BITS(32768)位.
	for (i = 0 ; i < SWAP_BITS ; i++) {
    d1a8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    d1af:	00 
    d1b0:	eb 5e                	jmp    d210 <init_swapping+0x1b1>
		if (i == 1)
    d1b2:	83 7c 24 08 01       	cmpl   $0x1,0x8(%esp)
    d1b7:	75 08                	jne    d1c1 <init_swapping+0x162>
			i = swap_size;
    d1b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d1bd:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (bit(swap_bitmap, i)) {
    d1c1:	8b 54 24 08          	mov    0x8(%esp),%edx
    d1c5:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d1ca:	83 ec 08             	sub    $0x8,%esp
    d1cd:	52                   	push   %edx
    d1ce:	50                   	push   %eax
    d1cf:	e8 0e fa ff ff       	call   cbe2 <bit>
    d1d4:	83 c4 10             	add    $0x10,%esp
    d1d7:	85 c0                	test   %eax,%eax
    d1d9:	74 30                	je     d20b <init_swapping+0x1ac>
			printk("Bad swap-space bit-map\n\r");
    d1db:	83 ec 0c             	sub    $0xc,%esp
    d1de:	68 1e 3e 02 00       	push   $0x23e1e
    d1e3:	e8 59 ba ff ff       	call   8c41 <printk>
    d1e8:	83 c4 10             	add    $0x10,%esp
			free_page((long) swap_bitmap);
    d1eb:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d1f0:	83 ec 0c             	sub    $0xc,%esp
    d1f3:	50                   	push   %eax
    d1f4:	e8 79 ea ff ff       	call   bc72 <free_page>
    d1f9:	83 c4 10             	add    $0x10,%esp
			swap_bitmap = NULL;
    d1fc:	c7 05 a4 11 03 00 00 	movl   $0x0,0x311a4
    d203:	00 00 00 
			return;
    d206:	e9 94 00 00 00       	jmp    d29f <init_swapping+0x240>
	for (i = 0 ; i < SWAP_BITS ; i++) {
    d20b:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    d210:	81 7c 24 08 ff 7f 00 	cmpl   $0x7fff,0x8(%esp)
    d217:	00 
    d218:	7e 98                	jle    d1b2 <init_swapping+0x153>
		}
	}
	// 然后再仔细地检测位1到位swap_size所有位是否为0.若存在不是0的位,则表示位图有问题,于是释放位图占用的页面并退出函数.否则显示交换设备工作正常以及交换页面
	// 和交换空间总字节数.
	j = 0;
    d21a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    d221:	00 
	for (i = 1 ; i < swap_size ; i++)
    d222:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
    d229:	00 
    d22a:	eb 24                	jmp    d250 <init_swapping+0x1f1>
		if (bit(swap_bitmap, i))
    d22c:	8b 54 24 08          	mov    0x8(%esp),%edx
    d230:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d235:	83 ec 08             	sub    $0x8,%esp
    d238:	52                   	push   %edx
    d239:	50                   	push   %eax
    d23a:	e8 a3 f9 ff ff       	call   cbe2 <bit>
    d23f:	83 c4 10             	add    $0x10,%esp
    d242:	85 c0                	test   %eax,%eax
    d244:	74 05                	je     d24b <init_swapping+0x1ec>
			j++;
    d246:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
	for (i = 1 ; i < swap_size ; i++)
    d24b:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    d250:	8b 44 24 08          	mov    0x8(%esp),%eax
    d254:	3b 44 24 0c          	cmp    0xc(%esp),%eax
    d258:	7c d2                	jl     d22c <init_swapping+0x1cd>
	if (!j) {
    d25a:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    d25f:	75 1d                	jne    d27e <init_swapping+0x21f>
		free_page((long) swap_bitmap);
    d261:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d266:	83 ec 0c             	sub    $0xc,%esp
    d269:	50                   	push   %eax
    d26a:	e8 03 ea ff ff       	call   bc72 <free_page>
    d26f:	83 c4 10             	add    $0x10,%esp
		swap_bitmap = NULL;
    d272:	c7 05 a4 11 03 00 00 	movl   $0x0,0x311a4
    d279:	00 00 00 
		return;
    d27c:	eb 21                	jmp    d29f <init_swapping+0x240>
	}
	Log(LOG_INFO_TYPE, "<<<<< Swap device ok: %d pages (%d bytes) swap-space >>>>>\n\r", j, j * 4096);
    d27e:	8b 44 24 04          	mov    0x4(%esp),%eax
    d282:	c1 e0 0c             	shl    $0xc,%eax
    d285:	50                   	push   %eax
    d286:	ff 74 24 08          	pushl  0x8(%esp)
    d28a:	68 38 3e 02 00       	push   $0x23e38
    d28f:	6a 00                	push   $0x0
    d291:	e8 52 56 01 00       	call   228e8 <Log>
    d296:	83 c4 10             	add    $0x10,%esp
    d299:	eb 04                	jmp    d29f <init_swapping+0x240>
		return;
    d29b:	90                   	nop
    d29c:	eb 01                	jmp    d29f <init_swapping+0x240>
		return;
    d29e:	90                   	nop
}
    d29f:	83 c4 1c             	add    $0x1c,%esp
    d2a2:	c3                   	ret    

0000d2a3 <page_fault>:
    d2a3:	87 04 24             	xchg   %eax,(%esp)
    d2a6:	51                   	push   %ecx
    d2a7:	52                   	push   %edx
    d2a8:	1e                   	push   %ds
    d2a9:	06                   	push   %es
    d2aa:	0f a0                	push   %fs
    d2ac:	ba 10 00 00 00       	mov    $0x10,%edx
    d2b1:	8e da                	mov    %edx,%ds
    d2b3:	8e c2                	mov    %edx,%es
    d2b5:	8e e2                	mov    %edx,%fs
    d2b7:	0f 20 d2             	mov    %cr2,%edx
    d2ba:	52                   	push   %edx
    d2bb:	50                   	push   %eax
    d2bc:	a9 01 00 00 00       	test   $0x1,%eax
    d2c1:	75 07                	jne    d2ca <page_fault+0x27>
    d2c3:	e8 4d f3 ff ff       	call   c615 <do_no_page>
    d2c8:	eb 05                	jmp    d2cf <page_fault+0x2c>
    d2ca:	e8 ce ef ff ff       	call   c29d <do_wp_page>
    d2cf:	83 c4 08             	add    $0x8,%esp
    d2d2:	0f a1                	pop    %fs
    d2d4:	07                   	pop    %es
    d2d5:	1f                   	pop    %ds
    d2d6:	5a                   	pop    %edx
    d2d7:	59                   	pop    %ecx
    d2d8:	58                   	pop    %eax
    d2d9:	cf                   	iret   

0000d2da <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
    d2da:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
    d2dd:	8b 44 24 14          	mov    0x14(%esp),%eax
    d2e1:	64 8b 00             	mov    %fs:(%eax),%eax
    d2e4:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
    d2e8:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    d2ec:	83 c4 10             	add    $0x10,%esp
    d2ef:	c3                   	ret    

0000d2f0 <sys_ustat>:
// 参数dev是含有用户已安装文件系统的设备号。ubuf是一个ustat结构缓冲区指针，用于存放系统返回的文件系统信息。该系统
// 调用用于返回已安装（mounted）文件系统的统计信息。成功时返回0，并且ubuf指向的ustate结构被添入文件系统总空闲块
// 和空闲i节点数。ustat结构定义在include/sys/types.h中。
int sys_ustat(int dev, struct ustat * ubuf)
{
	return -ENOSYS;         						// 出错码：功能还未实现。
    d2f0:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    d2f5:	c3                   	ret    

0000d2f6 <sys_utime>:
// 设置文件访问和修改时间。
// 参数filename是文件名，times是访问和修改时间结构指针。
// 如果times指针不为NULL，则取utimbuf结构中的时间信息来设置文件的访问和修改时间。
// 如果times指针是NULL，则取系统当前时间来设置指定文件的访问和修改时间域。
int sys_utime(char * filename, struct utimbuf * times)
{
    d2f6:	83 ec 1c             	sub    $0x1c,%esp
	long actime, modtime;

	// 文件的时间信息保存在其i节点中。因此我们首先根据文件名取得对应i节点。如果没有找到，则返回出错码。如果提供的访问
	// 和修改时间结构指针times不为NULL，则从结构中读取用户设置的时间值。否则就用系统当前时间来设置文件的访问和修改时
	// 间。
	if (!(inode = namei(filename)))
    d2f9:	83 ec 0c             	sub    $0xc,%esp
    d2fc:	ff 74 24 2c          	pushl  0x2c(%esp)
    d300:	e8 88 61 00 00       	call   1348d <namei>
    d305:	83 c4 10             	add    $0x10,%esp
    d308:	89 44 24 04          	mov    %eax,0x4(%esp)
    d30c:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    d311:	75 0a                	jne    d31d <sys_utime+0x27>
		return -ENOENT;
    d313:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d318:	e9 90 00 00 00       	jmp    d3ad <sys_utime+0xb7>
	if (times) {
    d31d:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    d322:	74 2d                	je     d351 <sys_utime+0x5b>
		actime = get_fs_long((unsigned long *) &times->actime);
    d324:	8b 44 24 24          	mov    0x24(%esp),%eax
    d328:	83 ec 0c             	sub    $0xc,%esp
    d32b:	50                   	push   %eax
    d32c:	e8 a9 ff ff ff       	call   d2da <get_fs_long>
    d331:	83 c4 10             	add    $0x10,%esp
    d334:	89 44 24 0c          	mov    %eax,0xc(%esp)
		modtime = get_fs_long((unsigned long *) &times->modtime);
    d338:	8b 44 24 24          	mov    0x24(%esp),%eax
    d33c:	83 c0 04             	add    $0x4,%eax
    d33f:	83 ec 0c             	sub    $0xc,%esp
    d342:	50                   	push   %eax
    d343:	e8 92 ff ff ff       	call   d2da <get_fs_long>
    d348:	83 c4 10             	add    $0x10,%esp
    d34b:	89 44 24 08          	mov    %eax,0x8(%esp)
    d34f:	eb 2a                	jmp    d37b <sys_utime+0x85>
	} else
		actime = modtime = CURRENT_TIME;
    d351:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    d356:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    d35c:	01 d0                	add    %edx,%eax
    d35e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    d363:	f7 e2                	mul    %edx
    d365:	c1 ea 05             	shr    $0x5,%edx
    d368:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    d36d:	01 d0                	add    %edx,%eax
    d36f:	89 44 24 08          	mov    %eax,0x8(%esp)
    d373:	8b 44 24 08          	mov    0x8(%esp),%eax
    d377:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 然后修改i节点中的访问时间字段和修改时间字段。再设置i节点已修改标志，放回该i节点，并返回0。
	inode->i_atime = actime;
    d37b:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d37f:	8b 44 24 04          	mov    0x4(%esp),%eax
    d383:	89 50 28             	mov    %edx,0x28(%eax)
	inode->i_mtime = modtime;
    d386:	8b 54 24 08          	mov    0x8(%esp),%edx
    d38a:	8b 44 24 04          	mov    0x4(%esp),%eax
    d38e:	89 50 08             	mov    %edx,0x8(%eax)
	inode->i_dirt = 1;
    d391:	8b 44 24 04          	mov    0x4(%esp),%eax
    d395:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(inode);
    d399:	83 ec 0c             	sub    $0xc,%esp
    d39c:	ff 74 24 10          	pushl  0x10(%esp)
    d3a0:	e8 ba 12 00 00       	call   e65f <iput>
    d3a5:	83 c4 10             	add    $0x10,%esp
	return 0;
    d3a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d3ad:	83 c4 1c             	add    $0x1c,%esp
    d3b0:	c3                   	ret    

0000d3b1 <sys_access>:
 */
// 检查文件的访问权限。
// 参数filename是文件名，mode是检查的访问属性，它有3个有效位组成：R_OK（值4）、W_OK（2）、X_OK（1）和F_OK（0）
// 组成，分别表示检测文件是否可读、可写、可执行和文件是否存在。如果访问允许的话，则返回0,否则返回出错码。
int sys_access(const char * filename, int mode)
{
    d3b1:	83 ec 1c             	sub    $0x1c,%esp
	int res, i_mode;

	// 文件的访问权限信息同样保存在文件的i节点结构中，因此我们要先取得对应文件名的i节点。检测的访问属性mode由低3位组成，
	// 因此需要与上八进制0007来清除所有高位。如果文件名对应的i节点不存在，则返回没有许可权限出错码。若i节点存在，则取i
	// 节点中文件属性码，并放回该i节点。另外，57行上语句“iput(inode);”最好放在61行之后。
	mode &= 0007;
    d3b4:	83 64 24 24 07       	andl   $0x7,0x24(%esp)
	if (!(inode = namei(filename)))
    d3b9:	83 ec 0c             	sub    $0xc,%esp
    d3bc:	ff 74 24 2c          	pushl  0x2c(%esp)
    d3c0:	e8 c8 60 00 00       	call   1348d <namei>
    d3c5:	83 c4 10             	add    $0x10,%esp
    d3c8:	89 44 24 08          	mov    %eax,0x8(%esp)
    d3cc:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    d3d1:	75 0a                	jne    d3dd <sys_access+0x2c>
		return -EACCES;                 				// 出错码：无访问权限。
    d3d3:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
    d3d8:	e9 b6 00 00 00       	jmp    d493 <sys_access+0xe2>
	i_mode = res = inode->i_mode & 0777;
    d3dd:	8b 44 24 08          	mov    0x8(%esp),%eax
    d3e1:	0f b7 00             	movzwl (%eax),%eax
    d3e4:	0f b7 c0             	movzwl %ax,%eax
    d3e7:	25 ff 01 00 00       	and    $0x1ff,%eax
    d3ec:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d3f0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d3f4:	89 44 24 04          	mov    %eax,0x4(%esp)
	iput(inode);
    d3f8:	83 ec 0c             	sub    $0xc,%esp
    d3fb:	ff 74 24 14          	pushl  0x14(%esp)
    d3ff:	e8 5b 12 00 00       	call   e65f <iput>
    d404:	83 c4 10             	add    $0x10,%esp
	// 如果当前进程用户是该文件的宿主，则取文件宿主属性。否则如果当前进程用户与该文件宿主同属一个级，则取文件组属性。否则
	// 此时res低3位是其他人访问该文件的许可属性。
	// [??这里应res >> 3 ??]
	if (current->uid == inode->i_uid)
    d407:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d40c:	0f b7 90 cc 02 00 00 	movzwl 0x2cc(%eax),%edx
    d413:	8b 44 24 08          	mov    0x8(%esp),%eax
    d417:	0f b7 40 02          	movzwl 0x2(%eax),%eax
    d41b:	66 39 c2             	cmp    %ax,%dx
    d41e:	75 07                	jne    d427 <sys_access+0x76>
		res >>= 6;
    d420:	c1 7c 24 0c 06       	sarl   $0x6,0xc(%esp)
    d425:	eb 21                	jmp    d448 <sys_access+0x97>
	else if (current->gid == inode->i_gid)
    d427:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d42c:	0f b7 90 d2 02 00 00 	movzwl 0x2d2(%eax),%edx
    d433:	8b 44 24 08          	mov    0x8(%esp),%eax
    d437:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    d43b:	0f b6 c0             	movzbl %al,%eax
    d43e:	66 39 c2             	cmp    %ax,%dx
    d441:	75 05                	jne    d448 <sys_access+0x97>
		res >>= 3;
    d443:	c1 7c 24 0c 03       	sarl   $0x3,0xc(%esp)
	// 此时res的最低3位是根据当前进程用户与文件的关系选择出来的访问属性位。现在我们来判断这3位。如果文件属性具有参数所查询
	// 的属性位mode，则访问许可，返回0。
	if ((res & 0007 & mode) == mode)
    d448:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d44c:	83 e0 07             	and    $0x7,%eax
    d44f:	23 44 24 24          	and    0x24(%esp),%eax
    d453:	39 44 24 24          	cmp    %eax,0x24(%esp)
    d457:	75 07                	jne    d460 <sys_access+0xaf>
		return 0;
    d459:	b8 00 00 00 00       	mov    $0x0,%eax
    d45e:	eb 33                	jmp    d493 <sys_access+0xe2>
    /*
     * XXX我们最后才做下面的测试，因为我们实际上需要交换有效用户ID和真实用户ID（临时地），然后才调用suser()函数，
     * 如果我们确实要调用suser()函数，则需要最后才被调用。
     */
	// 如果当前用户ID为0（超级用户）并且屏蔽码执行位是0或者文件可以被任何人执行、搜索，则返回0。否则返回出错码。
	if ((!current->uid) &&
    d460:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d465:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    d46c:	66 85 c0             	test   %ax,%ax
    d46f:	75 1d                	jne    d48e <sys_access+0xdd>
	    (!(mode & 1) || (i_mode & 0111)))
    d471:	8b 44 24 24          	mov    0x24(%esp),%eax
    d475:	83 e0 01             	and    $0x1,%eax
	if ((!current->uid) &&
    d478:	85 c0                	test   %eax,%eax
    d47a:	74 0b                	je     d487 <sys_access+0xd6>
	    (!(mode & 1) || (i_mode & 0111)))
    d47c:	8b 44 24 04          	mov    0x4(%esp),%eax
    d480:	83 e0 49             	and    $0x49,%eax
    d483:	85 c0                	test   %eax,%eax
    d485:	74 07                	je     d48e <sys_access+0xdd>
		return 0;
    d487:	b8 00 00 00 00       	mov    $0x0,%eax
    d48c:	eb 05                	jmp    d493 <sys_access+0xe2>
	return -EACCES;         							// 出错码：无访问权限。
    d48e:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
    d493:	83 c4 1c             	add    $0x1c,%esp
    d496:	c3                   	ret    

0000d497 <sys_chdir>:

// 改变当前工作目录系统调用。
// 参数filename是目录名。
// 操作成功则返回0,否则返回出错码。
int sys_chdir(const char * filename)
{
    d497:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 改变当前工作目录就是要求把进程任务结构的当前工作目录字段指向给定目录名的i节点。因此我们首先取目录名的i节点。如果目录名对应
	// 的i节点不存在，则返回出错码。如果该i节点不是一个目录i节点，则放回该i节点，并返回出错码。
	if (!(inode = namei(filename)))
    d49a:	83 ec 0c             	sub    $0xc,%esp
    d49d:	ff 74 24 2c          	pushl  0x2c(%esp)
    d4a1:	e8 e7 5f 00 00       	call   1348d <namei>
    d4a6:	83 c4 10             	add    $0x10,%esp
    d4a9:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d4ad:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d4b2:	75 07                	jne    d4bb <sys_chdir+0x24>
		return -ENOENT;                 				// 出错码：文件或目录不存在。
    d4b4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d4b9:	eb 57                	jmp    d512 <sys_chdir+0x7b>
	if (!S_ISDIR(inode->i_mode)) {
    d4bb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d4bf:	0f b7 00             	movzwl (%eax),%eax
    d4c2:	0f b7 c0             	movzwl %ax,%eax
    d4c5:	25 00 f0 00 00       	and    $0xf000,%eax
    d4ca:	3d 00 40 00 00       	cmp    $0x4000,%eax
    d4cf:	74 16                	je     d4e7 <sys_chdir+0x50>
		iput(inode);
    d4d1:	83 ec 0c             	sub    $0xc,%esp
    d4d4:	ff 74 24 18          	pushl  0x18(%esp)
    d4d8:	e8 82 11 00 00       	call   e65f <iput>
    d4dd:	83 c4 10             	add    $0x10,%esp
		return -ENOTDIR;                				// 出错码：不是目录名。
    d4e0:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
    d4e5:	eb 2b                	jmp    d512 <sys_chdir+0x7b>
	}
	// 然后释放进程原工作目录i节点，并使其指向新设置的工作目录i节点。返回0.
	iput(current->pwd);
    d4e7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d4ec:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    d4f2:	83 ec 0c             	sub    $0xc,%esp
    d4f5:	50                   	push   %eax
    d4f6:	e8 64 11 00 00       	call   e65f <iput>
    d4fb:	83 c4 10             	add    $0x10,%esp
	current->pwd = inode;
    d4fe:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d503:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d507:	89 90 34 03 00 00    	mov    %edx,0x334(%eax)
	return (0);
    d50d:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d512:	83 c4 1c             	add    $0x1c,%esp
    d515:	c3                   	ret    

0000d516 <sys_chroot>:

// 改变根目录系统调用。
// 把指定的目录名设置成为当前进程的根目录“/”。
// 如果操作成功则返回0，否则返回出错码。
int sys_chroot(const char * filename)
{
    d516:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 该调用用于改变当前进程任务结构中的根目录字段root，让其指向参数给定目录名的i节点。如果目录名对应i节点不存在，则返回出错码。
	// 如果该i节点不是目录i节点，则放回该i节点，也返回出错码。
	if (!(inode = namei(filename)))
    d519:	83 ec 0c             	sub    $0xc,%esp
    d51c:	ff 74 24 2c          	pushl  0x2c(%esp)
    d520:	e8 68 5f 00 00       	call   1348d <namei>
    d525:	83 c4 10             	add    $0x10,%esp
    d528:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d52c:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d531:	75 07                	jne    d53a <sys_chroot+0x24>
		return -ENOENT;
    d533:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d538:	eb 57                	jmp    d591 <sys_chroot+0x7b>
	if (!S_ISDIR(inode->i_mode)) {
    d53a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d53e:	0f b7 00             	movzwl (%eax),%eax
    d541:	0f b7 c0             	movzwl %ax,%eax
    d544:	25 00 f0 00 00       	and    $0xf000,%eax
    d549:	3d 00 40 00 00       	cmp    $0x4000,%eax
    d54e:	74 16                	je     d566 <sys_chroot+0x50>
		iput(inode);
    d550:	83 ec 0c             	sub    $0xc,%esp
    d553:	ff 74 24 18          	pushl  0x18(%esp)
    d557:	e8 03 11 00 00       	call   e65f <iput>
    d55c:	83 c4 10             	add    $0x10,%esp
		return -ENOTDIR;
    d55f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
    d564:	eb 2b                	jmp    d591 <sys_chroot+0x7b>
	}
	// 然后释放当前进程的根目录，并重新设置为指定目录名的i节点，返回0。
	iput(current->root);
    d566:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d56b:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    d571:	83 ec 0c             	sub    $0xc,%esp
    d574:	50                   	push   %eax
    d575:	e8 e5 10 00 00       	call   e65f <iput>
    d57a:	83 c4 10             	add    $0x10,%esp
	current->root = inode;
    d57d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d582:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d586:	89 90 38 03 00 00    	mov    %edx,0x338(%eax)
	return (0);
    d58c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d591:	83 c4 1c             	add    $0x1c,%esp
    d594:	c3                   	ret    

0000d595 <sys_chmod>:

// 修改文件属性系统调用。
// 参数filename是文件名，mode是新的文件属性。
int sys_chmod(const char * filename, int mode)
{
    d595:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 该调用为指定文件设置新的访问属性mode。文件的访问属性在文件名对应的i节点中，因此我们首先取文件名对应的i节点。如果i节点不存
	// 在，则返回出错码（文件或目录不存在）。如果当前进程的有效用户名id与文件i节点的用户id不同，并且也不是超级用户，则放回该文件
	// i节点，返回出错码（没有访问权限）。
	if (!(inode = namei(filename)))
    d598:	83 ec 0c             	sub    $0xc,%esp
    d59b:	ff 74 24 2c          	pushl  0x2c(%esp)
    d59f:	e8 e9 5e 00 00       	call   1348d <namei>
    d5a4:	83 c4 10             	add    $0x10,%esp
    d5a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d5ab:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d5b0:	75 07                	jne    d5b9 <sys_chmod+0x24>
		return -ENOENT;
    d5b2:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d5b7:	eb 7c                	jmp    d635 <sys_chmod+0xa0>
	if ((current->euid != inode->i_uid) && !suser()) {
    d5b9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d5be:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
    d5c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d5c9:	0f b7 40 02          	movzwl 0x2(%eax),%eax
    d5cd:	66 39 c2             	cmp    %ax,%dx
    d5d0:	74 27                	je     d5f9 <sys_chmod+0x64>
    d5d2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d5d7:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    d5de:	66 85 c0             	test   %ax,%ax
    d5e1:	74 16                	je     d5f9 <sys_chmod+0x64>
		iput(inode);
    d5e3:	83 ec 0c             	sub    $0xc,%esp
    d5e6:	ff 74 24 18          	pushl  0x18(%esp)
    d5ea:	e8 70 10 00 00       	call   e65f <iput>
    d5ef:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
    d5f2:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
    d5f7:	eb 3c                	jmp    d635 <sys_chmod+0xa0>
	}
	// 否则就重新设置该i节点的文件属性，并置该i节点已修改标志。放回该i节点，返回0。
	inode->i_mode = (mode & 07777) | (inode->i_mode & ~07777);
    d5f9:	8b 44 24 24          	mov    0x24(%esp),%eax
    d5fd:	66 25 ff 0f          	and    $0xfff,%ax
    d601:	89 c2                	mov    %eax,%edx
    d603:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d607:	0f b7 00             	movzwl (%eax),%eax
    d60a:	66 25 00 f0          	and    $0xf000,%ax
    d60e:	09 d0                	or     %edx,%eax
    d610:	89 c2                	mov    %eax,%edx
    d612:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d616:	66 89 10             	mov    %dx,(%eax)
	inode->i_dirt = 1;
    d619:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d61d:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(inode);
    d621:	83 ec 0c             	sub    $0xc,%esp
    d624:	ff 74 24 18          	pushl  0x18(%esp)
    d628:	e8 32 10 00 00       	call   e65f <iput>
    d62d:	83 c4 10             	add    $0x10,%esp
	return 0;
    d630:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d635:	83 c4 1c             	add    $0x1c,%esp
    d638:	c3                   	ret    

0000d639 <sys_chown>:

// 修改文件宿主系统调用。
// 参数filename是文件名，uid是用户标识符（用户ID），gid是组ID。
// 若操作成功则返回0，否则返回出错码。
int sys_chown(const char * filename, int uid, int gid)
{
    d639:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 该调用用于设置文件i节点中的用户和组ID，因此首先要取得给定文件名的i节点。如果文件名的i节点不存在，则返回出错码（文件
	// 或目录不存在）。如果当前进程不是超级用户，则放回该i节点，并返回出错码（没有访问权限）。
	if (!(inode = namei(filename)))
    d63c:	83 ec 0c             	sub    $0xc,%esp
    d63f:	ff 74 24 2c          	pushl  0x2c(%esp)
    d643:	e8 45 5e 00 00       	call   1348d <namei>
    d648:	83 c4 10             	add    $0x10,%esp
    d64b:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d64f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d654:	75 07                	jne    d65d <sys_chown+0x24>
		return -ENOENT;
    d656:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d65b:	eb 5e                	jmp    d6bb <sys_chown+0x82>
	if (!suser()) {
    d65d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d662:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    d669:	66 85 c0             	test   %ax,%ax
    d66c:	74 16                	je     d684 <sys_chown+0x4b>
		iput(inode);
    d66e:	83 ec 0c             	sub    $0xc,%esp
    d671:	ff 74 24 18          	pushl  0x18(%esp)
    d675:	e8 e5 0f 00 00       	call   e65f <iput>
    d67a:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
    d67d:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
    d682:	eb 37                	jmp    d6bb <sys_chown+0x82>
	}
	// 否则我们就用参数提供的值来设置文件i节点的用户ID和组ID，并置i节点已经修改标志，放回该i节点，返回0。
	inode->i_uid = uid;
    d684:	8b 44 24 24          	mov    0x24(%esp),%eax
    d688:	89 c2                	mov    %eax,%edx
    d68a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d68e:	66 89 50 02          	mov    %dx,0x2(%eax)
	inode->i_gid = gid;
    d692:	8b 44 24 28          	mov    0x28(%esp),%eax
    d696:	89 c2                	mov    %eax,%edx
    d698:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d69c:	88 50 0c             	mov    %dl,0xc(%eax)
	inode->i_dirt = 1;
    d69f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d6a3:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(inode);
    d6a7:	83 ec 0c             	sub    $0xc,%esp
    d6aa:	ff 74 24 18          	pushl  0x18(%esp)
    d6ae:	e8 ac 0f 00 00       	call   e65f <iput>
    d6b3:	83 c4 10             	add    $0x10,%esp
	return 0;
    d6b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d6bb:	83 c4 1c             	add    $0x1c,%esp
    d6be:	c3                   	ret    

0000d6bf <check_char_dev>:

// 检查字符设备类型.
// 该函数仅用于下面文件打开系统调用sys_open(),用于检查若打开的文件是tty终端字符设备时,需要对当前进程的设置和对tty表的设置.
// 返回0检测处理成功,返回-1表示失败,对应字符设备不能打开.
static int check_char_dev(struct m_inode * inode, int dev, int flag)
{
    d6bf:	83 ec 10             	sub    $0x10,%esp
	// 的同义名.即/dev/tty设备是一个虚拟设备,它对应到进程实际使用的/dev/ttyxx设备之一.对于一个进程来说,若其有控制终端,那么它的任务结构
	// 中的tty字段将是4号设备的某一个子设备号.
	// 如果打开操作的文件是/dev/tty(即MAJOR(dev) = 5),那么我们令min = 进程任务结构中的tty字段,即取4号设备的子设备号.否则如果打开的是
	// 某个4号设备,则直接取其子设备号.如果得到的4号设备子设备号小于0,那么说明进程没有控制终端,或者设备号错误,则返回-1,表示由于进程没有控制终端
	// 或者不能打开这个设备.
	if (MAJOR(dev) == 4 || MAJOR(dev) == 5) {
    d6c2:	8b 44 24 18          	mov    0x18(%esp),%eax
    d6c6:	c1 e8 08             	shr    $0x8,%eax
    d6c9:	83 f8 04             	cmp    $0x4,%eax
    d6cc:	74 10                	je     d6de <check_char_dev+0x1f>
    d6ce:	8b 44 24 18          	mov    0x18(%esp),%eax
    d6d2:	c1 e8 08             	shr    $0x8,%eax
    d6d5:	83 f8 05             	cmp    $0x5,%eax
    d6d8:	0f 85 12 02 00 00    	jne    d8f0 <check_char_dev+0x231>
		if (MAJOR(dev) == 5)
    d6de:	8b 44 24 18          	mov    0x18(%esp),%eax
    d6e2:	c1 e8 08             	shr    $0x8,%eax
    d6e5:	83 f8 05             	cmp    $0x5,%eax
    d6e8:	75 11                	jne    d6fb <check_char_dev+0x3c>
			min = current->tty;
    d6ea:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d6ef:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    d6f5:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d6f9:	eb 0b                	jmp    d706 <check_char_dev+0x47>
		else
			min = MINOR(dev);
    d6fb:	8b 44 24 18          	mov    0x18(%esp),%eax
    d6ff:	0f b6 c0             	movzbl %al,%eax
    d702:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (min < 0)
    d706:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d70b:	79 0a                	jns    d717 <check_char_dev+0x58>
			return -1;
    d70d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    d712:	e9 de 01 00 00       	jmp    d8f5 <check_char_dev+0x236>
		// 主伪终端设备文件只能被进程独占使用.如果子设备号表明是一个主伪终端,并且该打开文件i节点引用计数大于1,则说明该设备已被其他进程使用.因此不能再
		// 打开该字符设备文件,于是返回-1.否则,我们让tty结构指针tty指向tty表中对应结构项.若打开文件操作标志flag中不含无需控制终端标志O_NOCTTY,并且进程
		// 是进程组首领,并且当前进程没有控制终端,并且tty结构中session字段为0(表示该终端还不是任何进程组的控制终端),那么就允许为进程设置这个终端设备min
		// 为其控制终端.于是设置进程任务结构终端设备号字段tty值等于min,并且设置对应tty结构的会话号session和进程组号pgrp分别等于进程的会话号和进程组号.
		if ((IS_A_PTY_MASTER(min)) && (inode->i_count > 1))
    d717:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d71b:	25 c0 00 00 00       	and    $0xc0,%eax
    d720:	3d 80 00 00 00       	cmp    $0x80,%eax
    d725:	75 18                	jne    d73f <check_char_dev+0x80>
    d727:	8b 44 24 14          	mov    0x14(%esp),%eax
    d72b:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    d72f:	66 83 f8 01          	cmp    $0x1,%ax
    d733:	76 0a                	jbe    d73f <check_char_dev+0x80>
			return -1;
    d735:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    d73a:	e9 b6 01 00 00       	jmp    d8f5 <check_char_dev+0x236>
		tty = TTY_TABLE(min);
    d73f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d744:	74 26                	je     d76c <check_char_dev+0xad>
    d746:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d74b:	7f 11                	jg     d75e <check_char_dev+0x9f>
    d74d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d751:	83 e8 01             	sub    $0x1,%eax
    d754:	c1 e0 06             	shl    $0x6,%eax
    d757:	05 20 28 04 00       	add    $0x42820,%eax
    d75c:	eb 1b                	jmp    d779 <check_char_dev+0xba>
    d75e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d762:	c1 e0 06             	shl    $0x6,%eax
    d765:	05 20 28 04 00       	add    $0x42820,%eax
    d76a:	eb 0d                	jmp    d779 <check_char_dev+0xba>
    d76c:	a1 80 22 03 00       	mov    0x32280,%eax
    d771:	c1 e0 06             	shl    $0x6,%eax
    d774:	05 20 28 04 00       	add    $0x42820,%eax
    d779:	89 44 24 08          	mov    %eax,0x8(%esp)
		// Log(LOG_INFO_TYPE, "<<<<< tty index = %d>>>>>\n", min);
		if (!(flag & O_NOCTTY) &&
    d77d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    d781:	25 00 01 00 00       	and    $0x100,%eax
    d786:	85 c0                	test   %eax,%eax
    d788:	75 5c                	jne    d7e6 <check_char_dev+0x127>
		    current->leader &&
    d78a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d78f:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
		if (!(flag & O_NOCTTY) &&
    d795:	85 c0                	test   %eax,%eax
    d797:	74 4d                	je     d7e6 <check_char_dev+0x127>
		    current->tty < 0 &&
    d799:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d79e:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
		    current->leader &&
    d7a4:	85 c0                	test   %eax,%eax
    d7a6:	79 3e                	jns    d7e6 <check_char_dev+0x127>
		    tty->session == 0) {
    d7a8:	8b 44 24 08          	mov    0x8(%esp),%eax
    d7ac:	8b 40 28             	mov    0x28(%eax),%eax
		    current->tty < 0 &&
    d7af:	85 c0                	test   %eax,%eax
    d7b1:	75 33                	jne    d7e6 <check_char_dev+0x127>
			current->tty = min;
    d7b3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d7b8:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d7bc:	89 90 2c 03 00 00    	mov    %edx,0x32c(%eax)
			tty->session = current->session;
    d7c2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d7c7:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    d7cd:	8b 44 24 08          	mov    0x8(%esp),%eax
    d7d1:	89 50 28             	mov    %edx,0x28(%eax)
			tty->pgrp = current->pgrp;
    d7d4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d7d9:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    d7df:	8b 44 24 08          	mov    0x8(%esp),%eax
    d7e3:	89 50 24             	mov    %edx,0x24(%eax)
		}
		// 如果打开文件操作标志flag中含有O_NONBLOCK(非阻塞)标志,则我们需要对该字符终端设备进行相关设置,设置为满足读操作需要读取的最少字符数为0,设置超时
		// 定时值为0,并把终端设备设置成非规范模式.非阻塞方式只能工作于非规范模式.在此模式下当VMIN和VTIME均设置为0时,辅助队列中有多少支进程就读取多少字符,
		// 并立刻返回.
		if (flag & O_NONBLOCK) {
    d7e6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    d7ea:	25 00 08 00 00       	and    $0x800,%eax
    d7ef:	85 c0                	test   %eax,%eax
    d7f1:	0f 84 f9 00 00 00    	je     d8f0 <check_char_dev+0x231>
			TTY_TABLE(min)->termios.c_cc[VMIN] = 0;
    d7f7:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d7fc:	74 26                	je     d824 <check_char_dev+0x165>
    d7fe:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d803:	7f 11                	jg     d816 <check_char_dev+0x157>
    d805:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d809:	83 e8 01             	sub    $0x1,%eax
    d80c:	c1 e0 06             	shl    $0x6,%eax
    d80f:	05 20 28 04 00       	add    $0x42820,%eax
    d814:	eb 1b                	jmp    d831 <check_char_dev+0x172>
    d816:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d81a:	c1 e0 06             	shl    $0x6,%eax
    d81d:	05 20 28 04 00       	add    $0x42820,%eax
    d822:	eb 0d                	jmp    d831 <check_char_dev+0x172>
    d824:	a1 80 22 03 00       	mov    0x32280,%eax
    d829:	c1 e0 06             	shl    $0x6,%eax
    d82c:	05 20 28 04 00       	add    $0x42820,%eax
    d831:	c6 40 17 00          	movb   $0x0,0x17(%eax)
			TTY_TABLE(min)->termios.c_cc[VTIME] = 0;
    d835:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d83a:	74 26                	je     d862 <check_char_dev+0x1a3>
    d83c:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d841:	7f 11                	jg     d854 <check_char_dev+0x195>
    d843:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d847:	83 e8 01             	sub    $0x1,%eax
    d84a:	c1 e0 06             	shl    $0x6,%eax
    d84d:	05 20 28 04 00       	add    $0x42820,%eax
    d852:	eb 1b                	jmp    d86f <check_char_dev+0x1b0>
    d854:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d858:	c1 e0 06             	shl    $0x6,%eax
    d85b:	05 20 28 04 00       	add    $0x42820,%eax
    d860:	eb 0d                	jmp    d86f <check_char_dev+0x1b0>
    d862:	a1 80 22 03 00       	mov    0x32280,%eax
    d867:	c1 e0 06             	shl    $0x6,%eax
    d86a:	05 20 28 04 00       	add    $0x42820,%eax
    d86f:	c6 40 16 00          	movb   $0x0,0x16(%eax)
			TTY_TABLE(min)->termios.c_lflag &= ~ICANON;
    d873:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d878:	74 26                	je     d8a0 <check_char_dev+0x1e1>
    d87a:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d87f:	7f 11                	jg     d892 <check_char_dev+0x1d3>
    d881:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d885:	83 e8 01             	sub    $0x1,%eax
    d888:	c1 e0 06             	shl    $0x6,%eax
    d88b:	05 20 28 04 00       	add    $0x42820,%eax
    d890:	eb 1b                	jmp    d8ad <check_char_dev+0x1ee>
    d892:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d896:	c1 e0 06             	shl    $0x6,%eax
    d899:	05 20 28 04 00       	add    $0x42820,%eax
    d89e:	eb 0d                	jmp    d8ad <check_char_dev+0x1ee>
    d8a0:	a1 80 22 03 00       	mov    0x32280,%eax
    d8a5:	c1 e0 06             	shl    $0x6,%eax
    d8a8:	05 20 28 04 00       	add    $0x42820,%eax
    d8ad:	8b 50 0c             	mov    0xc(%eax),%edx
    d8b0:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d8b5:	74 26                	je     d8dd <check_char_dev+0x21e>
    d8b7:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d8bc:	7f 11                	jg     d8cf <check_char_dev+0x210>
    d8be:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d8c2:	83 e8 01             	sub    $0x1,%eax
    d8c5:	c1 e0 06             	shl    $0x6,%eax
    d8c8:	05 20 28 04 00       	add    $0x42820,%eax
    d8cd:	eb 1b                	jmp    d8ea <check_char_dev+0x22b>
    d8cf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d8d3:	c1 e0 06             	shl    $0x6,%eax
    d8d6:	05 20 28 04 00       	add    $0x42820,%eax
    d8db:	eb 0d                	jmp    d8ea <check_char_dev+0x22b>
    d8dd:	a1 80 22 03 00       	mov    0x32280,%eax
    d8e2:	c1 e0 06             	shl    $0x6,%eax
    d8e5:	05 20 28 04 00       	add    $0x42820,%eax
    d8ea:	83 e2 fd             	and    $0xfffffffd,%edx
    d8ed:	89 50 0c             	mov    %edx,0xc(%eax)
		}
	}
	return 0;
    d8f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d8f5:	83 c4 10             	add    $0x10,%esp
    d8f8:	c3                   	ret    

0000d8f9 <sys_open>:
// O_EXCL(被创建文件必须不存在),O_APPEND(在文件尾添加数据)等其他一些标志的组合,如果本调用创建了一个新文件,则mode就用于指定
// 文件的许可属性.这些属性有S_IRWXU(文件宿主具有读,写和执行权限),S_IRUSR(用户具有读文件权限),S_IRWXG(组成员有读,写
// 执行)等等.对于新创建的文件,这些属性只应用于将来对文件的访问,创建了只读文件的打开调用也将返回一个读写的文件句柄.如果调用
// 操作成功,则返回文件句柄(文件描述符),否则返回出错码.参见sys/tat.h,fcntl.h.
int sys_open(const char * filename, int flag, int mode)
{
    d8f9:	53                   	push   %ebx
    d8fa:	83 ec 18             	sub    $0x18,%esp
	struct file * f;
	int i, fd;

	// 首先对参数进行处理.将用户设置的文件模式和进程模式屏蔽码相与,产适配器的文件模式.为了为打开文件建立一个文件句柄,需要搜索进程
	// 结构中文件结构指针数组,以查找一个空闲项.空闲项的索引号fd即是句柄值.若已经没有空闲项,则返回出错码(参数无效).
	mode &= 0777 & ~current->umask;
    d8fd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d902:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
    d909:	0f b7 c0             	movzwl %ax,%eax
    d90c:	f7 d0                	not    %eax
    d90e:	25 ff 01 00 00       	and    $0x1ff,%eax
    d913:	21 44 24 28          	and    %eax,0x28(%esp)
	for(fd = 0 ; fd < NR_OPEN ; fd++)
    d917:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    d91e:	00 
    d91f:	eb 1c                	jmp    d93d <sys_open+0x44>
		if (!current->filp[fd])
    d921:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d926:	8b 54 24 04          	mov    0x4(%esp),%edx
    d92a:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    d930:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    d934:	85 c0                	test   %eax,%eax
    d936:	74 0e                	je     d946 <sys_open+0x4d>
	for(fd = 0 ; fd < NR_OPEN ; fd++)
    d938:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
    d93d:	83 7c 24 04 13       	cmpl   $0x13,0x4(%esp)
    d942:	7e dd                	jle    d921 <sys_open+0x28>
    d944:	eb 01                	jmp    d947 <sys_open+0x4e>
			break;          						// 找到空闲项.
    d946:	90                   	nop
	if (fd >= NR_OPEN)
    d947:	83 7c 24 04 13       	cmpl   $0x13,0x4(%esp)
    d94c:	7e 0a                	jle    d958 <sys_open+0x5f>
		return -EINVAL;
    d94e:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    d953:	e9 c2 01 00 00       	jmp    db1a <sys_open+0x221>
	// 该子进程中调用execve()函数加载执行另一个新程序.此时子进程中开始执行新程序.若一个文件句柄close_on_exec中的对应位被置位,那么在
	// 执行execve()时该对应文件句柄将被关闭,否则该文件句柄将始终处于打开状态.当打开一个文件时,默认情况下文件句柄在子进程中也处于打开
	// 状态.因此这里要复位对应位.然后为打开文件在文件表中寻找一个空闲结构项.我们令f指向文件表数组开始处.搜索空闲文件结构项(引用计数
	// 为0的项),若已经没有空闲文件表结构项,则返回出错码.另外,第184行上的指针赋值"0+file_table"等同于"file_table"和"&file_table[0]"
	// 不过这样写可能更能明了一些.
	current->close_on_exec &= ~(1 << fd);           // 复位对应文件打开位
    d958:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d95d:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
    d963:	8b 44 24 04          	mov    0x4(%esp),%eax
    d967:	bb 01 00 00 00       	mov    $0x1,%ebx
    d96c:	89 c1                	mov    %eax,%ecx
    d96e:	d3 e3                	shl    %cl,%ebx
    d970:	89 d8                	mov    %ebx,%eax
    d972:	f7 d0                	not    %eax
    d974:	89 c1                	mov    %eax,%ecx
    d976:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d97b:	21 ca                	and    %ecx,%edx
    d97d:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
	f = 0 + file_table;
    d983:	c7 44 24 0c 80 1f 04 	movl   $0x41f80,0xc(%esp)
    d98a:	00 
	for (i = 0 ; i < NR_FILE ; i++, f++)
    d98b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    d992:	00 
    d993:	eb 17                	jmp    d9ac <sys_open+0xb3>
		if (!f->f_count) break;         			// 在文件表中找到空闲结构项。
    d995:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d999:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    d99d:	66 85 c0             	test   %ax,%ax
    d9a0:	74 13                	je     d9b5 <sys_open+0xbc>
	for (i = 0 ; i < NR_FILE ; i++, f++)
    d9a2:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    d9a7:	83 44 24 0c 10       	addl   $0x10,0xc(%esp)
    d9ac:	83 7c 24 08 3f       	cmpl   $0x3f,0x8(%esp)
    d9b1:	7e e2                	jle    d995 <sys_open+0x9c>
    d9b3:	eb 01                	jmp    d9b6 <sys_open+0xbd>
		if (!f->f_count) break;         			// 在文件表中找到空闲结构项。
    d9b5:	90                   	nop
	if (i >= NR_FILE)
    d9b6:	83 7c 24 08 3f       	cmpl   $0x3f,0x8(%esp)
    d9bb:	7e 0a                	jle    d9c7 <sys_open+0xce>
		return -EINVAL;
    d9bd:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    d9c2:	e9 53 01 00 00       	jmp    db1a <sys_open+0x221>
	// 此时我们让进程对应文件句柄fd的文件结构指针指向搜索到的文件结构,并令文件引用计数递增1.然后调用函数open_namei()执行打开操作,若返回
	// 值小于0,则说明出错,于是释放刚申请到的文件结构,返回出错码i.若文件打开操作成功,则inode是已打开文件的i节点指针.
	(current->filp[fd] = f)->f_count++;
    d9c7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d9cc:	8b 54 24 04          	mov    0x4(%esp),%edx
    d9d0:	8d 8a d0 00 00 00    	lea    0xd0(%edx),%ecx
    d9d6:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d9da:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
    d9de:	8b 54 24 04          	mov    0x4(%esp),%edx
    d9e2:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    d9e8:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    d9ec:	0f b7 50 04          	movzwl 0x4(%eax),%edx
    d9f0:	83 c2 01             	add    $0x1,%edx
    d9f3:	66 89 50 04          	mov    %dx,0x4(%eax)
	// Log(LOG_INFO_TYPE, "<<<<< sys_open : fd = %d\n", fd);
	if ((i = open_namei(filename, flag, mode, &inode)) < 0) {
    d9f7:	89 e0                	mov    %esp,%eax
    d9f9:	50                   	push   %eax
    d9fa:	ff 74 24 2c          	pushl  0x2c(%esp)
    d9fe:	ff 74 24 2c          	pushl  0x2c(%esp)
    da02:	ff 74 24 2c          	pushl  0x2c(%esp)
    da06:	e8 9c 5a 00 00       	call   134a7 <open_namei>
    da0b:	83 c4 10             	add    $0x10,%esp
    da0e:	89 44 24 08          	mov    %eax,0x8(%esp)
    da12:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    da17:	79 2a                	jns    da43 <sys_open+0x14a>
		current->filp[fd] = NULL;
    da19:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    da1e:	8b 54 24 04          	mov    0x4(%esp),%edx
    da22:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    da28:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
    da2f:	00 
		f->f_count = 0;
    da30:	8b 44 24 0c          	mov    0xc(%esp),%eax
    da34:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
		return i;
    da3a:	8b 44 24 08          	mov    0x8(%esp),%eax
    da3e:	e9 d7 00 00 00       	jmp    db1a <sys_open+0x221>
	}
	// 根据已打开文件i节点的属性字段,我们可以知道文件的类型.对于不同类型的文件,我们需要作一些特别处理.如果打开的是字符设备文件,那么我们就要调用
	// check_char_dev()函数来检查当前进程是否能打开这个字符设备文件.如果允许(函数返回0),那么在check_char_dev()中会根据具体文件打开标志为进程
	// 设置控制终端.如果不允许打开使用该字符设备文件,那么我们只能释放上面申请的文件项和句柄资源.返回出错码.
	/* ttys are somewhat special (ttyxx major==4, tty major==5) */
	if (S_ISCHR(inode->i_mode))
    da43:	8b 04 24             	mov    (%esp),%eax
    da46:	0f b7 00             	movzwl (%eax),%eax
    da49:	0f b7 c0             	movzwl %ax,%eax
    da4c:	25 00 f0 00 00       	and    $0xf000,%eax
    da51:	3d 00 20 00 00       	cmp    $0x2000,%eax
    da56:	75 59                	jne    dab1 <sys_open+0x1b8>
		if (check_char_dev(inode, inode->i_zone[0], flag)) {
    da58:	8b 04 24             	mov    (%esp),%eax
    da5b:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    da5f:	0f b7 d0             	movzwl %ax,%edx
    da62:	8b 04 24             	mov    (%esp),%eax
    da65:	83 ec 04             	sub    $0x4,%esp
    da68:	ff 74 24 28          	pushl  0x28(%esp)
    da6c:	52                   	push   %edx
    da6d:	50                   	push   %eax
    da6e:	e8 4c fc ff ff       	call   d6bf <check_char_dev>
    da73:	83 c4 10             	add    $0x10,%esp
    da76:	85 c0                	test   %eax,%eax
    da78:	74 37                	je     dab1 <sys_open+0x1b8>
			iput(inode);
    da7a:	8b 04 24             	mov    (%esp),%eax
    da7d:	83 ec 0c             	sub    $0xc,%esp
    da80:	50                   	push   %eax
    da81:	e8 d9 0b 00 00       	call   e65f <iput>
    da86:	83 c4 10             	add    $0x10,%esp
			current->filp[fd] = NULL;
    da89:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    da8e:	8b 54 24 04          	mov    0x4(%esp),%edx
    da92:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    da98:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
    da9f:	00 
			f->f_count = 0;
    daa0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    daa4:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
			return -EAGAIN;         				// 出错号:资源暂不可用.
    daaa:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    daaf:	eb 69                	jmp    db1a <sys_open+0x221>
		}
	// 如果打开的是块设备文件,则检查盘片是否更换过.若更换过则需要让高速缓冲区中该设备的所有缓冲块失效.
	/* Likewise with block-devices: check for floppy_change */
	/* 同样对于块设备文件:需要检查盘片是否被更换 */
	if (S_ISBLK(inode->i_mode))
    dab1:	8b 04 24             	mov    (%esp),%eax
    dab4:	0f b7 00             	movzwl (%eax),%eax
    dab7:	0f b7 c0             	movzwl %ax,%eax
    daba:	25 00 f0 00 00       	and    $0xf000,%eax
    dabf:	3d 00 60 00 00       	cmp    $0x6000,%eax
    dac4:	75 16                	jne    dadc <sys_open+0x1e3>
		check_disk_change(inode->i_zone[0]);
    dac6:	8b 04 24             	mov    (%esp),%eax
    dac9:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    dacd:	0f b7 c0             	movzwl %ax,%eax
    dad0:	83 ec 0c             	sub    $0xc,%esp
    dad3:	50                   	push   %eax
    dad4:	e8 c4 15 00 00       	call   f09d <check_disk_change>
    dad9:	83 c4 10             	add    $0x10,%esp
	// 现在我们初始化打开文件的文件结构.设置文件结构属性和标志,置句柄引用计数为1,并设置i节点字段为打开文件的i节点,初始化文件读写指针为0.最后返回文件句柄号.
	f->f_mode = inode->i_mode;
    dadc:	8b 04 24             	mov    (%esp),%eax
    dadf:	0f b7 10             	movzwl (%eax),%edx
    dae2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dae6:	66 89 10             	mov    %dx,(%eax)
	f->f_flags = flag;
    dae9:	8b 44 24 24          	mov    0x24(%esp),%eax
    daed:	89 c2                	mov    %eax,%edx
    daef:	8b 44 24 0c          	mov    0xc(%esp),%eax
    daf3:	66 89 50 02          	mov    %dx,0x2(%eax)
	f->f_count = 1;
    daf7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dafb:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)
	f->f_inode = inode;
    db01:	8b 14 24             	mov    (%esp),%edx
    db04:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db08:	89 50 08             	mov    %edx,0x8(%eax)
	f->f_pos = 0;
    db0b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db0f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	return (fd);
    db16:	8b 44 24 04          	mov    0x4(%esp),%eax
}
    db1a:	83 c4 18             	add    $0x18,%esp
    db1d:	5b                   	pop    %ebx
    db1e:	c3                   	ret    

0000db1f <sys_creat>:

// 创建文件系统调用。
// 参数pathname是路径名，mode与上面的sys_open()函数相同。
// 成功则返回文件句柄，否则返回出错码。
int sys_creat(const char * pathname, int mode)
{
    db1f:	83 ec 0c             	sub    $0xc,%esp
	return sys_open(pathname, O_CREAT | O_TRUNC, mode);
    db22:	83 ec 04             	sub    $0x4,%esp
    db25:	ff 74 24 18          	pushl  0x18(%esp)
    db29:	68 40 02 00 00       	push   $0x240
    db2e:	ff 74 24 1c          	pushl  0x1c(%esp)
    db32:	e8 c2 fd ff ff       	call   d8f9 <sys_open>
    db37:	83 c4 10             	add    $0x10,%esp
}
    db3a:	83 c4 0c             	add    $0xc,%esp
    db3d:	c3                   	ret    

0000db3e <sys_close>:

// 关闭文件系统调用.
// 参数fd是文件句柄.
// 成功则返回0,否则返回出错码.
int sys_close(unsigned int fd)
{
    db3e:	53                   	push   %ebx
    db3f:	83 ec 18             	sub    $0x18,%esp
	struct file * filp;

	// 首先检查参数有效性.若给出的文件句柄值大于程序同时打开的文件数NR_OPEN,则返回出错码(参数无效).然后复位进程的执行时关闭文件句柄位图对应位.若该文件句柄对应的
	// 文件结构指针是NULL,则返回出错码.
	if (fd >= NR_OPEN)
    db42:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    db47:	76 0a                	jbe    db53 <sys_close+0x15>
		return -EINVAL;
    db49:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    db4e:	e9 c3 00 00 00       	jmp    dc16 <sys_close+0xd8>
	current->close_on_exec &= ~(1 << fd);
    db53:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    db58:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
    db5e:	8b 44 24 20          	mov    0x20(%esp),%eax
    db62:	bb 01 00 00 00       	mov    $0x1,%ebx
    db67:	89 c1                	mov    %eax,%ecx
    db69:	d3 e3                	shl    %cl,%ebx
    db6b:	89 d8                	mov    %ebx,%eax
    db6d:	f7 d0                	not    %eax
    db6f:	89 c1                	mov    %eax,%ecx
    db71:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    db76:	21 ca                	and    %ecx,%edx
    db78:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
	if (!(filp = current->filp[fd]))
    db7e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    db83:	8b 54 24 20          	mov    0x20(%esp),%edx
    db87:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    db8d:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    db91:	89 44 24 0c          	mov    %eax,0xc(%esp)
    db95:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    db9a:	75 07                	jne    dba3 <sys_close+0x65>
		return -EINVAL;
    db9c:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dba1:	eb 73                	jmp    dc16 <sys_close+0xd8>
	// 现在置该文件句柄的文件结构指针为NULL.若在关闭文件之前,对应文件结构中的句柄引用计数已经为0,则说明内核出错,停机.否则将对应文件结构的引用计数减1.此时如果它还不
	// 为0,则说明有其他进程正在使用该文件,于是返回0(成功).如果引用计数已等于0,说明该文件已经没有进程引用,该文件结构已变为空闲.则释放该文件i节点,返回0.
	current->filp[fd] = NULL;
    dba3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    dba8:	8b 54 24 20          	mov    0x20(%esp),%edx
    dbac:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dbb2:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
    dbb9:	00 
	if (filp->f_count == 0)
    dbba:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dbbe:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    dbc2:	66 85 c0             	test   %ax,%ax
    dbc5:	75 10                	jne    dbd7 <sys_close+0x99>
		panic("Close: file count is 0");
    dbc7:	83 ec 0c             	sub    $0xc,%esp
    dbca:	68 78 3e 02 00       	push   $0x23e78
    dbcf:	e8 2e b0 ff ff       	call   8c02 <panic>
    dbd4:	83 c4 10             	add    $0x10,%esp
	if (--filp->f_count)
    dbd7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dbdb:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    dbdf:	8d 50 ff             	lea    -0x1(%eax),%edx
    dbe2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dbe6:	66 89 50 04          	mov    %dx,0x4(%eax)
    dbea:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dbee:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    dbf2:	66 85 c0             	test   %ax,%ax
    dbf5:	74 07                	je     dbfe <sys_close+0xc0>
		return (0);
    dbf7:	b8 00 00 00 00       	mov    $0x0,%eax
    dbfc:	eb 18                	jmp    dc16 <sys_close+0xd8>
	iput(filp->f_inode);
    dbfe:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc02:	8b 40 08             	mov    0x8(%eax),%eax
    dc05:	83 ec 0c             	sub    $0xc,%esp
    dc08:	50                   	push   %eax
    dc09:	e8 51 0a 00 00       	call   e65f <iput>
    dc0e:	83 c4 10             	add    $0x10,%esp
	return (0);
    dc11:	b8 00 00 00 00       	mov    $0x0,%eax
}
    dc16:	83 c4 18             	add    $0x18,%esp
    dc19:	5b                   	pop    %ebx
    dc1a:	c3                   	ret    

0000dc1b <sys_lseek>:

// 重定位文件读写指针系统调用。
// 参数fd是文件句柄，offset是新的文件读写指针偏移值，origin是偏移的起始位置，可有三种选择：SEEK_SET（0,
// 从文件开始处）、SEEK_CUR（1,从当前读写位置）、SEEK_END（2,从文件尾处）。
int sys_lseek(unsigned int fd, off_t offset, int origin)
{
    dc1b:	83 ec 10             	sub    $0x10,%esp
	int tmp;

	// 首先判断函数提供的参数有效性。如果文件句柄大于程序最多打开文件数NR_OPEN（20），或者该句柄的文件结构指针为空，
	// 或者对应文件结构的i节点字段为空，或者指定设备文件指针是不可定位的，则返回出错码并退出。如果文件对应i节点是管道
	// 节点，则返回出错码退出。因为管道头尾指针不可随意移动！
	if (fd >= NR_OPEN || !(file = current->filp[fd]) || !(file->f_inode)
    dc1e:	83 7c 24 14 13       	cmpl   $0x13,0x14(%esp)
    dc23:	77 52                	ja     dc77 <sys_lseek+0x5c>
    dc25:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    dc2a:	8b 54 24 14          	mov    0x14(%esp),%edx
    dc2e:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dc34:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    dc38:	89 44 24 0c          	mov    %eax,0xc(%esp)
    dc3c:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    dc41:	74 34                	je     dc77 <sys_lseek+0x5c>
    dc43:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc47:	8b 40 08             	mov    0x8(%eax),%eax
    dc4a:	85 c0                	test   %eax,%eax
    dc4c:	74 29                	je     dc77 <sys_lseek+0x5c>
	   || !IS_SEEKABLE(MAJOR(file->f_inode->i_dev)))
    dc4e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc52:	8b 40 08             	mov    0x8(%eax),%eax
    dc55:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    dc59:	66 c1 e8 08          	shr    $0x8,%ax
    dc5d:	66 85 c0             	test   %ax,%ax
    dc60:	74 15                	je     dc77 <sys_lseek+0x5c>
    dc62:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc66:	8b 40 08             	mov    0x8(%eax),%eax
    dc69:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    dc6d:	66 c1 e8 08          	shr    $0x8,%ax
    dc71:	66 83 f8 03          	cmp    $0x3,%ax
    dc75:	76 0a                	jbe    dc81 <sys_lseek+0x66>
		return -EBADF;
    dc77:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
    dc7c:	e9 b4 00 00 00       	jmp    dd35 <sys_lseek+0x11a>
	if (file->f_inode->i_pipe)
    dc81:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc85:	8b 40 08             	mov    0x8(%eax),%eax
    dc88:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    dc8c:	84 c0                	test   %al,%al
    dc8e:	74 0a                	je     dc9a <sys_lseek+0x7f>
		return -ESPIPE;
    dc90:	b8 e3 ff ff ff       	mov    $0xffffffe3,%eax
    dc95:	e9 9b 00 00 00       	jmp    dd35 <sys_lseek+0x11a>
	// 然后根据设置的定位标志，分别重新定位文件读写指针。
	switch (origin) {
    dc9a:	83 7c 24 1c 01       	cmpl   $0x1,0x1c(%esp)
    dc9f:	74 29                	je     dcca <sys_lseek+0xaf>
    dca1:	83 7c 24 1c 02       	cmpl   $0x2,0x1c(%esp)
    dca6:	74 50                	je     dcf8 <sys_lseek+0xdd>
    dca8:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    dcad:	75 78                	jne    dd27 <sys_lseek+0x10c>
		// origin = SEEK_SET，要求以文件起始处作为原点设置文件读写指针。若偏移值小于零，则出错返回错误码。否则设置文件
		// 读写指针等于offset。
		case 0:
			if (offset < 0) return -EINVAL;
    dcaf:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    dcb4:	79 07                	jns    dcbd <sys_lseek+0xa2>
    dcb6:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dcbb:	eb 78                	jmp    dd35 <sys_lseek+0x11a>
			file->f_pos = offset;
    dcbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dcc1:	8b 54 24 18          	mov    0x18(%esp),%edx
    dcc5:	89 50 0c             	mov    %edx,0xc(%eax)
			break;
    dcc8:	eb 64                	jmp    dd2e <sys_lseek+0x113>
		// origin = SEEK_CUR，要求以文件当前读写指针处作为原点重定位读写指针。如果文件当前指针加上偏移值小于0,则返回
		// 出错码退出。否则在当前读写指针上加上偏移值。
		case 1:
			if (file->f_pos + offset < 0) return -EINVAL;
    dcca:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dcce:	8b 50 0c             	mov    0xc(%eax),%edx
    dcd1:	8b 44 24 18          	mov    0x18(%esp),%eax
    dcd5:	01 d0                	add    %edx,%eax
    dcd7:	85 c0                	test   %eax,%eax
    dcd9:	79 07                	jns    dce2 <sys_lseek+0xc7>
    dcdb:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dce0:	eb 53                	jmp    dd35 <sys_lseek+0x11a>
			file->f_pos += offset;
    dce2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dce6:	8b 50 0c             	mov    0xc(%eax),%edx
    dce9:	8b 44 24 18          	mov    0x18(%esp),%eax
    dced:	01 c2                	add    %eax,%edx
    dcef:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dcf3:	89 50 0c             	mov    %edx,0xc(%eax)
			break;
    dcf6:	eb 36                	jmp    dd2e <sys_lseek+0x113>
		// origin = SEEK_END，要求以文件末尾作为原点重定位读写指针。此时若文件大小加上偏移值小于零则返回出错码退出。否则
		// 重定位读写指针为文件长度加上偏移值。
		case 2:
			if ((tmp = file->f_inode->i_size + offset) < 0)
    dcf8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dcfc:	8b 40 08             	mov    0x8(%eax),%eax
    dcff:	8b 50 04             	mov    0x4(%eax),%edx
    dd02:	8b 44 24 18          	mov    0x18(%esp),%eax
    dd06:	01 d0                	add    %edx,%eax
    dd08:	89 44 24 08          	mov    %eax,0x8(%esp)
    dd0c:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    dd11:	79 07                	jns    dd1a <sys_lseek+0xff>
				return -EINVAL;
    dd13:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dd18:	eb 1b                	jmp    dd35 <sys_lseek+0x11a>
			file->f_pos = tmp;
    dd1a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd1e:	8b 54 24 08          	mov    0x8(%esp),%edx
    dd22:	89 50 0c             	mov    %edx,0xc(%eax)
			break;
    dd25:	eb 07                	jmp    dd2e <sys_lseek+0x113>
		// origin设置无效，返回出错码退出。
		default:
			return -EINVAL;
    dd27:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dd2c:	eb 07                	jmp    dd35 <sys_lseek+0x11a>
	}
	return file->f_pos;             					// 最后返回重定位后的文件读写指针值。
    dd2e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd32:	8b 40 0c             	mov    0xc(%eax),%eax
}
    dd35:	83 c4 10             	add    $0x10,%esp
    dd38:	c3                   	ret    

0000dd39 <sys_read>:

// 读文件系统调用。
// 参数fd是文件句柄，buf是缓冲区，count是欲读字节数。
int sys_read(unsigned int fd, char * buf, int count)
{
    dd39:	83 ec 1c             	sub    $0x1c,%esp
	struct file * file;
	struct m_inode * inode;

	// 同样地,我们首先判断函数参数的有效性.如果进程文件句柄值大于程序最多打开文件数NR_OPEN,或者需要写入的字节计数小于0,或者该句柄的文件结构指针为空,
	// 则返回出错码并退出.如果需读取的字节数count等于0,则返回0退出.
	if (fd >= NR_OPEN || count < 0 || !(file = current->filp[fd]))
    dd3c:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    dd41:	77 25                	ja     dd68 <sys_read+0x2f>
    dd43:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    dd48:	78 1e                	js     dd68 <sys_read+0x2f>
    dd4a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    dd4f:	8b 54 24 20          	mov    0x20(%esp),%edx
    dd53:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dd59:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    dd5d:	89 44 24 0c          	mov    %eax,0xc(%esp)
    dd61:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    dd66:	75 0a                	jne    dd72 <sys_read+0x39>
		return -EINVAL;
    dd68:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dd6d:	e9 99 01 00 00       	jmp    df0b <sys_read+0x1d2>
	if (!count)
    dd72:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    dd77:	75 0a                	jne    dd83 <sys_read+0x4a>
		return 0;
    dd79:	b8 00 00 00 00       	mov    $0x0,%eax
    dd7e:	e9 88 01 00 00       	jmp    df0b <sys_read+0x1d2>
	// 然后验证存放数据的缓冲区内存限制。并取文件的i节点。用于根据该i节点的属性，分别调用相应的读操作函数。若是管道操作，并且是读管道文件模式，则进行读
	// 管道操作，若成功则返回读取的字节数，否则返回出错码，退出。如果是字符型文件，则进行读字符设备操作，并返回读取的字符数。如果是块设备文件，则执行
	// 块设备读操作，并返回读取的字节数。
	verify_area(buf, count);
    dd83:	83 ec 08             	sub    $0x8,%esp
    dd86:	ff 74 24 30          	pushl  0x30(%esp)
    dd8a:	ff 74 24 30          	pushl  0x30(%esp)
    dd8e:	e8 08 a6 ff ff       	call   839b <verify_area>
    dd93:	83 c4 10             	add    $0x10,%esp
	inode = file->f_inode;
    dd96:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd9a:	8b 40 08             	mov    0x8(%eax),%eax
    dd9d:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 管道文件的读操作
	if (inode->i_pipe)
    dda1:	8b 44 24 08          	mov    0x8(%esp),%eax
    dda5:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    dda9:	84 c0                	test   %al,%al
    ddab:	74 37                	je     dde4 <sys_read+0xab>
		return (file->f_mode & 1) ? read_pipe(inode, buf, count) : -EIO;
    ddad:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ddb1:	0f b7 00             	movzwl (%eax),%eax
    ddb4:	0f b7 c0             	movzwl %ax,%eax
    ddb7:	83 e0 01             	and    $0x1,%eax
    ddba:	85 c0                	test   %eax,%eax
    ddbc:	74 1c                	je     ddda <sys_read+0xa1>
    ddbe:	83 ec 04             	sub    $0x4,%esp
    ddc1:	ff 74 24 2c          	pushl  0x2c(%esp)
    ddc5:	ff 74 24 2c          	pushl  0x2c(%esp)
    ddc9:	ff 74 24 14          	pushl  0x14(%esp)
    ddcd:	e8 37 46 00 00       	call   12409 <read_pipe>
    ddd2:	83 c4 10             	add    $0x10,%esp
    ddd5:	e9 31 01 00 00       	jmp    df0b <sys_read+0x1d2>
    ddda:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    dddf:	e9 27 01 00 00       	jmp    df0b <sys_read+0x1d2>
	// 字符设备的读操作
	if (S_ISCHR(inode->i_mode))
    dde4:	8b 44 24 08          	mov    0x8(%esp),%eax
    dde8:	0f b7 00             	movzwl (%eax),%eax
    ddeb:	0f b7 c0             	movzwl %ax,%eax
    ddee:	25 00 f0 00 00       	and    $0xf000,%eax
    ddf3:	3d 00 20 00 00       	cmp    $0x2000,%eax
    ddf8:	75 2e                	jne    de28 <sys_read+0xef>
		return rw_char(READ, inode->i_zone[0], buf, count, &file->f_pos);
    ddfa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ddfe:	8d 50 0c             	lea    0xc(%eax),%edx
    de01:	8b 44 24 08          	mov    0x8(%esp),%eax
    de05:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    de09:	0f b7 c0             	movzwl %ax,%eax
    de0c:	83 ec 0c             	sub    $0xc,%esp
    de0f:	52                   	push   %edx
    de10:	ff 74 24 38          	pushl  0x38(%esp)
    de14:	ff 74 24 38          	pushl  0x38(%esp)
    de18:	50                   	push   %eax
    de19:	6a 00                	push   $0x0
    de1b:	e8 fb 2b 00 00       	call   10a1b <rw_char>
    de20:	83 c4 20             	add    $0x20,%esp
    de23:	e9 e3 00 00 00       	jmp    df0b <sys_read+0x1d2>
	// 块设备的读操作
	if (S_ISBLK(inode->i_mode))
    de28:	8b 44 24 08          	mov    0x8(%esp),%eax
    de2c:	0f b7 00             	movzwl (%eax),%eax
    de2f:	0f b7 c0             	movzwl %ax,%eax
    de32:	25 00 f0 00 00       	and    $0xf000,%eax
    de37:	3d 00 60 00 00       	cmp    $0x6000,%eax
    de3c:	75 29                	jne    de67 <sys_read+0x12e>
		return block_read(inode->i_zone[0], &file->f_pos, buf, count);
    de3e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    de42:	8d 50 0c             	lea    0xc(%eax),%edx
    de45:	8b 44 24 08          	mov    0x8(%esp),%eax
    de49:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    de4d:	0f b7 c0             	movzwl %ax,%eax
    de50:	ff 74 24 28          	pushl  0x28(%esp)
    de54:	ff 74 24 28          	pushl  0x28(%esp)
    de58:	52                   	push   %edx
    de59:	50                   	push   %eax
    de5a:	e8 42 28 00 00       	call   106a1 <block_read>
    de5f:	83 c4 10             	add    $0x10,%esp
    de62:	e9 a4 00 00 00       	jmp    df0b <sys_read+0x1d2>
	// 如果是目录文件或者是常规文件，则首先验证读取字节数count的有效性并进行调整（若读取字节数加上文件当前读写指针值大于文件长度，则重新设置读取字节
	// 数为文件长度-当前读写指针值，若读取数等于0,则返回0退出），然后执行文件读操作，返回读取的字节数并退出。
	if (S_ISDIR(inode->i_mode) || S_ISREG(inode->i_mode)) {
    de67:	8b 44 24 08          	mov    0x8(%esp),%eax
    de6b:	0f b7 00             	movzwl (%eax),%eax
    de6e:	0f b7 c0             	movzwl %ax,%eax
    de71:	25 00 f0 00 00       	and    $0xf000,%eax
    de76:	3d 00 40 00 00       	cmp    $0x4000,%eax
    de7b:	74 16                	je     de93 <sys_read+0x15a>
    de7d:	8b 44 24 08          	mov    0x8(%esp),%eax
    de81:	0f b7 00             	movzwl (%eax),%eax
    de84:	0f b7 c0             	movzwl %ax,%eax
    de87:	25 00 f0 00 00       	and    $0xf000,%eax
    de8c:	3d 00 80 00 00       	cmp    $0x8000,%eax
    de91:	75 58                	jne    deeb <sys_read+0x1b2>
		if (count + file->f_pos > inode->i_size)
    de93:	8b 44 24 0c          	mov    0xc(%esp),%eax
    de97:	8b 50 0c             	mov    0xc(%eax),%edx
    de9a:	8b 44 24 28          	mov    0x28(%esp),%eax
    de9e:	01 d0                	add    %edx,%eax
    dea0:	89 c2                	mov    %eax,%edx
    dea2:	8b 44 24 08          	mov    0x8(%esp),%eax
    dea6:	8b 40 04             	mov    0x4(%eax),%eax
    dea9:	39 c2                	cmp    %eax,%edx
    deab:	76 16                	jbe    dec3 <sys_read+0x18a>
			count = inode->i_size - file->f_pos;
    dead:	8b 44 24 08          	mov    0x8(%esp),%eax
    deb1:	8b 50 04             	mov    0x4(%eax),%edx
    deb4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    deb8:	8b 40 0c             	mov    0xc(%eax),%eax
    debb:	29 c2                	sub    %eax,%edx
    debd:	89 d0                	mov    %edx,%eax
    debf:	89 44 24 28          	mov    %eax,0x28(%esp)
		if (count <= 0)
    dec3:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    dec8:	7f 07                	jg     ded1 <sys_read+0x198>
			return 0;
    deca:	b8 00 00 00 00       	mov    $0x0,%eax
    decf:	eb 3a                	jmp    df0b <sys_read+0x1d2>
		return file_read(inode, file, buf, count);
    ded1:	ff 74 24 28          	pushl  0x28(%esp)
    ded5:	ff 74 24 28          	pushl  0x28(%esp)
    ded9:	ff 74 24 14          	pushl  0x14(%esp)
    dedd:	ff 74 24 14          	pushl  0x14(%esp)
    dee1:	e8 bb 2b 00 00       	call   10aa1 <file_read>
    dee6:	83 c4 10             	add    $0x10,%esp
    dee9:	eb 20                	jmp    df0b <sys_read+0x1d2>
	}
	// 执行到这里，说明我们无法判断文件的属性。则打印节点文件的属性，并返回出错码退出。
	printk("(Read)inode->i_mode=%06o\n\r", inode->i_mode);
    deeb:	8b 44 24 08          	mov    0x8(%esp),%eax
    deef:	0f b7 00             	movzwl (%eax),%eax
    def2:	0f b7 c0             	movzwl %ax,%eax
    def5:	83 ec 08             	sub    $0x8,%esp
    def8:	50                   	push   %eax
    def9:	68 8f 3e 02 00       	push   $0x23e8f
    defe:	e8 3e ad ff ff       	call   8c41 <printk>
    df03:	83 c4 10             	add    $0x10,%esp
	return -EINVAL;
    df06:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
    df0b:	83 c4 1c             	add    $0x1c,%esp
    df0e:	c3                   	ret    

0000df0f <sys_write>:

// 写文件系统调用.
// 参数fd是文件句柄,buf是用户缓冲区,count是欲写字节数.
int sys_write(unsigned int fd, char * buf, int count)
{
    df0f:	83 ec 1c             	sub    $0x1c,%esp
	struct file * file;
	struct m_inode * inode;

	// 同样地,我们首先判断函数参数的有效性.如果进程文件句柄值大于程序最多打开文件数NR_OPEN,或者需要写入的字节计数小于0,或者该句柄的文件结构指针为空,
	// 则返回出错码并退出.如果需读取的字节数count等于0,则返回0退出.
	if (fd >= NR_OPEN || count < 0 || !(file = current->filp[fd]))
    df12:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    df17:	77 25                	ja     df3e <sys_write+0x2f>
    df19:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    df1e:	78 1e                	js     df3e <sys_write+0x2f>
    df20:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    df25:	8b 54 24 20          	mov    0x20(%esp),%edx
    df29:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    df2f:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    df33:	89 44 24 0c          	mov    %eax,0xc(%esp)
    df37:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    df3c:	75 0a                	jne    df48 <sys_write+0x39>
		return -EINVAL;
    df3e:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    df43:	e9 2f 01 00 00       	jmp    e077 <sys_write+0x168>
	// Log(LOG_INFO_TYPE, "<<<<< sys_write : fd = %d>>>>>\n", fd);
	if (!count)
    df48:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    df4d:	75 0a                	jne    df59 <sys_write+0x4a>
		return 0;
    df4f:	b8 00 00 00 00       	mov    $0x0,%eax
    df54:	e9 1e 01 00 00       	jmp    e077 <sys_write+0x168>
	// 然后验证存放数据的缓冲区内存限制.并取文件的i节点.根据该i节点的属性,分别调用相应的写操作函数.若是管道文件,并且是写管道文件模式,则进行写管道操作,若成功则
	// 返回写入的字节数,否则返回出错码退出.如果是字符设备文件,则进行写字符设备操作,返回写入的字符数退出.如果是块设备文件,则进行块设备写操作,并返回写入的字节数
	// 退出.若是常规文件,则执行文件写操作,并返回写入的字节数.退出.
	inode = file->f_inode;
    df59:	8b 44 24 0c          	mov    0xc(%esp),%eax
    df5d:	8b 40 08             	mov    0x8(%eax),%eax
    df60:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 管道的写操作
	if (inode->i_pipe)
    df64:	8b 44 24 08          	mov    0x8(%esp),%eax
    df68:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    df6c:	84 c0                	test   %al,%al
    df6e:	74 37                	je     dfa7 <sys_write+0x98>
		return (file->f_mode & 2) ? write_pipe(inode, buf, count) : -EIO;
    df70:	8b 44 24 0c          	mov    0xc(%esp),%eax
    df74:	0f b7 00             	movzwl (%eax),%eax
    df77:	0f b7 c0             	movzwl %ax,%eax
    df7a:	83 e0 02             	and    $0x2,%eax
    df7d:	85 c0                	test   %eax,%eax
    df7f:	74 1c                	je     df9d <sys_write+0x8e>
    df81:	83 ec 04             	sub    $0x4,%esp
    df84:	ff 74 24 2c          	pushl  0x2c(%esp)
    df88:	ff 74 24 2c          	pushl  0x2c(%esp)
    df8c:	ff 74 24 14          	pushl  0x14(%esp)
    df90:	e8 13 46 00 00       	call   125a8 <write_pipe>
    df95:	83 c4 10             	add    $0x10,%esp
    df98:	e9 da 00 00 00       	jmp    e077 <sys_write+0x168>
    df9d:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    dfa2:	e9 d0 00 00 00       	jmp    e077 <sys_write+0x168>
	// 字符设备的写操作
	if (S_ISCHR(inode->i_mode))
    dfa7:	8b 44 24 08          	mov    0x8(%esp),%eax
    dfab:	0f b7 00             	movzwl (%eax),%eax
    dfae:	0f b7 c0             	movzwl %ax,%eax
    dfb1:	25 00 f0 00 00       	and    $0xf000,%eax
    dfb6:	3d 00 20 00 00       	cmp    $0x2000,%eax
    dfbb:	75 2e                	jne    dfeb <sys_write+0xdc>
		return rw_char(WRITE, inode->i_zone[0], buf, count, &file->f_pos);
    dfbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dfc1:	8d 50 0c             	lea    0xc(%eax),%edx
    dfc4:	8b 44 24 08          	mov    0x8(%esp),%eax
    dfc8:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    dfcc:	0f b7 c0             	movzwl %ax,%eax
    dfcf:	83 ec 0c             	sub    $0xc,%esp
    dfd2:	52                   	push   %edx
    dfd3:	ff 74 24 38          	pushl  0x38(%esp)
    dfd7:	ff 74 24 38          	pushl  0x38(%esp)
    dfdb:	50                   	push   %eax
    dfdc:	6a 01                	push   $0x1
    dfde:	e8 38 2a 00 00       	call   10a1b <rw_char>
    dfe3:	83 c4 20             	add    $0x20,%esp
    dfe6:	e9 8c 00 00 00       	jmp    e077 <sys_write+0x168>
	// 块设备的写操作
	if (S_ISBLK(inode->i_mode))
    dfeb:	8b 44 24 08          	mov    0x8(%esp),%eax
    dfef:	0f b7 00             	movzwl (%eax),%eax
    dff2:	0f b7 c0             	movzwl %ax,%eax
    dff5:	25 00 f0 00 00       	and    $0xf000,%eax
    dffa:	3d 00 60 00 00       	cmp    $0x6000,%eax
    dfff:	75 26                	jne    e027 <sys_write+0x118>
		return block_write(inode->i_zone[0], &file->f_pos, buf, count);
    e001:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e005:	8d 50 0c             	lea    0xc(%eax),%edx
    e008:	8b 44 24 08          	mov    0x8(%esp),%eax
    e00c:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    e010:	0f b7 c0             	movzwl %ax,%eax
    e013:	ff 74 24 28          	pushl  0x28(%esp)
    e017:	ff 74 24 28          	pushl  0x28(%esp)
    e01b:	52                   	push   %edx
    e01c:	50                   	push   %eax
    e01d:	e8 cb 24 00 00       	call   104ed <block_write>
    e022:	83 c4 10             	add    $0x10,%esp
    e025:	eb 50                	jmp    e077 <sys_write+0x168>
	// 文件的写操作
	if (S_ISREG(inode->i_mode))
    e027:	8b 44 24 08          	mov    0x8(%esp),%eax
    e02b:	0f b7 00             	movzwl (%eax),%eax
    e02e:	0f b7 c0             	movzwl %ax,%eax
    e031:	25 00 f0 00 00       	and    $0xf000,%eax
    e036:	3d 00 80 00 00       	cmp    $0x8000,%eax
    e03b:	75 1a                	jne    e057 <sys_write+0x148>
		return file_write(inode, file, buf, count);
    e03d:	ff 74 24 28          	pushl  0x28(%esp)
    e041:	ff 74 24 28          	pushl  0x28(%esp)
    e045:	ff 74 24 14          	pushl  0x14(%esp)
    e049:	ff 74 24 14          	pushl  0x14(%esp)
    e04d:	e8 f3 2b 00 00       	call   10c45 <file_write>
    e052:	83 c4 10             	add    $0x10,%esp
    e055:	eb 20                	jmp    e077 <sys_write+0x168>
	// 执行到这里,说明我们无法判断文件的属性.则打印节点文件属性,并返回出错码退出.
	printk("(Write)inode->i_mode=%06o\n\r", inode->i_mode);
    e057:	8b 44 24 08          	mov    0x8(%esp),%eax
    e05b:	0f b7 00             	movzwl (%eax),%eax
    e05e:	0f b7 c0             	movzwl %ax,%eax
    e061:	83 ec 08             	sub    $0x8,%esp
    e064:	50                   	push   %eax
    e065:	68 aa 3e 02 00       	push   $0x23eaa
    e06a:	e8 d2 ab ff ff       	call   8c41 <printk>
    e06f:	83 c4 10             	add    $0x10,%esp
	return -EINVAL;
    e072:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
    e077:	83 c4 1c             	add    $0x1c,%esp
    e07a:	c3                   	ret    

0000e07b <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
    e07b:	57                   	push   %edi
    e07c:	83 ec 04             	sub    $0x4,%esp
    e07f:	8b 44 24 10          	mov    0x10(%esp),%eax
    e083:	88 04 24             	mov    %al,(%esp)
__asm__(
    e086:	0f b6 04 24          	movzbl (%esp),%eax
    e08a:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e08e:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    e092:	89 d7                	mov    %edx,%edi
    e094:	fc                   	cld    
    e095:	57                   	push   %edi
    e096:	f3 aa                	rep stos %al,%es:(%edi)
    e098:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
    e099:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    e09d:	83 c4 04             	add    $0x4,%esp
    e0a0:	5f                   	pop    %edi
    e0a1:	c3                   	ret    

0000e0a2 <wait_on_inode>:
static void write_inode(struct m_inode * inode);					// 写i节点信息到高速缓冲中.

// 等待指定的i节点可用.
// 如果i节点已被锁定,则将当前任务置为不可中断的等待状态,并添加到该i节点的等待队列i_wait中.直到该i节点解锁并明确地唤醒本任务.
static inline void wait_on_inode(struct m_inode * inode)
{
    e0a2:	83 ec 0c             	sub    $0xc,%esp
	cli();
    e0a5:	fa                   	cli    
	while (inode->i_lock)
    e0a6:	eb 13                	jmp    e0bb <wait_on_inode+0x19>
		sleep_on(&inode->i_wait);									// kernel/sched.c
    e0a8:	8b 44 24 10          	mov    0x10(%esp),%eax
    e0ac:	83 c0 20             	add    $0x20,%eax
    e0af:	83 ec 0c             	sub    $0xc,%esp
    e0b2:	50                   	push   %eax
    e0b3:	e8 7c 90 ff ff       	call   7134 <sleep_on>
    e0b8:	83 c4 10             	add    $0x10,%esp
	while (inode->i_lock)
    e0bb:	8b 44 24 10          	mov    0x10(%esp),%eax
    e0bf:	0f b6 40 36          	movzbl 0x36(%eax),%eax
    e0c3:	84 c0                	test   %al,%al
    e0c5:	75 e1                	jne    e0a8 <wait_on_inode+0x6>
	sti();
    e0c7:	fb                   	sti    
}
    e0c8:	90                   	nop
    e0c9:	83 c4 0c             	add    $0xc,%esp
    e0cc:	c3                   	ret    

0000e0cd <lock_inode>:

// 对i节点上锁(锁定指定的i节点)
// 如果i节点已被锁定,则将当前任务置为不可中断的等待状态,并添加到该i节点的等待队列i_wait中.直到该i节点解锁并明确地唤醒本任务.然后
// 对其上锁.
static inline void lock_inode(struct m_inode * inode)
{
    e0cd:	83 ec 0c             	sub    $0xc,%esp
	cli();
    e0d0:	fa                   	cli    
	while (inode->i_lock)
    e0d1:	eb 13                	jmp    e0e6 <lock_inode+0x19>
		sleep_on(&inode->i_wait);
    e0d3:	8b 44 24 10          	mov    0x10(%esp),%eax
    e0d7:	83 c0 20             	add    $0x20,%eax
    e0da:	83 ec 0c             	sub    $0xc,%esp
    e0dd:	50                   	push   %eax
    e0de:	e8 51 90 ff ff       	call   7134 <sleep_on>
    e0e3:	83 c4 10             	add    $0x10,%esp
	while (inode->i_lock)
    e0e6:	8b 44 24 10          	mov    0x10(%esp),%eax
    e0ea:	0f b6 40 36          	movzbl 0x36(%eax),%eax
    e0ee:	84 c0                	test   %al,%al
    e0f0:	75 e1                	jne    e0d3 <lock_inode+0x6>
	inode->i_lock = 1;												// 置锁定标志.
    e0f2:	8b 44 24 10          	mov    0x10(%esp),%eax
    e0f6:	c6 40 36 01          	movb   $0x1,0x36(%eax)
	sti();
    e0fa:	fb                   	sti    
}
    e0fb:	90                   	nop
    e0fc:	83 c4 0c             	add    $0xc,%esp
    e0ff:	c3                   	ret    

0000e100 <unlock_inode>:

// 对指定的i节点解锁.
// 复位i节点的锁定标志,并明确地唤醒等待在此i节点等待队列i_wait上的所有进程.
static inline void unlock_inode(struct m_inode * inode)
{
    e100:	83 ec 0c             	sub    $0xc,%esp
	inode->i_lock = 0;
    e103:	8b 44 24 10          	mov    0x10(%esp),%eax
    e107:	c6 40 36 00          	movb   $0x0,0x36(%eax)
	wake_up(&inode->i_wait);										// kernel/sched.c
    e10b:	8b 44 24 10          	mov    0x10(%esp),%eax
    e10f:	83 c0 20             	add    $0x20,%eax
    e112:	83 ec 0c             	sub    $0xc,%esp
    e115:	50                   	push   %eax
    e116:	e8 32 90 ff ff       	call   714d <wake_up>
    e11b:	83 c4 10             	add    $0x10,%esp
}
    e11e:	90                   	nop
    e11f:	83 c4 0c             	add    $0xc,%esp
    e122:	c3                   	ret    

0000e123 <invalidate_inodes>:

// 释放设备dev在内存i节点表中的所有i节点。
// 扫描内存中的i节点表数组，如果是指定设备使用的i节点就释放之。
void invalidate_inodes(int dev)
{
    e123:	83 ec 1c             	sub    $0x1c,%esp

	// 首先让指针指向内存i节点表数组首项。然后扫描i节点表指针数组中的所有i节点。针对其中每个i节点，先等待该i节点
	// 解锁可用（若目前正被上锁的话），再判断是否属于指定设备的i节点。如果是指定设备的i节点，则看看它是否还被使用
	// 着，即其引用计数是否不为0。若是则显示警告信息。然后释放之，即把i节点的设备号字段i_dev置。第50行上的指针
	// 赋值"0+inode_table"等同于"inode_table"、"&inode_table[0]"。不过这样写可能更明了一些。
	inode = 0 + inode_table;                  						// 指向i节点表指针数组首项。
    e126:	c7 44 24 08 c0 11 03 	movl   $0x311c0,0x8(%esp)
    e12d:	00 
	for(i = 0 ; i < NR_INODE ; i++, inode++) {
    e12e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    e135:	00 
    e136:	eb 59                	jmp    e191 <invalidate_inodes+0x6e>
		wait_on_inode(inode);           							// 等待该i节点可用（解锁）。
    e138:	83 ec 0c             	sub    $0xc,%esp
    e13b:	ff 74 24 14          	pushl  0x14(%esp)
    e13f:	e8 5e ff ff ff       	call   e0a2 <wait_on_inode>
    e144:	83 c4 10             	add    $0x10,%esp
		if (inode->i_dev == dev) {
    e147:	8b 44 24 08          	mov    0x8(%esp),%eax
    e14b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e14f:	0f b7 c0             	movzwl %ax,%eax
    e152:	39 44 24 20          	cmp    %eax,0x20(%esp)
    e156:	75 2f                	jne    e187 <invalidate_inodes+0x64>
			if (inode->i_count)     								// 若其引用数不为0,则显示出错警告。
    e158:	8b 44 24 08          	mov    0x8(%esp),%eax
    e15c:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e160:	66 85 c0             	test   %ax,%ax
    e163:	74 10                	je     e175 <invalidate_inodes+0x52>
				printk("inode in use on removed disk\n\r");
    e165:	83 ec 0c             	sub    $0xc,%esp
    e168:	68 c8 3e 02 00       	push   $0x23ec8
    e16d:	e8 cf aa ff ff       	call   8c41 <printk>
    e172:	83 c4 10             	add    $0x10,%esp
			inode->i_dev = inode->i_dirt = 0;       				// 释放i节点（置设备号为0）。
    e175:	8b 44 24 08          	mov    0x8(%esp),%eax
    e179:	c6 40 37 00          	movb   $0x0,0x37(%eax)
    e17d:	8b 44 24 08          	mov    0x8(%esp),%eax
    e181:	66 c7 40 30 00 00    	movw   $0x0,0x30(%eax)
	for(i = 0 ; i < NR_INODE ; i++, inode++) {
    e187:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    e18c:	83 44 24 08 3c       	addl   $0x3c,0x8(%esp)
    e191:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    e196:	7e a0                	jle    e138 <invalidate_inodes+0x15>
		}
	}
}
    e198:	90                   	nop
    e199:	83 c4 1c             	add    $0x1c,%esp
    e19c:	c3                   	ret    

0000e19d <sync_inodes>:

// 同步所有i节点。
// 把内存i节点表中所有i节点与设备上i节点作同步操作。
void sync_inodes(void)
{
    e19d:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先让内存i节点类型的指针指向i节点表首项，然后扫描整个i节点表中的节点。针对其中每个i节点，先等待该i节点解锁可用（若
	// 目前正被上锁的话），然后判断该i节点是否已被修改并且不是管道节点。若是这种情况则将该i节点写入高速缓冲区中，缓冲区管理
	// 程序buffer.c会在适当时机将它们写入盘中。
	inode = 0 + inode_table;                          				// 让指针首先指向i节点表指针数组首项。
    e1a0:	c7 44 24 08 c0 11 03 	movl   $0x311c0,0x8(%esp)
    e1a7:	00 
	for(i = 0 ; i < NR_INODE ; i++, inode++) {           			// 扫描i节点表指针数组。
    e1a8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    e1af:	00 
    e1b0:	eb 40                	jmp    e1f2 <sync_inodes+0x55>
		wait_on_inode(inode);                   					// 等待该i节点可用（解锁）。
    e1b2:	83 ec 0c             	sub    $0xc,%esp
    e1b5:	ff 74 24 14          	pushl  0x14(%esp)
    e1b9:	e8 e4 fe ff ff       	call   e0a2 <wait_on_inode>
    e1be:	83 c4 10             	add    $0x10,%esp
		if (inode->i_dirt && !inode->i_pipe)    					// 若i节点已修改且不是管道节点，
    e1c1:	8b 44 24 08          	mov    0x8(%esp),%eax
    e1c5:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e1c9:	84 c0                	test   %al,%al
    e1cb:	74 1b                	je     e1e8 <sync_inodes+0x4b>
    e1cd:	8b 44 24 08          	mov    0x8(%esp),%eax
    e1d1:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    e1d5:	84 c0                	test   %al,%al
    e1d7:	75 0f                	jne    e1e8 <sync_inodes+0x4b>
			write_inode(inode);             						// 则写盘（实际是写入缓冲区中）。
    e1d9:	83 ec 0c             	sub    $0xc,%esp
    e1dc:	ff 74 24 14          	pushl  0x14(%esp)
    e1e0:	e8 4f 0b 00 00       	call   ed34 <write_inode>
    e1e5:	83 c4 10             	add    $0x10,%esp
	for(i = 0 ; i < NR_INODE ; i++, inode++) {           			// 扫描i节点表指针数组。
    e1e8:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    e1ed:	83 44 24 08 3c       	addl   $0x3c,0x8(%esp)
    e1f2:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    e1f7:	7e b9                	jle    e1b2 <sync_inodes+0x15>
	}
}
    e1f9:	90                   	nop
    e1fa:	83 c4 1c             	add    $0x1c,%esp
    e1fd:	c3                   	ret    

0000e1fe <_bmap>:

// 文件数据块映射到盘块的处理操作.(block位图处理函数,bmap - block map)
// 参数:inode - 文件的i节点指针;block - 文件中的数据块号;create - 创建块标志.该函数把指定的文件数据块block对应到设备上逻辑块上,并返回逻辑块号.
// 如果创建标志置位,则在设备上对应逻辑块不存在时就申请新磁盘块,返回文件数据块block对应在设备上的逻辑块号(盘块号).
static int _bmap(struct m_inode * inode, int block, int create)
{
    e1fe:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	int i;

	// 首先判断参数文件数据块号block的有效性.如果块号小于0,则停机.如果块号大于直接块数 + 间接块数 + 二次间接块数,超出文件系统表示范围,则停机.
	if (block < 0)
    e201:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    e206:	79 10                	jns    e218 <_bmap+0x1a>
		panic("_bmap: block<0");
    e208:	83 ec 0c             	sub    $0xc,%esp
    e20b:	68 e7 3e 02 00       	push   $0x23ee7
    e210:	e8 ed a9 ff ff       	call   8c02 <panic>
    e215:	83 c4 10             	add    $0x10,%esp
	if (block >= 7 + 512 + 512 * 512)
    e218:	81 7c 24 24 06 02 04 	cmpl   $0x40206,0x24(%esp)
    e21f:	00 
    e220:	7e 10                	jle    e232 <_bmap+0x34>
		panic("_bmap: block>big");
    e222:	83 ec 0c             	sub    $0xc,%esp
    e225:	68 f6 3e 02 00       	push   $0x23ef6
    e22a:	e8 d3 a9 ff ff       	call   8c02 <panic>
    e22f:	83 c4 10             	add    $0x10,%esp
	// 然后根据文件块号的大小值和是否设置了创建标志分别进行处理.如果该块号小于7,则使用直接块表示.如果创建标志置位,并且i节点中对应该块的逻辑块(区段)字段为0,
	// 则向相应设备申请一磁盘块(逻辑块),并且将盘上逻辑块号(盘块号)填入逻辑块字段中.然后设置i节点改变时间,置i节点已修改标志.最后返回逻辑块号.函数new_block()
	// 定义在bitmap.c程序中.
	if (block < 7) {
    e232:	83 7c 24 24 06       	cmpl   $0x6,0x24(%esp)
    e237:	0f 8f 93 00 00 00    	jg     e2d0 <_bmap+0xd2>
		if (create && !inode->i_zone[block])
    e23d:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e242:	74 77                	je     e2bb <_bmap+0xbd>
    e244:	8b 44 24 20          	mov    0x20(%esp),%eax
    e248:	8b 54 24 24          	mov    0x24(%esp),%edx
    e24c:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
    e251:	66 85 c0             	test   %ax,%ax
    e254:	75 65                	jne    e2bb <_bmap+0xbd>
			if (inode->i_zone[block] = new_block(inode->i_dev)) {
    e256:	8b 44 24 20          	mov    0x20(%esp),%eax
    e25a:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e25e:	0f b7 c0             	movzwl %ax,%eax
    e261:	83 ec 0c             	sub    $0xc,%esp
    e264:	50                   	push   %eax
    e265:	e8 69 6b 00 00       	call   14dd3 <new_block>
    e26a:	83 c4 10             	add    $0x10,%esp
    e26d:	89 c1                	mov    %eax,%ecx
    e26f:	8b 44 24 20          	mov    0x20(%esp),%eax
    e273:	8b 54 24 24          	mov    0x24(%esp),%edx
    e277:	66 89 4c 50 0e       	mov    %cx,0xe(%eax,%edx,2)
    e27c:	8b 44 24 20          	mov    0x20(%esp),%eax
    e280:	8b 54 24 24          	mov    0x24(%esp),%edx
    e284:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
    e289:	66 85 c0             	test   %ax,%ax
    e28c:	74 2d                	je     e2bb <_bmap+0xbd>
				inode->i_ctime = CURRENT_TIME;
    e28e:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    e293:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    e299:	01 d0                	add    %edx,%eax
    e29b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    e2a0:	f7 e2                	mul    %edx
    e2a2:	c1 ea 05             	shr    $0x5,%edx
    e2a5:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    e2aa:	01 c2                	add    %eax,%edx
    e2ac:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2b0:	89 50 2c             	mov    %edx,0x2c(%eax)
				inode->i_dirt = 1;
    e2b3:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2b7:	c6 40 37 01          	movb   $0x1,0x37(%eax)
			}
		return inode->i_zone[block];
    e2bb:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2bf:	8b 54 24 24          	mov    0x24(%esp),%edx
    e2c3:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
    e2c8:	0f b7 c0             	movzwl %ax,%eax
    e2cb:	e9 53 03 00 00       	jmp    e623 <_bmap+0x425>
	}
	// 如果该块号>=7,且小于7+512,则说明使用的是一次间接块.下面对一次间接块进行处理.如果是创建,并且该i节点中对应间接块字段i_zone[7]是0,表明文件是首次使用间接块,
	// 则需申请一磁盘块用于存放间接块信息,并将此实际磁盘块号填入间接块字段中.然后设置i节点已修改标志和修改时间.如果创建时申请磁盘块失败,则此时i节点间接块字段i_zone[7]
	// 为0,则返回0.或者不是创建,但i_zone[7]原来就为0,表明i节点中没有间接块,于是映射磁盘块失败,返回0退出.
	block -= 7;
    e2d0:	83 6c 24 24 07       	subl   $0x7,0x24(%esp)
	if (block < 512) {
    e2d5:	81 7c 24 24 ff 01 00 	cmpl   $0x1ff,0x24(%esp)
    e2dc:	00 
    e2dd:	0f 8f 3b 01 00 00    	jg     e41e <_bmap+0x220>
		// 如果创建标志置位，同时索引7这个位置没有绑定到对应的逻辑块,则申请一个逻辑块
		if (create && !inode->i_zone[7])
    e2e3:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e2e8:	74 68                	je     e352 <_bmap+0x154>
    e2ea:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2ee:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e2f2:	66 85 c0             	test   %ax,%ax
    e2f5:	75 5b                	jne    e352 <_bmap+0x154>
			if (inode->i_zone[7] = new_block(inode->i_dev)) {
    e2f7:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2fb:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e2ff:	0f b7 c0             	movzwl %ax,%eax
    e302:	83 ec 0c             	sub    $0xc,%esp
    e305:	50                   	push   %eax
    e306:	e8 c8 6a 00 00       	call   14dd3 <new_block>
    e30b:	83 c4 10             	add    $0x10,%esp
    e30e:	89 c2                	mov    %eax,%edx
    e310:	8b 44 24 20          	mov    0x20(%esp),%eax
    e314:	66 89 50 1c          	mov    %dx,0x1c(%eax)
    e318:	8b 44 24 20          	mov    0x20(%esp),%eax
    e31c:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e320:	66 85 c0             	test   %ax,%ax
    e323:	74 2d                	je     e352 <_bmap+0x154>
				inode->i_dirt = 1;
    e325:	8b 44 24 20          	mov    0x20(%esp),%eax
    e329:	c6 40 37 01          	movb   $0x1,0x37(%eax)
				inode->i_ctime = CURRENT_TIME;
    e32d:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    e332:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    e338:	01 d0                	add    %edx,%eax
    e33a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    e33f:	f7 e2                	mul    %edx
    e341:	c1 ea 05             	shr    $0x5,%edx
    e344:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    e349:	01 c2                	add    %eax,%edx
    e34b:	8b 44 24 20          	mov    0x20(%esp),%eax
    e34f:	89 50 2c             	mov    %edx,0x2c(%eax)
			}
		if (!inode->i_zone[7])
    e352:	8b 44 24 20          	mov    0x20(%esp),%eax
    e356:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e35a:	66 85 c0             	test   %ax,%ax
    e35d:	75 0a                	jne    e369 <_bmap+0x16b>
			return 0;
    e35f:	b8 00 00 00 00       	mov    $0x0,%eax
    e364:	e9 ba 02 00 00       	jmp    e623 <_bmap+0x425>
		// 现在读取设备上该i节点的一次间接块.并取该间接块上第block项中的逻辑块号(盘块号)i.每一项占2个字节.如果是创建并且间接块的第block项中的逻辑块号为0的话,则申请一磁盘块,
		// 并让间接块中的第block项等于该新逻辑块块号.然后置位间接块的已修改标志.如果不是创建,则i就是需要映射(寻找)的逻辑块号.
		if (!(bh = bread(inode->i_dev, inode->i_zone[7])))
    e369:	8b 44 24 20          	mov    0x20(%esp),%eax
    e36d:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e371:	0f b7 d0             	movzwl %ax,%edx
    e374:	8b 44 24 20          	mov    0x20(%esp),%eax
    e378:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e37c:	0f b7 c0             	movzwl %ax,%eax
    e37f:	83 ec 08             	sub    $0x8,%esp
    e382:	52                   	push   %edx
    e383:	50                   	push   %eax
    e384:	e8 bd 12 00 00       	call   f646 <bread>
    e389:	83 c4 10             	add    $0x10,%esp
    e38c:	89 44 24 08          	mov    %eax,0x8(%esp)
    e390:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e395:	75 0a                	jne    e3a1 <_bmap+0x1a3>
			return 0;
    e397:	b8 00 00 00 00       	mov    $0x0,%eax
    e39c:	e9 82 02 00 00       	jmp    e623 <_bmap+0x425>
		i = ((unsigned short *) (bh->b_data))[block];
    e3a1:	8b 44 24 08          	mov    0x8(%esp),%eax
    e3a5:	8b 00                	mov    (%eax),%eax
    e3a7:	8b 54 24 24          	mov    0x24(%esp),%edx
    e3ab:	01 d2                	add    %edx,%edx
    e3ad:	01 d0                	add    %edx,%eax
    e3af:	0f b7 00             	movzwl (%eax),%eax
    e3b2:	0f b7 c0             	movzwl %ax,%eax
    e3b5:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (create && !i)
    e3b9:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e3be:	74 46                	je     e406 <_bmap+0x208>
    e3c0:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e3c5:	75 3f                	jne    e406 <_bmap+0x208>
			if (i = new_block(inode->i_dev)) {
    e3c7:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3cb:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e3cf:	0f b7 c0             	movzwl %ax,%eax
    e3d2:	83 ec 0c             	sub    $0xc,%esp
    e3d5:	50                   	push   %eax
    e3d6:	e8 f8 69 00 00       	call   14dd3 <new_block>
    e3db:	83 c4 10             	add    $0x10,%esp
    e3de:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e3e2:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e3e7:	74 1d                	je     e406 <_bmap+0x208>
				((unsigned short *) (bh->b_data))[block] = i;
    e3e9:	8b 44 24 08          	mov    0x8(%esp),%eax
    e3ed:	8b 00                	mov    (%eax),%eax
    e3ef:	8b 54 24 24          	mov    0x24(%esp),%edx
    e3f3:	01 d2                	add    %edx,%edx
    e3f5:	01 d0                	add    %edx,%eax
    e3f7:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e3fb:	66 89 10             	mov    %dx,(%eax)
				bh->b_dirt = 1;
    e3fe:	8b 44 24 08          	mov    0x8(%esp),%eax
    e402:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
			}
		// 最后释放该间接块占用的缓冲块,并返回磁盘上新申请或原有的对应block的逻辑块块号.
		brelse(bh);
    e406:	83 ec 0c             	sub    $0xc,%esp
    e409:	ff 74 24 14          	pushl  0x14(%esp)
    e40d:	e8 de 11 00 00       	call   f5f0 <brelse>
    e412:	83 c4 10             	add    $0x10,%esp
		return i;
    e415:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e419:	e9 05 02 00 00       	jmp    e623 <_bmap+0x425>
	}
	// 若程序运行到此,则表明数据块属于二次间接块.其处理过程与一次间接块类似.下面是对二次间接块的处理.首先将block再减去间接块所容纳的块数(512).然后根据
	// 是否设置了创建标志进行创建或寻找处理.如果是新创建并且i节点的二次间接块字段为0,则需申请一磁盘块用于存放二次间接块的一级块信息,并将此实际磁盘块号填入
	// 二次间接块字段中.之后,置i节点已修改编制和修改时间.同样地,如果创建时申请磁盘块失败,则此时i节点二次间接块字段i_zone[8]为0,则返回0.或者不是创建,但
	// i_zone[8]原来变为0,表明i节点中没有间接块,于是映射磁盘块失败,返回0退出.
	block -= 512;
    e41e:	81 6c 24 24 00 02 00 	subl   $0x200,0x24(%esp)
    e425:	00 
	if (create && !inode->i_zone[8])
    e426:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e42b:	74 68                	je     e495 <_bmap+0x297>
    e42d:	8b 44 24 20          	mov    0x20(%esp),%eax
    e431:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e435:	66 85 c0             	test   %ax,%ax
    e438:	75 5b                	jne    e495 <_bmap+0x297>
		if (inode->i_zone[8] = new_block(inode->i_dev)) {
    e43a:	8b 44 24 20          	mov    0x20(%esp),%eax
    e43e:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e442:	0f b7 c0             	movzwl %ax,%eax
    e445:	83 ec 0c             	sub    $0xc,%esp
    e448:	50                   	push   %eax
    e449:	e8 85 69 00 00       	call   14dd3 <new_block>
    e44e:	83 c4 10             	add    $0x10,%esp
    e451:	89 c2                	mov    %eax,%edx
    e453:	8b 44 24 20          	mov    0x20(%esp),%eax
    e457:	66 89 50 1e          	mov    %dx,0x1e(%eax)
    e45b:	8b 44 24 20          	mov    0x20(%esp),%eax
    e45f:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e463:	66 85 c0             	test   %ax,%ax
    e466:	74 2d                	je     e495 <_bmap+0x297>
			inode->i_dirt = 1;
    e468:	8b 44 24 20          	mov    0x20(%esp),%eax
    e46c:	c6 40 37 01          	movb   $0x1,0x37(%eax)
			inode->i_ctime = CURRENT_TIME;
    e470:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    e475:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    e47b:	01 d0                	add    %edx,%eax
    e47d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    e482:	f7 e2                	mul    %edx
    e484:	c1 ea 05             	shr    $0x5,%edx
    e487:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    e48c:	01 c2                	add    %eax,%edx
    e48e:	8b 44 24 20          	mov    0x20(%esp),%eax
    e492:	89 50 2c             	mov    %edx,0x2c(%eax)
		}
	if (!inode->i_zone[8])
    e495:	8b 44 24 20          	mov    0x20(%esp),%eax
    e499:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e49d:	66 85 c0             	test   %ax,%ax
    e4a0:	75 0a                	jne    e4ac <_bmap+0x2ae>
		return 0;
    e4a2:	b8 00 00 00 00       	mov    $0x0,%eax
    e4a7:	e9 77 01 00 00       	jmp    e623 <_bmap+0x425>
	// 现在读取设备上该i节点的二次间接块.并取该二次间接块的一级块上第(block/512)项中的逻辑块号i.如果是创建并且二次间接块的一级块上第(block/512)项中的逻辑
	// 块号为0的话,则需申请一磁盘块(逻辑块)作为二次间接块的二级块i,并让二次间接块的一级块中第(block/512)项等于该二级块的块号i.然后置位二次间接块的一级块已
	// 修改标志.并释放二次间接块的一级块.如果不是创建,则i就是需要映射(寻找)的逻辑块号.
	if (!(bh = bread(inode->i_dev, inode->i_zone[8])))
    e4ac:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4b0:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e4b4:	0f b7 d0             	movzwl %ax,%edx
    e4b7:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4bb:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e4bf:	0f b7 c0             	movzwl %ax,%eax
    e4c2:	83 ec 08             	sub    $0x8,%esp
    e4c5:	52                   	push   %edx
    e4c6:	50                   	push   %eax
    e4c7:	e8 7a 11 00 00       	call   f646 <bread>
    e4cc:	83 c4 10             	add    $0x10,%esp
    e4cf:	89 44 24 08          	mov    %eax,0x8(%esp)
    e4d3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e4d8:	75 0a                	jne    e4e4 <_bmap+0x2e6>
		return 0;
    e4da:	b8 00 00 00 00       	mov    $0x0,%eax
    e4df:	e9 3f 01 00 00       	jmp    e623 <_bmap+0x425>
	i = ((unsigned short *)bh->b_data)[block >> 9];
    e4e4:	8b 44 24 08          	mov    0x8(%esp),%eax
    e4e8:	8b 00                	mov    (%eax),%eax
    e4ea:	8b 54 24 24          	mov    0x24(%esp),%edx
    e4ee:	c1 fa 09             	sar    $0x9,%edx
    e4f1:	01 d2                	add    %edx,%edx
    e4f3:	01 d0                	add    %edx,%eax
    e4f5:	0f b7 00             	movzwl (%eax),%eax
    e4f8:	0f b7 c0             	movzwl %ax,%eax
    e4fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (create && !i)
    e4ff:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e504:	74 49                	je     e54f <_bmap+0x351>
    e506:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e50b:	75 42                	jne    e54f <_bmap+0x351>
		if (i = new_block(inode->i_dev)) {
    e50d:	8b 44 24 20          	mov    0x20(%esp),%eax
    e511:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e515:	0f b7 c0             	movzwl %ax,%eax
    e518:	83 ec 0c             	sub    $0xc,%esp
    e51b:	50                   	push   %eax
    e51c:	e8 b2 68 00 00       	call   14dd3 <new_block>
    e521:	83 c4 10             	add    $0x10,%esp
    e524:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e528:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e52d:	74 20                	je     e54f <_bmap+0x351>
			((unsigned short *) (bh->b_data))[block >> 9] = i;
    e52f:	8b 44 24 08          	mov    0x8(%esp),%eax
    e533:	8b 00                	mov    (%eax),%eax
    e535:	8b 54 24 24          	mov    0x24(%esp),%edx
    e539:	c1 fa 09             	sar    $0x9,%edx
    e53c:	01 d2                	add    %edx,%edx
    e53e:	01 d0                	add    %edx,%eax
    e540:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e544:	66 89 10             	mov    %dx,(%eax)
			bh->b_dirt=1;
    e547:	8b 44 24 08          	mov    0x8(%esp),%eax
    e54b:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		}
	brelse(bh);
    e54f:	83 ec 0c             	sub    $0xc,%esp
    e552:	ff 74 24 14          	pushl  0x14(%esp)
    e556:	e8 95 10 00 00       	call   f5f0 <brelse>
    e55b:	83 c4 10             	add    $0x10,%esp
	// 如果二次间接块的二级块块号为0,表示申请磁盘失败或者原来对应块号就为0,则返回0退出.否则就从设备上读取二次间接块的二级块,并取该二级块上第block项中的逻辑块
	// 号(与上511是为了限定block值不超过511).
	if (!i)
    e55e:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e563:	75 0a                	jne    e56f <_bmap+0x371>
		return 0;
    e565:	b8 00 00 00 00       	mov    $0x0,%eax
    e56a:	e9 b4 00 00 00       	jmp    e623 <_bmap+0x425>
	if (!(bh = bread(inode->i_dev, i)))
    e56f:	8b 44 24 20          	mov    0x20(%esp),%eax
    e573:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e577:	0f b7 c0             	movzwl %ax,%eax
    e57a:	83 ec 08             	sub    $0x8,%esp
    e57d:	ff 74 24 14          	pushl  0x14(%esp)
    e581:	50                   	push   %eax
    e582:	e8 bf 10 00 00       	call   f646 <bread>
    e587:	83 c4 10             	add    $0x10,%esp
    e58a:	89 44 24 08          	mov    %eax,0x8(%esp)
    e58e:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e593:	75 0a                	jne    e59f <_bmap+0x3a1>
		return 0;
    e595:	b8 00 00 00 00       	mov    $0x0,%eax
    e59a:	e9 84 00 00 00       	jmp    e623 <_bmap+0x425>
	i = ((unsigned short *)bh->b_data)[block & 511];
    e59f:	8b 44 24 08          	mov    0x8(%esp),%eax
    e5a3:	8b 00                	mov    (%eax),%eax
    e5a5:	8b 54 24 24          	mov    0x24(%esp),%edx
    e5a9:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    e5af:	01 d2                	add    %edx,%edx
    e5b1:	01 d0                	add    %edx,%eax
    e5b3:	0f b7 00             	movzwl (%eax),%eax
    e5b6:	0f b7 c0             	movzwl %ax,%eax
    e5b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 如果是创建并且二级块的第block项中逻辑块号为0的话,则申请一磁盘块(逻辑块),作为最终存放数据信息的块.并让二级块中的第block项等于该新逻辑块块号(i).然后置位
	// 二级块的已修改标志.
	if (create && !i)
    e5bd:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e5c2:	74 4c                	je     e610 <_bmap+0x412>
    e5c4:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e5c9:	75 45                	jne    e610 <_bmap+0x412>
		if (i = new_block(inode->i_dev)) {
    e5cb:	8b 44 24 20          	mov    0x20(%esp),%eax
    e5cf:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e5d3:	0f b7 c0             	movzwl %ax,%eax
    e5d6:	83 ec 0c             	sub    $0xc,%esp
    e5d9:	50                   	push   %eax
    e5da:	e8 f4 67 00 00       	call   14dd3 <new_block>
    e5df:	83 c4 10             	add    $0x10,%esp
    e5e2:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e5e6:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e5eb:	74 23                	je     e610 <_bmap+0x412>
			((unsigned short *) (bh->b_data))[block & 511] = i;
    e5ed:	8b 44 24 08          	mov    0x8(%esp),%eax
    e5f1:	8b 00                	mov    (%eax),%eax
    e5f3:	8b 54 24 24          	mov    0x24(%esp),%edx
    e5f7:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    e5fd:	01 d2                	add    %edx,%edx
    e5ff:	01 d0                	add    %edx,%eax
    e601:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e605:	66 89 10             	mov    %dx,(%eax)
			bh->b_dirt = 1;
    e608:	8b 44 24 08          	mov    0x8(%esp),%eax
    e60c:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		}
	// 最后释放该二次间接块的二级块,返回磁盘上新申请的或原有的对应block的逻辑块块号.
	brelse(bh);
    e610:	83 ec 0c             	sub    $0xc,%esp
    e613:	ff 74 24 14          	pushl  0x14(%esp)
    e617:	e8 d4 0f 00 00       	call   f5f0 <brelse>
    e61c:	83 c4 10             	add    $0x10,%esp
	return i;
    e61f:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    e623:	83 c4 1c             	add    $0x1c,%esp
    e626:	c3                   	ret    

0000e627 <bmap>:

// 取文件数据块block在设备上对应的逻辑块号.
// 参数:inode - 文件的内存i节点指针;block - 文件中的数据块号.
// 若操作成功则返回对应的逻辑块号,否则返回0.
int bmap(struct m_inode * inode, int block)
{
    e627:	83 ec 0c             	sub    $0xc,%esp
	return _bmap(inode, block, 0);
    e62a:	83 ec 04             	sub    $0x4,%esp
    e62d:	6a 00                	push   $0x0
    e62f:	ff 74 24 1c          	pushl  0x1c(%esp)
    e633:	ff 74 24 1c          	pushl  0x1c(%esp)
    e637:	e8 c2 fb ff ff       	call   e1fe <_bmap>
    e63c:	83 c4 10             	add    $0x10,%esp
}
    e63f:	83 c4 0c             	add    $0xc,%esp
    e642:	c3                   	ret    

0000e643 <create_block>:

// 取文件数据块block在设备上对应的逻辑块号。如果对应的逻辑块不存在就创建一块。并返回设备上对应的逻辑块号。
// 参数：inode - 文件的内在i节点指针；block - 文件中的数据块号。
// 若操作成功则返回对应的逻辑块号，否则返回0.
int create_block(struct m_inode * inode, int block)
{
    e643:	83 ec 0c             	sub    $0xc,%esp
	return _bmap(inode, block, 1);
    e646:	83 ec 04             	sub    $0x4,%esp
    e649:	6a 01                	push   $0x1
    e64b:	ff 74 24 1c          	pushl  0x1c(%esp)
    e64f:	ff 74 24 1c          	pushl  0x1c(%esp)
    e653:	e8 a6 fb ff ff       	call   e1fe <_bmap>
    e658:	83 c4 10             	add    $0x10,%esp
}
    e65b:	83 c4 0c             	add    $0xc,%esp
    e65e:	c3                   	ret    

0000e65f <iput>:

// 放回(放置)一个i节点(加写入设备).
// 该函数主要用于把i节点引用计数值递减1,并且若是管道i节点,则唤醒等待的进程.若是块设备文件i节点则刷新设备.并且若i节点的链接计数为0,则释放该
// i节点占用的所有磁盘逻辑块,并释放该i节点.
void iput(struct m_inode * inode)
{
    e65f:	83 ec 0c             	sub    $0xc,%esp
	// 首先判断参数给出的i节点的有效性,并等待inode节点解锁(如果已经上锁的话).如果i节点的引用计数为0,表示该i节点已经是空闲的.内核再要求对其进行
	// 放回操作,说明内核中其他代码有问题.于是显示错误信息并停机.
	if (!inode)
    e662:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    e667:	0f 84 a9 01 00 00    	je     e816 <iput+0x1b7>
		return;
	wait_on_inode(inode);
    e66d:	83 ec 0c             	sub    $0xc,%esp
    e670:	ff 74 24 1c          	pushl  0x1c(%esp)
    e674:	e8 29 fa ff ff       	call   e0a2 <wait_on_inode>
    e679:	83 c4 10             	add    $0x10,%esp
	if (!inode->i_count)
    e67c:	8b 44 24 10          	mov    0x10(%esp),%eax
    e680:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e684:	66 85 c0             	test   %ax,%ax
    e687:	75 10                	jne    e699 <iput+0x3a>
		panic("iput: trying to free free inode");
    e689:	83 ec 0c             	sub    $0xc,%esp
    e68c:	68 08 3f 02 00       	push   $0x23f08
    e691:	e8 6c a5 ff ff       	call   8c02 <panic>
    e696:	83 c4 10             	add    $0x10,%esp
	// 如果是管道i节点,则唤醒等待该管道的进程,引用次数减1,如果还有引用则返回.否则释放管道占用的内存页面,并复位该节点的引用计数值,已修改标志和管道
	// 标志,并返回.对于管道节点,inode->i_size存放着内存页地址.参见get_pipe_inode().
	if (inode->i_pipe) {
    e699:	8b 44 24 10          	mov    0x10(%esp),%eax
    e69d:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    e6a1:	84 c0                	test   %al,%al
    e6a3:	74 7c                	je     e721 <iput+0xc2>
		wake_up(&inode->i_wait);
    e6a5:	8b 44 24 10          	mov    0x10(%esp),%eax
    e6a9:	83 c0 20             	add    $0x20,%eax
    e6ac:	83 ec 0c             	sub    $0xc,%esp
    e6af:	50                   	push   %eax
    e6b0:	e8 98 8a ff ff       	call   714d <wake_up>
    e6b5:	83 c4 10             	add    $0x10,%esp
		wake_up(&inode->i_wait2);
    e6b8:	8b 44 24 10          	mov    0x10(%esp),%eax
    e6bc:	83 c0 24             	add    $0x24,%eax
    e6bf:	83 ec 0c             	sub    $0xc,%esp
    e6c2:	50                   	push   %eax
    e6c3:	e8 85 8a ff ff       	call   714d <wake_up>
    e6c8:	83 c4 10             	add    $0x10,%esp
		if (--inode->i_count)
    e6cb:	8b 44 24 10          	mov    0x10(%esp),%eax
    e6cf:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e6d3:	8d 50 ff             	lea    -0x1(%eax),%edx
    e6d6:	8b 44 24 10          	mov    0x10(%esp),%eax
    e6da:	66 89 50 34          	mov    %dx,0x34(%eax)
    e6de:	8b 44 24 10          	mov    0x10(%esp),%eax
    e6e2:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e6e6:	66 85 c0             	test   %ax,%ax
    e6e9:	0f 85 2a 01 00 00    	jne    e819 <iput+0x1ba>
			return;
		free_page(inode->i_size);
    e6ef:	8b 44 24 10          	mov    0x10(%esp),%eax
    e6f3:	8b 40 04             	mov    0x4(%eax),%eax
    e6f6:	83 ec 0c             	sub    $0xc,%esp
    e6f9:	50                   	push   %eax
    e6fa:	e8 73 d5 ff ff       	call   bc72 <free_page>
    e6ff:	83 c4 10             	add    $0x10,%esp
		inode->i_count = 0;
    e702:	8b 44 24 10          	mov    0x10(%esp),%eax
    e706:	66 c7 40 34 00 00    	movw   $0x0,0x34(%eax)
		inode->i_dirt = 0;
    e70c:	8b 44 24 10          	mov    0x10(%esp),%eax
    e710:	c6 40 37 00          	movb   $0x0,0x37(%eax)
		inode->i_pipe = 0;
    e714:	8b 44 24 10          	mov    0x10(%esp),%eax
    e718:	c6 40 38 00          	movb   $0x0,0x38(%eax)
		return;
    e71c:	e9 f9 00 00 00       	jmp    e81a <iput+0x1bb>
	}
	// 如果i节点对应的设备号 =0,则将此节点的引用计数递减1,返回.例如用于管道操作的i节点,其i节点的设备号为0.
	if (!inode->i_dev) {
    e721:	8b 44 24 10          	mov    0x10(%esp),%eax
    e725:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e729:	66 85 c0             	test   %ax,%ax
    e72c:	75 18                	jne    e746 <iput+0xe7>
		inode->i_count--;
    e72e:	8b 44 24 10          	mov    0x10(%esp),%eax
    e732:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e736:	8d 50 ff             	lea    -0x1(%eax),%edx
    e739:	8b 44 24 10          	mov    0x10(%esp),%eax
    e73d:	66 89 50 34          	mov    %dx,0x34(%eax)
		return;
    e741:	e9 d4 00 00 00       	jmp    e81a <iput+0x1bb>
	}
	// 如果是块设备文件的i节点,此时逻辑块字段0(i_zone[0])中是设备号,则刷新该设备.并等待i节点解锁.
	if (S_ISBLK(inode->i_mode)) {
    e746:	8b 44 24 10          	mov    0x10(%esp),%eax
    e74a:	0f b7 00             	movzwl (%eax),%eax
    e74d:	0f b7 c0             	movzwl %ax,%eax
    e750:	25 00 f0 00 00       	and    $0xf000,%eax
    e755:	3d 00 60 00 00       	cmp    $0x6000,%eax
    e75a:	75 28                	jne    e784 <iput+0x125>
		sync_dev(inode->i_zone[0]);
    e75c:	8b 44 24 10          	mov    0x10(%esp),%eax
    e760:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    e764:	0f b7 c0             	movzwl %ax,%eax
    e767:	83 ec 0c             	sub    $0xc,%esp
    e76a:	50                   	push   %eax
    e76b:	e8 af 07 00 00       	call   ef1f <sync_dev>
    e770:	83 c4 10             	add    $0x10,%esp
		wait_on_inode(inode);
    e773:	83 ec 0c             	sub    $0xc,%esp
    e776:	ff 74 24 1c          	pushl  0x1c(%esp)
    e77a:	e8 23 f9 ff ff       	call   e0a2 <wait_on_inode>
    e77f:	83 c4 10             	add    $0x10,%esp
    e782:	eb 01                	jmp    e785 <iput+0x126>
	}
	// 如果i节点引用计数大于1,则计数递减1后就直接返回(因为该i节点还有人在用,不能释放),否则就说明i节点的引用计数值为1(因为第157行已经判断过计数是否为零).
	// 如果i节点的链接数为0,则说明i节点对应文件被删除.于是释放该i节点的所有逻辑块,并释放该i节点.函数free_inode()用于实际释放i节点操作,即复位i节点
	// 对应的i节点位图,清空i节点结构内容.
repeat:
    e784:	90                   	nop
	if (inode->i_count > 1) {
    e785:	8b 44 24 10          	mov    0x10(%esp),%eax
    e789:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e78d:	66 83 f8 01          	cmp    $0x1,%ax
    e791:	76 15                	jbe    e7a8 <iput+0x149>
		inode->i_count--;
    e793:	8b 44 24 10          	mov    0x10(%esp),%eax
    e797:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e79b:	8d 50 ff             	lea    -0x1(%eax),%edx
    e79e:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7a2:	66 89 50 34          	mov    %dx,0x34(%eax)
		return;
    e7a6:	eb 72                	jmp    e81a <iput+0x1bb>
	}
	if (!inode->i_nlinks) {
    e7a8:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7ac:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    e7b0:	84 c0                	test   %al,%al
    e7b2:	75 20                	jne    e7d4 <iput+0x175>
		// 释放该i节点对应的所有逻辑块
		truncate(inode);
    e7b4:	83 ec 0c             	sub    $0xc,%esp
    e7b7:	ff 74 24 1c          	pushl  0x1c(%esp)
    e7bb:	e8 51 70 00 00       	call   15811 <truncate>
    e7c0:	83 c4 10             	add    $0x10,%esp
		// 从该设备的超级块中删除该i节点
		free_inode(inode);      								// bitmap.c
    e7c3:	83 ec 0c             	sub    $0xc,%esp
    e7c6:	ff 74 24 1c          	pushl  0x1c(%esp)
    e7ca:	e8 c2 67 00 00       	call   14f91 <free_inode>
    e7cf:	83 c4 10             	add    $0x10,%esp
		return;
    e7d2:	eb 46                	jmp    e81a <iput+0x1bb>
	}
	// 如果该i节点已作过修改,则回写更新该i节点,并等待该i节点解锁.由于这里在写i节点时需要等待睡眠,此时其他进程有可能修改该i节点,因此在进程被唤醒后需要重复
	// 进行上述判断过程(repeat).
	if (inode->i_dirt) {
    e7d4:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7d8:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e7dc:	84 c0                	test   %al,%al
    e7de:	74 20                	je     e800 <iput+0x1a1>
		write_inode(inode);										/* we can sleep - so do again */
    e7e0:	83 ec 0c             	sub    $0xc,%esp
    e7e3:	ff 74 24 1c          	pushl  0x1c(%esp)
    e7e7:	e8 48 05 00 00       	call   ed34 <write_inode>
    e7ec:	83 c4 10             	add    $0x10,%esp
		wait_on_inode(inode);									/* 因为我们睡眠了,所以要重复判断 */
    e7ef:	83 ec 0c             	sub    $0xc,%esp
    e7f2:	ff 74 24 1c          	pushl  0x1c(%esp)
    e7f6:	e8 a7 f8 ff ff       	call   e0a2 <wait_on_inode>
    e7fb:	83 c4 10             	add    $0x10,%esp
		goto repeat;
    e7fe:	eb 85                	jmp    e785 <iput+0x126>
	}
	// 程序若能执行到此,说明该i节点的引用计数值i_count是1,链接数不为零,并且内容没有被修改过.因此此时只要把i节点引用计数递减1,返回.此时该i节点的i_count=0,
	// 表示已释放.
	inode->i_count--;
    e800:	8b 44 24 10          	mov    0x10(%esp),%eax
    e804:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e808:	8d 50 ff             	lea    -0x1(%eax),%edx
    e80b:	8b 44 24 10          	mov    0x10(%esp),%eax
    e80f:	66 89 50 34          	mov    %dx,0x34(%eax)
	return;
    e813:	90                   	nop
    e814:	eb 04                	jmp    e81a <iput+0x1bb>
		return;
    e816:	90                   	nop
    e817:	eb 01                	jmp    e81a <iput+0x1bb>
			return;
    e819:	90                   	nop
}
    e81a:	83 c4 0c             	add    $0xc,%esp
    e81d:	c3                   	ret    

0000e81e <get_empty_inode>:

// 从i节点表(inode_table)中获取一个空闲i节点项.
// 寻找引用计数count为0的i节点,并将其写盘后清零,返回其指针.引用计数被置1.
struct m_inode * get_empty_inode(void)
{
    e81e:	83 ec 1c             	sub    $0x1c,%esp

	// 在初始化last_inode指针指向i节点表头一项后循环扫描整个i节点表,如果last_inode已经指向i节点表的最后1项之后,则让其重新指向i节点表开始处,
	// 以继续循环寻找空闲i节点项.如果last_inode所指向的i节点计数值为0,则说明可能找到空闲i节点项.让inode指向该i节点.如果该i节点的已修改标志和
	// 和锁定标志均为0,则我们可以使用该i节点,于是退出for循环.
	do {
		inode = NULL;
    e821:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    e828:	00 
		for (i = NR_INODE; i ; i--) {							// NR_INODE = 64.
    e829:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
    e830:	00 
    e831:	eb 59                	jmp    e88c <get_empty_inode+0x6e>
			if (++last_inode >= inode_table + NR_INODE)
    e833:	a1 60 f3 02 00       	mov    0x2f360,%eax
    e838:	83 c0 3c             	add    $0x3c,%eax
    e83b:	a3 60 f3 02 00       	mov    %eax,0x2f360
    e840:	a1 60 f3 02 00       	mov    0x2f360,%eax
    e845:	ba c0 20 03 00       	mov    $0x320c0,%edx
    e84a:	39 d0                	cmp    %edx,%eax
    e84c:	72 0a                	jb     e858 <get_empty_inode+0x3a>
				last_inode = inode_table;
    e84e:	c7 05 60 f3 02 00 c0 	movl   $0x311c0,0x2f360
    e855:	11 03 00 
			if (!last_inode->i_count) {
    e858:	a1 60 f3 02 00       	mov    0x2f360,%eax
    e85d:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e861:	66 85 c0             	test   %ax,%ax
    e864:	75 21                	jne    e887 <get_empty_inode+0x69>
				inode = last_inode;
    e866:	a1 60 f3 02 00       	mov    0x2f360,%eax
    e86b:	89 44 24 0c          	mov    %eax,0xc(%esp)
				if (!inode->i_dirt && !inode->i_lock)
    e86f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e873:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e877:	84 c0                	test   %al,%al
    e879:	75 0c                	jne    e887 <get_empty_inode+0x69>
    e87b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e87f:	0f b6 40 36          	movzbl 0x36(%eax),%eax
    e883:	84 c0                	test   %al,%al
    e885:	74 0e                	je     e895 <get_empty_inode+0x77>
		for (i = NR_INODE; i ; i--) {							// NR_INODE = 64.
    e887:	83 6c 24 08 01       	subl   $0x1,0x8(%esp)
    e88c:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e891:	75 a0                	jne    e833 <get_empty_inode+0x15>
    e893:	eb 01                	jmp    e896 <get_empty_inode+0x78>
					break;
    e895:	90                   	nop
			}
		}
		// 如果没有找到空闲i节点(inode=NULL),则将i节点表打印出来供调试使用,并停机.
		if (!inode) {
    e896:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e89b:	75 5c                	jne    e8f9 <get_empty_inode+0xdb>
			for (i = 0 ; i < NR_INODE ; i++)
    e89d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    e8a4:	00 
    e8a5:	eb 3b                	jmp    e8e2 <get_empty_inode+0xc4>
				printk("%04x: %6d\t", inode_table[i].i_dev,
					inode_table[i].i_num);
    e8a7:	8b 44 24 08          	mov    0x8(%esp),%eax
    e8ab:	6b c0 3c             	imul   $0x3c,%eax,%eax
    e8ae:	05 f2 11 03 00       	add    $0x311f2,%eax
    e8b3:	0f b7 00             	movzwl (%eax),%eax
				printk("%04x: %6d\t", inode_table[i].i_dev,
    e8b6:	0f b7 d0             	movzwl %ax,%edx
    e8b9:	8b 44 24 08          	mov    0x8(%esp),%eax
    e8bd:	6b c0 3c             	imul   $0x3c,%eax,%eax
    e8c0:	05 f0 11 03 00       	add    $0x311f0,%eax
    e8c5:	0f b7 00             	movzwl (%eax),%eax
    e8c8:	0f b7 c0             	movzwl %ax,%eax
    e8cb:	83 ec 04             	sub    $0x4,%esp
    e8ce:	52                   	push   %edx
    e8cf:	50                   	push   %eax
    e8d0:	68 28 3f 02 00       	push   $0x23f28
    e8d5:	e8 67 a3 ff ff       	call   8c41 <printk>
    e8da:	83 c4 10             	add    $0x10,%esp
			for (i = 0 ; i < NR_INODE ; i++)
    e8dd:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    e8e2:	83 7c 24 08 3f       	cmpl   $0x3f,0x8(%esp)
    e8e7:	7e be                	jle    e8a7 <get_empty_inode+0x89>
			panic("No free inodes in mem");
    e8e9:	83 ec 0c             	sub    $0xc,%esp
    e8ec:	68 33 3f 02 00       	push   $0x23f33
    e8f1:	e8 0c a3 ff ff       	call   8c02 <panic>
    e8f6:	83 c4 10             	add    $0x10,%esp
		}
		// 等待该i节点解锁(如果又被上锁的话).如果该i节点已修改标志被置位的话,则将该i节点刷新(同步).因为刷新时可能会睡眠,因此需要再次循环等待i节点解锁.
		wait_on_inode(inode);
    e8f9:	83 ec 0c             	sub    $0xc,%esp
    e8fc:	ff 74 24 18          	pushl  0x18(%esp)
    e900:	e8 9d f7 ff ff       	call   e0a2 <wait_on_inode>
    e905:	83 c4 10             	add    $0x10,%esp
		while (inode->i_dirt) {
    e908:	eb 1e                	jmp    e928 <get_empty_inode+0x10a>
			write_inode(inode);
    e90a:	83 ec 0c             	sub    $0xc,%esp
    e90d:	ff 74 24 18          	pushl  0x18(%esp)
    e911:	e8 1e 04 00 00       	call   ed34 <write_inode>
    e916:	83 c4 10             	add    $0x10,%esp
			wait_on_inode(inode);
    e919:	83 ec 0c             	sub    $0xc,%esp
    e91c:	ff 74 24 18          	pushl  0x18(%esp)
    e920:	e8 7d f7 ff ff       	call   e0a2 <wait_on_inode>
    e925:	83 c4 10             	add    $0x10,%esp
		while (inode->i_dirt) {
    e928:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e92c:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e930:	84 c0                	test   %al,%al
    e932:	75 d6                	jne    e90a <get_empty_inode+0xec>
		}
	} while (inode->i_count);
    e934:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e938:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e93c:	66 85 c0             	test   %ax,%ax
    e93f:	0f 85 dc fe ff ff    	jne    e821 <get_empty_inode+0x3>
	// 如果i节点又被其他占用的话(i节点的计数值不为0了),则重新寻找空闲i节点.否则说明已找到符合要求的空闲i节点项.则将该i节点项内容清零,并置引用计数为1,返回该
	// i节点指针.
	memset(inode, 0, sizeof(*inode));
    e945:	83 ec 04             	sub    $0x4,%esp
    e948:	6a 3c                	push   $0x3c
    e94a:	6a 00                	push   $0x0
    e94c:	ff 74 24 18          	pushl  0x18(%esp)
    e950:	e8 26 f7 ff ff       	call   e07b <memset>
    e955:	83 c4 10             	add    $0x10,%esp
	inode->i_count = 1;
    e958:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e95c:	66 c7 40 34 01 00    	movw   $0x1,0x34(%eax)
	return inode;
    e962:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    e966:	83 c4 1c             	add    $0x1c,%esp
    e969:	c3                   	ret    

0000e96a <get_pipe_inode>:

// 获取管道节点。
// 首先扫描i节点表，寻找一个空闲i节点项，然后取得一页空闲内存供管道使用。然后将得到的i节点的引用计数置为2（读者
// 和写者），初始化管道头和尾，置i节点的管道类型标志。返回i节点指针，如果失败则返回NULL。
struct m_inode * get_pipe_inode(void)
{
    e96a:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先从内存i节点表中取得一个空闲i节点。如果找不到空闲i节点则返回NULL。然后为该i节点申请一页内存，并让节点的
	// i_size字段指向该页面。如果已没有空闲内存，则释放该i节点，并返回NULL。
	if (!(inode = get_empty_inode()))
    e96d:	e8 ac fe ff ff       	call   e81e <get_empty_inode>
    e972:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e976:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e97b:	75 07                	jne    e984 <get_pipe_inode+0x1a>
		return NULL;
    e97d:	b8 00 00 00 00       	mov    $0x0,%eax
    e982:	eb 5a                	jmp    e9de <get_pipe_inode+0x74>
	if (!(inode->i_size = get_free_page())) {         			// 节点的i_size字段指向缓冲区。
    e984:	e8 78 e6 ff ff       	call   d001 <get_free_page>
    e989:	89 c2                	mov    %eax,%edx
    e98b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e98f:	89 50 04             	mov    %edx,0x4(%eax)
    e992:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e996:	8b 40 04             	mov    0x4(%eax),%eax
    e999:	85 c0                	test   %eax,%eax
    e99b:	75 11                	jne    e9ae <get_pipe_inode+0x44>
		inode->i_count = 0;
    e99d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9a1:	66 c7 40 34 00 00    	movw   $0x0,0x34(%eax)
		return NULL;
    e9a7:	b8 00 00 00 00       	mov    $0x0,%eax
    e9ac:	eb 30                	jmp    e9de <get_pipe_inode+0x74>
	}
	// 然后设置该i节点的引用计数为2,并复位管道头尾指针。i节点逻辑块号数组i_zone[]的i_zone[0]和i_zone[1]中分别用
	// 来存放管道头和管道尾指针。最后设置i节点是管道i节点标志并返回该i节点号。
	inode->i_count = 2;											/* sum of readers/writers */    /* 读/写两者总计 */
    e9ae:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9b2:	66 c7 40 34 02 00    	movw   $0x2,0x34(%eax)
	PIPE_HEAD(*inode) = PIPE_TAIL(*inode) = 0;      			// 复位管道头尾指针。
    e9b8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9bc:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
    e9c2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9c6:	0f b7 50 10          	movzwl 0x10(%eax),%edx
    e9ca:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9ce:	66 89 50 0e          	mov    %dx,0xe(%eax)
	inode->i_pipe = 1;                              			// 置节点为管道使用标志。
    e9d2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9d6:	c6 40 38 01          	movb   $0x1,0x38(%eax)
	return inode;
    e9da:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    e9de:	83 c4 1c             	add    $0x1c,%esp
    e9e1:	c3                   	ret    

0000e9e2 <iget>:
// 取得一个i节点.
// 参数:dev - 设备号;nr - i节点号.
// 从设备上读取指定节点号的i节点结构内容到内存i节点表中,并且返回该i节点指针.首先在位于高速缓冲区中的i节点表中搜寻,若找到指定节点号的i节点则在经过一些
// 判断处理后返回该i节点指针.否则从设备dev上读取指定i节点号的i节点信息放入i节点表中,并返回该i节点指针.
struct m_inode * iget(int dev, int nr)
{
    e9e2:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode, * empty;

	// 首先判断参数有效性.若设备号是0,则表明内核代码问题,显示出错信息并停机.然后预先从i节点表中取一个空闲i节点备用.
	if (!dev)
    e9e5:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    e9ea:	75 10                	jne    e9fc <iget+0x1a>
		panic("iget with dev==0");
    e9ec:	83 ec 0c             	sub    $0xc,%esp
    e9ef:	68 49 3f 02 00       	push   $0x23f49
    e9f4:	e8 09 a2 ff ff       	call   8c02 <panic>
    e9f9:	83 c4 10             	add    $0x10,%esp
	empty = get_empty_inode();
    e9fc:	e8 1d fe ff ff       	call   e81e <get_empty_inode>
    ea01:	89 44 24 04          	mov    %eax,0x4(%esp)
	// 接着扫描i节点表.寻找参数指定节点号nr的i节点.并递增该节点的引用次数.如果当前扫描i节点的设备号不等于指定的设备号或者节点号不等于指定的节点号,则继续扫描.
	inode = inode_table;
    ea05:	c7 44 24 0c c0 11 03 	movl   $0x311c0,0xc(%esp)
    ea0c:	00 
	while (inode < NR_INODE + inode_table) {
    ea0d:	e9 43 01 00 00       	jmp    eb55 <iget+0x173>
		if (inode->i_dev != dev || inode->i_num != nr) {
    ea12:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea16:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ea1a:	0f b7 c0             	movzwl %ax,%eax
    ea1d:	39 44 24 20          	cmp    %eax,0x20(%esp)
    ea21:	75 11                	jne    ea34 <iget+0x52>
    ea23:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea27:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ea2b:	0f b7 c0             	movzwl %ax,%eax
    ea2e:	39 44 24 24          	cmp    %eax,0x24(%esp)
    ea32:	74 0a                	je     ea3e <iget+0x5c>
			inode++;
    ea34:	83 44 24 0c 3c       	addl   $0x3c,0xc(%esp)
			continue;
    ea39:	e9 17 01 00 00       	jmp    eb55 <iget+0x173>
		}
		// 如果找到指定设备号dev和节点号nr的i节点,则等待该节点解锁(如果已上锁的话).在等待该节点解锁过程中,i节点可能会发生变化.所以再次进行上述相同判断.如果发生
		// 了变化,则重新扫描整个i节点表.
		wait_on_inode(inode);
    ea3e:	83 ec 0c             	sub    $0xc,%esp
    ea41:	ff 74 24 18          	pushl  0x18(%esp)
    ea45:	e8 58 f6 ff ff       	call   e0a2 <wait_on_inode>
    ea4a:	83 c4 10             	add    $0x10,%esp
		if (inode->i_dev != dev || inode->i_num != nr) {
    ea4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea51:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ea55:	0f b7 c0             	movzwl %ax,%eax
    ea58:	39 44 24 20          	cmp    %eax,0x20(%esp)
    ea5c:	75 11                	jne    ea6f <iget+0x8d>
    ea5e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea62:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ea66:	0f b7 c0             	movzwl %ax,%eax
    ea69:	39 44 24 24          	cmp    %eax,0x24(%esp)
    ea6d:	74 0d                	je     ea7c <iget+0x9a>
			inode = inode_table;
    ea6f:	c7 44 24 0c c0 11 03 	movl   $0x311c0,0xc(%esp)
    ea76:	00 
			continue;
    ea77:	e9 d9 00 00 00       	jmp    eb55 <iget+0x173>
		}
		// 到这里表示找到相应的i节点.于是将该i节点引用计数增1.然后再作进一步检查,看它是否是另一个文件系统的安装点.若是则寻找被安装文件系统根节点并返回.如果该i节点
		// 的确是其他文件系统的安装点,则在超级块表中搜寻安装在此i节点的超级块.如果没有找到,则显示出错信息,并放回本函数开始时获取的空闲节点empty,返回该i节点指针.
		inode->i_count++;
    ea7c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea80:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    ea84:	8d 50 01             	lea    0x1(%eax),%edx
    ea87:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea8b:	66 89 50 34          	mov    %dx,0x34(%eax)
		if (inode->i_mount) {
    ea8f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea93:	0f b6 40 39          	movzbl 0x39(%eax),%eax
    ea97:	84 c0                	test   %al,%al
    ea99:	0f 84 9a 00 00 00    	je     eb39 <iget+0x157>
			int i;

			for (i = 0 ; i < NR_SUPER ; i++)
    ea9f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    eaa6:	00 
    eaa7:	eb 19                	jmp    eac2 <iget+0xe0>
				if (super_block[i].s_imount == inode)
    eaa9:	8b 44 24 08          	mov    0x8(%esp),%eax
    eaad:	6b c0 6c             	imul   $0x6c,%eax,%eax
    eab0:	05 7c 1c 04 00       	add    $0x41c7c,%eax
    eab5:	8b 00                	mov    (%eax),%eax
    eab7:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    eabb:	74 0e                	je     eacb <iget+0xe9>
			for (i = 0 ; i < NR_SUPER ; i++)
    eabd:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    eac2:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    eac7:	7e e0                	jle    eaa9 <iget+0xc7>
    eac9:	eb 01                	jmp    eacc <iget+0xea>
					break;
    eacb:	90                   	nop
			if (i >= NR_SUPER) {
    eacc:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    ead1:	7e 2f                	jle    eb02 <iget+0x120>
				printk("Mounted inode hasn't got sb\n");
    ead3:	83 ec 0c             	sub    $0xc,%esp
    ead6:	68 5a 3f 02 00       	push   $0x23f5a
    eadb:	e8 61 a1 ff ff       	call   8c41 <printk>
    eae0:	83 c4 10             	add    $0x10,%esp
				if (empty)
    eae3:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    eae8:	74 0f                	je     eaf9 <iget+0x117>
					iput(empty);
    eaea:	83 ec 0c             	sub    $0xc,%esp
    eaed:	ff 74 24 10          	pushl  0x10(%esp)
    eaf1:	e8 69 fb ff ff       	call   e65f <iput>
    eaf6:	83 c4 10             	add    $0x10,%esp
				return inode;
    eaf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eafd:	e9 a7 00 00 00       	jmp    eba9 <iget+0x1c7>
			}
			// 执行到这里表示已经找到安装到inode节点的文件系统超级块.于是将该i节点写盘放回,并从安装在此i节点上的文件系统超级块中取设备号,并令i节点号为ROOT_INO.然后
			// 重新扫描整个i节点表,以获取该被安装文件系统的根i节点信息.
			iput(inode);
    eb02:	83 ec 0c             	sub    $0xc,%esp
    eb05:	ff 74 24 18          	pushl  0x18(%esp)
    eb09:	e8 51 fb ff ff       	call   e65f <iput>
    eb0e:	83 c4 10             	add    $0x10,%esp
			dev = super_block[i].s_dev;
    eb11:	8b 44 24 08          	mov    0x8(%esp),%eax
    eb15:	6b c0 6c             	imul   $0x6c,%eax,%eax
    eb18:	05 74 1c 04 00       	add    $0x41c74,%eax
    eb1d:	0f b7 00             	movzwl (%eax),%eax
    eb20:	0f b7 c0             	movzwl %ax,%eax
    eb23:	89 44 24 20          	mov    %eax,0x20(%esp)
			nr = ROOT_INO;
    eb27:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%esp)
    eb2e:	00 
			inode = inode_table;
    eb2f:	c7 44 24 0c c0 11 03 	movl   $0x311c0,0xc(%esp)
    eb36:	00 
			continue;
    eb37:	eb 1c                	jmp    eb55 <iget+0x173>
		}
		// 最终我们找到了相应的i节点.因此可以放弃本函数开始处临时 的空闲i节点,返回找到的i节点指针.
		if (empty)
    eb39:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    eb3e:	74 0f                	je     eb4f <iget+0x16d>
			iput(empty);
    eb40:	83 ec 0c             	sub    $0xc,%esp
    eb43:	ff 74 24 10          	pushl  0x10(%esp)
    eb47:	e8 13 fb ff ff       	call   e65f <iput>
    eb4c:	83 c4 10             	add    $0x10,%esp
		return inode;
    eb4f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eb53:	eb 54                	jmp    eba9 <iget+0x1c7>
	while (inode < NR_INODE + inode_table) {
    eb55:	b8 c0 20 03 00       	mov    $0x320c0,%eax
    eb5a:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    eb5e:	0f 82 ae fe ff ff    	jb     ea12 <iget+0x30>
    }
	// 如果我们在i节点表中没有找到指定的i节点,则利用前面申请的空闲i节点empty在i节点表中建立该i节点.并从相应设备上读取该i节点信息,返回该i节点指针.
	if (!empty)
    eb64:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    eb69:	75 07                	jne    eb72 <iget+0x190>
		return (NULL);
    eb6b:	b8 00 00 00 00       	mov    $0x0,%eax
    eb70:	eb 37                	jmp    eba9 <iget+0x1c7>
	inode = empty;
    eb72:	8b 44 24 04          	mov    0x4(%esp),%eax
    eb76:	89 44 24 0c          	mov    %eax,0xc(%esp)
	inode->i_dev = dev;									// 设置i节点的设备.
    eb7a:	8b 44 24 20          	mov    0x20(%esp),%eax
    eb7e:	89 c2                	mov    %eax,%edx
    eb80:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eb84:	66 89 50 30          	mov    %dx,0x30(%eax)
	inode->i_num = nr;									// 设置i节点号.
    eb88:	8b 44 24 24          	mov    0x24(%esp),%eax
    eb8c:	89 c2                	mov    %eax,%edx
    eb8e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eb92:	66 89 50 32          	mov    %dx,0x32(%eax)
	read_inode(inode);      							// 读取i节点信息
    eb96:	83 ec 0c             	sub    $0xc,%esp
    eb99:	ff 74 24 18          	pushl  0x18(%esp)
    eb9d:	e8 0b 00 00 00       	call   ebad <read_inode>
    eba2:	83 c4 10             	add    $0x10,%esp
	return inode;
    eba5:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    eba9:	83 c4 1c             	add    $0x1c,%esp
    ebac:	c3                   	ret    

0000ebad <read_inode>:
// 读取指定i节点信息.
// 从设备上读取含有指定i节点信息的i节点盘块,然后复制到指定的i节点结构中.为了确定i节点所在设备逻辑块号(或缓冲块),必须首先读取相应设备上的超级块,以
// 获取用于计算逻辑块号的每块i节点数信息INODES_PER_BLOCK.在计算出i节点所在的逻辑块号后,就把该逻辑块读入一缓冲块中.然后把缓冲块中相应位置处的i节点
// 内容复制到指定的位置处.
static void read_inode(struct m_inode * inode)
{
    ebad:	83 ec 1c             	sub    $0x1c,%esp
	struct super_block * sb;
	struct buffer_head * bh;
	int block;

	// 首先锁定该i节点,并取该节点所在设备的超级块.
	lock_inode(inode);
    ebb0:	83 ec 0c             	sub    $0xc,%esp
    ebb3:	ff 74 24 2c          	pushl  0x2c(%esp)
    ebb7:	e8 11 f5 ff ff       	call   e0cd <lock_inode>
    ebbc:	83 c4 10             	add    $0x10,%esp
	if (!(sb = get_super(inode->i_dev)))
    ebbf:	8b 44 24 20          	mov    0x20(%esp),%eax
    ebc3:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ebc7:	0f b7 c0             	movzwl %ax,%eax
    ebca:	83 ec 0c             	sub    $0xc,%esp
    ebcd:	50                   	push   %eax
    ebce:	e8 e4 0e 00 00       	call   fab7 <get_super>
    ebd3:	83 c4 10             	add    $0x10,%esp
    ebd6:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ebda:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    ebdf:	75 10                	jne    ebf1 <read_inode+0x44>
		panic("trying to read inode without dev");
    ebe1:	83 ec 0c             	sub    $0xc,%esp
    ebe4:	68 78 3f 02 00       	push   $0x23f78
    ebe9:	e8 14 a0 ff ff       	call   8c02 <panic>
    ebee:	83 c4 10             	add    $0x10,%esp
	// 该i节点所在设备逻辑块号 = (启动块 + 超级块) + i节点位图占用的块数 + 逻辑块位图的块数 + (i节点号-1)/每块含有的i节点数.虽然i节点号从0开始编号,
	// 但第1个0号i节点不用,并且磁盘上也不保存对应的0号i节点结构.因此存放i节点的盘块的第1块上保存的是i节点号是1--16的i节点结构而不是0--15的.因此在上面计算
	// i节点号对应的i节点结构所在盘块时需要减1,即:B = (i节点号-1)/每块含有i节点结构数.例如,节点号16的i节点结构应该在B=(16-1)/16 = 0的块上.这里我们从
	// 设备上读取该i节点所在逻辑块,并复制指定i节点内容到inode指针所指位置处.
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ebf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ebf5:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    ebf9:	0f b7 c0             	movzwl %ax,%eax
    ebfc:	8d 50 02             	lea    0x2(%eax),%edx
    ebff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ec03:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    ec07:	0f b7 c0             	movzwl %ax,%eax
    ec0a:	01 d0                	add    %edx,%eax
    ec0c:	89 c2                	mov    %eax,%edx
		(inode->i_num - 1) / INODES_PER_BLOCK;
    ec0e:	8b 44 24 20          	mov    0x20(%esp),%eax
    ec12:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ec16:	0f b7 c0             	movzwl %ax,%eax
    ec19:	83 e8 01             	sub    $0x1,%eax
    ec1c:	c1 e8 05             	shr    $0x5,%eax
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ec1f:	01 d0                	add    %edx,%eax
    ec21:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 将i节点信息的那个逻辑块读取到高速缓存中
	if (!(bh = bread(inode->i_dev, block)))
    ec25:	8b 44 24 20          	mov    0x20(%esp),%eax
    ec29:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ec2d:	0f b7 c0             	movzwl %ax,%eax
    ec30:	83 ec 08             	sub    $0x8,%esp
    ec33:	ff 74 24 10          	pushl  0x10(%esp)
    ec37:	50                   	push   %eax
    ec38:	e8 09 0a 00 00       	call   f646 <bread>
    ec3d:	83 c4 10             	add    $0x10,%esp
    ec40:	89 44 24 04          	mov    %eax,0x4(%esp)
    ec44:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ec49:	75 10                	jne    ec5b <read_inode+0xae>
		panic("unable to read i-node block");
    ec4b:	83 ec 0c             	sub    $0xc,%esp
    ec4e:	68 99 3f 02 00       	push   $0x23f99
    ec53:	e8 aa 9f ff ff       	call   8c02 <panic>
    ec58:	83 c4 10             	add    $0x10,%esp
	*(struct d_inode *)inode =
		((struct d_inode *)bh->b_data)
    ec5b:	8b 44 24 04          	mov    0x4(%esp),%eax
    ec5f:	8b 10                	mov    (%eax),%edx
			[(inode->i_num - 1) % INODES_PER_BLOCK];
    ec61:	8b 44 24 20          	mov    0x20(%esp),%eax
    ec65:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ec69:	0f b7 c0             	movzwl %ax,%eax
    ec6c:	83 e8 01             	sub    $0x1,%eax
    ec6f:	83 e0 1f             	and    $0x1f,%eax
    ec72:	c1 e0 05             	shl    $0x5,%eax
    ec75:	01 c2                	add    %eax,%edx
	*(struct d_inode *)inode =
    ec77:	8b 44 24 20          	mov    0x20(%esp),%eax
    ec7b:	8b 0a                	mov    (%edx),%ecx
    ec7d:	89 08                	mov    %ecx,(%eax)
    ec7f:	8b 4a 04             	mov    0x4(%edx),%ecx
    ec82:	89 48 04             	mov    %ecx,0x4(%eax)
    ec85:	8b 4a 08             	mov    0x8(%edx),%ecx
    ec88:	89 48 08             	mov    %ecx,0x8(%eax)
    ec8b:	8b 4a 0c             	mov    0xc(%edx),%ecx
    ec8e:	89 48 0c             	mov    %ecx,0xc(%eax)
    ec91:	8b 4a 10             	mov    0x10(%edx),%ecx
    ec94:	89 48 10             	mov    %ecx,0x10(%eax)
    ec97:	8b 4a 14             	mov    0x14(%edx),%ecx
    ec9a:	89 48 14             	mov    %ecx,0x14(%eax)
    ec9d:	8b 4a 18             	mov    0x18(%edx),%ecx
    eca0:	89 48 18             	mov    %ecx,0x18(%eax)
    eca3:	8b 52 1c             	mov    0x1c(%edx),%edx
    eca6:	89 50 1c             	mov    %edx,0x1c(%eax)
	// 最后释放读入的缓冲块,并解锁该i节点.对于块设备文件,还需要设置i节点的文件最大长度值.
	brelse(bh);
    eca9:	83 ec 0c             	sub    $0xc,%esp
    ecac:	ff 74 24 10          	pushl  0x10(%esp)
    ecb0:	e8 3b 09 00 00       	call   f5f0 <brelse>
    ecb5:	83 c4 10             	add    $0x10,%esp
	if (S_ISBLK(inode->i_mode)) {
    ecb8:	8b 44 24 20          	mov    0x20(%esp),%eax
    ecbc:	0f b7 00             	movzwl (%eax),%eax
    ecbf:	0f b7 c0             	movzwl %ax,%eax
    ecc2:	25 00 f0 00 00       	and    $0xf000,%eax
    ecc7:	3d 00 60 00 00       	cmp    $0x6000,%eax
    eccc:	75 52                	jne    ed20 <read_inode+0x173>
		int i = inode->i_zone[0];							// 对于块设备文件,i_zone[0]中是设备号.
    ecce:	8b 44 24 20          	mov    0x20(%esp),%eax
    ecd2:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    ecd6:	0f b7 c0             	movzwl %ax,%eax
    ecd9:	89 04 24             	mov    %eax,(%esp)
		if (blk_size[MAJOR(i)])
    ecdc:	8b 04 24             	mov    (%esp),%eax
    ecdf:	c1 e8 08             	shr    $0x8,%eax
    ece2:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
    ece9:	85 c0                	test   %eax,%eax
    eceb:	74 28                	je     ed15 <read_inode+0x168>
			inode->i_size = 1024 * blk_size[MAJOR(i)][MINOR(i)];
    eced:	8b 04 24             	mov    (%esp),%eax
    ecf0:	c1 e8 08             	shr    $0x8,%eax
    ecf3:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
    ecfa:	8b 14 24             	mov    (%esp),%edx
    ecfd:	0f b6 d2             	movzbl %dl,%edx
    ed00:	c1 e2 02             	shl    $0x2,%edx
    ed03:	01 d0                	add    %edx,%eax
    ed05:	8b 00                	mov    (%eax),%eax
    ed07:	c1 e0 0a             	shl    $0xa,%eax
    ed0a:	89 c2                	mov    %eax,%edx
    ed0c:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed10:	89 50 04             	mov    %edx,0x4(%eax)
    ed13:	eb 0b                	jmp    ed20 <read_inode+0x173>
		else
			inode->i_size = 0x7fffffff;
    ed15:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed19:	c7 40 04 ff ff ff 7f 	movl   $0x7fffffff,0x4(%eax)
	}
	unlock_inode(inode);
    ed20:	83 ec 0c             	sub    $0xc,%esp
    ed23:	ff 74 24 2c          	pushl  0x2c(%esp)
    ed27:	e8 d4 f3 ff ff       	call   e100 <unlock_inode>
    ed2c:	83 c4 10             	add    $0x10,%esp
}
    ed2f:	90                   	nop
    ed30:	83 c4 1c             	add    $0x1c,%esp
    ed33:	c3                   	ret    

0000ed34 <write_inode>:
// 将i节点信息写入缓冲区中.
// 该函数把参数指定的i节点写入缓冲区相应的缓冲块中,待缓冲区刷新时会写入盘中.为了确定i节点所在的设备逻辑块号(或缓冲块),必须首先读取相应设备上的超级块,
// 以获取用于计算逻辑块号的每块i节点数信息INODES_PER_BLOCK.在计算出i节点所在的逻辑块号后,就把该逻辑块读入一缓冲块中.然后把i节点内容复制到缓冲块的
// 相应位置处.
static void write_inode(struct m_inode * inode)
{
    ed34:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	int block;

	// 首先锁定该i节点,如果该i节点没有被修改过或者该i节点的设备号等于零,则解锁该i节点,并退出.对于没有被修改过的i节点,其内容与缓冲区中或设备中的相同.然后获取
	// 该i节点的超级块.
	lock_inode(inode);
    ed37:	83 ec 0c             	sub    $0xc,%esp
    ed3a:	ff 74 24 2c          	pushl  0x2c(%esp)
    ed3e:	e8 8a f3 ff ff       	call   e0cd <lock_inode>
    ed43:	83 c4 10             	add    $0x10,%esp
	if (!inode->i_dirt || !inode->i_dev) {
    ed46:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed4a:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    ed4e:	84 c0                	test   %al,%al
    ed50:	74 0d                	je     ed5f <write_inode+0x2b>
    ed52:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed56:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ed5a:	66 85 c0             	test   %ax,%ax
    ed5d:	75 14                	jne    ed73 <write_inode+0x3f>
		unlock_inode(inode);
    ed5f:	83 ec 0c             	sub    $0xc,%esp
    ed62:	ff 74 24 2c          	pushl  0x2c(%esp)
    ed66:	e8 95 f3 ff ff       	call   e100 <unlock_inode>
    ed6b:	83 c4 10             	add    $0x10,%esp
		return;
    ed6e:	e9 18 01 00 00       	jmp    ee8b <write_inode+0x157>
	}
	if (!(sb = get_super(inode->i_dev)))
    ed73:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed77:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ed7b:	0f b7 c0             	movzwl %ax,%eax
    ed7e:	83 ec 0c             	sub    $0xc,%esp
    ed81:	50                   	push   %eax
    ed82:	e8 30 0d 00 00       	call   fab7 <get_super>
    ed87:	83 c4 10             	add    $0x10,%esp
    ed8a:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ed8e:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    ed93:	75 10                	jne    eda5 <write_inode+0x71>
		panic("trying to write inode without device");
    ed95:	83 ec 0c             	sub    $0xc,%esp
    ed98:	68 b8 3f 02 00       	push   $0x23fb8
    ed9d:	e8 60 9e ff ff       	call   8c02 <panic>
    eda2:	83 c4 10             	add    $0x10,%esp
	// 该i节点所在的设备逻辑号 = (启动块 + 超级块) + i节点位图占用的块数 + 逻辑块位图占用的块数 + (i节点号-1)/每块含有的i节点数.我们从设备上读取该i节点所
	// 在的逻辑块,并将该i节点信息复制到逻辑块对应该i节点的项位置处.
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    eda5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eda9:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    edad:	0f b7 c0             	movzwl %ax,%eax
    edb0:	8d 50 02             	lea    0x2(%eax),%edx
    edb3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    edb7:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    edbb:	0f b7 c0             	movzwl %ax,%eax
    edbe:	01 d0                	add    %edx,%eax
    edc0:	89 c2                	mov    %eax,%edx
		(inode->i_num - 1) / INODES_PER_BLOCK;
    edc2:	8b 44 24 20          	mov    0x20(%esp),%eax
    edc6:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    edca:	0f b7 c0             	movzwl %ax,%eax
    edcd:	83 e8 01             	sub    $0x1,%eax
    edd0:	c1 e8 05             	shr    $0x5,%eax
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    edd3:	01 d0                	add    %edx,%eax
    edd5:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!(bh = bread(inode->i_dev, block)))
    edd9:	8b 44 24 20          	mov    0x20(%esp),%eax
    eddd:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ede1:	0f b7 c0             	movzwl %ax,%eax
    ede4:	83 ec 08             	sub    $0x8,%esp
    ede7:	ff 74 24 10          	pushl  0x10(%esp)
    edeb:	50                   	push   %eax
    edec:	e8 55 08 00 00       	call   f646 <bread>
    edf1:	83 c4 10             	add    $0x10,%esp
    edf4:	89 44 24 04          	mov    %eax,0x4(%esp)
    edf8:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    edfd:	75 10                	jne    ee0f <write_inode+0xdb>
		panic("unable to read i-node block");
    edff:	83 ec 0c             	sub    $0xc,%esp
    ee02:	68 99 3f 02 00       	push   $0x23f99
    ee07:	e8 f6 9d ff ff       	call   8c02 <panic>
    ee0c:	83 c4 10             	add    $0x10,%esp
	((struct d_inode *)bh->b_data)
    ee0f:	8b 44 24 04          	mov    0x4(%esp),%eax
    ee13:	8b 10                	mov    (%eax),%edx
		[(inode->i_num - 1) % INODES_PER_BLOCK] =
    ee15:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee19:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ee1d:	0f b7 c0             	movzwl %ax,%eax
    ee20:	83 e8 01             	sub    $0x1,%eax
    ee23:	83 e0 1f             	and    $0x1f,%eax
    ee26:	c1 e0 05             	shl    $0x5,%eax
    ee29:	01 c2                	add    %eax,%edx
    ee2b:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee2f:	8b 08                	mov    (%eax),%ecx
    ee31:	89 0a                	mov    %ecx,(%edx)
    ee33:	8b 48 04             	mov    0x4(%eax),%ecx
    ee36:	89 4a 04             	mov    %ecx,0x4(%edx)
    ee39:	8b 48 08             	mov    0x8(%eax),%ecx
    ee3c:	89 4a 08             	mov    %ecx,0x8(%edx)
    ee3f:	8b 48 0c             	mov    0xc(%eax),%ecx
    ee42:	89 4a 0c             	mov    %ecx,0xc(%edx)
    ee45:	8b 48 10             	mov    0x10(%eax),%ecx
    ee48:	89 4a 10             	mov    %ecx,0x10(%edx)
    ee4b:	8b 48 14             	mov    0x14(%eax),%ecx
    ee4e:	89 4a 14             	mov    %ecx,0x14(%edx)
    ee51:	8b 48 18             	mov    0x18(%eax),%ecx
    ee54:	89 4a 18             	mov    %ecx,0x18(%edx)
    ee57:	8b 40 1c             	mov    0x1c(%eax),%eax
    ee5a:	89 42 1c             	mov    %eax,0x1c(%edx)
			*(struct d_inode *)inode;
	// 然后置缓冲区已修改标志,而i节点内容已经与缓冲区中的一致,因此修改标志置零.然后释放该含有i节点的缓冲区,并解锁该i节点.
	bh->b_dirt = 1;
    ee5d:	8b 44 24 04          	mov    0x4(%esp),%eax
    ee61:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	inode->i_dirt = 0;
    ee65:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee69:	c6 40 37 00          	movb   $0x0,0x37(%eax)
	brelse(bh);
    ee6d:	83 ec 0c             	sub    $0xc,%esp
    ee70:	ff 74 24 10          	pushl  0x10(%esp)
    ee74:	e8 77 07 00 00       	call   f5f0 <brelse>
    ee79:	83 c4 10             	add    $0x10,%esp
	unlock_inode(inode);
    ee7c:	83 ec 0c             	sub    $0xc,%esp
    ee7f:	ff 74 24 2c          	pushl  0x2c(%esp)
    ee83:	e8 78 f2 ff ff       	call   e100 <unlock_inode>
    ee88:	83 c4 10             	add    $0x10,%esp
}
    ee8b:	83 c4 1c             	add    $0x1c,%esp
    ee8e:	c3                   	ret    

0000ee8f <wait_on_buffer>:
// 等待指定缓冲块解锁.
// 如果指定的缓冲块bh已经上锁就让进程不可中断地睡眠在该缓冲块的等待队列b_wait中.在缓冲块解锁时,其等待队列上的所有进程将被唤醒.虽然是在关闭
// 中断(cli)之后去睡眠的,但这样做并不会影响在其他进程上下文中响应中断.因为每个进程都在自己的TSS段中保存了标志寄存器EFLAGS的值,所在在进程
// 切换时CPU中当前EFLAGS的值也随之改变.使用sleep_on()进入睡眠状态的进程需要用wake_up()明确地唤醒.
static inline void wait_on_buffer(struct buffer_head * bh)
{
    ee8f:	83 ec 0c             	sub    $0xc,%esp
	cli();							// 关中断
    ee92:	fa                   	cli    
	while (bh->b_lock)				// 如果已被上锁则进程进入睡眠,等待其解锁.
    ee93:	eb 13                	jmp    eea8 <wait_on_buffer+0x19>
		sleep_on(&bh->b_wait);
    ee95:	8b 44 24 10          	mov    0x10(%esp),%eax
    ee99:	83 c0 10             	add    $0x10,%eax
    ee9c:	83 ec 0c             	sub    $0xc,%esp
    ee9f:	50                   	push   %eax
    eea0:	e8 8f 82 ff ff       	call   7134 <sleep_on>
    eea5:	83 c4 10             	add    $0x10,%esp
	while (bh->b_lock)				// 如果已被上锁则进程进入睡眠,等待其解锁.
    eea8:	8b 44 24 10          	mov    0x10(%esp),%eax
    eeac:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    eeb0:	84 c0                	test   %al,%al
    eeb2:	75 e1                	jne    ee95 <wait_on_buffer+0x6>
	sti();							// 开中断.
    eeb4:	fb                   	sti    
}
    eeb5:	90                   	nop
    eeb6:	83 c4 0c             	add    $0xc,%esp
    eeb9:	c3                   	ret    

0000eeba <sys_sync>:

// 设备数据同步。
// 同步设备和内存高速缓冲中数据。其中，sync_inodes()定义在inode.c。
int sys_sync(void)
{
    eeba:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	struct buffer_head * bh;

	// 首先调用i节点同步函数，把内在i节点表中所有修改过的i节点写入高速缓冲中。然后扫描所有高速缓冲区，对已被修改的缓冲块
	// 产生写盘请求，将缓冲中数据写入盘中，做到高速缓冲中的数据与设备中的同步。
	sync_inodes();							/* write out inodes into buffers */
    eebd:	e8 db f2 ff ff       	call   e19d <sync_inodes>
	bh = start_buffer;      				// bh指向缓冲开始处。
    eec2:	a1 64 f3 02 00       	mov    0x2f364,%eax
    eec7:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    eecb:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    eed2:	00 
    eed3:	eb 36                	jmp    ef0b <sys_sync+0x51>
		wait_on_buffer(bh);             	// 等待缓冲区解锁（如果已上锁的话）。
    eed5:	83 ec 0c             	sub    $0xc,%esp
    eed8:	ff 74 24 14          	pushl  0x14(%esp)
    eedc:	e8 ae ff ff ff       	call   ee8f <wait_on_buffer>
    eee1:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dirt)
    eee4:	8b 44 24 08          	mov    0x8(%esp),%eax
    eee8:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    eeec:	84 c0                	test   %al,%al
    eeee:	74 11                	je     ef01 <sys_sync+0x47>
			ll_rw_block(WRITE, bh);  		// 产生写设备块请求。
    eef0:	83 ec 08             	sub    $0x8,%esp
    eef3:	ff 74 24 10          	pushl  0x10(%esp)
    eef7:	6a 01                	push   $0x1
    eef9:	e8 32 7a 00 00       	call   16930 <ll_rw_block>
    eefe:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    ef01:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    ef06:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    ef0b:	a1 c0 20 03 00       	mov    0x320c0,%eax
    ef10:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    ef14:	7c bf                	jl     eed5 <sys_sync+0x1b>
	}
	return 0;
    ef16:	b8 00 00 00 00       	mov    $0x0,%eax
}
    ef1b:	83 c4 1c             	add    $0x1c,%esp
    ef1e:	c3                   	ret    

0000ef1f <sync_dev>:

// 对指定设备进行高速缓冲数据与设备上数据的同步操作。
// 该函数首先搜索高速缓冲区中所有缓冲块。对于指定设备dev的缓冲块，若其数据已被修改过就写入盘中（同步操作）。然后
// 把内存中i节点数据写入高速缓冲中。之后再指定设备dev执行一次与上述相同的写盘操作。
int sync_dev(int dev)
{
    ef1f:	83 ec 1c             	sub    $0x1c,%esp

	// 首先对参数指定的设备执行数据同步操作，让设备上的数据与高速缓冲区中的数据同步。方法是扫描高速缓冲区中所有缓冲块，
	// 对指定设备dev的缓冲块，先检测其是否已被上锁，若已被锁就睡眠等待其解锁。然后再判断一次该缓冲块是否还是指定设备的
	// 缓冲块并且已修改过（b_dirt标志置位），若是就对其执行写盘操作。因为在我们睡眠期间该缓冲块有可能已被释放或者被挪
	// 作它用，所以在继续执行前需要再次判断一下该缓冲块是否还是指定设备的缓冲块。
	bh = start_buffer;                      		// bf指向缓冲区开始处。
    ef22:	a1 64 f3 02 00       	mov    0x2f364,%eax
    ef27:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    ef2b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    ef32:	00 
    ef33:	eb 5b                	jmp    ef90 <sync_dev+0x71>
		if (bh->b_dev != dev)           			// 不是设备dev的缓冲块则继续。
    ef35:	8b 44 24 08          	mov    0x8(%esp),%eax
    ef39:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    ef3d:	0f b7 c0             	movzwl %ax,%eax
    ef40:	39 44 24 20          	cmp    %eax,0x20(%esp)
    ef44:	75 3f                	jne    ef85 <sync_dev+0x66>
			continue;
		wait_on_buffer(bh);             			// 等待缓冲区解锁（如果已上锁的话）。
    ef46:	83 ec 0c             	sub    $0xc,%esp
    ef49:	ff 74 24 14          	pushl  0x14(%esp)
    ef4d:	e8 3d ff ff ff       	call   ee8f <wait_on_buffer>
    ef52:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dev == dev && bh->b_dirt)
    ef55:	8b 44 24 08          	mov    0x8(%esp),%eax
    ef59:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    ef5d:	0f b7 c0             	movzwl %ax,%eax
    ef60:	39 44 24 20          	cmp    %eax,0x20(%esp)
    ef64:	75 20                	jne    ef86 <sync_dev+0x67>
    ef66:	8b 44 24 08          	mov    0x8(%esp),%eax
    ef6a:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    ef6e:	84 c0                	test   %al,%al
    ef70:	74 14                	je     ef86 <sync_dev+0x67>
			ll_rw_block(WRITE, bh);
    ef72:	83 ec 08             	sub    $0x8,%esp
    ef75:	ff 74 24 10          	pushl  0x10(%esp)
    ef79:	6a 01                	push   $0x1
    ef7b:	e8 b0 79 00 00       	call   16930 <ll_rw_block>
    ef80:	83 c4 10             	add    $0x10,%esp
    ef83:	eb 01                	jmp    ef86 <sync_dev+0x67>
			continue;
    ef85:	90                   	nop
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    ef86:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    ef8b:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    ef90:	a1 c0 20 03 00       	mov    0x320c0,%eax
    ef95:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    ef99:	7c 9a                	jl     ef35 <sync_dev+0x16>
	}
	// 再将i节点数据写入高速缓冲。让i节点表inode_table中的inode与缓冲中的信息同步。
	sync_inodes();
    ef9b:	e8 fd f1 ff ff       	call   e19d <sync_inodes>
	// 然后在高速缓冲中的数据更新之后，再把它们与设备中的数据同步。这里采用两遍同步操作是为了提高内核执行效率。第一遍缓
	// 冲区同步操作可以让内核中许多“脏块”变干净，使得i节点的同步操作能够高效执行。本次缓冲区同步操作则把那些由于i节点
	// 同步操作而又变脏的缓冲块与设备中数据同步。
	bh = start_buffer;
    efa0:	a1 64 f3 02 00       	mov    0x2f364,%eax
    efa5:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    efa9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    efb0:	00 
    efb1:	eb 5b                	jmp    f00e <sync_dev+0xef>
		if (bh->b_dev != dev)
    efb3:	8b 44 24 08          	mov    0x8(%esp),%eax
    efb7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    efbb:	0f b7 c0             	movzwl %ax,%eax
    efbe:	39 44 24 20          	cmp    %eax,0x20(%esp)
    efc2:	75 3f                	jne    f003 <sync_dev+0xe4>
			continue;
		wait_on_buffer(bh);
    efc4:	83 ec 0c             	sub    $0xc,%esp
    efc7:	ff 74 24 14          	pushl  0x14(%esp)
    efcb:	e8 bf fe ff ff       	call   ee8f <wait_on_buffer>
    efd0:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dev == dev && bh->b_dirt)
    efd3:	8b 44 24 08          	mov    0x8(%esp),%eax
    efd7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    efdb:	0f b7 c0             	movzwl %ax,%eax
    efde:	39 44 24 20          	cmp    %eax,0x20(%esp)
    efe2:	75 20                	jne    f004 <sync_dev+0xe5>
    efe4:	8b 44 24 08          	mov    0x8(%esp),%eax
    efe8:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    efec:	84 c0                	test   %al,%al
    efee:	74 14                	je     f004 <sync_dev+0xe5>
			ll_rw_block(WRITE, bh);
    eff0:	83 ec 08             	sub    $0x8,%esp
    eff3:	ff 74 24 10          	pushl  0x10(%esp)
    eff7:	6a 01                	push   $0x1
    eff9:	e8 32 79 00 00       	call   16930 <ll_rw_block>
    effe:	83 c4 10             	add    $0x10,%esp
    f001:	eb 01                	jmp    f004 <sync_dev+0xe5>
			continue;
    f003:	90                   	nop
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f004:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f009:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    f00e:	a1 c0 20 03 00       	mov    0x320c0,%eax
    f013:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f017:	7c 9a                	jl     efb3 <sync_dev+0x94>
	}
	return 0;
    f019:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f01e:	83 c4 1c             	add    $0x1c,%esp
    f021:	c3                   	ret    

0000f022 <invalidate_buffers>:

// 使指定设备在高速缓冲区中的数据无效。
// 扫描高速缓冲中所有的缓冲块。对指定设备的缓冲块复位其有效（更新）标志和修改标志。
void invalidate_buffers(int dev)
{
    f022:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	struct buffer_head * bh;

	bh = start_buffer;
    f025:	a1 64 f3 02 00       	mov    0x2f364,%eax
    f02a:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f02e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    f035:	00 
    f036:	eb 55                	jmp    f08d <invalidate_buffers+0x6b>
		if (bh->b_dev != dev)           // 如果不是指定设备的缓冲块，则继续扫描下一块。
    f038:	8b 44 24 08          	mov    0x8(%esp),%eax
    f03c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f040:	0f b7 c0             	movzwl %ax,%eax
    f043:	39 44 24 20          	cmp    %eax,0x20(%esp)
    f047:	75 39                	jne    f082 <invalidate_buffers+0x60>
			continue;
		wait_on_buffer(bh);             // 等待该缓冲区解锁（如果已被上锁）。
    f049:	83 ec 0c             	sub    $0xc,%esp
    f04c:	ff 74 24 14          	pushl  0x14(%esp)
    f050:	e8 3a fe ff ff       	call   ee8f <wait_on_buffer>
    f055:	83 c4 10             	add    $0x10,%esp
		// 由于进程执行过睡眠等待，所以需要再判断一下缓冲区是否是指定设备的。
		if (bh->b_dev == dev)
    f058:	8b 44 24 08          	mov    0x8(%esp),%eax
    f05c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f060:	0f b7 c0             	movzwl %ax,%eax
    f063:	39 44 24 20          	cmp    %eax,0x20(%esp)
    f067:	75 1a                	jne    f083 <invalidate_buffers+0x61>
			bh->b_uptodate = bh->b_dirt = 0;
    f069:	8b 44 24 08          	mov    0x8(%esp),%eax
    f06d:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
    f071:	8b 44 24 08          	mov    0x8(%esp),%eax
    f075:	0f b6 50 0b          	movzbl 0xb(%eax),%edx
    f079:	8b 44 24 08          	mov    0x8(%esp),%eax
    f07d:	88 50 0a             	mov    %dl,0xa(%eax)
    f080:	eb 01                	jmp    f083 <invalidate_buffers+0x61>
			continue;
    f082:	90                   	nop
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f083:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f088:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    f08d:	a1 c0 20 03 00       	mov    0x320c0,%eax
    f092:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f096:	7c a0                	jl     f038 <invalidate_buffers+0x16>
	}
}
    f098:	90                   	nop
    f099:	83 c4 1c             	add    $0x1c,%esp
    f09c:	c3                   	ret    

0000f09d <check_disk_change>:
 * 注意！尽管目前该子程序仅用于软盘，以后任何可移动介质的块设备都有将使用该程序，mount/open操作不需要知道
 * 是软盘还是其他什么特殊介质。
 */
// 检查磁盘是否更换，如果已更换就使用对应调整缓冲区无效。
void check_disk_change(int dev)
{
    f09d:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 首先检测一下是不是软盘设备。因为现在仅支持软盘可移动介质。如果不是则退出。然后测试软盘是否已更换，如果没有
	// 则退出。floppy_chang()在blk_drv/floppy.c。
	if (MAJOR(dev) != 2)
    f0a0:	8b 44 24 20          	mov    0x20(%esp),%eax
    f0a4:	c1 e8 08             	shr    $0x8,%eax
    f0a7:	83 f8 02             	cmp    $0x2,%eax
    f0aa:	0f 85 83 00 00 00    	jne    f133 <check_disk_change+0x96>
		return;
	if (!floppy_change(dev & 0x03))
    f0b0:	8b 44 24 20          	mov    0x20(%esp),%eax
    f0b4:	83 e0 03             	and    $0x3,%eax
    f0b7:	83 ec 0c             	sub    $0xc,%esp
    f0ba:	50                   	push   %eax
    f0bb:	e8 5f 7a 00 00       	call   16b1f <floppy_change>
    f0c0:	83 c4 10             	add    $0x10,%esp
    f0c3:	85 c0                	test   %eax,%eax
    f0c5:	74 6f                	je     f136 <check_disk_change+0x99>
		return;
	// 软盘已更换，所以释放对应设备的i节点位图和逻辑位图所占的高速缓冲区；并使该设备的i节点和数据块信息所占据的高速缓冲
	// 块无效。
	for (i = 0 ; i < NR_SUPER ; i++)
    f0c7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    f0ce:	00 
    f0cf:	eb 3b                	jmp    f10c <check_disk_change+0x6f>
		if (super_block[i].s_dev == dev)
    f0d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f0d5:	6b c0 6c             	imul   $0x6c,%eax,%eax
    f0d8:	05 74 1c 04 00       	add    $0x41c74,%eax
    f0dd:	0f b7 00             	movzwl (%eax),%eax
    f0e0:	0f b7 c0             	movzwl %ax,%eax
    f0e3:	39 44 24 20          	cmp    %eax,0x20(%esp)
    f0e7:	75 1e                	jne    f107 <check_disk_change+0x6a>
			put_super(super_block[i].s_dev);
    f0e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f0ed:	6b c0 6c             	imul   $0x6c,%eax,%eax
    f0f0:	05 74 1c 04 00       	add    $0x41c74,%eax
    f0f5:	0f b7 00             	movzwl (%eax),%eax
    f0f8:	0f b7 c0             	movzwl %ax,%eax
    f0fb:	83 ec 0c             	sub    $0xc,%esp
    f0fe:	50                   	push   %eax
    f0ff:	e8 28 0a 00 00       	call   fb2c <put_super>
    f104:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < NR_SUPER ; i++)
    f107:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f10c:	83 7c 24 0c 07       	cmpl   $0x7,0xc(%esp)
    f111:	7e be                	jle    f0d1 <check_disk_change+0x34>
	invalidate_inodes(dev);         // 释放设备dev在内存i节点表中的所有i节点
    f113:	83 ec 0c             	sub    $0xc,%esp
    f116:	ff 74 24 2c          	pushl  0x2c(%esp)
    f11a:	e8 04 f0 ff ff       	call   e123 <invalidate_inodes>
    f11f:	83 c4 10             	add    $0x10,%esp
	invalidate_buffers(dev);        //
    f122:	83 ec 0c             	sub    $0xc,%esp
    f125:	ff 74 24 2c          	pushl  0x2c(%esp)
    f129:	e8 f4 fe ff ff       	call   f022 <invalidate_buffers>
    f12e:	83 c4 10             	add    $0x10,%esp
    f131:	eb 04                	jmp    f137 <check_disk_change+0x9a>
		return;
    f133:	90                   	nop
    f134:	eb 01                	jmp    f137 <check_disk_change+0x9a>
		return;
    f136:	90                   	nop
}
    f137:	83 c4 1c             	add    $0x1c,%esp
    f13a:	c3                   	ret    

0000f13b <remove_from_queues>:
#define hash(dev, block) hash_table[_hashfn(dev, block)]

// 从hash队列和空闲缓冲队列中移走缓冲块.
// hash队列是双向链表结构,空闲缓冲块队列是双向循环链表结构.
static inline void remove_from_queues(struct buffer_head * bh)
{
    f13b:	83 ec 0c             	sub    $0xc,%esp
	/* remove from hash-queue */
	/* 从hash队列中移除缓冲块 */
	if (bh->b_next)
    f13e:	8b 44 24 10          	mov    0x10(%esp),%eax
    f142:	8b 40 18             	mov    0x18(%eax),%eax
    f145:	85 c0                	test   %eax,%eax
    f147:	74 11                	je     f15a <remove_from_queues+0x1f>
		bh->b_next->b_prev = bh->b_prev;
    f149:	8b 44 24 10          	mov    0x10(%esp),%eax
    f14d:	8b 40 18             	mov    0x18(%eax),%eax
    f150:	8b 54 24 10          	mov    0x10(%esp),%edx
    f154:	8b 52 14             	mov    0x14(%edx),%edx
    f157:	89 50 14             	mov    %edx,0x14(%eax)
	if (bh->b_prev)
    f15a:	8b 44 24 10          	mov    0x10(%esp),%eax
    f15e:	8b 40 14             	mov    0x14(%eax),%eax
    f161:	85 c0                	test   %eax,%eax
    f163:	74 11                	je     f176 <remove_from_queues+0x3b>
		bh->b_prev->b_next = bh->b_next;
    f165:	8b 44 24 10          	mov    0x10(%esp),%eax
    f169:	8b 40 14             	mov    0x14(%eax),%eax
    f16c:	8b 54 24 10          	mov    0x10(%esp),%edx
    f170:	8b 52 18             	mov    0x18(%edx),%edx
    f173:	89 50 18             	mov    %edx,0x18(%eax)
	// 如果该缓冲我是该队列的头一个块,则让hash表的对应项指向本队列中的下一个缓冲区.
	if (hash(bh->b_dev, bh->b_blocknr) == bh)
    f176:	8b 44 24 10          	mov    0x10(%esp),%eax
    f17a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f17e:	0f b7 d0             	movzwl %ax,%edx
    f181:	8b 44 24 10          	mov    0x10(%esp),%eax
    f185:	8b 40 04             	mov    0x4(%eax),%eax
    f188:	89 d1                	mov    %edx,%ecx
    f18a:	31 c1                	xor    %eax,%ecx
    f18c:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f191:	89 c8                	mov    %ecx,%eax
    f193:	f7 e2                	mul    %edx
    f195:	89 d0                	mov    %edx,%eax
    f197:	c1 e8 08             	shr    $0x8,%eax
    f19a:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f1a0:	29 c1                	sub    %eax,%ecx
    f1a2:	89 c8                	mov    %ecx,%eax
    f1a4:	8b 04 85 40 17 04 00 	mov    0x41740(,%eax,4),%eax
    f1ab:	39 44 24 10          	cmp    %eax,0x10(%esp)
    f1af:	75 3c                	jne    f1ed <remove_from_queues+0xb2>
		hash(bh->b_dev, bh->b_blocknr) = bh->b_next;
    f1b1:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1b5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f1b9:	0f b7 d0             	movzwl %ax,%edx
    f1bc:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1c0:	8b 40 04             	mov    0x4(%eax),%eax
    f1c3:	89 d1                	mov    %edx,%ecx
    f1c5:	31 c1                	xor    %eax,%ecx
    f1c7:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f1cc:	89 c8                	mov    %ecx,%eax
    f1ce:	f7 e2                	mul    %edx
    f1d0:	89 d0                	mov    %edx,%eax
    f1d2:	c1 e8 08             	shr    $0x8,%eax
    f1d5:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f1db:	29 c1                	sub    %eax,%ecx
    f1dd:	89 c8                	mov    %ecx,%eax
    f1df:	8b 54 24 10          	mov    0x10(%esp),%edx
    f1e3:	8b 52 18             	mov    0x18(%edx),%edx
    f1e6:	89 14 85 40 17 04 00 	mov    %edx,0x41740(,%eax,4)
	/* remove from free list */
	/* 从空闲缓冲块表中移除缓冲块 */
	if (!(bh->b_prev_free) || !(bh->b_next_free))
    f1ed:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1f1:	8b 40 1c             	mov    0x1c(%eax),%eax
    f1f4:	85 c0                	test   %eax,%eax
    f1f6:	74 0b                	je     f203 <remove_from_queues+0xc8>
    f1f8:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1fc:	8b 40 20             	mov    0x20(%eax),%eax
    f1ff:	85 c0                	test   %eax,%eax
    f201:	75 10                	jne    f213 <remove_from_queues+0xd8>
		panic("Free block list corrupted");
    f203:	83 ec 0c             	sub    $0xc,%esp
    f206:	68 dd 3f 02 00       	push   $0x23fdd
    f20b:	e8 f2 99 ff ff       	call   8c02 <panic>
    f210:	83 c4 10             	add    $0x10,%esp
	bh->b_prev_free->b_next_free = bh->b_next_free;
    f213:	8b 44 24 10          	mov    0x10(%esp),%eax
    f217:	8b 40 1c             	mov    0x1c(%eax),%eax
    f21a:	8b 54 24 10          	mov    0x10(%esp),%edx
    f21e:	8b 52 20             	mov    0x20(%edx),%edx
    f221:	89 50 20             	mov    %edx,0x20(%eax)
	bh->b_next_free->b_prev_free = bh->b_prev_free;
    f224:	8b 44 24 10          	mov    0x10(%esp),%eax
    f228:	8b 40 20             	mov    0x20(%eax),%eax
    f22b:	8b 54 24 10          	mov    0x10(%esp),%edx
    f22f:	8b 52 1c             	mov    0x1c(%edx),%edx
    f232:	89 50 1c             	mov    %edx,0x1c(%eax)
	// 如果空闲链表头指向本缓冲区,则让其指向下一缓冲区.
	if (free_list == bh)
    f235:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f23a:	39 44 24 10          	cmp    %eax,0x10(%esp)
    f23e:	75 0c                	jne    f24c <remove_from_queues+0x111>
		free_list = bh->b_next_free;
    f240:	8b 44 24 10          	mov    0x10(%esp),%eax
    f244:	8b 40 20             	mov    0x20(%eax),%eax
    f247:	a3 c4 20 03 00       	mov    %eax,0x320c4
}
    f24c:	90                   	nop
    f24d:	83 c4 0c             	add    $0xc,%esp
    f250:	c3                   	ret    

0000f251 <insert_into_queues>:
// 将缓冲块插入空闲链表尾部,同时放入hash队列中.
static inline void insert_into_queues(struct buffer_head * bh)
{
	/* put at end of free list */
	/* 放在空闲链表末尾处 */
	bh->b_next_free = free_list;
    f251:	8b 15 c4 20 03 00    	mov    0x320c4,%edx
    f257:	8b 44 24 04          	mov    0x4(%esp),%eax
    f25b:	89 50 20             	mov    %edx,0x20(%eax)
	bh->b_prev_free = free_list->b_prev_free;
    f25e:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f263:	8b 50 1c             	mov    0x1c(%eax),%edx
    f266:	8b 44 24 04          	mov    0x4(%esp),%eax
    f26a:	89 50 1c             	mov    %edx,0x1c(%eax)
	free_list->b_prev_free->b_next_free = bh;
    f26d:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f272:	8b 40 1c             	mov    0x1c(%eax),%eax
    f275:	8b 54 24 04          	mov    0x4(%esp),%edx
    f279:	89 50 20             	mov    %edx,0x20(%eax)
	free_list->b_prev_free = bh;
    f27c:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f281:	8b 54 24 04          	mov    0x4(%esp),%edx
    f285:	89 50 1c             	mov    %edx,0x1c(%eax)
	/* put the buffer in new hash-queue if it has a device */
	/* 如果该缓冲块对应一个设备,则将其插入新hash队列中 */
	bh->b_prev = NULL;
    f288:	8b 44 24 04          	mov    0x4(%esp),%eax
    f28c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	bh->b_next = NULL;
    f293:	8b 44 24 04          	mov    0x4(%esp),%eax
    f297:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	if (!bh->b_dev)
    f29e:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2a2:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f2a6:	66 85 c0             	test   %ax,%ax
    f2a9:	0f 84 8f 00 00 00    	je     f33e <insert_into_queues+0xed>
		return;
	bh->b_next = hash(bh->b_dev, bh->b_blocknr);
    f2af:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2b3:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f2b7:	0f b7 d0             	movzwl %ax,%edx
    f2ba:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2be:	8b 40 04             	mov    0x4(%eax),%eax
    f2c1:	89 d1                	mov    %edx,%ecx
    f2c3:	31 c1                	xor    %eax,%ecx
    f2c5:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f2ca:	89 c8                	mov    %ecx,%eax
    f2cc:	f7 e2                	mul    %edx
    f2ce:	89 d0                	mov    %edx,%eax
    f2d0:	c1 e8 08             	shr    $0x8,%eax
    f2d3:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f2d9:	29 c1                	sub    %eax,%ecx
    f2db:	89 c8                	mov    %ecx,%eax
    f2dd:	8b 14 85 40 17 04 00 	mov    0x41740(,%eax,4),%edx
    f2e4:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2e8:	89 50 18             	mov    %edx,0x18(%eax)
	hash(bh->b_dev, bh->b_blocknr) = bh;
    f2eb:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2ef:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f2f3:	0f b7 d0             	movzwl %ax,%edx
    f2f6:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2fa:	8b 40 04             	mov    0x4(%eax),%eax
    f2fd:	89 d1                	mov    %edx,%ecx
    f2ff:	31 c1                	xor    %eax,%ecx
    f301:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f306:	89 c8                	mov    %ecx,%eax
    f308:	f7 e2                	mul    %edx
    f30a:	89 d0                	mov    %edx,%eax
    f30c:	c1 e8 08             	shr    $0x8,%eax
    f30f:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f315:	29 c1                	sub    %eax,%ecx
    f317:	89 c8                	mov    %ecx,%eax
    f319:	8b 54 24 04          	mov    0x4(%esp),%edx
    f31d:	89 14 85 40 17 04 00 	mov    %edx,0x41740(,%eax,4)
	// 请注意当hash表某项第1次插入项时,hash()计算值肯定为NULL,因此此时hash(bh->b_dev,bh->b_blocknr)得到的bh->b_next肯定是NULL,
	// 所以bh->b_next->b_prev = bh应该在bh->b_next不为NULL时才能给b_pev赋bh值.即bh->b_next->b_prev = bh前应该增加判断"
	// if(bh->b_next)".该错误到0.96版后才被纠正.
	if(bh->b_next)
    f324:	8b 44 24 04          	mov    0x4(%esp),%eax
    f328:	8b 40 18             	mov    0x18(%eax),%eax
    f32b:	85 c0                	test   %eax,%eax
    f32d:	74 10                	je     f33f <insert_into_queues+0xee>
		bh->b_next->b_prev = bh;			// 此句前应添加"if(bh->b_next)"判断.
    f32f:	8b 44 24 04          	mov    0x4(%esp),%eax
    f333:	8b 40 18             	mov    0x18(%eax),%eax
    f336:	8b 54 24 04          	mov    0x4(%esp),%edx
    f33a:	89 50 14             	mov    %edx,0x14(%eax)
    f33d:	c3                   	ret    
		return;
    f33e:	90                   	nop
}
    f33f:	c3                   	ret    

0000f340 <find_buffer>:

// 利用hash表在高速缓冲中寻找给定设备和指定块号的缓冲区块.
// 如果找到则返回缓冲区块的指针,否则返回NULL.
static struct buffer_head * find_buffer(int dev, int block)
{
    f340:	83 ec 10             	sub    $0x10,%esp
	struct buffer_head * tmp;

	// 搜索hash表,寻找指定设备与和块号的缓冲块.
	for (tmp = hash(dev, block) ; tmp != NULL ; tmp = tmp->b_next)
    f343:	8b 44 24 14          	mov    0x14(%esp),%eax
    f347:	33 44 24 18          	xor    0x18(%esp),%eax
    f34b:	89 c1                	mov    %eax,%ecx
    f34d:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f352:	89 c8                	mov    %ecx,%eax
    f354:	f7 e2                	mul    %edx
    f356:	89 d0                	mov    %edx,%eax
    f358:	c1 e8 08             	shr    $0x8,%eax
    f35b:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f361:	29 c1                	sub    %eax,%ecx
    f363:	89 c8                	mov    %ecx,%eax
    f365:	8b 04 85 40 17 04 00 	mov    0x41740(,%eax,4),%eax
    f36c:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f370:	eb 31                	jmp    f3a3 <find_buffer+0x63>
		if (tmp->b_dev == dev && tmp->b_blocknr == block)
    f372:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f376:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f37a:	0f b7 c0             	movzwl %ax,%eax
    f37d:	39 44 24 14          	cmp    %eax,0x14(%esp)
    f381:	75 15                	jne    f398 <find_buffer+0x58>
    f383:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f387:	8b 50 04             	mov    0x4(%eax),%edx
    f38a:	8b 44 24 18          	mov    0x18(%esp),%eax
    f38e:	39 c2                	cmp    %eax,%edx
    f390:	75 06                	jne    f398 <find_buffer+0x58>
			return tmp;
    f392:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f396:	eb 17                	jmp    f3af <find_buffer+0x6f>
	for (tmp = hash(dev, block) ; tmp != NULL ; tmp = tmp->b_next)
    f398:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f39c:	8b 40 18             	mov    0x18(%eax),%eax
    f39f:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f3a3:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    f3a8:	75 c8                	jne    f372 <find_buffer+0x32>
	return NULL;
    f3aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f3af:	83 c4 10             	add    $0x10,%esp
    f3b2:	c3                   	ret    

0000f3b3 <get_hash_table>:
 * 代码为什么会是这样子的?我听见你问......原因是竞争条件.由于我们没有对缓冲块上锁(除非我们正在读取它们的数据),那么当我们(进程)睡眠时缓冲块可能
 * 发生一些问题(例如一个读错误将导致该缓冲块出错).目前这种情况实际上是不会发生的,但处理的代码已经准备好了.
 */
// 利用hash表在高速缓冲区中寻找指定的缓冲块.若找到则对该缓冲块上锁并返回块头指针.
struct buffer_head * get_hash_table(int dev, int block)
{
    f3b3:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	for (;;) {
		// 在高速缓冲中寻找给定设备和指定块的缓冲区块,如果没有找到则返回NULL,退出.
		if (!(bh = find_buffer(dev, block)))
    f3b6:	ff 74 24 24          	pushl  0x24(%esp)
    f3ba:	ff 74 24 24          	pushl  0x24(%esp)
    f3be:	e8 7d ff ff ff       	call   f340 <find_buffer>
    f3c3:	83 c4 08             	add    $0x8,%esp
    f3c6:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f3ca:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    f3cf:	75 07                	jne    f3d8 <get_hash_table+0x25>
			return NULL;
    f3d1:	b8 00 00 00 00       	mov    $0x0,%eax
    f3d6:	eb 5b                	jmp    f433 <get_hash_table+0x80>
		// 对该缓冲块增加引用计数,并等待该缓冲块解锁(如果已被上锁).由于经过了睡眠状态,因此有必要再验证该缓冲块的正确性,并返回缓冲块头指针.
		bh->b_count++;
    f3d8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f3dc:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f3e0:	8d 50 01             	lea    0x1(%eax),%edx
    f3e3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f3e7:	88 50 0c             	mov    %dl,0xc(%eax)
		wait_on_buffer(bh);
    f3ea:	83 ec 0c             	sub    $0xc,%esp
    f3ed:	ff 74 24 18          	pushl  0x18(%esp)
    f3f1:	e8 99 fa ff ff       	call   ee8f <wait_on_buffer>
    f3f6:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dev == dev && bh->b_blocknr == block)
    f3f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f3fd:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f401:	0f b7 c0             	movzwl %ax,%eax
    f404:	39 44 24 20          	cmp    %eax,0x20(%esp)
    f408:	75 15                	jne    f41f <get_hash_table+0x6c>
    f40a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f40e:	8b 50 04             	mov    0x4(%eax),%edx
    f411:	8b 44 24 24          	mov    0x24(%esp),%eax
    f415:	39 c2                	cmp    %eax,%edx
    f417:	75 06                	jne    f41f <get_hash_table+0x6c>
			return bh;
    f419:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f41d:	eb 14                	jmp    f433 <get_hash_table+0x80>
		// 如果在睡眠时该缓冲块所属的设备号或块号发生的改变,则撤消对它的用计数.重新寻找.
		bh->b_count--;
    f41f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f423:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f427:	8d 50 ff             	lea    -0x1(%eax),%edx
    f42a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f42e:	88 50 0c             	mov    %dl,0xc(%eax)
		if (!(bh = find_buffer(dev, block)))
    f431:	eb 83                	jmp    f3b6 <get_hash_table+0x3>
	}
}
    f433:	83 c4 1c             	add    $0x1c,%esp
    f436:	c3                   	ret    

0000f437 <getblk>:
#define BADNESS(bh) (((bh)->b_dirt << 1) + (bh)->b_lock)
// 取高速缓冲中指定的缓冲块.
// 检查指定(设备号和块号)的缓冲区是否已经在高速缓冲中.如果指定块已经在高速缓冲中,则返回对应缓冲区头指针退出;如果不在,就需要在高速中
// 中设置一个对应设备号和块号的新项.返回相应缓冲区头指针.
struct buffer_head * getblk(int dev, int block)
{
    f437:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * tmp, * bh;

repeat:
	if (bh = get_hash_table(dev, block))
    f43a:	83 ec 08             	sub    $0x8,%esp
    f43d:	ff 74 24 2c          	pushl  0x2c(%esp)
    f441:	ff 74 24 2c          	pushl  0x2c(%esp)
    f445:	e8 69 ff ff ff       	call   f3b3 <get_hash_table>
    f44a:	83 c4 10             	add    $0x10,%esp
    f44d:	89 44 24 08          	mov    %eax,0x8(%esp)
    f451:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f456:	74 09                	je     f461 <getblk+0x2a>
		return bh;
    f458:	8b 44 24 08          	mov    0x8(%esp),%eax
    f45c:	e9 8b 01 00 00       	jmp    f5ec <getblk+0x1b5>
	// 扫描空闲数据块链表,寻找空闲缓冲区.
	// 首先让tmp指向空闲链表的第一个空闲缓冲区头.
	tmp = free_list;
    f461:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f466:	89 44 24 0c          	mov    %eax,0xc(%esp)
	do {
		// 如果该缓冲区正在被使用(引用计数不等于0),则继续扫描下一项.对于b_count=0的块,即高速缓冲中当前没有引用的块不一定就是干净的(b_dirt=0)
		// 或没有锁定的(b_lock=0).因此,我们还是需要继续下面的判断和选择.例如当一个任务改写过一块内容后就释放了,于是该块b_count=0,但b_lock不等于0;
		// 当一个任务执行breada()预读几个块时,只要ll_rw_block()命令发出后,它就会递减b_count;但此时实际上硬盘访问操作可能还在进行,因此此时
		// b_lock=1,但b_count=0.
		if (tmp->b_count)
    f46a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f46e:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f472:	84 c0                	test   %al,%al
    f474:	75 6a                	jne    f4e0 <getblk+0xa9>
			continue;
		// 如果缓冲头指针bh为空,或者tmp所指缓冲头的标志(修改,锁定)权重小于bh头标志的权重,则让bh指向tmp缓冲块头.如果该tmp缓冲块头表明缓冲
		// 块既没有修改也没有锁定标志置位,则说明已为指定设备上的块取得对应的高速缓冲块,则退出循环.否则我们就继续执行本循环,看看能否找到一个BADNESS()
		// 最小的缓冲块.
		if (!bh || BADNESS(tmp) < BADNESS(bh)) {
    f476:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f47b:	74 3a                	je     f4b7 <getblk+0x80>
    f47d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f481:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f485:	0f b6 c0             	movzbl %al,%eax
    f488:	8d 14 00             	lea    (%eax,%eax,1),%edx
    f48b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f48f:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    f493:	0f b6 c0             	movzbl %al,%eax
    f496:	01 c2                	add    %eax,%edx
    f498:	8b 44 24 08          	mov    0x8(%esp),%eax
    f49c:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f4a0:	0f b6 c0             	movzbl %al,%eax
    f4a3:	8d 0c 00             	lea    (%eax,%eax,1),%ecx
    f4a6:	8b 44 24 08          	mov    0x8(%esp),%eax
    f4aa:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    f4ae:	0f b6 c0             	movzbl %al,%eax
    f4b1:	01 c8                	add    %ecx,%eax
    f4b3:	39 c2                	cmp    %eax,%edx
    f4b5:	7d 2a                	jge    f4e1 <getblk+0xaa>
			bh = tmp;
    f4b7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4bb:	89 44 24 08          	mov    %eax,0x8(%esp)
			if (!BADNESS(tmp))
    f4bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4c3:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f4c7:	0f b6 c0             	movzbl %al,%eax
    f4ca:	8d 14 00             	lea    (%eax,%eax,1),%edx
    f4cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4d1:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    f4d5:	0f b6 c0             	movzbl %al,%eax
    f4d8:	01 d0                	add    %edx,%eax
    f4da:	85 c0                	test   %eax,%eax
    f4dc:	74 1f                	je     f4fd <getblk+0xc6>
    f4de:	eb 01                	jmp    f4e1 <getblk+0xaa>
			continue;
    f4e0:	90                   	nop
				break;
		}
	/* and repeat until we find something good */	/* 重复操作直到找到适合的缓冲块 */
	} while ((tmp = tmp->b_next_free) != free_list);
    f4e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4e5:	8b 40 20             	mov    0x20(%eax),%eax
    f4e8:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f4ec:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f4f1:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f4f5:	0f 85 6f ff ff ff    	jne    f46a <getblk+0x33>
    f4fb:	eb 01                	jmp    f4fe <getblk+0xc7>
				break;
    f4fd:	90                   	nop
	// 如果循环检查发现所有缓冲块都正在被使用(所有缓冲块的状况引用计数者>0)中,则睡眠等待有空闲缓冲区可用.当有空闲缓冲块可用时本各会被明确地唤醒.然后
	// 我们就跳转到函数开始处重新查找空闲缓冲块.
	if (!bh) {
    f4fe:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f503:	75 15                	jne    f51a <getblk+0xe3>
		sleep_on(&buffer_wait);
    f505:	83 ec 0c             	sub    $0xc,%esp
    f508:	68 c8 20 03 00       	push   $0x320c8
    f50d:	e8 22 7c ff ff       	call   7134 <sleep_on>
    f512:	83 c4 10             	add    $0x10,%esp
		goto repeat;
    f515:	e9 20 ff ff ff       	jmp    f43a <getblk+0x3>
	}
	// 执行到这里,说明我们已经找到了一个比较适合的空闲缓冲块了.于是先等待该缓冲区解锁(如果已被上锁的话).如果在我们睡眠阶段该缓冲区又被其他任务使用的话,
	// 只好重复上述寻找过程.
	wait_on_buffer(bh);
    f51a:	83 ec 0c             	sub    $0xc,%esp
    f51d:	ff 74 24 14          	pushl  0x14(%esp)
    f521:	e8 69 f9 ff ff       	call   ee8f <wait_on_buffer>
    f526:	83 c4 10             	add    $0x10,%esp
	if (bh->b_count)	// 又被占用??
    f529:	8b 44 24 08          	mov    0x8(%esp),%eax
    f52d:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f531:	84 c0                	test   %al,%al
    f533:	74 3c                	je     f571 <getblk+0x13a>
		goto repeat;
    f535:	e9 00 ff ff ff       	jmp    f43a <getblk+0x3>
	// 如果该缓冲区已被修改,则将数据写盘,并再次等待缓冲区解锁.同样地,若该缓冲区又被其他任务使用的话,只好再重复上述寻找过程.
	while (bh->b_dirt) {
		sync_dev(bh->b_dev);
    f53a:	8b 44 24 08          	mov    0x8(%esp),%eax
    f53e:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f542:	0f b7 c0             	movzwl %ax,%eax
    f545:	83 ec 0c             	sub    $0xc,%esp
    f548:	50                   	push   %eax
    f549:	e8 d1 f9 ff ff       	call   ef1f <sync_dev>
    f54e:	83 c4 10             	add    $0x10,%esp
		wait_on_buffer(bh);
    f551:	83 ec 0c             	sub    $0xc,%esp
    f554:	ff 74 24 14          	pushl  0x14(%esp)
    f558:	e8 32 f9 ff ff       	call   ee8f <wait_on_buffer>
    f55d:	83 c4 10             	add    $0x10,%esp
		if (bh->b_count)	// 又被占用??
    f560:	8b 44 24 08          	mov    0x8(%esp),%eax
    f564:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f568:	84 c0                	test   %al,%al
    f56a:	74 05                	je     f571 <getblk+0x13a>
			goto repeat;
    f56c:	e9 c9 fe ff ff       	jmp    f43a <getblk+0x3>
	while (bh->b_dirt) {
    f571:	8b 44 24 08          	mov    0x8(%esp),%eax
    f575:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f579:	84 c0                	test   %al,%al
    f57b:	75 bd                	jne    f53a <getblk+0x103>
	}
	/* NOTE!! While we slept waiting for this block, somebody else might */
	/* already have added "this" block to the cache. check it */
	/* 注意!!当进程为了等待该缓冲块而睡眠时,其他进程可能已经将该缓冲块加入进高速缓冲中,所以我们也要对此进行检查. */
	// 在高速缓冲hash表中检查指定设备和块的缓冲块是否乘我们睡眠之即已经被加入进去.如果是的话就再次重复上述寻找过程.
	if (find_buffer(dev, block))
    f57d:	83 ec 08             	sub    $0x8,%esp
    f580:	ff 74 24 2c          	pushl  0x2c(%esp)
    f584:	ff 74 24 2c          	pushl  0x2c(%esp)
    f588:	e8 b3 fd ff ff       	call   f340 <find_buffer>
    f58d:	83 c4 10             	add    $0x10,%esp
    f590:	85 c0                	test   %eax,%eax
    f592:	74 05                	je     f599 <getblk+0x162>
		goto repeat;
    f594:	e9 a1 fe ff ff       	jmp    f43a <getblk+0x3>
	/* OK, FINALLY we know that this buffer is the only one of it's kind, */
	/* and that it's unused (b_count=0), unlocked (b_lock=0), and clean */
	/* OK,最终我们知道该缓冲块是指定参数的唯一一块,而且目前还没有被占用 */
	/* (b_count=0),也未被上锁(b_lock=0),并且是干净的(未被修改的) */
	// 于是让我们占用此缓冲块.置引用计数为1,复位修改标志和有效(更新)标志.
	bh->b_count = 1;
    f599:	8b 44 24 08          	mov    0x8(%esp),%eax
    f59d:	c6 40 0c 01          	movb   $0x1,0xc(%eax)
	bh->b_dirt = 0;
    f5a1:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5a5:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
	bh->b_uptodate = 0;
    f5a9:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5ad:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
	// 从hash队列和空闲块链表中移出该缓冲头,让该缓冲区用于指定设备和其上的指定块.然后根据此新设备号和块号重新插入空闲链表和hash队列新位置处.并最终返回缓冲
	// 头指针.
	remove_from_queues(bh);
    f5b1:	83 ec 0c             	sub    $0xc,%esp
    f5b4:	ff 74 24 14          	pushl  0x14(%esp)
    f5b8:	e8 7e fb ff ff       	call   f13b <remove_from_queues>
    f5bd:	83 c4 10             	add    $0x10,%esp
	bh->b_dev = dev;
    f5c0:	8b 44 24 20          	mov    0x20(%esp),%eax
    f5c4:	89 c2                	mov    %eax,%edx
    f5c6:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5ca:	66 89 50 08          	mov    %dx,0x8(%eax)
	bh->b_blocknr = block;
    f5ce:	8b 54 24 24          	mov    0x24(%esp),%edx
    f5d2:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5d6:	89 50 04             	mov    %edx,0x4(%eax)
	insert_into_queues(bh);
    f5d9:	83 ec 0c             	sub    $0xc,%esp
    f5dc:	ff 74 24 14          	pushl  0x14(%esp)
    f5e0:	e8 6c fc ff ff       	call   f251 <insert_into_queues>
    f5e5:	83 c4 10             	add    $0x10,%esp
	return bh;
    f5e8:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    f5ec:	83 c4 1c             	add    $0x1c,%esp
    f5ef:	c3                   	ret    

0000f5f0 <brelse>:

// 释放指定缓冲块.
// 等待该缓冲块解锁.然后引用计数递减1,并明确地唤醒等待空闲缓冲块的进程.
void brelse(struct buffer_head * buf)
{
    f5f0:	83 ec 0c             	sub    $0xc,%esp
	if (!buf)						// 如果缓冲头指针无效则返回.
    f5f3:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    f5f8:	74 47                	je     f641 <brelse+0x51>
		return;
	wait_on_buffer(buf);
    f5fa:	83 ec 0c             	sub    $0xc,%esp
    f5fd:	ff 74 24 1c          	pushl  0x1c(%esp)
    f601:	e8 89 f8 ff ff       	call   ee8f <wait_on_buffer>
    f606:	83 c4 10             	add    $0x10,%esp
	if (!(buf->b_count--))
    f609:	8b 44 24 10          	mov    0x10(%esp),%eax
    f60d:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f611:	8d 50 ff             	lea    -0x1(%eax),%edx
    f614:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    f618:	88 51 0c             	mov    %dl,0xc(%ecx)
    f61b:	84 c0                	test   %al,%al
    f61d:	75 10                	jne    f62f <brelse+0x3f>
		panic("Trying to free free buffer");
    f61f:	83 ec 0c             	sub    $0xc,%esp
    f622:	68 f7 3f 02 00       	push   $0x23ff7
    f627:	e8 d6 95 ff ff       	call   8c02 <panic>
    f62c:	83 c4 10             	add    $0x10,%esp
	wake_up(&buffer_wait);
    f62f:	83 ec 0c             	sub    $0xc,%esp
    f632:	68 c8 20 03 00       	push   $0x320c8
    f637:	e8 11 7b ff ff       	call   714d <wake_up>
    f63c:	83 c4 10             	add    $0x10,%esp
    f63f:	eb 01                	jmp    f642 <brelse+0x52>
		return;
    f641:	90                   	nop
}
    f642:	83 c4 0c             	add    $0xc,%esp
    f645:	c3                   	ret    

0000f646 <bread>:
 */
// 从设备上读取数据块.
// 该函数根据指定的设备号dev和数据块号block,首先在高速缓冲区中申请一块缓冲块.如果该缓冲块中经包含有有效的数据就直接返回该缓冲块指针,否则就从设备中
// 读取指定的数据块到该缓冲块中并返回缓冲块指针.
struct buffer_head * bread(int dev, int block)
{
    f646:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	// 从高速缓冲区中申请一块缓冲块.如果返回值是NULL,则表示内核出错,停机.否则我们判断其中是否已有可用数据.
	if (!(bh = getblk(dev, block)))
    f649:	83 ec 08             	sub    $0x8,%esp
    f64c:	ff 74 24 2c          	pushl  0x2c(%esp)
    f650:	ff 74 24 2c          	pushl  0x2c(%esp)
    f654:	e8 de fd ff ff       	call   f437 <getblk>
    f659:	83 c4 10             	add    $0x10,%esp
    f65c:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f660:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    f665:	75 10                	jne    f677 <bread+0x31>
		panic("bread: getblk returned NULL\n");
    f667:	83 ec 0c             	sub    $0xc,%esp
    f66a:	68 12 40 02 00       	push   $0x24012
    f66f:	e8 8e 95 ff ff       	call   8c02 <panic>
    f674:	83 c4 10             	add    $0x10,%esp
	// 如果该缓冲块中数据是有效的(已更新的)可以直接使用,则返回.
	if (bh->b_uptodate)
    f677:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f67b:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f67f:	84 c0                	test   %al,%al
    f681:	74 06                	je     f689 <bread+0x43>
		return bh;
    f683:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f687:	eb 46                	jmp    f6cf <bread+0x89>
	// 否则我们就调用底层块设备读写ll_rw_block()函数,产生读设备块请求.然后等待指定数据块被读入,并等待缓冲区解锁.在睡眠醒来之后,如果该缓冲区已更新,则返回
	// 缓冲区头指针,退出.否则表明读设备操作失败,于是释放该缓冲区,返回NULL,退出.
	ll_rw_block(READ, bh);
    f689:	83 ec 08             	sub    $0x8,%esp
    f68c:	ff 74 24 14          	pushl  0x14(%esp)
    f690:	6a 00                	push   $0x0
    f692:	e8 99 72 00 00       	call   16930 <ll_rw_block>
    f697:	83 c4 10             	add    $0x10,%esp
	wait_on_buffer(bh);
    f69a:	83 ec 0c             	sub    $0xc,%esp
    f69d:	ff 74 24 18          	pushl  0x18(%esp)
    f6a1:	e8 e9 f7 ff ff       	call   ee8f <wait_on_buffer>
    f6a6:	83 c4 10             	add    $0x10,%esp
	if (bh->b_uptodate)
    f6a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f6ad:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f6b1:	84 c0                	test   %al,%al
    f6b3:	74 06                	je     f6bb <bread+0x75>
		return bh;
    f6b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f6b9:	eb 14                	jmp    f6cf <bread+0x89>
	brelse(bh);
    f6bb:	83 ec 0c             	sub    $0xc,%esp
    f6be:	ff 74 24 18          	pushl  0x18(%esp)
    f6c2:	e8 29 ff ff ff       	call   f5f0 <brelse>
    f6c7:	83 c4 10             	add    $0x10,%esp
	return NULL;
    f6ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f6cf:	83 c4 1c             	add    $0x1c,%esp
    f6d2:	c3                   	ret    

0000f6d3 <bread_page>:
 */
// 读设备上一个页面(4个缓冲块)的内容到指定内存地址处.
// 参数address是保存页面数据的地址;dev是指定的设备号;b[4]是含有4个设备数据块号的数组.
// 该函数仅用于mm/memory.c文件的do_no_page()函数中.
void bread_page(unsigned long address, int dev, int b[4])
{
    f6d3:	57                   	push   %edi
    f6d4:	56                   	push   %esi
    f6d5:	53                   	push   %ebx
    f6d6:	83 ec 20             	sub    $0x20,%esp
	int i;

	// 该函数循环执行4次,根据放在数组b[]中的4个块号从设备dev中读取一页内容放到指定内存位置address处.对于参数b[i]给出的
	// 有效块号,函数首先从高速缓冲中取指定设备和块号的的缓冲块.如果缓冲块中数据无效(未更新)则产生读设备请求从设备上读取相
	// 应数据块.对于b[i]无效的块号则不用处理它了.因此本函数其实可以根据指定的b[]中的块号随意读取1-4个数据块.
	for (i = 0 ; i < 4 ; i++)
    f6d9:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    f6e0:	00 
    f6e1:	e9 89 00 00 00       	jmp    f76f <bread_page+0x9c>
		if (b[i]) {
    f6e6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f6ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    f6f1:	8b 44 24 38          	mov    0x38(%esp),%eax
    f6f5:	01 d0                	add    %edx,%eax
    f6f7:	8b 00                	mov    (%eax),%eax
    f6f9:	85 c0                	test   %eax,%eax
    f6fb:	74 61                	je     f75e <bread_page+0x8b>
			// 先给该逻辑块号申请一个缓存块
			if (bh[i] = getblk(dev, b[i]))
    f6fd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f701:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    f708:	8b 44 24 38          	mov    0x38(%esp),%eax
    f70c:	01 d0                	add    %edx,%eax
    f70e:	8b 00                	mov    (%eax),%eax
    f710:	83 ec 08             	sub    $0x8,%esp
    f713:	50                   	push   %eax
    f714:	ff 74 24 40          	pushl  0x40(%esp)
    f718:	e8 1a fd ff ff       	call   f437 <getblk>
    f71d:	83 c4 10             	add    $0x10,%esp
    f720:	89 c2                	mov    %eax,%edx
    f722:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f726:	89 54 84 0c          	mov    %edx,0xc(%esp,%eax,4)
    f72a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f72e:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f732:	85 c0                	test   %eax,%eax
    f734:	74 34                	je     f76a <bread_page+0x97>
				// 如果该缓冲块没有更新,则从块设备中读取出来
				if (!bh[i]->b_uptodate)
    f736:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f73a:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f73e:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f742:	84 c0                	test   %al,%al
    f744:	75 24                	jne    f76a <bread_page+0x97>
					ll_rw_block(READ, bh[i]);
    f746:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f74a:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f74e:	83 ec 08             	sub    $0x8,%esp
    f751:	50                   	push   %eax
    f752:	6a 00                	push   $0x0
    f754:	e8 d7 71 00 00       	call   16930 <ll_rw_block>
    f759:	83 c4 10             	add    $0x10,%esp
    f75c:	eb 0c                	jmp    f76a <bread_page+0x97>
		} else
			bh[i] = NULL;
    f75e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f762:	c7 44 84 0c 00 00 00 	movl   $0x0,0xc(%esp,%eax,4)
    f769:	00 
	for (i = 0 ; i < 4 ; i++)
    f76a:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
    f76f:	83 7c 24 1c 03       	cmpl   $0x3,0x1c(%esp)
    f774:	0f 8e 6c ff ff ff    	jle    f6e6 <bread_page+0x13>
	// 随后将4个缓冲块上的内容顺序复制到指定地址处.在进行复制(使用)缓冲块之前我们先要睡眠等待缓冲块解锁(若被上锁的话).另外,
	// 因为可能睡眠过了,所以我们还需要在复制之前再检查一下缓冲块中的数据是否是有效的.复制完后我们还需要释放缓冲块.
	for (i = 0 ; i < 4 ; i++, address += BLOCK_SIZE)
    f77a:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    f781:	00 
    f782:	eb 73                	jmp    f7f7 <bread_page+0x124>
		if (bh[i]) {
    f784:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f788:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f78c:	85 c0                	test   %eax,%eax
    f78e:	74 5a                	je     f7ea <bread_page+0x117>
			wait_on_buffer(bh[i]);						// 等待缓冲块解锁(若被上锁的话).
    f790:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f794:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f798:	83 ec 0c             	sub    $0xc,%esp
    f79b:	50                   	push   %eax
    f79c:	e8 ee f6 ff ff       	call   ee8f <wait_on_buffer>
    f7a1:	83 c4 10             	add    $0x10,%esp
			if (bh[i]->b_uptodate)						// 若缓冲块中数据有效的话则复制.
    f7a4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7a8:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f7ac:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f7b0:	84 c0                	test   %al,%al
    f7b2:	74 22                	je     f7d6 <bread_page+0x103>
				COPYBLK((unsigned long) bh[i]->b_data, address);
    f7b4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7b8:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f7bc:	8b 00                	mov    (%eax),%eax
    f7be:	89 c3                	mov    %eax,%ebx
    f7c0:	ba 00 01 00 00       	mov    $0x100,%edx
    f7c5:	8b 44 24 30          	mov    0x30(%esp),%eax
    f7c9:	89 d1                	mov    %edx,%ecx
    f7cb:	89 de                	mov    %ebx,%esi
    f7cd:	89 c7                	mov    %eax,%edi
    f7cf:	fc                   	cld    
    f7d0:	57                   	push   %edi
    f7d1:	56                   	push   %esi
    f7d2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    f7d4:	5e                   	pop    %esi
    f7d5:	5f                   	pop    %edi
			brelse(bh[i]);								// 释放该缓冲区.
    f7d6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7da:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f7de:	83 ec 0c             	sub    $0xc,%esp
    f7e1:	50                   	push   %eax
    f7e2:	e8 09 fe ff ff       	call   f5f0 <brelse>
    f7e7:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < 4 ; i++, address += BLOCK_SIZE)
    f7ea:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
    f7ef:	81 44 24 30 00 04 00 	addl   $0x400,0x30(%esp)
    f7f6:	00 
    f7f7:	83 7c 24 1c 03       	cmpl   $0x3,0x1c(%esp)
    f7fc:	7e 86                	jle    f784 <bread_page+0xb1>
		}
}
    f7fe:	90                   	nop
    f7ff:	83 c4 20             	add    $0x20,%esp
    f802:	5b                   	pop    %ebx
    f803:	5e                   	pop    %esi
    f804:	5f                   	pop    %edi
    f805:	c3                   	ret    

0000f806 <breada>:
 * OK,breada可以象bread一样使用,但会另外预读一些块.该函数参数列表需要使用一个负数来表明参数列表的结束.
 */
// 从指定设备读取指定的一些块.
// 函数参数个数可变,是一系列指定的块号.成功时返回第1块的缓冲块头指针,否则返回NULL.
struct buffer_head * breada(int dev, int first, ...)
{
    f806:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;
	struct buffer_head * bh, *tmp;

	// 首先取可变参数表中第1个参数(块号).接着从调整缓冲区中取指定设备和块号的缓冲块.如果该缓冲块数据无效(更新标志未置位),则
	// 发出读设备数据块请求.
	va_start(args, first);
    f809:	8d 44 24 24          	lea    0x24(%esp),%eax
    f80d:	83 c0 04             	add    $0x4,%eax
    f810:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!(bh = getblk(dev, first)))
    f814:	8b 44 24 24          	mov    0x24(%esp),%eax
    f818:	83 ec 08             	sub    $0x8,%esp
    f81b:	50                   	push   %eax
    f81c:	ff 74 24 2c          	pushl  0x2c(%esp)
    f820:	e8 12 fc ff ff       	call   f437 <getblk>
    f825:	83 c4 10             	add    $0x10,%esp
    f828:	89 44 24 08          	mov    %eax,0x8(%esp)
    f82c:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f831:	75 10                	jne    f843 <breada+0x3d>
		panic("bread: getblk returned NULL\n");
    f833:	83 ec 0c             	sub    $0xc,%esp
    f836:	68 12 40 02 00       	push   $0x24012
    f83b:	e8 c2 93 ff ff       	call   8c02 <panic>
    f840:	83 c4 10             	add    $0x10,%esp
	if (!bh->b_uptodate)
    f843:	8b 44 24 08          	mov    0x8(%esp),%eax
    f847:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f84b:	84 c0                	test   %al,%al
    f84d:	75 61                	jne    f8b0 <breada+0xaa>
		ll_rw_block(READ, bh);
    f84f:	83 ec 08             	sub    $0x8,%esp
    f852:	ff 74 24 10          	pushl  0x10(%esp)
    f856:	6a 00                	push   $0x0
    f858:	e8 d3 70 00 00       	call   16930 <ll_rw_block>
    f85d:	83 c4 10             	add    $0x10,%esp
	// 然后顺序取可变参数表中其他预读块号,并作与上面同样处理,但不引用.注意,336行上有一个bug.其中的bh应该是tmp.这个bug直到在0.96
	// 版的内核代码中才被纠正过来.另外,因为这里是预读随后的数据块,只需读进调整缓冲区但并不马上就使用,所以第337行语句需要将其引用计数
	// 递减释放掉该块(因为getblk()函数会增加缓冲块引用计数值).
	while ((first = va_arg(args, int)) >= 0) {
    f860:	eb 4e                	jmp    f8b0 <breada+0xaa>
		tmp = getblk(dev, first);
    f862:	8b 44 24 24          	mov    0x24(%esp),%eax
    f866:	83 ec 08             	sub    $0x8,%esp
    f869:	50                   	push   %eax
    f86a:	ff 74 24 2c          	pushl  0x2c(%esp)
    f86e:	e8 c4 fb ff ff       	call   f437 <getblk>
    f873:	83 c4 10             	add    $0x10,%esp
    f876:	89 44 24 04          	mov    %eax,0x4(%esp)
		if (tmp) {
    f87a:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    f87f:	74 2f                	je     f8b0 <breada+0xaa>
			if (!tmp->b_uptodate)
    f881:	8b 44 24 04          	mov    0x4(%esp),%eax
    f885:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f889:	84 c0                	test   %al,%al
    f88b:	75 11                	jne    f89e <breada+0x98>
				ll_rw_block(READA, tmp);
    f88d:	83 ec 08             	sub    $0x8,%esp
    f890:	ff 74 24 0c          	pushl  0xc(%esp)
    f894:	6a 02                	push   $0x2
    f896:	e8 95 70 00 00       	call   16930 <ll_rw_block>
    f89b:	83 c4 10             	add    $0x10,%esp
			tmp->b_count--;					// 暂时释放掉该预读块.
    f89e:	8b 44 24 04          	mov    0x4(%esp),%eax
    f8a2:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f8a6:	8d 50 ff             	lea    -0x1(%eax),%edx
    f8a9:	8b 44 24 04          	mov    0x4(%esp),%eax
    f8ad:	88 50 0c             	mov    %dl,0xc(%eax)
	while ((first = va_arg(args, int)) >= 0) {
    f8b0:	83 44 24 0c 04       	addl   $0x4,0xc(%esp)
    f8b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f8b9:	8b 40 fc             	mov    -0x4(%eax),%eax
    f8bc:	89 44 24 24          	mov    %eax,0x24(%esp)
    f8c0:	8b 44 24 24          	mov    0x24(%esp),%eax
    f8c4:	85 c0                	test   %eax,%eax
    f8c6:	79 9a                	jns    f862 <breada+0x5c>
		}
	}
	// 此时可变参数表中所有参数处理完毕.于是等待第1个缓冲区解锁(如果已被上锁).在等待退出之后如果缓冲区中数据仍然有效,则返回缓冲区头指针
	// 退出.否则释放该缓冲区返回NULL,退出.
	va_end(args);
	wait_on_buffer(bh);
    f8c8:	83 ec 0c             	sub    $0xc,%esp
    f8cb:	ff 74 24 14          	pushl  0x14(%esp)
    f8cf:	e8 bb f5 ff ff       	call   ee8f <wait_on_buffer>
    f8d4:	83 c4 10             	add    $0x10,%esp
	if (bh->b_uptodate)
    f8d7:	8b 44 24 08          	mov    0x8(%esp),%eax
    f8db:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f8df:	84 c0                	test   %al,%al
    f8e1:	74 06                	je     f8e9 <breada+0xe3>
		return bh;
    f8e3:	8b 44 24 08          	mov    0x8(%esp),%eax
    f8e7:	eb 14                	jmp    f8fd <breada+0xf7>
	brelse(bh);
    f8e9:	83 ec 0c             	sub    $0xc,%esp
    f8ec:	ff 74 24 14          	pushl  0x14(%esp)
    f8f0:	e8 fb fc ff ff       	call   f5f0 <brelse>
    f8f5:	83 c4 10             	add    $0x10,%esp
	return (NULL);
    f8f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f8fd:	83 c4 1c             	add    $0x1c,%esp
    f900:	c3                   	ret    

0000f901 <buffer_init>:

// 缓冲区初始化函数
// 参数buffer_end是缓冲区内存末端.对于具有16M内存的系统,缓冲区末端被设置为4MB.对于有8MB内存的系统,缓冲区末端被设置2MB.该函数从缓冲区开始位置
// start_buffer处和缓冲区末端buffer_end处分别同时设置(初始化)缓冲块头结构和对应的数据块.直到缓冲区中所有内存被分配完毕.
void buffer_init(long buffer_end)
{
    f901:	83 ec 10             	sub    $0x10,%esp
	struct buffer_head * h = start_buffer;
    f904:	a1 64 f3 02 00       	mov    0x2f364,%eax
    f909:	89 44 24 0c          	mov    %eax,0xc(%esp)
	void * b;
	int i;

	// 首先根据参数提供的缓冲区高端位置确定实际缓冲区高端位置b.如果缓冲区高端等于1MB,则因为从640KB-1MB被显示内存和BIOS占用,所以实际可用缓冲区内存
	// 高端位置应该是640KB.否则缓冲区内存高端一定大于1MB.
	if (buffer_end == 1 << 20)
    f90d:	81 7c 24 14 00 00 10 	cmpl   $0x100000,0x14(%esp)
    f914:	00 
    f915:	75 0d                	jne    f924 <buffer_init+0x23>
		b = (void *) (640 * 1024);
    f917:	c7 44 24 08 00 00 0a 	movl   $0xa0000,0x8(%esp)
    f91e:	00 
    f91f:	e9 a2 00 00 00       	jmp    f9c6 <buffer_init+0xc5>
	else
		b = (void *) buffer_end;
    f924:	8b 44 24 14          	mov    0x14(%esp),%eax
    f928:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 这段代码用于初始化缓冲区,建立空闲缓冲块循环链表,并获取系统中缓冲块数目.操作的过程是从缓冲区高端开始划分1KB大小的缓冲块,与此同时在缓冲区低端建立
	// 描述该缓冲块的结构buffer_head,并将这些buffer_head组成双向链表.
	// h是指向缓冲头结构的指针,而h+1是指向内存地址连续的下一个缓冲头地址,也可以说是指向h缓冲有头的末端外.为了保证有足够长度的内存来存储一个缓冲头结构,
	// 需要b所指向的内存块地址>=h缓冲头的末端,即要求>=h+1.
	while ( (b -= BLOCK_SIZE) >= ((void *) (h + 1)) ) {
    f92c:	e9 95 00 00 00       	jmp    f9c6 <buffer_init+0xc5>
		h->b_dev = 0;								// 使用该缓冲块的设备号.
    f931:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f935:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		h->b_dirt = 0;								// 脏标志,即缓冲块修改标志.
    f93b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f93f:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
		h->b_count = 0;								// 缓冲块引用计数.
    f943:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f947:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
		h->b_lock = 0;								// 缓冲块锁定标志.
    f94b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f94f:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
		h->b_uptodate = 0;							// 缓冲块更新标志(或称数据有效标志).
    f953:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f957:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
		h->b_wait = NULL;							// 指向等待该缓冲块解锁的进程.
    f95b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f95f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
		h->b_next = NULL;							// 指向具有相同hash值的下一个缓冲头.
    f966:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f96a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
		h->b_prev = NULL;							// 指向具有相同hash值的前一个缓冲头.
    f971:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f975:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
		h->b_data = (char *) b;						// 指向对应缓冲块数据块(1024字节).
    f97c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f980:	8b 54 24 08          	mov    0x8(%esp),%edx
    f984:	89 10                	mov    %edx,(%eax)
		h->b_prev_free = h - 1;						// 指向链表中前一项.
    f986:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f98a:	8d 50 dc             	lea    -0x24(%eax),%edx
    f98d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f991:	89 50 1c             	mov    %edx,0x1c(%eax)
		h->b_next_free = h + 1;						// 指向链表中下一项.
    f994:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f998:	8d 50 24             	lea    0x24(%eax),%edx
    f99b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f99f:	89 50 20             	mov    %edx,0x20(%eax)
		h++;										// h指向下一新缓冲头位置.
    f9a2:	83 44 24 0c 24       	addl   $0x24,0xc(%esp)
		NR_BUFFERS++;								// 缓冲区块数累加.
    f9a7:	a1 c0 20 03 00       	mov    0x320c0,%eax
    f9ac:	83 c0 01             	add    $0x1,%eax
    f9af:	a3 c0 20 03 00       	mov    %eax,0x320c0
		if (b == (void *) 0x100000)					// 若b递减到等于1MB,则跳过384KB
    f9b4:	81 7c 24 08 00 00 10 	cmpl   $0x100000,0x8(%esp)
    f9bb:	00 
    f9bc:	75 08                	jne    f9c6 <buffer_init+0xc5>
			b = (void *) 0xA0000;					// 让b指向地址0xA0000(640KB)处.
    f9be:	c7 44 24 08 00 00 0a 	movl   $0xa0000,0x8(%esp)
    f9c5:	00 
	while ( (b -= BLOCK_SIZE) >= ((void *) (h + 1)) ) {
    f9c6:	81 6c 24 08 00 04 00 	subl   $0x400,0x8(%esp)
    f9cd:	00 
    f9ce:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9d2:	83 c0 24             	add    $0x24,%eax
    f9d5:	39 44 24 08          	cmp    %eax,0x8(%esp)
    f9d9:	0f 83 52 ff ff ff    	jae    f931 <buffer_init+0x30>
	}
	h--;											// 让h指向最后一个有效缓冲块头.
    f9df:	83 6c 24 0c 24       	subl   $0x24,0xc(%esp)
	free_list = start_buffer;						// 让空闲链表头指向头一个缓冲块.
    f9e4:	a1 64 f3 02 00       	mov    0x2f364,%eax
    f9e9:	a3 c4 20 03 00       	mov    %eax,0x320c4
	free_list->b_prev_free = h;     				// 链表头的b_prev_free指向前一项（即最后一项）。
    f9ee:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f9f3:	8b 54 24 0c          	mov    0xc(%esp),%edx
    f9f7:	89 50 1c             	mov    %edx,0x1c(%eax)
	h->b_next_free = free_list;     				// h的下一项指针指向第一项，形成一个环链。
    f9fa:	8b 15 c4 20 03 00    	mov    0x320c4,%edx
    fa00:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa04:	89 50 20             	mov    %edx,0x20(%eax)
	// 最后初始化hash表(哈希表、散列表),置表中所有指针为NULL。
	for (i = 0; i < NR_HASH; i++)
    fa07:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    fa0e:	00 
    fa0f:	eb 14                	jmp    fa25 <buffer_init+0x124>
		hash_table[i] = NULL;
    fa11:	8b 44 24 04          	mov    0x4(%esp),%eax
    fa15:	c7 04 85 40 17 04 00 	movl   $0x0,0x41740(,%eax,4)
    fa1c:	00 00 00 00 
	for (i = 0; i < NR_HASH; i++)
    fa20:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
    fa25:	81 7c 24 04 32 01 00 	cmpl   $0x132,0x4(%esp)
    fa2c:	00 
    fa2d:	7e e2                	jle    fa11 <buffer_init+0x110>
}
    fa2f:	90                   	nop
    fa30:	83 c4 10             	add    $0x10,%esp
    fa33:	c3                   	ret    

0000fa34 <lock_super>:
//　以下３个函数(lock_super(),free_super()和wait_on_super())的作用与inode.c文件中头３个函数的作用相同,只是这里操作的对象
//　换成了超级块.
//　锁定超级块.
//　如果超级块已被锁定,则将当前任务置为不可中断的等待状态,并添加到该超级块等待队列s_wait中.直到该超级块解锁并明确地唤醒本任务.然后对其上锁.
static void lock_super(struct super_block * sb)
{
    fa34:	83 ec 0c             	sub    $0xc,%esp
	cli();													//　关中断
    fa37:	fa                   	cli    
	while (sb->s_lock)										//　如果该超级块已经上锁,则睡眠等待.
    fa38:	eb 13                	jmp    fa4d <lock_super+0x19>
		sleep_on(&(sb->s_wait));
    fa3a:	8b 44 24 10          	mov    0x10(%esp),%eax
    fa3e:	83 c0 64             	add    $0x64,%eax
    fa41:	83 ec 0c             	sub    $0xc,%esp
    fa44:	50                   	push   %eax
    fa45:	e8 ea 76 ff ff       	call   7134 <sleep_on>
    fa4a:	83 c4 10             	add    $0x10,%esp
	while (sb->s_lock)										//　如果该超级块已经上锁,则睡眠等待.
    fa4d:	8b 44 24 10          	mov    0x10(%esp),%eax
    fa51:	0f b6 40 68          	movzbl 0x68(%eax),%eax
    fa55:	84 c0                	test   %al,%al
    fa57:	75 e1                	jne    fa3a <lock_super+0x6>
	sb->s_lock = 1;											//　给该超级块加锁(置锁定标志)
    fa59:	8b 44 24 10          	mov    0x10(%esp),%eax
    fa5d:	c6 40 68 01          	movb   $0x1,0x68(%eax)
	sti();													//　开中断.
    fa61:	fb                   	sti    
}
    fa62:	90                   	nop
    fa63:	83 c4 0c             	add    $0xc,%esp
    fa66:	c3                   	ret    

0000fa67 <free_super>:

//　对指定超级块解锁
//　复位超级块的锁定标志,并明确地唤醒等待此超级块等待队列s_wait上的所有进程.
//　如果使用unlock_super这个名称则可能更妥帖.
static void free_super(struct super_block * sb)
{
    fa67:	83 ec 0c             	sub    $0xc,%esp
	cli();
    fa6a:	fa                   	cli    
	sb->s_lock = 0;											// 复位锁定标志.
    fa6b:	8b 44 24 10          	mov    0x10(%esp),%eax
    fa6f:	c6 40 68 00          	movb   $0x0,0x68(%eax)
	wake_up(&(sb->s_wait));									// 唤醒等待该超级块的进程.
    fa73:	8b 44 24 10          	mov    0x10(%esp),%eax
    fa77:	83 c0 64             	add    $0x64,%eax
    fa7a:	83 ec 0c             	sub    $0xc,%esp
    fa7d:	50                   	push   %eax
    fa7e:	e8 ca 76 ff ff       	call   714d <wake_up>
    fa83:	83 c4 10             	add    $0x10,%esp
	sti();													// wake_up()在kernel/sched.c
    fa86:	fb                   	sti    
}
    fa87:	90                   	nop
    fa88:	83 c4 0c             	add    $0xc,%esp
    fa8b:	c3                   	ret    

0000fa8c <wait_on_super>:

// 睡眠等待超级块解锁.
// 如果超级块已被锁定,则将当前任务置为不可中断的等待状态,并添加到该超级块的等待队列s_wait中.直到该超级块解锁并明确地唤醒本任务.
static void wait_on_super(struct super_block * sb)
{
    fa8c:	83 ec 0c             	sub    $0xc,%esp
	cli();
    fa8f:	fa                   	cli    
	while (sb->s_lock)										// 如果超级块已经上锁,则睡眠等待.
    fa90:	eb 13                	jmp    faa5 <wait_on_super+0x19>
		sleep_on(&(sb->s_wait));
    fa92:	8b 44 24 10          	mov    0x10(%esp),%eax
    fa96:	83 c0 64             	add    $0x64,%eax
    fa99:	83 ec 0c             	sub    $0xc,%esp
    fa9c:	50                   	push   %eax
    fa9d:	e8 92 76 ff ff       	call   7134 <sleep_on>
    faa2:	83 c4 10             	add    $0x10,%esp
	while (sb->s_lock)										// 如果超级块已经上锁,则睡眠等待.
    faa5:	8b 44 24 10          	mov    0x10(%esp),%eax
    faa9:	0f b6 40 68          	movzbl 0x68(%eax),%eax
    faad:	84 c0                	test   %al,%al
    faaf:	75 e1                	jne    fa92 <wait_on_super+0x6>
	sti();
    fab1:	fb                   	sti    
}
    fab2:	90                   	nop
    fab3:	83 c4 0c             	add    $0xc,%esp
    fab6:	c3                   	ret    

0000fab7 <get_super>:

// 取指定设备的超级块.
// 在超级块表(数组)中搜索指定设备dev的超级块结构信息.若找到则返回超级块的指针,否则返回空指针.
struct super_block * get_super(int dev)
{
    fab7:	83 ec 1c             	sub    $0x1c,%esp
	struct super_block * s;									// s是超级块数据结构指针.

	// 首先判断参数给出设备的有效性.若设备号为0则返回空指针.然后让s指向超级块数组起始处,开始搜索整个超级块数组,以寻找指定设备dev的超级块.
	// 第62行上的指针赋值语句"s = 0+super_block"等同于"s = super_block","s = &super_block[0]".
	if (!dev)
    faba:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    fabf:	75 07                	jne    fac8 <get_super+0x11>
		return NULL;
    fac1:	b8 00 00 00 00       	mov    $0x0,%eax
    fac6:	eb 60                	jmp    fb28 <get_super+0x71>
	s = 0 + super_block;
    fac8:	c7 44 24 0c 20 1c 04 	movl   $0x41c20,0xc(%esp)
    facf:	00 
	while (s < NR_SUPER + super_block)
    fad0:	eb 46                	jmp    fb18 <get_super+0x61>
		// 如果当前搜索项是指定设备的超级块,即该超级块的设备号字段值与函数参数指定的相同,则先等待该超级块解锁(若已被其他进程上锁的话).在等待期间,
		// 该超级块项有可能被其他设备使用,因此等待返回之后需再判断一次是否是指定设备的超级块,如果是则返回该超级块的指针.否则就重新对超级块数组再
		// 搜索一遍,因此此时s需重又指向超级块数组开始处.
		if (s->s_dev == dev) {
    fad2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fad6:	0f b7 40 54          	movzwl 0x54(%eax),%eax
    fada:	0f b7 c0             	movzwl %ax,%eax
    fadd:	39 44 24 20          	cmp    %eax,0x20(%esp)
    fae1:	75 30                	jne    fb13 <get_super+0x5c>
			wait_on_super(s);
    fae3:	83 ec 0c             	sub    $0xc,%esp
    fae6:	ff 74 24 18          	pushl  0x18(%esp)
    faea:	e8 9d ff ff ff       	call   fa8c <wait_on_super>
    faef:	83 c4 10             	add    $0x10,%esp
			if (s->s_dev == dev)
    faf2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    faf6:	0f b7 40 54          	movzwl 0x54(%eax),%eax
    fafa:	0f b7 c0             	movzwl %ax,%eax
    fafd:	39 44 24 20          	cmp    %eax,0x20(%esp)
    fb01:	75 06                	jne    fb09 <get_super+0x52>
				return s;
    fb03:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fb07:	eb 1f                	jmp    fb28 <get_super+0x71>
			s = 0 + super_block;
    fb09:	c7 44 24 0c 20 1c 04 	movl   $0x41c20,0xc(%esp)
    fb10:	00 
    fb11:	eb 05                	jmp    fb18 <get_super+0x61>
		// 如果当前搜索项不是,则检查下一项.如果没有找到指定的超级块,则返回空指针.
		} else
			s++;
    fb13:	83 44 24 0c 6c       	addl   $0x6c,0xc(%esp)
	while (s < NR_SUPER + super_block)
    fb18:	b8 80 1f 04 00       	mov    $0x41f80,%eax
    fb1d:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    fb21:	72 af                	jb     fad2 <get_super+0x1b>
	return NULL;
    fb23:	b8 00 00 00 00       	mov    $0x0,%eax
}
    fb28:	83 c4 1c             	add    $0x1c,%esp
    fb2b:	c3                   	ret    

0000fb2c <put_super>:

// 释放（放回）指定设备的超级块。
// 释放设备所使用的超级块数组项（置s_dev = 0），并释放该设备i节点位图和逻辑块位图所占用的高速缓冲块。如果超级块对应的
// 文件系统是根文件系统，或者其某个i节点上已经安装了其他的文件系统，则不能释放该超级块。
void put_super(int dev)
{
    fb2c:	83 ec 1c             	sub    $0x1c,%esp

	// 首先判断参数的有效性和合法性。如果指定设备是根文件系统设备，则显示警告信息“根系统盘改变了，准备生死决战吧”，并返回。
	// 然后在超级块表中寻找指定设备号的文件系统超级块。如果找不到指定设备超级块，则返回。另外，如果该超级块指明该文件系统
	// 所安装到的i节点还没有被处理过，则显示警告信息并返回。在文件系统卸载（umount）操作中，s_imount会先被置成NULL以后
	// 才会调用本函数。
	if (dev == ROOT_DEV) {
    fb2f:	a1 cc 20 03 00       	mov    0x320cc,%eax
    fb34:	39 44 24 20          	cmp    %eax,0x20(%esp)
    fb38:	75 15                	jne    fb4f <put_super+0x23>
		printk("root diskette changed: prepare for armageddon\n\r");
    fb3a:	83 ec 0c             	sub    $0xc,%esp
    fb3d:	68 30 40 02 00       	push   $0x24030
    fb42:	e8 fa 90 ff ff       	call   8c41 <printk>
    fb47:	83 c4 10             	add    $0x10,%esp
		return;
    fb4a:	e9 cc 00 00 00       	jmp    fc1b <put_super+0xef>
	}
	if (!(sb = get_super(dev)))
    fb4f:	83 ec 0c             	sub    $0xc,%esp
    fb52:	ff 74 24 2c          	pushl  0x2c(%esp)
    fb56:	e8 5c ff ff ff       	call   fab7 <get_super>
    fb5b:	83 c4 10             	add    $0x10,%esp
    fb5e:	89 44 24 08          	mov    %eax,0x8(%esp)
    fb62:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    fb67:	0f 84 ad 00 00 00    	je     fc1a <put_super+0xee>
		return;
	if (sb->s_imount) {
    fb6d:	8b 44 24 08          	mov    0x8(%esp),%eax
    fb71:	8b 40 5c             	mov    0x5c(%eax),%eax
    fb74:	85 c0                	test   %eax,%eax
    fb76:	74 15                	je     fb8d <put_super+0x61>
		printk("Mounted disk changed - tssk, tssk\n\r");
    fb78:	83 ec 0c             	sub    $0xc,%esp
    fb7b:	68 60 40 02 00       	push   $0x24060
    fb80:	e8 bc 90 ff ff       	call   8c41 <printk>
    fb85:	83 c4 10             	add    $0x10,%esp
		return;
    fb88:	e9 8e 00 00 00       	jmp    fc1b <put_super+0xef>
	}
	// 然后在找到指定设备的超级块之后，我们先锁定该超级块，再置该超级块对应的设备号字段s_dev为0，也即释放该设备上的文件系统
	// 超级块。然后释放该超级块占用的其他内核资源，即释放该设备上文件系统i节点位图和逻辑位图在缓冲区中所占用的缓冲块。下面
	// 常数符号I_MAP_SLOTS和Z_MAP_SLOTS均等于8，用于分别指明i节点位图和逻辑块位图占用的磁盘逻辑块数。注意，若这些缓冲块
	// 内容被修改过，则需要作同步操作才能把缓冲块中的数据写入设备中。函数最后对该超级块，并返回。
	lock_super(sb);
    fb8d:	83 ec 0c             	sub    $0xc,%esp
    fb90:	ff 74 24 14          	pushl  0x14(%esp)
    fb94:	e8 9b fe ff ff       	call   fa34 <lock_super>
    fb99:	83 c4 10             	add    $0x10,%esp
	sb->s_dev = 0;                          		// 置超级块空闲。
    fb9c:	8b 44 24 08          	mov    0x8(%esp),%eax
    fba0:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
	for(i = 0; i < I_MAP_SLOTS; i++)
    fba6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    fbad:	00 
    fbae:	eb 20                	jmp    fbd0 <put_super+0xa4>
		brelse(sb->s_imap[i]);
    fbb0:	8b 44 24 08          	mov    0x8(%esp),%eax
    fbb4:	8b 54 24 0c          	mov    0xc(%esp),%edx
    fbb8:	83 c2 04             	add    $0x4,%edx
    fbbb:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fbbf:	83 ec 0c             	sub    $0xc,%esp
    fbc2:	50                   	push   %eax
    fbc3:	e8 28 fa ff ff       	call   f5f0 <brelse>
    fbc8:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < I_MAP_SLOTS; i++)
    fbcb:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    fbd0:	83 7c 24 0c 07       	cmpl   $0x7,0xc(%esp)
    fbd5:	7e d9                	jle    fbb0 <put_super+0x84>
	for(i = 0; i < Z_MAP_SLOTS; i++)
    fbd7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    fbde:	00 
    fbdf:	eb 20                	jmp    fc01 <put_super+0xd5>
		brelse(sb->s_zmap[i]);
    fbe1:	8b 44 24 08          	mov    0x8(%esp),%eax
    fbe5:	8b 54 24 0c          	mov    0xc(%esp),%edx
    fbe9:	83 c2 0c             	add    $0xc,%edx
    fbec:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fbf0:	83 ec 0c             	sub    $0xc,%esp
    fbf3:	50                   	push   %eax
    fbf4:	e8 f7 f9 ff ff       	call   f5f0 <brelse>
    fbf9:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < Z_MAP_SLOTS; i++)
    fbfc:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    fc01:	83 7c 24 0c 07       	cmpl   $0x7,0xc(%esp)
    fc06:	7e d9                	jle    fbe1 <put_super+0xb5>
	free_super(sb);
    fc08:	83 ec 0c             	sub    $0xc,%esp
    fc0b:	ff 74 24 14          	pushl  0x14(%esp)
    fc0f:	e8 53 fe ff ff       	call   fa67 <free_super>
    fc14:	83 c4 10             	add    $0x10,%esp
	return;
    fc17:	90                   	nop
    fc18:	eb 01                	jmp    fc1b <put_super+0xef>
		return;
    fc1a:	90                   	nop
}
    fc1b:	83 c4 1c             	add    $0x1c,%esp
    fc1e:	c3                   	ret    

0000fc1f <read_super>:

// 读取指定设备的超级块.
// 如果指定设备dev上的文件系统超级块已经在超级块表中,则直接返回该超级块项的指针.否则就从设备dev上读取超级块到缓冲块中,并复制到超级块表中.并
// 返回超级块指针.
static struct super_block * read_super(int dev)
{
    fc1f:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	int i, block;

	// 首先判断参数的有效性.如果没有指明设备,则返回空指针.然后检查该设备是否可更换过盘片(也即是否是软盘设备).如果更换过盘,则高速缓冲区有关该设备的所有
	// 缓冲块均失效,需要进行失效处理,即释放原来加载的文件系统.
	if (!dev)
    fc22:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    fc27:	75 0a                	jne    fc33 <read_super+0x14>
		return NULL;
    fc29:	b8 00 00 00 00       	mov    $0x0,%eax
    fc2e:	e9 5a 03 00 00       	jmp    ff8d <read_super+0x36e>
	check_disk_change(dev);
    fc33:	83 ec 0c             	sub    $0xc,%esp
    fc36:	ff 74 24 2c          	pushl  0x2c(%esp)
    fc3a:	e8 5e f4 ff ff       	call   f09d <check_disk_change>
    fc3f:	83 c4 10             	add    $0x10,%esp
	// 如果设备的超级块已经在超级块表中,则直接返回该超级块的指针.否则,首先在超级块数组中找出一个空项(也即字段s_dev=0的项).如果数组已经占满则返回空指针.
	if (s = get_super(dev))
    fc42:	83 ec 0c             	sub    $0xc,%esp
    fc45:	ff 74 24 2c          	pushl  0x2c(%esp)
    fc49:	e8 69 fe ff ff       	call   fab7 <get_super>
    fc4e:	83 c4 10             	add    $0x10,%esp
    fc51:	89 44 24 0c          	mov    %eax,0xc(%esp)
    fc55:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    fc5a:	74 09                	je     fc65 <read_super+0x46>
		return s;
    fc5c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fc60:	e9 28 03 00 00       	jmp    ff8d <read_super+0x36e>
	for (s = 0 + super_block ;; s++) {
    fc65:	c7 44 24 0c 20 1c 04 	movl   $0x41c20,0xc(%esp)
    fc6c:	00 
		if (s >= NR_SUPER + super_block)
    fc6d:	b8 80 1f 04 00       	mov    $0x41f80,%eax
    fc72:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    fc76:	72 0a                	jb     fc82 <read_super+0x63>
			return NULL;
    fc78:	b8 00 00 00 00       	mov    $0x0,%eax
    fc7d:	e9 0b 03 00 00       	jmp    ff8d <read_super+0x36e>
		if (!s->s_dev)
    fc82:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fc86:	0f b7 40 54          	movzwl 0x54(%eax),%eax
    fc8a:	66 85 c0             	test   %ax,%ax
    fc8d:	74 07                	je     fc96 <read_super+0x77>
	for (s = 0 + super_block ;; s++) {
    fc8f:	83 44 24 0c 6c       	addl   $0x6c,0xc(%esp)
		if (s >= NR_SUPER + super_block)
    fc94:	eb d7                	jmp    fc6d <read_super+0x4e>
			break;
    fc96:	90                   	nop
	}
	// 在超级块数组中找到空项之后,就将该超级块项用于指定设备dev上的文件系统.于是对该超级块结构中的内存字段进行部分初始化处理.
	s->s_dev = dev;										// 用于dev设备上的文件系统.
    fc97:	8b 44 24 20          	mov    0x20(%esp),%eax
    fc9b:	89 c2                	mov    %eax,%edx
    fc9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fca1:	66 89 50 54          	mov    %dx,0x54(%eax)
	s->s_isup = NULL;
    fca5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fca9:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
	s->s_imount = NULL;
    fcb0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fcb4:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%eax)
	s->s_time = 0;
    fcbb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fcbf:	c7 40 60 00 00 00 00 	movl   $0x0,0x60(%eax)
	s->s_rd_only = 0;
    fcc6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fcca:	c6 40 69 00          	movb   $0x0,0x69(%eax)
	s->s_dirt = 0;
    fcce:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fcd2:	c6 40 6a 00          	movb   $0x0,0x6a(%eax)
	//　然后锁定该超级块,并从设备上读取超级块信息到bh指向的缓冲块中.超级块位于块设备的第２个逻辑块(１号块)中,(第１个是引导盘块).如果读超级块操作失败,则释放
	//　上面选定的超级块数组中的项(即置s_dev=0),并解锁该项,返回空指针退出.否则就将设备上读取的超级块信息从缓冲块数据区复制到超级块数组相应项结构中.并释放存放
	//　读取信息的高速缓冲块.
	lock_super(s);
    fcd6:	83 ec 0c             	sub    $0xc,%esp
    fcd9:	ff 74 24 18          	pushl  0x18(%esp)
    fcdd:	e8 52 fd ff ff       	call   fa34 <lock_super>
    fce2:	83 c4 10             	add    $0x10,%esp
	if (!(bh = bread(dev, 1))) {
    fce5:	83 ec 08             	sub    $0x8,%esp
    fce8:	6a 01                	push   $0x1
    fcea:	ff 74 24 2c          	pushl  0x2c(%esp)
    fcee:	e8 53 f9 ff ff       	call   f646 <bread>
    fcf3:	83 c4 10             	add    $0x10,%esp
    fcf6:	89 04 24             	mov    %eax,(%esp)
    fcf9:	83 3c 24 00          	cmpl   $0x0,(%esp)
    fcfd:	75 23                	jne    fd22 <read_super+0x103>
		s->s_dev = 0;
    fcff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd03:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		free_super(s);
    fd09:	83 ec 0c             	sub    $0xc,%esp
    fd0c:	ff 74 24 18          	pushl  0x18(%esp)
    fd10:	e8 52 fd ff ff       	call   fa67 <free_super>
    fd15:	83 c4 10             	add    $0x10,%esp
		return NULL;
    fd18:	b8 00 00 00 00       	mov    $0x0,%eax
    fd1d:	e9 6b 02 00 00       	jmp    ff8d <read_super+0x36e>
	}
	*((struct d_super_block *) s) =
		*((struct d_super_block *) bh->b_data);
    fd22:	8b 04 24             	mov    (%esp),%eax
    fd25:	8b 10                	mov    (%eax),%edx
	*((struct d_super_block *) s) =
    fd27:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd2b:	8b 0a                	mov    (%edx),%ecx
    fd2d:	89 08                	mov    %ecx,(%eax)
    fd2f:	8b 4a 04             	mov    0x4(%edx),%ecx
    fd32:	89 48 04             	mov    %ecx,0x4(%eax)
    fd35:	8b 4a 08             	mov    0x8(%edx),%ecx
    fd38:	89 48 08             	mov    %ecx,0x8(%eax)
    fd3b:	8b 4a 0c             	mov    0xc(%edx),%ecx
    fd3e:	89 48 0c             	mov    %ecx,0xc(%eax)
    fd41:	8b 52 10             	mov    0x10(%edx),%edx
    fd44:	89 50 10             	mov    %edx,0x10(%eax)
	brelse(bh);
    fd47:	83 ec 0c             	sub    $0xc,%esp
    fd4a:	ff 74 24 0c          	pushl  0xc(%esp)
    fd4e:	e8 9d f8 ff ff       	call   f5f0 <brelse>
    fd53:	83 c4 10             	add    $0x10,%esp
	// 现在我们从设备dev上得到了文件系统的超级块,于是开始检查这个超级块的有效性并从设备上读取i节点位图和逻辑块位图等信息.如果所读取的超级块的文件系统魔数字段不对,
	// 说明设备上不是正确的文件系统,因此向上面一样,释放上面选定的超级块数组中的项,并解锁该项,返回空指针退出.
	// 对于该版Linux内核,只支持MINIX文件系统1.0版本,其魔数是0x137f.
	if (s->s_magic != SUPER_MAGIC) {
    fd56:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd5a:	0f b7 40 10          	movzwl 0x10(%eax),%eax
    fd5e:	66 3d 7f 13          	cmp    $0x137f,%ax
    fd62:	74 23                	je     fd87 <read_super+0x168>
		s->s_dev = 0;
    fd64:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd68:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		free_super(s);
    fd6e:	83 ec 0c             	sub    $0xc,%esp
    fd71:	ff 74 24 18          	pushl  0x18(%esp)
    fd75:	e8 ed fc ff ff       	call   fa67 <free_super>
    fd7a:	83 c4 10             	add    $0x10,%esp
		return NULL;
    fd7d:	b8 00 00 00 00       	mov    $0x0,%eax
    fd82:	e9 06 02 00 00       	jmp    ff8d <read_super+0x36e>
	}
	// 下面开始读取设备上i节点位图和逻辑块位图数据.首先初始化内存超级块结构中位图空间.然后从设备上读取i节点位图和逻辑块位图信息,并存放在超级块对应字段中.i节点位图
	// 保存在设备上2号块开始的逻辑块中,共占用s_imap_blocks个块.逻辑块位图在i节点位图所在块的后续块中,共占用s_zmap_blocks个块.
	for (i = 0; i < I_MAP_SLOTS; i++)					// 初始化操作.
    fd87:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fd8e:	00 
    fd8f:	eb 18                	jmp    fda9 <read_super+0x18a>
		s->s_imap[i] = NULL;
    fd91:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd95:	8b 54 24 08          	mov    0x8(%esp),%edx
    fd99:	83 c2 04             	add    $0x4,%edx
    fd9c:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
    fda3:	00 
	for (i = 0; i < I_MAP_SLOTS; i++)					// 初始化操作.
    fda4:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fda9:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    fdae:	7e e1                	jle    fd91 <read_super+0x172>
	for (i = 0; i < Z_MAP_SLOTS; i++)
    fdb0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fdb7:	00 
    fdb8:	eb 18                	jmp    fdd2 <read_super+0x1b3>
		s->s_zmap[i] = NULL;
    fdba:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fdbe:	8b 54 24 08          	mov    0x8(%esp),%edx
    fdc2:	83 c2 0c             	add    $0xc,%edx
    fdc5:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
    fdcc:	00 
	for (i = 0; i < Z_MAP_SLOTS; i++)
    fdcd:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fdd2:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    fdd7:	7e e1                	jle    fdba <read_super+0x19b>
	block = 2;
    fdd9:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
    fde0:	00 
	// 从第二逻辑块号开始读取i节点位图
	for (i = 0 ; i < s->s_imap_blocks ; i++)			// 读取设备中i节点位图.
    fde1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fde8:	00 
    fde9:	eb 41                	jmp    fe2c <read_super+0x20d>
		if (s->s_imap[i] = bread(dev, block))
    fdeb:	83 ec 08             	sub    $0x8,%esp
    fdee:	ff 74 24 0c          	pushl  0xc(%esp)
    fdf2:	ff 74 24 2c          	pushl  0x2c(%esp)
    fdf6:	e8 4b f8 ff ff       	call   f646 <bread>
    fdfb:	83 c4 10             	add    $0x10,%esp
    fdfe:	89 c1                	mov    %eax,%ecx
    fe00:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe04:	8b 54 24 08          	mov    0x8(%esp),%edx
    fe08:	83 c2 04             	add    $0x4,%edx
    fe0b:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
    fe0f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe13:	8b 54 24 08          	mov    0x8(%esp),%edx
    fe17:	83 c2 04             	add    $0x4,%edx
    fe1a:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fe1e:	85 c0                	test   %eax,%eax
    fe20:	74 1d                	je     fe3f <read_super+0x220>
			block++;
    fe22:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
	for (i = 0 ; i < s->s_imap_blocks ; i++)			// 读取设备中i节点位图.
    fe27:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fe2c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe30:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    fe34:	0f b7 c0             	movzwl %ax,%eax
    fe37:	39 44 24 08          	cmp    %eax,0x8(%esp)
    fe3b:	7c ae                	jl     fdeb <read_super+0x1cc>
    fe3d:	eb 01                	jmp    fe40 <read_super+0x221>
		else
			break;
    fe3f:	90                   	nop
	// 从i节点位图之后开始读取逻辑块位图
	for (i = 0 ; i < s->s_zmap_blocks ; i++)			// 读取设备中逻辑块位图.
    fe40:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fe47:	00 
    fe48:	eb 41                	jmp    fe8b <read_super+0x26c>
		if (s->s_zmap[i] = bread(dev, block))
    fe4a:	83 ec 08             	sub    $0x8,%esp
    fe4d:	ff 74 24 0c          	pushl  0xc(%esp)
    fe51:	ff 74 24 2c          	pushl  0x2c(%esp)
    fe55:	e8 ec f7 ff ff       	call   f646 <bread>
    fe5a:	83 c4 10             	add    $0x10,%esp
    fe5d:	89 c1                	mov    %eax,%ecx
    fe5f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe63:	8b 54 24 08          	mov    0x8(%esp),%edx
    fe67:	83 c2 0c             	add    $0xc,%edx
    fe6a:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
    fe6e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe72:	8b 54 24 08          	mov    0x8(%esp),%edx
    fe76:	83 c2 0c             	add    $0xc,%edx
    fe79:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fe7d:	85 c0                	test   %eax,%eax
    fe7f:	74 1d                	je     fe9e <read_super+0x27f>
			block++;
    fe81:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
	for (i = 0 ; i < s->s_zmap_blocks ; i++)			// 读取设备中逻辑块位图.
    fe86:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fe8b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe8f:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    fe93:	0f b7 c0             	movzwl %ax,%eax
    fe96:	39 44 24 08          	cmp    %eax,0x8(%esp)
    fe9a:	7c ae                	jl     fe4a <read_super+0x22b>
    fe9c:	eb 01                	jmp    fe9f <read_super+0x280>
		else
			break;
    fe9e:	90                   	nop
	// 如果读出的位图个数不等于位图应该占有的逻辑块数,说明文件系统位图信息有问题,超级块初始化失败.因此只能释放前面申请并占用的所有资源,即释放i节点位图和逻辑块位图占用
	// 的高速缓冲块,释放上面选定的超级块数组项,解锁该超级块项,并返回空指针退出.
	if (block != 2 + s->s_imap_blocks + s->s_zmap_blocks) {
    fe9f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fea3:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    fea7:	0f b7 c0             	movzwl %ax,%eax
    feaa:	8d 50 02             	lea    0x2(%eax),%edx
    fead:	8b 44 24 0c          	mov    0xc(%esp),%eax
    feb1:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    feb5:	0f b7 c0             	movzwl %ax,%eax
    feb8:	01 d0                	add    %edx,%eax
    feba:	39 44 24 04          	cmp    %eax,0x4(%esp)
    febe:	0f 84 82 00 00 00    	je     ff46 <read_super+0x327>
		for(i = 0; i < I_MAP_SLOTS; i++)				// 释放位图占用的高速缓冲块.
    fec4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fecb:	00 
    fecc:	eb 20                	jmp    feee <read_super+0x2cf>
			brelse(s->s_imap[i]);
    fece:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fed2:	8b 54 24 08          	mov    0x8(%esp),%edx
    fed6:	83 c2 04             	add    $0x4,%edx
    fed9:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fedd:	83 ec 0c             	sub    $0xc,%esp
    fee0:	50                   	push   %eax
    fee1:	e8 0a f7 ff ff       	call   f5f0 <brelse>
    fee6:	83 c4 10             	add    $0x10,%esp
		for(i = 0; i < I_MAP_SLOTS; i++)				// 释放位图占用的高速缓冲块.
    fee9:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    feee:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    fef3:	7e d9                	jle    fece <read_super+0x2af>
		for(i = 0; i < Z_MAP_SLOTS; i++)
    fef5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fefc:	00 
    fefd:	eb 20                	jmp    ff1f <read_super+0x300>
			brelse(s->s_zmap[i]);
    feff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff03:	8b 54 24 08          	mov    0x8(%esp),%edx
    ff07:	83 c2 0c             	add    $0xc,%edx
    ff0a:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    ff0e:	83 ec 0c             	sub    $0xc,%esp
    ff11:	50                   	push   %eax
    ff12:	e8 d9 f6 ff ff       	call   f5f0 <brelse>
    ff17:	83 c4 10             	add    $0x10,%esp
		for(i = 0; i < Z_MAP_SLOTS; i++)
    ff1a:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    ff1f:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    ff24:	7e d9                	jle    feff <read_super+0x2e0>
		s->s_dev = 0;									// 释放选定的超级块数组项.
    ff26:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff2a:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		free_super(s);									// 解锁该超级块项.
    ff30:	83 ec 0c             	sub    $0xc,%esp
    ff33:	ff 74 24 18          	pushl  0x18(%esp)
    ff37:	e8 2b fb ff ff       	call   fa67 <free_super>
    ff3c:	83 c4 10             	add    $0x10,%esp
		return NULL;
    ff3f:	b8 00 00 00 00       	mov    $0x0,%eax
    ff44:	eb 47                	jmp    ff8d <read_super+0x36e>
	}
	// 否则一切成功.另外,由于对于申请空闲i节点的函数来讲,如果设备所有的i节点已经全被使用,则查找函数会返回0值.因此0号i节点是不能用的,所以这里将位图中第1块的最低位设置为
	// 1,以防止文件系统分配0号i节点.同样的道理,也将逻辑块位图的最低位设置为1.最后函数解锁该超级块,并返回超级块指针.
	s->s_imap[0]->b_data[0] |= 1;
    ff46:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff4a:	8b 40 14             	mov    0x14(%eax),%eax
    ff4d:	8b 00                	mov    (%eax),%eax
    ff4f:	0f b6 10             	movzbl (%eax),%edx
    ff52:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff56:	8b 40 14             	mov    0x14(%eax),%eax
    ff59:	8b 00                	mov    (%eax),%eax
    ff5b:	83 ca 01             	or     $0x1,%edx
    ff5e:	88 10                	mov    %dl,(%eax)
	s->s_zmap[0]->b_data[0] |= 1;
    ff60:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff64:	8b 40 34             	mov    0x34(%eax),%eax
    ff67:	8b 00                	mov    (%eax),%eax
    ff69:	0f b6 10             	movzbl (%eax),%edx
    ff6c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff70:	8b 40 34             	mov    0x34(%eax),%eax
    ff73:	8b 00                	mov    (%eax),%eax
    ff75:	83 ca 01             	or     $0x1,%edx
    ff78:	88 10                	mov    %dl,(%eax)
	free_super(s);
    ff7a:	83 ec 0c             	sub    $0xc,%esp
    ff7d:	ff 74 24 18          	pushl  0x18(%esp)
    ff81:	e8 e1 fa ff ff       	call   fa67 <free_super>
    ff86:	83 c4 10             	add    $0x10,%esp
	return s;
    ff89:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    ff8d:	83 c4 1c             	add    $0x1c,%esp
    ff90:	c3                   	ret    

0000ff91 <sys_umount>:
// 卸载文件系统（系统调用）。
// 参数dev_name是文件系统所在设备的设备文件名。
// 该函数首先根据参数给出的块设备文件名获得设备号，然后复位文件系统超级块中的相应字段，释放超级块和位图占用的缓冲块，最后对该
// 设备执行高速缓冲与设备上数据的同步操作。若卸载操作成功则返回0，否则返回出错码。
int sys_umount(char * dev_name)
{
    ff91:	83 ec 1c             	sub    $0x1c,%esp
	int dev;

	// 首先根据设备文件名找到对应的i节点，并取其中的设备号。设备文件所定义设备号是保存在其i节点的i_zone[0]中的。参见后面namei.c
	// 程序中系统调用sys_mknod()的代码第445行。另外，由于文件系统需要存放在块设备上，因此如果不是块设备文件，则放回刚申请的i节点
	// dev_i，返回出错码。
	if (!(inode = namei(dev_name)))
    ff94:	83 ec 0c             	sub    $0xc,%esp
    ff97:	ff 74 24 2c          	pushl  0x2c(%esp)
    ff9b:	e8 ed 34 00 00       	call   1348d <namei>
    ffa0:	83 c4 10             	add    $0x10,%esp
    ffa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ffa7:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    ffac:	75 0a                	jne    ffb8 <sys_umount+0x27>
		return -ENOENT;
    ffae:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    ffb3:	e9 59 01 00 00       	jmp    10111 <sys_umount+0x180>
	dev = inode->i_zone[0];
    ffb8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ffbc:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    ffc0:	0f b7 c0             	movzwl %ax,%eax
    ffc3:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!S_ISBLK(inode->i_mode)) {
    ffc7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ffcb:	0f b7 00             	movzwl (%eax),%eax
    ffce:	0f b7 c0             	movzwl %ax,%eax
    ffd1:	25 00 f0 00 00       	and    $0xf000,%eax
    ffd6:	3d 00 60 00 00       	cmp    $0x6000,%eax
    ffdb:	74 19                	je     fff6 <sys_umount+0x65>
		iput(inode);                    				// fs/inode.c。
    ffdd:	83 ec 0c             	sub    $0xc,%esp
    ffe0:	ff 74 24 18          	pushl  0x18(%esp)
    ffe4:	e8 76 e6 ff ff       	call   e65f <iput>
    ffe9:	83 c4 10             	add    $0x10,%esp
		return -ENOTBLK;
    ffec:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
    fff1:	e9 1b 01 00 00       	jmp    10111 <sys_umount+0x180>
	}
	// OK，现在上面为了得到设备号而取得的i节点已完成了它的使命，因此这里放回该设备文件的i节点。接着我们来检查一下卸载该文件系统的
	// 条件是否满足。如果设备上是根文件系统，则不能卸载，返回忙出错号。
	iput(inode);
    fff6:	83 ec 0c             	sub    $0xc,%esp
    fff9:	ff 74 24 18          	pushl  0x18(%esp)
    fffd:	e8 5d e6 ff ff       	call   e65f <iput>
   10002:	83 c4 10             	add    $0x10,%esp
	if (dev == ROOT_DEV)
   10005:	a1 cc 20 03 00       	mov    0x320cc,%eax
   1000a:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1000e:	75 0a                	jne    1001a <sys_umount+0x89>
		return -EBUSY;
   10010:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   10015:	e9 f7 00 00 00       	jmp    10111 <sys_umount+0x180>
	// 如果在超级块表中没有找到该设备上文件系统的超级块，或者已找到但是该设备上文件系统没有安装过，则返回出错码。如果超级块所指明
	// 被安装到的i节点并没有置位其安装标志i_mount，则显示警告信息。然后查找一下i节点表，看看是否有进程在使用该设备上的文件，如果
	// 有则返回忙出错码。
	if (!(sb = get_super(dev)) || !(sb->s_imount))
   1001a:	83 ec 0c             	sub    $0xc,%esp
   1001d:	ff 74 24 14          	pushl  0x14(%esp)
   10021:	e8 91 fa ff ff       	call   fab7 <get_super>
   10026:	83 c4 10             	add    $0x10,%esp
   10029:	89 44 24 04          	mov    %eax,0x4(%esp)
   1002d:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   10032:	74 0b                	je     1003f <sys_umount+0xae>
   10034:	8b 44 24 04          	mov    0x4(%esp),%eax
   10038:	8b 40 5c             	mov    0x5c(%eax),%eax
   1003b:	85 c0                	test   %eax,%eax
   1003d:	75 0a                	jne    10049 <sys_umount+0xb8>
		return -ENOENT;
   1003f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10044:	e9 c8 00 00 00       	jmp    10111 <sys_umount+0x180>
	if (!sb->s_imount->i_mount)
   10049:	8b 44 24 04          	mov    0x4(%esp),%eax
   1004d:	8b 40 5c             	mov    0x5c(%eax),%eax
   10050:	0f b6 40 39          	movzbl 0x39(%eax),%eax
   10054:	84 c0                	test   %al,%al
   10056:	75 10                	jne    10068 <sys_umount+0xd7>
		printk("Mounted inode has i_mount=0\n");
   10058:	83 ec 0c             	sub    $0xc,%esp
   1005b:	68 84 40 02 00       	push   $0x24084
   10060:	e8 dc 8b ff ff       	call   8c41 <printk>
   10065:	83 c4 10             	add    $0x10,%esp
	for (inode = inode_table + 0 ; inode < inode_table + NR_INODE ; inode++)
   10068:	c7 44 24 0c c0 11 03 	movl   $0x311c0,0xc(%esp)
   1006f:	00 
   10070:	eb 2a                	jmp    1009c <sys_umount+0x10b>
		if (inode->i_dev == dev && inode->i_count)
   10072:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10076:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1007a:	0f b7 c0             	movzwl %ax,%eax
   1007d:	39 44 24 08          	cmp    %eax,0x8(%esp)
   10081:	75 14                	jne    10097 <sys_umount+0x106>
   10083:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10087:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   1008b:	66 85 c0             	test   %ax,%ax
   1008e:	74 07                	je     10097 <sys_umount+0x106>
				return -EBUSY;
   10090:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   10095:	eb 7a                	jmp    10111 <sys_umount+0x180>
	for (inode = inode_table + 0 ; inode < inode_table + NR_INODE ; inode++)
   10097:	83 44 24 0c 3c       	addl   $0x3c,0xc(%esp)
   1009c:	b8 c0 20 03 00       	mov    $0x320c0,%eax
   100a1:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   100a5:	72 cb                	jb     10072 <sys_umount+0xe1>
	// 现在该设备上文件系统的卸载条件均得到满足，因此我们可以开始实施真正的卸载操作了。首先复位被安装到的i节点的安装标志，释放该
	// i节点。然后置超级块中被安装i节点字段为空，并放回设备文件系统的根i节点，接着置超级块中被安装系统根i节点指针为空。
	sb->s_imount->i_mount = 0;
   100a7:	8b 44 24 04          	mov    0x4(%esp),%eax
   100ab:	8b 40 5c             	mov    0x5c(%eax),%eax
   100ae:	c6 40 39 00          	movb   $0x0,0x39(%eax)
	iput(sb->s_imount);
   100b2:	8b 44 24 04          	mov    0x4(%esp),%eax
   100b6:	8b 40 5c             	mov    0x5c(%eax),%eax
   100b9:	83 ec 0c             	sub    $0xc,%esp
   100bc:	50                   	push   %eax
   100bd:	e8 9d e5 ff ff       	call   e65f <iput>
   100c2:	83 c4 10             	add    $0x10,%esp
	sb->s_imount = NULL;
   100c5:	8b 44 24 04          	mov    0x4(%esp),%eax
   100c9:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%eax)
	iput(sb->s_isup);
   100d0:	8b 44 24 04          	mov    0x4(%esp),%eax
   100d4:	8b 40 58             	mov    0x58(%eax),%eax
   100d7:	83 ec 0c             	sub    $0xc,%esp
   100da:	50                   	push   %eax
   100db:	e8 7f e5 ff ff       	call   e65f <iput>
   100e0:	83 c4 10             	add    $0x10,%esp
	sb->s_isup = NULL;
   100e3:	8b 44 24 04          	mov    0x4(%esp),%eax
   100e7:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
	// 最后我们释放该设备上的超级块以及位图占用的高速缓冲块，并对该设备执行高速缓冲与设备上数据的同步操作。然后返回0（卸载成功）。
	put_super(dev);
   100ee:	83 ec 0c             	sub    $0xc,%esp
   100f1:	ff 74 24 14          	pushl  0x14(%esp)
   100f5:	e8 32 fa ff ff       	call   fb2c <put_super>
   100fa:	83 c4 10             	add    $0x10,%esp
	sync_dev(dev);
   100fd:	83 ec 0c             	sub    $0xc,%esp
   10100:	ff 74 24 14          	pushl  0x14(%esp)
   10104:	e8 16 ee ff ff       	call   ef1f <sync_dev>
   10109:	83 c4 10             	add    $0x10,%esp
	return 0;
   1010c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10111:	83 c4 1c             	add    $0x1c,%esp
   10114:	c3                   	ret    

00010115 <sys_mount>:

// 安装文件系统（系统调用）。
// 参数dev_name是设备文件名，dir_name是安装到的目录名，rw_flag被安装文件系统的可读写标志。将被加载的地方必须是一
// 个目录名，并且对应的i节点没有被其他程序占用。若操作成功则返回0,否则返回出错号。
int sys_mount(char * dev_name, char * dir_name, int rw_flag)
{
   10115:	83 ec 1c             	sub    $0x1c,%esp
	struct super_block * sb;
	int dev;

	// 首先根据设备文件名找到对应的i节点，以取得其中的设备号。对于块特殊设备文件，设备号在其i节点的i_zone[0]中。另外，
	// 由于文件系统必须在块设备中，因此如果不是块设备文件，则放回刚得的i节点dev_i，返回出错码。
	if (!(dev_i = namei(dev_name)))
   10118:	83 ec 0c             	sub    $0xc,%esp
   1011b:	ff 74 24 2c          	pushl  0x2c(%esp)
   1011f:	e8 69 33 00 00       	call   1348d <namei>
   10124:	83 c4 10             	add    $0x10,%esp
   10127:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1012b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10130:	75 0a                	jne    1013c <sys_mount+0x27>
		return -ENOENT;
   10132:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10137:	e9 64 01 00 00       	jmp    102a0 <sys_mount+0x18b>
	dev = dev_i->i_zone[0];
   1013c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10140:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   10144:	0f b7 c0             	movzwl %ax,%eax
   10147:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!S_ISBLK(dev_i->i_mode)) {
   1014b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1014f:	0f b7 00             	movzwl (%eax),%eax
   10152:	0f b7 c0             	movzwl %ax,%eax
   10155:	25 00 f0 00 00       	and    $0xf000,%eax
   1015a:	3d 00 60 00 00       	cmp    $0x6000,%eax
   1015f:	74 19                	je     1017a <sys_mount+0x65>
		iput(dev_i);
   10161:	83 ec 0c             	sub    $0xc,%esp
   10164:	ff 74 24 18          	pushl  0x18(%esp)
   10168:	e8 f2 e4 ff ff       	call   e65f <iput>
   1016d:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   10170:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10175:	e9 26 01 00 00       	jmp    102a0 <sys_mount+0x18b>
	}
	// OK，现在上面为了得到设备号而取得的i节点dev_i已经完成了它的使命，因此这里放回该设备文件的i节点。接着我们来检查一
	// 下文件系统安装到的目录名是否有效。于是根据给定的目录文件名找到对应的i节点dir_i。如果该i节点的引用计数不为1（仅在
	// 这里引用），或者该i节点的节点号是根文件系统的节点号1,则放回该i节点返回出错码。另外，如果该节点不是一个目录文件节点，
	// 则也放回该i节点，返回出错码。因为文件系统只能安装在一个目录名上。
	iput(dev_i);
   1017a:	83 ec 0c             	sub    $0xc,%esp
   1017d:	ff 74 24 18          	pushl  0x18(%esp)
   10181:	e8 d9 e4 ff ff       	call   e65f <iput>
   10186:	83 c4 10             	add    $0x10,%esp
	if (!(dir_i = namei(dir_name)))
   10189:	83 ec 0c             	sub    $0xc,%esp
   1018c:	ff 74 24 30          	pushl  0x30(%esp)
   10190:	e8 f8 32 00 00       	call   1348d <namei>
   10195:	83 c4 10             	add    $0x10,%esp
   10198:	89 44 24 04          	mov    %eax,0x4(%esp)
   1019c:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   101a1:	75 0a                	jne    101ad <sys_mount+0x98>
		return -ENOENT;
   101a3:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   101a8:	e9 f3 00 00 00       	jmp    102a0 <sys_mount+0x18b>
	if (dir_i->i_count != 1 || dir_i->i_num == ROOT_INO) {
   101ad:	8b 44 24 04          	mov    0x4(%esp),%eax
   101b1:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   101b5:	66 83 f8 01          	cmp    $0x1,%ax
   101b9:	75 0e                	jne    101c9 <sys_mount+0xb4>
   101bb:	8b 44 24 04          	mov    0x4(%esp),%eax
   101bf:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   101c3:	66 83 f8 01          	cmp    $0x1,%ax
   101c7:	75 19                	jne    101e2 <sys_mount+0xcd>
		iput(dir_i);
   101c9:	83 ec 0c             	sub    $0xc,%esp
   101cc:	ff 74 24 10          	pushl  0x10(%esp)
   101d0:	e8 8a e4 ff ff       	call   e65f <iput>
   101d5:	83 c4 10             	add    $0x10,%esp
		return -EBUSY;
   101d8:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   101dd:	e9 be 00 00 00       	jmp    102a0 <sys_mount+0x18b>
	}
	if (!S_ISDIR(dir_i->i_mode)) {          			// 安装点需要是一个目录名。
   101e2:	8b 44 24 04          	mov    0x4(%esp),%eax
   101e6:	0f b7 00             	movzwl (%eax),%eax
   101e9:	0f b7 c0             	movzwl %ax,%eax
   101ec:	25 00 f0 00 00       	and    $0xf000,%eax
   101f1:	3d 00 40 00 00       	cmp    $0x4000,%eax
   101f6:	74 19                	je     10211 <sys_mount+0xfc>
		iput(dir_i);
   101f8:	83 ec 0c             	sub    $0xc,%esp
   101fb:	ff 74 24 10          	pushl  0x10(%esp)
   101ff:	e8 5b e4 ff ff       	call   e65f <iput>
   10204:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   10207:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1020c:	e9 8f 00 00 00       	jmp    102a0 <sys_mount+0x18b>
	}
	// 现在安装点也检查完毕，我们开始读取要安装文件系统的超级块信息。如果读超级块操作失败，则放回该安装点i节点dir_i并返回
	// 出错码。一个文件系统的超级块会首先从超级块表中进行搜索，如果不在超级块表中就从设备上读取。
	if (!(sb = read_super(dev))) {
   10211:	83 ec 0c             	sub    $0xc,%esp
   10214:	ff 74 24 14          	pushl  0x14(%esp)
   10218:	e8 02 fa ff ff       	call   fc1f <read_super>
   1021d:	83 c4 10             	add    $0x10,%esp
   10220:	89 04 24             	mov    %eax,(%esp)
   10223:	83 3c 24 00          	cmpl   $0x0,(%esp)
   10227:	75 16                	jne    1023f <sys_mount+0x12a>
		iput(dir_i);
   10229:	83 ec 0c             	sub    $0xc,%esp
   1022c:	ff 74 24 10          	pushl  0x10(%esp)
   10230:	e8 2a e4 ff ff       	call   e65f <iput>
   10235:	83 c4 10             	add    $0x10,%esp
		return -EBUSY;
   10238:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   1023d:	eb 61                	jmp    102a0 <sys_mount+0x18b>
	}
	// 在等到了文件系统超级块之后，我们对它先进行检测一番。如果将要被安装的文件系统已经安装在其他地方，则放回该i节点，返回
	// 出错码。如果将要安装到的i节点已经安装了文件系统（安装标志已经置位），则放回该i节点，也返回出错码。
	if (sb->s_imount) {
   1023f:	8b 04 24             	mov    (%esp),%eax
   10242:	8b 40 5c             	mov    0x5c(%eax),%eax
   10245:	85 c0                	test   %eax,%eax
   10247:	74 16                	je     1025f <sys_mount+0x14a>
		iput(dir_i);
   10249:	83 ec 0c             	sub    $0xc,%esp
   1024c:	ff 74 24 10          	pushl  0x10(%esp)
   10250:	e8 0a e4 ff ff       	call   e65f <iput>
   10255:	83 c4 10             	add    $0x10,%esp
		return -EBUSY;
   10258:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   1025d:	eb 41                	jmp    102a0 <sys_mount+0x18b>
	}
	if (dir_i->i_mount) {
   1025f:	8b 44 24 04          	mov    0x4(%esp),%eax
   10263:	0f b6 40 39          	movzbl 0x39(%eax),%eax
   10267:	84 c0                	test   %al,%al
   10269:	74 16                	je     10281 <sys_mount+0x16c>
		iput(dir_i);
   1026b:	83 ec 0c             	sub    $0xc,%esp
   1026e:	ff 74 24 10          	pushl  0x10(%esp)
   10272:	e8 e8 e3 ff ff       	call   e65f <iput>
   10277:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1027a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1027f:	eb 1f                	jmp    102a0 <sys_mount+0x18b>
	}
	// 最后设置被安装文件系统超级块的“被安装到i节点”字段指向安装到的目录名的i节点。并设置安装位置i节点的安装标志和节点已修改
	// 标志。然后返回0（安装成功）。
	sb->s_imount = dir_i;
   10281:	8b 04 24             	mov    (%esp),%eax
   10284:	8b 54 24 04          	mov    0x4(%esp),%edx
   10288:	89 50 5c             	mov    %edx,0x5c(%eax)
	dir_i->i_mount = 1;
   1028b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1028f:	c6 40 39 01          	movb   $0x1,0x39(%eax)
	dir_i->i_dirt = 1;									/* NOTE! we don't iput(dir_i) */        /* 注意！这里没有用iput(dir_i) */
   10293:	8b 44 24 04          	mov    0x4(%esp),%eax
   10297:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	return 0;											/* we do that in umount */      /* 这将在umount内操作 */
   1029b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   102a0:	83 c4 1c             	add    $0x1c,%esp
   102a3:	c3                   	ret    

000102a4 <mount_root>:

// 安装根文件系统.
// 该函数属于系统初始化操作的一部分.函数首先初始化文件表数组file_table[]和超级块表(数组),然后读取根文件系统超级块,并取得文件系统根i
// 节点.最后统计并显示出根文件系统上的可用资源(空闲块数和空闲i节点数0.该函数会在系统开机进行初始化设置时(sys_setup())调用(blk_drv/hd.c)>
void mount_root(void)
{
   102a4:	53                   	push   %ebx
   102a5:	83 ec 18             	sub    $0x18,%esp
	// 若磁盘i节点结构不是32字节,则出错停机.该判断用于防止修改代码时出现不一致情况.
	if (32 != sizeof (struct d_inode))
		panic("bad i-node size");
	// 首先初始化文件表数组(共64项,即系统同时只能打开64个文件)和超级块表.这里将所有文件结构中的引用计数设置为0(表示空闲),并把超级块表中各项结构
	// 的设备字段初始化为0(也表示空闲).如果根文件系统所在设备是软盘的话,就提示"插入根文件系统盘,并按回车键",并等待按键.
	for(i = 0; i < NR_FILE; i++)									// 初始化文件表.
   102a8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   102af:	00 
   102b0:	eb 16                	jmp    102c8 <mount_root+0x24>
		file_table[i].f_count = 0;
   102b2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   102b6:	c1 e0 04             	shl    $0x4,%eax
   102b9:	05 84 1f 04 00       	add    $0x41f84,%eax
   102be:	66 c7 00 00 00       	movw   $0x0,(%eax)
	for(i = 0; i < NR_FILE; i++)									// 初始化文件表.
   102c3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   102c8:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
   102cd:	7e e3                	jle    102b2 <mount_root+0xe>
	if (MAJOR(ROOT_DEV) == 2) {										// 提示插入根文件系统盘.
   102cf:	a1 cc 20 03 00       	mov    0x320cc,%eax
   102d4:	c1 e8 08             	shr    $0x8,%eax
   102d7:	83 f8 02             	cmp    $0x2,%eax
   102da:	75 15                	jne    102f1 <mount_root+0x4d>
		printk("Insert root floppy and press ENTER\r\n");
   102dc:	83 ec 0c             	sub    $0xc,%esp
   102df:	68 a4 40 02 00       	push   $0x240a4
   102e4:	e8 58 89 ff ff       	call   8c41 <printk>
   102e9:	83 c4 10             	add    $0x10,%esp
		wait_for_keypress();
   102ec:	e8 46 88 00 00       	call   18b37 <wait_for_keypress>
	}
	for(p = &super_block[0] ; p < &super_block[NR_SUPER] ; p++) {
   102f1:	c7 44 24 04 20 1c 04 	movl   $0x41c20,0x4(%esp)
   102f8:	00 
   102f9:	eb 22                	jmp    1031d <mount_root+0x79>
		p->s_dev = 0;												// 初始化超级块表
   102fb:	8b 44 24 04          	mov    0x4(%esp),%eax
   102ff:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		p->s_lock = 0;
   10305:	8b 44 24 04          	mov    0x4(%esp),%eax
   10309:	c6 40 68 00          	movb   $0x0,0x68(%eax)
		p->s_wait = NULL;
   1030d:	8b 44 24 04          	mov    0x4(%esp),%eax
   10311:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	for(p = &super_block[0] ; p < &super_block[NR_SUPER] ; p++) {
   10318:	83 44 24 04 6c       	addl   $0x6c,0x4(%esp)
   1031d:	81 7c 24 04 80 1f 04 	cmpl   $0x41f80,0x4(%esp)
   10324:	00 
   10325:	72 d4                	jb     102fb <mount_root+0x57>
	}
	// 做好以上"份外"的初始化工作之后,我们开始安装根文件系统.于是从根设备上读取文件系统超级块,并取得文件系统的根i节点(1号节点)在内存i节点表中的指针.
	// 如果读根设备上超级块失败或取根节点失败,则都显示信息并停机.
	if (!(p = read_super(ROOT_DEV)))
   10327:	a1 cc 20 03 00       	mov    0x320cc,%eax
   1032c:	83 ec 0c             	sub    $0xc,%esp
   1032f:	50                   	push   %eax
   10330:	e8 ea f8 ff ff       	call   fc1f <read_super>
   10335:	83 c4 10             	add    $0x10,%esp
   10338:	89 44 24 04          	mov    %eax,0x4(%esp)
   1033c:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   10341:	75 10                	jne    10353 <mount_root+0xaf>
		panic("Unable to mount root");
   10343:	83 ec 0c             	sub    $0xc,%esp
   10346:	68 c9 40 02 00       	push   $0x240c9
   1034b:	e8 b2 88 ff ff       	call   8c02 <panic>
   10350:	83 c4 10             	add    $0x10,%esp
	if (!(mi = iget(ROOT_DEV, ROOT_INO)))							// 在fs.h中ROOT_INO定义为1.
   10353:	a1 cc 20 03 00       	mov    0x320cc,%eax
   10358:	83 ec 08             	sub    $0x8,%esp
   1035b:	6a 01                	push   $0x1
   1035d:	50                   	push   %eax
   1035e:	e8 7f e6 ff ff       	call   e9e2 <iget>
   10363:	83 c4 10             	add    $0x10,%esp
   10366:	89 04 24             	mov    %eax,(%esp)
   10369:	83 3c 24 00          	cmpl   $0x0,(%esp)
   1036d:	75 10                	jne    1037f <mount_root+0xdb>
		panic("Unable to read root i-node");
   1036f:	83 ec 0c             	sub    $0xc,%esp
   10372:	68 de 40 02 00       	push   $0x240de
   10377:	e8 86 88 ff ff       	call   8c02 <panic>
   1037c:	83 c4 10             	add    $0x10,%esp
	// 现在我们对超级块和根i节点进行设置.把根i节点引用次数递增3次.因为下面266行上也引用了该i节点.另外,iget()函数中i节点引用计数已被设置为1.然后置该
	// 超级块的被安装文件系统i节点和被安装到i节点字段为该i节点.再设置当前进程的当前工作目录和根目录i节点.此时当前进程是1号进程(init进程).
	mi->i_count += 3 ;												/* NOTE! it is logically used 4 times, not 1 */
   1037f:	8b 04 24             	mov    (%esp),%eax
   10382:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   10386:	8d 50 03             	lea    0x3(%eax),%edx
   10389:	8b 04 24             	mov    (%esp),%eax
   1038c:	66 89 50 34          	mov    %dx,0x34(%eax)
                                									/* 注意!从逻辑上讲,它已被引用了4次,而不是1次 */
	p->s_isup = p->s_imount = mi;
   10390:	8b 44 24 04          	mov    0x4(%esp),%eax
   10394:	8b 14 24             	mov    (%esp),%edx
   10397:	89 50 5c             	mov    %edx,0x5c(%eax)
   1039a:	8b 44 24 04          	mov    0x4(%esp),%eax
   1039e:	8b 50 5c             	mov    0x5c(%eax),%edx
   103a1:	8b 44 24 04          	mov    0x4(%esp),%eax
   103a5:	89 50 58             	mov    %edx,0x58(%eax)
	current->pwd = mi;
   103a8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   103ad:	8b 14 24             	mov    (%esp),%edx
   103b0:	89 90 34 03 00 00    	mov    %edx,0x334(%eax)
	current->root = mi;
   103b6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   103bb:	8b 14 24             	mov    (%esp),%edx
   103be:	89 90 38 03 00 00    	mov    %edx,0x338(%eax)
	// 然后我们对根文件系统上的资源作统计工作.统计该设备上空闲块数和空闲i节点数.首先令i等于超级块中表明的设备逻辑块总数.然后根据逻辑块位图中相应位的占用情况统计出空闲块数.
	// 这里宏函数set_bit()只是在测试位,而非设置位."i&8191"用于取得i节点号在当前位图块中对应的位偏移值."i>>13"是将i除以8192,也即除一个磁盘块包含的位数.
	free = 0;
   103c4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   103cb:	00 
	i = p->s_nzones;
   103cc:	8b 44 24 04          	mov    0x4(%esp),%eax
   103d0:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   103d4:	0f b7 c0             	movzwl %ax,%eax
   103d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (-- i >= 0)
   103db:	eb 39                	jmp    10416 <mount_root+0x172>
		if (!set_bit(i & 8191, p->s_zmap[i >> 13]->b_data))
   103dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   103e1:	25 ff 1f 00 00       	and    $0x1fff,%eax
   103e6:	89 c1                	mov    %eax,%ecx
   103e8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   103ec:	c1 f8 0d             	sar    $0xd,%eax
   103ef:	89 c2                	mov    %eax,%edx
   103f1:	8b 44 24 04          	mov    0x4(%esp),%eax
   103f5:	83 c2 0c             	add    $0xc,%edx
   103f8:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   103fc:	8b 10                	mov    (%eax),%edx
   103fe:	b8 00 00 00 00       	mov    $0x0,%eax
   10403:	0f a3 0a             	bt     %ecx,(%edx)
   10406:	0f 92 c0             	setb   %al
   10409:	89 c3                	mov    %eax,%ebx
   1040b:	89 d8                	mov    %ebx,%eax
   1040d:	85 c0                	test   %eax,%eax
   1040f:	75 05                	jne    10416 <mount_root+0x172>
			free++;
   10411:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
	while (-- i >= 0)
   10416:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
   1041b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10420:	79 bb                	jns    103dd <mount_root+0x139>
	// 打印当前主设备上空闲和总的逻辑块数
	Log(LOG_INFO_TYPE, "<<<<< %d/%d free blocks >>>>>\n\r", free, p->s_nzones);
   10422:	8b 44 24 04          	mov    0x4(%esp),%eax
   10426:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   1042a:	0f b7 c0             	movzwl %ax,%eax
   1042d:	50                   	push   %eax
   1042e:	ff 74 24 0c          	pushl  0xc(%esp)
   10432:	68 fc 40 02 00       	push   $0x240fc
   10437:	6a 00                	push   $0x0
   10439:	e8 aa 24 01 00       	call   228e8 <Log>
   1043e:	83 c4 10             	add    $0x10,%esp
	// 在显示过设备上空闲逻辑块数/逻辑块总数之后.我们再统计设备上空闲i节点数.首先令i等于超级块中表明的设备上i中总数+1.加1是将0节点也统计进去.然后根据i节点位图中相应位的
	// 占用情况计算出空闲i节点数.最后再显示设备上可用空闲i节点数和i节点总数.
	free = 0;
   10441:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   10448:	00 
	i = p->s_ninodes + 1;
   10449:	8b 44 24 04          	mov    0x4(%esp),%eax
   1044d:	0f b7 00             	movzwl (%eax),%eax
   10450:	0f b7 c0             	movzwl %ax,%eax
   10453:	83 c0 01             	add    $0x1,%eax
   10456:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (-- i >= 0)
   1045a:	eb 39                	jmp    10495 <mount_root+0x1f1>
		if (!set_bit(i & 8191, p->s_imap[i >> 13]->b_data))
   1045c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10460:	25 ff 1f 00 00       	and    $0x1fff,%eax
   10465:	89 c1                	mov    %eax,%ecx
   10467:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1046b:	c1 f8 0d             	sar    $0xd,%eax
   1046e:	89 c2                	mov    %eax,%edx
   10470:	8b 44 24 04          	mov    0x4(%esp),%eax
   10474:	83 c2 04             	add    $0x4,%edx
   10477:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   1047b:	8b 10                	mov    (%eax),%edx
   1047d:	b8 00 00 00 00       	mov    $0x0,%eax
   10482:	0f a3 0a             	bt     %ecx,(%edx)
   10485:	0f 92 c0             	setb   %al
   10488:	89 c3                	mov    %eax,%ebx
   1048a:	89 d8                	mov    %ebx,%eax
   1048c:	85 c0                	test   %eax,%eax
   1048e:	75 05                	jne    10495 <mount_root+0x1f1>
			free++;
   10490:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
	while (-- i >= 0)
   10495:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
   1049a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1049f:	79 bb                	jns    1045c <mount_root+0x1b8>
	// 打印当前主设备上i节点空闲和总的数量
	Log(LOG_INFO_TYPE, "<<<<< %d/%d free inodes >>>>>\n\r", free, p->s_ninodes);
   104a1:	8b 44 24 04          	mov    0x4(%esp),%eax
   104a5:	0f b7 00             	movzwl (%eax),%eax
   104a8:	0f b7 c0             	movzwl %ax,%eax
   104ab:	50                   	push   %eax
   104ac:	ff 74 24 0c          	pushl  0xc(%esp)
   104b0:	68 1c 41 02 00       	push   $0x2411c
   104b5:	6a 00                	push   $0x0
   104b7:	e8 2c 24 01 00       	call   228e8 <Log>
   104bc:	83 c4 10             	add    $0x10,%esp
}
   104bf:	90                   	nop
   104c0:	83 c4 18             	add    $0x18,%esp
   104c3:	5b                   	pop    %ebx
   104c4:	c3                   	ret    

000104c5 <get_fs_byte>:
{
   104c5:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   104c6:	8b 44 24 08          	mov    0x8(%esp),%eax
   104ca:	64 8a 00             	mov    %fs:(%eax),%al
   104cd:	89 c3                	mov    %eax,%ebx
	return _v;
   104cf:	89 d8                	mov    %ebx,%eax
}
   104d1:	5b                   	pop    %ebx
   104d2:	c3                   	ret    

000104d3 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   104d3:	83 ec 04             	sub    $0x4,%esp
   104d6:	8b 44 24 08          	mov    0x8(%esp),%eax
   104da:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   104dd:	0f b6 04 24          	movzbl (%esp),%eax
   104e1:	8b 54 24 0c          	mov    0xc(%esp),%edx
   104e5:	64 88 02             	mov    %al,%fs:(%edx)
}
   104e8:	90                   	nop
   104e9:	83 c4 04             	add    $0x4,%esp
   104ec:	c3                   	ret    

000104ed <block_write>:
// 返回已写入字节数。若没有写入任何字节或出错，则返回出错号。
// 对于内核来说，写操作是向高速缓冲区中写入数据。什么时候数据最终写入设备是高速缓冲管理程序决定并处理的。另外，因为
// 块设备是以块为单位进行读写，因此对于写开始位置不处于块起始处时，需要先将开始字节所在整个块读出，然后将需要写的数据
// 从开始处填写满该块，再将完整的一块数据写盘（即交由高速缓冲程序去处理）。
int block_write(int dev, long * pos, char * buf, int count)
{
   104ed:	53                   	push   %ebx
   104ee:	83 ec 28             	sub    $0x28,%esp
	// 首先由文件中位置pos换算成开始写盘块的块序号block，并求出需写第1字节在该块中的偏移位置offset。
	int block = *pos >> BLOCK_SIZE_BITS;            			// pos所在文件数据块号。
   104f1:	8b 44 24 34          	mov    0x34(%esp),%eax
   104f5:	8b 00                	mov    (%eax),%eax
   104f7:	c1 f8 0a             	sar    $0xa,%eax
   104fa:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	int offset = *pos & (BLOCK_SIZE - 1);             			// pos在数据块中偏移值。
   104fe:	8b 44 24 34          	mov    0x34(%esp),%eax
   10502:	8b 00                	mov    (%eax),%eax
   10504:	25 ff 03 00 00       	and    $0x3ff,%eax
   10509:	89 44 24 18          	mov    %eax,0x18(%esp)
	int chars;
	int written = 0;
   1050d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   10514:	00 
	register char * p;               	       					// 局部寄存器变量，被存放在寄存器中。

	// 在写一个块设备文件时，要求写的总数据块数当然不能超过指定设备上容许的最大数据块总数。因此这里首先取出指定
	// 设备的块总数size来比较和限制函数参数给定的读入数据长度。如果系统中没有对设备指定长度，就使用默认长度
	// 0x7fffffff（2GB个块）。
	if (blk_size[MAJOR(dev)])
   10515:	8b 44 24 30          	mov    0x30(%esp),%eax
   10519:	c1 e8 08             	shr    $0x8,%eax
   1051c:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
   10523:	85 c0                	test   %eax,%eax
   10525:	74 25                	je     1054c <block_write+0x5f>
		size = blk_size[MAJOR(dev)][MINOR(dev)];
   10527:	8b 44 24 30          	mov    0x30(%esp),%eax
   1052b:	c1 e8 08             	shr    $0x8,%eax
   1052e:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
   10535:	8b 54 24 30          	mov    0x30(%esp),%edx
   10539:	0f b6 d2             	movzbl %dl,%edx
   1053c:	c1 e2 02             	shl    $0x2,%edx
   1053f:	01 d0                	add    %edx,%eax
   10541:	8b 00                	mov    (%eax),%eax
   10543:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10547:	e9 41 01 00 00       	jmp    1068d <block_write+0x1a0>
	else
		size = 0x7fffffff;
   1054c:	c7 44 24 0c ff ff ff 	movl   $0x7fffffff,0xc(%esp)
   10553:	7f 
	// 然后针对要写入的字节数count，循环执行以下操作，直到数据全部写入。在循环执行过程中，若当前写入数据的块号
	// 已经大于或等于指定设备的总块数，则返回已写字节数并退出。然后再计算在当前处理的数据块中可写入的字节数。如果
	// 需要写入的字节数填不满一块，那么就只需写count字节。如果正好写1块数据内容，则直接申请1块高速缓冲块，并把
	// 用户数据放入即可。否则就需要读入将被写入部分数据的数据块，并预读下两块数据。然后将块号递增1,为下次操作做好
	// 准备。如果缓冲块操作失败，则返回已写字节数，如果没有写入任何字节，则返回出错号（负数）。
	while (count > 0) {
   10554:	e9 34 01 00 00       	jmp    1068d <block_write+0x1a0>
		if (block >= size)
   10559:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1055d:	3b 44 24 0c          	cmp    0xc(%esp),%eax
   10561:	7c 1a                	jl     1057d <block_write+0x90>
			return written ? written : -EIO;
   10563:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   10568:	74 09                	je     10573 <block_write+0x86>
   1056a:	8b 44 24 10          	mov    0x10(%esp),%eax
   1056e:	e9 29 01 00 00       	jmp    1069c <block_write+0x1af>
   10573:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   10578:	e9 1f 01 00 00       	jmp    1069c <block_write+0x1af>
		chars = BLOCK_SIZE - offset;
   1057d:	b8 00 04 00 00       	mov    $0x400,%eax
   10582:	2b 44 24 18          	sub    0x18(%esp),%eax
   10586:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (chars > count)
   1058a:	8b 44 24 14          	mov    0x14(%esp),%eax
   1058e:	3b 44 24 3c          	cmp    0x3c(%esp),%eax
   10592:	7e 08                	jle    1059c <block_write+0xaf>
			chars = count;
   10594:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10598:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (chars == BLOCK_SIZE)
   1059c:	81 7c 24 14 00 04 00 	cmpl   $0x400,0x14(%esp)
   105a3:	00 
   105a4:	75 19                	jne    105bf <block_write+0xd2>
			bh = getblk(dev, block);
   105a6:	83 ec 08             	sub    $0x8,%esp
   105a9:	ff 74 24 24          	pushl  0x24(%esp)
   105ad:	ff 74 24 3c          	pushl  0x3c(%esp)
   105b1:	e8 81 ee ff ff       	call   f437 <getblk>
   105b6:	83 c4 10             	add    $0x10,%esp
   105b9:	89 44 24 08          	mov    %eax,0x8(%esp)
   105bd:	eb 29                	jmp    105e8 <block_write+0xfb>
		else
			bh = breada(dev, block, block + 1, block + 2, -1);
   105bf:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   105c3:	8d 50 02             	lea    0x2(%eax),%edx
   105c6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   105ca:	83 c0 01             	add    $0x1,%eax
   105cd:	83 ec 0c             	sub    $0xc,%esp
   105d0:	6a ff                	push   $0xffffffff
   105d2:	52                   	push   %edx
   105d3:	50                   	push   %eax
   105d4:	ff 74 24 34          	pushl  0x34(%esp)
   105d8:	ff 74 24 4c          	pushl  0x4c(%esp)
   105dc:	e8 25 f2 ff ff       	call   f806 <breada>
   105e1:	83 c4 20             	add    $0x20,%esp
   105e4:	89 44 24 08          	mov    %eax,0x8(%esp)
		block++;
   105e8:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		if (!bh)
   105ed:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   105f2:	75 1a                	jne    1060e <block_write+0x121>
			return written ? written : -EIO;
   105f4:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   105f9:	74 09                	je     10604 <block_write+0x117>
   105fb:	8b 44 24 10          	mov    0x10(%esp),%eax
   105ff:	e9 98 00 00 00       	jmp    1069c <block_write+0x1af>
   10604:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   10609:	e9 8e 00 00 00       	jmp    1069c <block_write+0x1af>
		// 接着先把指针p指向读出数据的缓冲块中开始写入数据的位置处。若最后一次循环写入的数据不足一块，则需要从块开始
		// 处填写（修改）所需的字节，因此这里需预先设置offset为零。此后将文件中偏移指针pos前移此次将要写的字节数chars
		// 并累加这些要写的字节数到统计值written中。再把还需要写的计数值count减去此次要写的字节数chars。然后我们从
		// 用户缓冲区复制chars个字节到p指向的高速缓冲块中开始写入的位置处。复制完后就设置该缓冲区块已修改标志，并释放
		// 该缓冲区（即该缓冲区引用计数递减1）。
		p = offset + bh->b_data;
   1060e:	8b 44 24 08          	mov    0x8(%esp),%eax
   10612:	8b 10                	mov    (%eax),%edx
   10614:	8b 44 24 18          	mov    0x18(%esp),%eax
   10618:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
		offset = 0;
   1061b:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   10622:	00 
		*pos += chars;
   10623:	8b 44 24 34          	mov    0x34(%esp),%eax
   10627:	8b 10                	mov    (%eax),%edx
   10629:	8b 44 24 14          	mov    0x14(%esp),%eax
   1062d:	01 c2                	add    %eax,%edx
   1062f:	8b 44 24 34          	mov    0x34(%esp),%eax
   10633:	89 10                	mov    %edx,(%eax)
		written += chars;               						// 累计写入字节数。
   10635:	8b 44 24 14          	mov    0x14(%esp),%eax
   10639:	01 44 24 10          	add    %eax,0x10(%esp)
		count -= chars;
   1063d:	8b 44 24 14          	mov    0x14(%esp),%eax
   10641:	29 44 24 3c          	sub    %eax,0x3c(%esp)
		while (chars-- > 0)
   10645:	eb 20                	jmp    10667 <block_write+0x17a>
			*(p++) = get_fs_byte(buf++);
   10647:	8b 44 24 38          	mov    0x38(%esp),%eax
   1064b:	8d 50 01             	lea    0x1(%eax),%edx
   1064e:	89 54 24 38          	mov    %edx,0x38(%esp)
   10652:	83 ec 0c             	sub    $0xc,%esp
   10655:	50                   	push   %eax
   10656:	e8 6a fe ff ff       	call   104c5 <get_fs_byte>
   1065b:	83 c4 10             	add    $0x10,%esp
   1065e:	89 c2                	mov    %eax,%edx
   10660:	89 d8                	mov    %ebx,%eax
   10662:	8d 58 01             	lea    0x1(%eax),%ebx
   10665:	88 10                	mov    %dl,(%eax)
		while (chars-- > 0)
   10667:	8b 44 24 14          	mov    0x14(%esp),%eax
   1066b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1066e:	89 54 24 14          	mov    %edx,0x14(%esp)
   10672:	85 c0                	test   %eax,%eax
   10674:	7f d1                	jg     10647 <block_write+0x15a>
		bh->b_dirt = 1;
   10676:	8b 44 24 08          	mov    0x8(%esp),%eax
   1067a:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		brelse(bh);
   1067e:	83 ec 0c             	sub    $0xc,%esp
   10681:	ff 74 24 14          	pushl  0x14(%esp)
   10685:	e8 66 ef ff ff       	call   f5f0 <brelse>
   1068a:	83 c4 10             	add    $0x10,%esp
	while (count > 0) {
   1068d:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   10692:	0f 8f c1 fe ff ff    	jg     10559 <block_write+0x6c>
	}
	return written;                         					// 返回已写入的字节数，正常退出。
   10698:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   1069c:	83 c4 28             	add    $0x28,%esp
   1069f:	5b                   	pop    %ebx
   106a0:	c3                   	ret    

000106a1 <block_read>:

// 数据块读函数 - 从指定设备和位置处读入指定长度数据到用户缓冲区中。
// 参数：dev - 设备号；pos - 设备文件中领衔量指针；buf - 用户空间中缓冲区地址；count - 要传送的字节数。
// 返回已读入字节数。若没有读入任何字节或出错，则返回出错号。
int block_read(int dev, unsigned long * pos, char * buf, int count)
{
   106a1:	53                   	push   %ebx
   106a2:	83 ec 28             	sub    $0x28,%esp
	int block = *pos >> BLOCK_SIZE_BITS;
   106a5:	8b 44 24 34          	mov    0x34(%esp),%eax
   106a9:	8b 00                	mov    (%eax),%eax
   106ab:	c1 e8 0a             	shr    $0xa,%eax
   106ae:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	int offset = *pos & (BLOCK_SIZE - 1);
   106b2:	8b 44 24 34          	mov    0x34(%esp),%eax
   106b6:	8b 00                	mov    (%eax),%eax
   106b8:	25 ff 03 00 00       	and    $0x3ff,%eax
   106bd:	89 44 24 18          	mov    %eax,0x18(%esp)
	int chars;
	int size;
	int read = 0;
   106c1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   106c8:	00 
	register char * p;              							// 局部寄存器变量，被存放在寄存器中。

	// 在读一个块设备文件时，要求读的总数据块数当然不能超过指定设备上容许的最大数据块总数。因此这里首先取出指定
	// 设备的块总数size来比较和限制函数参数给定的读入数据长度。如果系统中没有对设备指定长度，就使用默认长度
	// 0x7fffffff（2GB个块）。
	if (blk_size[MAJOR(dev)])
   106c9:	8b 44 24 30          	mov    0x30(%esp),%eax
   106cd:	c1 e8 08             	shr    $0x8,%eax
   106d0:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
   106d7:	85 c0                	test   %eax,%eax
   106d9:	74 25                	je     10700 <block_read+0x5f>
		size = blk_size[MAJOR(dev)][MINOR(dev)];
   106db:	8b 44 24 30          	mov    0x30(%esp),%eax
   106df:	c1 e8 08             	shr    $0x8,%eax
   106e2:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
   106e9:	8b 54 24 30          	mov    0x30(%esp),%edx
   106ed:	0f b6 d2             	movzbl %dl,%edx
   106f0:	c1 e2 02             	shl    $0x2,%edx
   106f3:	01 d0                	add    %edx,%eax
   106f5:	8b 00                	mov    (%eax),%eax
   106f7:	89 44 24 10          	mov    %eax,0x10(%esp)
   106fb:	e9 19 01 00 00       	jmp    10819 <block_read+0x178>
	else
		size = 0x7fffffff;
   10700:	c7 44 24 10 ff ff ff 	movl   $0x7fffffff,0x10(%esp)
   10707:	7f 
	// 然后针对要读入的字节数count，循环执行以下操作，直到数据全部读入。在循环执行过程中，若当前读入数据的块号已经
	// 大于或等于指定设备的总块数，则返回已读字节数并退出。然后再计算在当前处理的数据块中需读入的字节数。如果需要读
	// 入的字节数还不满一块，那么就只需读count字节。然后调用读块函数breada()读入需要的数据块，并预读下两块数据，
	// 如果读操作出错，则返回已读字节数，如果没有读入任何字节，则返回出错号。然后将块号递增1。为下次操作做好准备。如
	// 果缓冲块担操失败，则返回已写字节数，如果没有读入任何字节，则返回出错号（负数）。
	while (count > 0) {
   10708:	e9 0c 01 00 00       	jmp    10819 <block_read+0x178>
		if (block >= size)
   1070d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10711:	3b 44 24 10          	cmp    0x10(%esp),%eax
   10715:	7c 1a                	jl     10731 <block_read+0x90>
			return read ? read : -EIO;
   10717:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1071c:	74 09                	je     10727 <block_read+0x86>
   1071e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10722:	e9 01 01 00 00       	jmp    10828 <block_read+0x187>
   10727:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   1072c:	e9 f7 00 00 00       	jmp    10828 <block_read+0x187>
		chars = BLOCK_SIZE - offset;
   10731:	b8 00 04 00 00       	mov    $0x400,%eax
   10736:	2b 44 24 18          	sub    0x18(%esp),%eax
   1073a:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (chars > count)
   1073e:	8b 44 24 14          	mov    0x14(%esp),%eax
   10742:	3b 44 24 3c          	cmp    0x3c(%esp),%eax
   10746:	7e 08                	jle    10750 <block_read+0xaf>
			chars = count;
   10748:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   1074c:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (!(bh = breada(dev, block, block + 1, block + 2, -1)))
   10750:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10754:	8d 50 02             	lea    0x2(%eax),%edx
   10757:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1075b:	83 c0 01             	add    $0x1,%eax
   1075e:	83 ec 0c             	sub    $0xc,%esp
   10761:	6a ff                	push   $0xffffffff
   10763:	52                   	push   %edx
   10764:	50                   	push   %eax
   10765:	ff 74 24 34          	pushl  0x34(%esp)
   10769:	ff 74 24 4c          	pushl  0x4c(%esp)
   1076d:	e8 94 f0 ff ff       	call   f806 <breada>
   10772:	83 c4 20             	add    $0x20,%esp
   10775:	89 44 24 08          	mov    %eax,0x8(%esp)
   10779:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1077e:	75 1a                	jne    1079a <block_read+0xf9>
			return read ? read : -EIO;
   10780:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10785:	74 09                	je     10790 <block_read+0xef>
   10787:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1078b:	e9 98 00 00 00       	jmp    10828 <block_read+0x187>
   10790:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   10795:	e9 8e 00 00 00       	jmp    10828 <block_read+0x187>
		block++;
   1079a:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		// 接着先把指针p指向读出盘块中开始读入数据的位置处。若最后一次循环读操作的数据不足一块，则需从块起始处读取所需字
		// 节，因此这里需预先设置offset为零。此后将文件中偏移指针pos前移此次将要读的字节数chars，并且累加这些要读的字节
		// 数到统计值read中。再把还需要读的计数值count减去此次要读的字节数chars。然后我们从高速缓冲块中p指向的开始读的
		// 位置处复制chars个字节到用户缓冲区中，同时把用户缓冲区指针前移。本次复制完后就释放该缓冲块。
		p = offset + bh->b_data;
   1079f:	8b 44 24 08          	mov    0x8(%esp),%eax
   107a3:	8b 10                	mov    (%eax),%edx
   107a5:	8b 44 24 18          	mov    0x18(%esp),%eax
   107a9:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
		offset = 0;
   107ac:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   107b3:	00 
		*pos += chars;
   107b4:	8b 44 24 34          	mov    0x34(%esp),%eax
   107b8:	8b 10                	mov    (%eax),%edx
   107ba:	8b 44 24 14          	mov    0x14(%esp),%eax
   107be:	01 c2                	add    %eax,%edx
   107c0:	8b 44 24 34          	mov    0x34(%esp),%eax
   107c4:	89 10                	mov    %edx,(%eax)
		read += chars;                  						// 累计读入字节数。
   107c6:	8b 44 24 14          	mov    0x14(%esp),%eax
   107ca:	01 44 24 0c          	add    %eax,0xc(%esp)
		count -= chars;
   107ce:	8b 44 24 14          	mov    0x14(%esp),%eax
   107d2:	29 44 24 3c          	sub    %eax,0x3c(%esp)
		while (chars-- > 0)
   107d6:	eb 23                	jmp    107fb <block_read+0x15a>
			put_fs_byte(*(p++), buf++);
   107d8:	8b 44 24 38          	mov    0x38(%esp),%eax
   107dc:	8d 50 01             	lea    0x1(%eax),%edx
   107df:	89 54 24 38          	mov    %edx,0x38(%esp)
   107e3:	89 da                	mov    %ebx,%edx
   107e5:	8d 5a 01             	lea    0x1(%edx),%ebx
   107e8:	0f b6 12             	movzbl (%edx),%edx
   107eb:	0f be d2             	movsbl %dl,%edx
   107ee:	83 ec 08             	sub    $0x8,%esp
   107f1:	50                   	push   %eax
   107f2:	52                   	push   %edx
   107f3:	e8 db fc ff ff       	call   104d3 <put_fs_byte>
   107f8:	83 c4 10             	add    $0x10,%esp
		while (chars-- > 0)
   107fb:	8b 44 24 14          	mov    0x14(%esp),%eax
   107ff:	8d 50 ff             	lea    -0x1(%eax),%edx
   10802:	89 54 24 14          	mov    %edx,0x14(%esp)
   10806:	85 c0                	test   %eax,%eax
   10808:	7f ce                	jg     107d8 <block_read+0x137>
		brelse(bh);
   1080a:	83 ec 0c             	sub    $0xc,%esp
   1080d:	ff 74 24 14          	pushl  0x14(%esp)
   10811:	e8 da ed ff ff       	call   f5f0 <brelse>
   10816:	83 c4 10             	add    $0x10,%esp
	while (count > 0) {
   10819:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   1081e:	0f 8f e9 fe ff ff    	jg     1070d <block_read+0x6c>
	}
	return read;                            					// 返回已读取的字节数，正常退出。
   10824:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   10828:	83 c4 28             	add    $0x28,%esp
   1082b:	5b                   	pop    %ebx
   1082c:	c3                   	ret    

0001082d <get_fs_byte>:
{
   1082d:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1082e:	8b 44 24 08          	mov    0x8(%esp),%eax
   10832:	64 8a 00             	mov    %fs:(%eax),%al
   10835:	89 c3                	mov    %eax,%ebx
	return _v;
   10837:	89 d8                	mov    %ebx,%eax
}
   10839:	5b                   	pop    %ebx
   1083a:	c3                   	ret    

0001083b <put_fs_byte>:
{
   1083b:	83 ec 04             	sub    $0x4,%esp
   1083e:	8b 44 24 08          	mov    0x8(%esp),%eax
   10842:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   10845:	0f b6 04 24          	movzbl (%esp),%eax
   10849:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1084d:	64 88 02             	mov    %al,%fs:(%edx)
}
   10850:	90                   	nop
   10851:	83 c4 04             	add    $0x4,%esp
   10854:	c3                   	ret    

00010855 <rw_ttyx>:

// 串口终端读写操作函数.
// 参数:rw - 读写命令;minor - 终端子设备号;buf - 缓冲区;count - 读写字节数;pos - 读写操作当前指针,对于终端操作,该指针无用.
// 返回:实际读写的字节数.若失败则返回出错码.
static int rw_ttyx(int rw, unsigned minor, char * buf, int count, off_t * pos)
{
   10855:	83 ec 0c             	sub    $0xc,%esp
	return ((rw == READ) ? tty_read(minor, buf, count): tty_write(minor, buf, count));
   10858:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   1085d:	75 19                	jne    10878 <rw_ttyx+0x23>
   1085f:	83 ec 04             	sub    $0x4,%esp
   10862:	ff 74 24 20          	pushl  0x20(%esp)
   10866:	ff 74 24 20          	pushl  0x20(%esp)
   1086a:	ff 74 24 20          	pushl  0x20(%esp)
   1086e:	e8 10 8b 00 00       	call   19383 <tty_read>
   10873:	83 c4 10             	add    $0x10,%esp
   10876:	eb 17                	jmp    1088f <rw_ttyx+0x3a>
   10878:	83 ec 04             	sub    $0x4,%esp
   1087b:	ff 74 24 20          	pushl  0x20(%esp)
   1087f:	ff 74 24 20          	pushl  0x20(%esp)
   10883:	ff 74 24 20          	pushl  0x20(%esp)
   10887:	e8 28 8f 00 00       	call   197b4 <tty_write>
   1088c:	83 c4 10             	add    $0x10,%esp
}
   1088f:	83 c4 0c             	add    $0xc,%esp
   10892:	c3                   	ret    

00010893 <rw_tty>:

// 终端读写操作函数。
// 同rw_ttyx()类似，只是增加了对进程是否有控制终端的检测。
static int rw_tty(int rw, unsigned minor, char * buf, int count, off_t * pos)
{
   10893:	83 ec 0c             	sub    $0xc,%esp
	// 若进程没有对应的控制终端，则返回出错号。否则调用终端读写函数rw_ttyx()，并返回实际读写字节数。
	if (current->tty < 0)
   10896:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1089b:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   108a1:	85 c0                	test   %eax,%eax
   108a3:	79 07                	jns    108ac <rw_tty+0x19>
		return -EPERM;
   108a5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   108aa:	eb 27                	jmp    108d3 <rw_tty+0x40>
	return rw_ttyx(rw, current->tty, buf, count, pos);
   108ac:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   108b1:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   108b7:	83 ec 0c             	sub    $0xc,%esp
   108ba:	ff 74 24 2c          	pushl  0x2c(%esp)
   108be:	ff 74 24 2c          	pushl  0x2c(%esp)
   108c2:	ff 74 24 2c          	pushl  0x2c(%esp)
   108c6:	50                   	push   %eax
   108c7:	ff 74 24 2c          	pushl  0x2c(%esp)
   108cb:	e8 85 ff ff ff       	call   10855 <rw_ttyx>
   108d0:	83 c4 20             	add    $0x20,%esp
}
   108d3:	83 c4 0c             	add    $0xc,%esp
   108d6:	c3                   	ret    

000108d7 <rw_ram>:

// 内在数据读写。未实现。
static int rw_ram(int rw,char * buf, int count, off_t *pos)
{
	return -EIO;
   108d7:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
   108dc:	c3                   	ret    

000108dd <rw_mem>:

// 物理内存数据读写操作函数。未实现。
static int rw_mem(int rw,char * buf, int count, off_t * pos)
{
	return -EIO;
   108dd:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
   108e2:	c3                   	ret    

000108e3 <rw_kmem>:

// 内核虚拟内存数据读写函数。未实现。
static int rw_kmem(int rw,char * buf, int count, off_t * pos)
{
	return -EIO;
   108e3:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
   108e8:	c3                   	ret    

000108e9 <rw_port>:

// 端口读写操作函数。
// 参数：rw - 读写命令；buf - 缓冲区；count - 读写字节数；post - 端口地址。
// 返回：实际读写的字节数。
static int rw_port(int rw,char * buf, int count, off_t * pos)
{
   108e9:	83 ec 10             	sub    $0x10,%esp
	int i = *pos;
   108ec:	8b 44 24 20          	mov    0x20(%esp),%eax
   108f0:	8b 00                	mov    (%eax),%eax
   108f2:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 对于所要求读写的字节数，并且端口地址小于64k时，循环执行单个字节的读写操作。
	// 若是读命令，则从端口i中读取一字节内容并放到用户缓冲区中。若是写命令，则从用户数据缓冲区中取一字节输出到端口i。
	while (count-- > 0 && i < 65536) {
   108f6:	eb 4f                	jmp    10947 <rw_port+0x5e>
		if (rw == READ)
   108f8:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   108fd:	75 2a                	jne    10929 <rw_port+0x40>
			put_fs_byte(inb(i), buf++);
   108ff:	8b 4c 24 18          	mov    0x18(%esp),%ecx
   10903:	8d 41 01             	lea    0x1(%ecx),%eax
   10906:	89 44 24 18          	mov    %eax,0x18(%esp)
   1090a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1090e:	89 c2                	mov    %eax,%edx
   10910:	ec                   	in     (%dx),%al
   10911:	88 44 24 0b          	mov    %al,0xb(%esp)
   10915:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   1091a:	0f be c0             	movsbl %al,%eax
   1091d:	51                   	push   %ecx
   1091e:	50                   	push   %eax
   1091f:	e8 17 ff ff ff       	call   1083b <put_fs_byte>
   10924:	83 c4 08             	add    $0x8,%esp
   10927:	eb 19                	jmp    10942 <rw_port+0x59>
		else
			outb(get_fs_byte(buf++), i);
   10929:	8b 44 24 18          	mov    0x18(%esp),%eax
   1092d:	8d 50 01             	lea    0x1(%eax),%edx
   10930:	89 54 24 18          	mov    %edx,0x18(%esp)
   10934:	50                   	push   %eax
   10935:	e8 f3 fe ff ff       	call   1082d <get_fs_byte>
   1093a:	83 c4 04             	add    $0x4,%esp
   1093d:	8b 54 24 0c          	mov    0xc(%esp),%edx
   10941:	ee                   	out    %al,(%dx)
		i++;            						// 前移一个端口。[好奇怪，端口地址为什么会变化？]
   10942:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
	while (count-- > 0 && i < 65536) {
   10947:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1094b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1094e:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   10952:	85 c0                	test   %eax,%eax
   10954:	7e 0a                	jle    10960 <rw_port+0x77>
   10956:	81 7c 24 0c ff ff 00 	cmpl   $0xffff,0xc(%esp)
   1095d:	00 
   1095e:	7e 98                	jle    108f8 <rw_port+0xf>
	}
	// 然后计算读/写的字节数，调整相应读写指针，并返回读/写的字节数。
	i -= *pos;
   10960:	8b 44 24 20          	mov    0x20(%esp),%eax
   10964:	8b 00                	mov    (%eax),%eax
   10966:	29 44 24 0c          	sub    %eax,0xc(%esp)
	*pos += i;
   1096a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1096e:	8b 10                	mov    (%eax),%edx
   10970:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10974:	01 c2                	add    %eax,%edx
   10976:	8b 44 24 20          	mov    0x20(%esp),%eax
   1097a:	89 10                	mov    %edx,(%eax)
	return i;
   1097c:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   10980:	83 c4 10             	add    $0x10,%esp
   10983:	c3                   	ret    

00010984 <rw_memory>:

// 内存读写操作函数。
static int rw_memory(int rw, unsigned minor, char * buf, int count, off_t * pos)
{
	// 根据内存设备子设备号，分别调用不同的内存读写函数。
	switch(minor) {
   10984:	83 7c 24 08 04       	cmpl   $0x4,0x8(%esp)
   10989:	0f 87 86 00 00 00    	ja     10a15 <rw_memory+0x91>
   1098f:	8b 44 24 08          	mov    0x8(%esp),%eax
   10993:	c1 e0 02             	shl    $0x2,%eax
   10996:	05 3c 41 02 00       	add    $0x2413c,%eax
   1099b:	8b 00                	mov    (%eax),%eax
   1099d:	ff e0                	jmp    *%eax
		case 0:
			return rw_ram(rw, buf, count, pos);
   1099f:	ff 74 24 14          	pushl  0x14(%esp)
   109a3:	ff 74 24 14          	pushl  0x14(%esp)
   109a7:	ff 74 24 14          	pushl  0x14(%esp)
   109ab:	ff 74 24 10          	pushl  0x10(%esp)
   109af:	e8 23 ff ff ff       	call   108d7 <rw_ram>
   109b4:	83 c4 10             	add    $0x10,%esp
   109b7:	c3                   	ret    
		case 1:
			return rw_mem(rw, buf, count, pos);
   109b8:	ff 74 24 14          	pushl  0x14(%esp)
   109bc:	ff 74 24 14          	pushl  0x14(%esp)
   109c0:	ff 74 24 14          	pushl  0x14(%esp)
   109c4:	ff 74 24 10          	pushl  0x10(%esp)
   109c8:	e8 10 ff ff ff       	call   108dd <rw_mem>
   109cd:	83 c4 10             	add    $0x10,%esp
   109d0:	c3                   	ret    
		case 2:
			return rw_kmem(rw, buf, count, pos);
   109d1:	ff 74 24 14          	pushl  0x14(%esp)
   109d5:	ff 74 24 14          	pushl  0x14(%esp)
   109d9:	ff 74 24 14          	pushl  0x14(%esp)
   109dd:	ff 74 24 10          	pushl  0x10(%esp)
   109e1:	e8 fd fe ff ff       	call   108e3 <rw_kmem>
   109e6:	83 c4 10             	add    $0x10,%esp
   109e9:	c3                   	ret    
		case 3:
			return (rw == READ) ? 0 : count;					/* rw_null */
   109ea:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   109ef:	74 05                	je     109f6 <rw_memory+0x72>
   109f1:	8b 44 24 10          	mov    0x10(%esp),%eax
   109f5:	c3                   	ret    
   109f6:	b8 00 00 00 00       	mov    $0x0,%eax
   109fb:	c3                   	ret    
		case 4:
			return rw_port(rw, buf, count, pos);
   109fc:	ff 74 24 14          	pushl  0x14(%esp)
   10a00:	ff 74 24 14          	pushl  0x14(%esp)
   10a04:	ff 74 24 14          	pushl  0x14(%esp)
   10a08:	ff 74 24 10          	pushl  0x10(%esp)
   10a0c:	e8 d8 fe ff ff       	call   108e9 <rw_port>
   10a11:	83 c4 10             	add    $0x10,%esp
   10a14:	c3                   	ret    
		default:
			return -EIO;
   10a15:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
	}
}
   10a1a:	c3                   	ret    

00010a1b <rw_char>:

// 字符设备读写操作函数
// 参数:rw - 读写命令;dev - 设备号;buf - 缓冲区;count - 读写字节数;pos - 读写指针.
// 返回:实际读/写字节数.
int rw_char(int rw, int dev, char * buf, int count, off_t * pos)
{
   10a1b:	83 ec 1c             	sub    $0x1c,%esp
	crw_ptr call_addr;

	// 如果设备号超出系统设备数,则返回出错码.如果该设备没有对应的读/写函数,也返回出错码.否则调用对应设备的读写操作函数,并返回实际读/写的字节数.
	if (MAJOR(dev) >= NRDEVS)
   10a1e:	8b 44 24 24          	mov    0x24(%esp),%eax
   10a22:	c1 e8 08             	shr    $0x8,%eax
   10a25:	83 f8 07             	cmp    $0x7,%eax
   10a28:	76 07                	jbe    10a31 <rw_char+0x16>
		return -ENODEV;
   10a2a:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
   10a2f:	eb 44                	jmp    10a75 <rw_char+0x5a>
	if (!(call_addr = crw_table[MAJOR(dev)]))
   10a31:	8b 44 24 24          	mov    0x24(%esp),%eax
   10a35:	c1 e8 08             	shr    $0x8,%eax
   10a38:	8b 04 85 80 f3 02 00 	mov    0x2f380(,%eax,4),%eax
   10a3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10a43:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10a48:	75 07                	jne    10a51 <rw_char+0x36>
		return -ENODEV;
   10a4a:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
   10a4f:	eb 24                	jmp    10a75 <rw_char+0x5a>
	return call_addr(rw, MINOR(dev), buf, count, pos);
   10a51:	8b 44 24 24          	mov    0x24(%esp),%eax
   10a55:	0f b6 c0             	movzbl %al,%eax
   10a58:	83 ec 0c             	sub    $0xc,%esp
   10a5b:	ff 74 24 3c          	pushl  0x3c(%esp)
   10a5f:	ff 74 24 3c          	pushl  0x3c(%esp)
   10a63:	ff 74 24 3c          	pushl  0x3c(%esp)
   10a67:	50                   	push   %eax
   10a68:	ff 74 24 3c          	pushl  0x3c(%esp)
   10a6c:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   10a70:	ff d0                	call   *%eax
   10a72:	83 c4 20             	add    $0x20,%esp
}
   10a75:	83 c4 1c             	add    $0x1c,%esp
   10a78:	c3                   	ret    

00010a79 <get_fs_byte>:
{
   10a79:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   10a7a:	8b 44 24 08          	mov    0x8(%esp),%eax
   10a7e:	64 8a 00             	mov    %fs:(%eax),%al
   10a81:	89 c3                	mov    %eax,%ebx
	return _v;
   10a83:	89 d8                	mov    %ebx,%eax
}
   10a85:	5b                   	pop    %ebx
   10a86:	c3                   	ret    

00010a87 <put_fs_byte>:
{
   10a87:	83 ec 04             	sub    $0x4,%esp
   10a8a:	8b 44 24 08          	mov    0x8(%esp),%eax
   10a8e:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   10a91:	0f b6 04 24          	movzbl (%esp),%eax
   10a95:	8b 54 24 0c          	mov    0xc(%esp),%edx
   10a99:	64 88 02             	mov    %al,%fs:(%edx)
}
   10a9c:	90                   	nop
   10a9d:	83 c4 04             	add    $0x4,%esp
   10aa0:	c3                   	ret    

00010aa1 <file_read>:

// 文件读函数 - 根据i节点和文件结构，读取文件中数据。
// 由i节点我们可以知道设备号，由filp结构可以知道文件中当前读写指针位置。buf指定用户空间中缓冲区的位置，count是需要读取的字节数。
// 返回值是实际读取的字节数，或出错号（小于0）。
int file_read(struct m_inode * inode, struct file * filp, char * buf, int count)
{
   10aa1:	83 ec 2c             	sub    $0x2c,%esp

	// 首先判断参数的有效性。若需要读取的字节计数count小于等于零，则返回0.若还需要读取的字节数不等于0,就循环执行下面操作，直到数据全
	// 部读出或遇到问题。在读循环操作过程中，我们根据i节点和文件表结构信息，并利用bmap()得到包含文件当前读写位置的数据块在设备上对应
	// 的逻辑块号nr。若nr不为0,则从i节点指定的设备上读取该逻辑块。如果读操作失败则退出循环。若nr为0,表示指定的数据块不存在，置缓冲
	// 块指针为NULL。
	if ((left = count) <= 0)
   10aa4:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10aa8:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   10aac:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   10ab1:	0f 8f 41 01 00 00    	jg     10bf8 <file_read+0x157>
		return 0;
   10ab7:	b8 00 00 00 00       	mov    $0x0,%eax
   10abc:	e9 80 01 00 00       	jmp    10c41 <file_read+0x1a0>
	while (left) {
		// 根据文件的读写偏移位置得到当前写位置对应的逻辑块号
		if (nr = bmap(inode, (filp->f_pos) / BLOCK_SIZE)) {
   10ac1:	8b 44 24 34          	mov    0x34(%esp),%eax
   10ac5:	8b 40 0c             	mov    0xc(%eax),%eax
   10ac8:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
   10ace:	85 c0                	test   %eax,%eax
   10ad0:	0f 48 c2             	cmovs  %edx,%eax
   10ad3:	c1 f8 0a             	sar    $0xa,%eax
   10ad6:	83 ec 08             	sub    $0x8,%esp
   10ad9:	50                   	push   %eax
   10ada:	ff 74 24 3c          	pushl  0x3c(%esp)
   10ade:	e8 44 db ff ff       	call   e627 <bmap>
   10ae3:	83 c4 10             	add    $0x10,%esp
   10ae6:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10aea:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10aef:	74 2b                	je     10b1c <file_read+0x7b>
			// 得到该逻辑块号对应的高速缓冲区
			if (!(bh = bread(inode->i_dev, nr)))
   10af1:	8b 44 24 30          	mov    0x30(%esp),%eax
   10af5:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   10af9:	0f b7 c0             	movzwl %ax,%eax
   10afc:	83 ec 08             	sub    $0x8,%esp
   10aff:	ff 74 24 14          	pushl  0x14(%esp)
   10b03:	50                   	push   %eax
   10b04:	e8 3d eb ff ff       	call   f646 <bread>
   10b09:	83 c4 10             	add    $0x10,%esp
   10b0c:	89 44 24 14          	mov    %eax,0x14(%esp)
   10b10:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   10b15:	75 0d                	jne    10b24 <file_read+0x83>
				break;
   10b17:	e9 e7 00 00 00       	jmp    10c03 <file_read+0x162>
		} else
			bh = NULL;
   10b1c:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   10b23:	00 
		// 接着我们计算文件读写指针在数据块中的偏移值nr，则在该数据块中我们希望读取的字节数为（BLOCK_SIZE - nr）。然后和现在还需读取的
		// 字节数left作比较，其中小值即为本次操作需读取的字节数chars。如果（BLOCK_SIZE - nr）> left，则说明该块是需要读取的最后一块
		// 数据，反之还需要读取下一块数据。之后调整读写文件指针。指针前移此次将读取的字节数chars。剩余字节数left相应减去chars。
		nr = filp->f_pos % BLOCK_SIZE;
   10b24:	8b 44 24 34          	mov    0x34(%esp),%eax
   10b28:	8b 40 0c             	mov    0xc(%eax),%eax
   10b2b:	99                   	cltd   
   10b2c:	c1 ea 16             	shr    $0x16,%edx
   10b2f:	01 d0                	add    %edx,%eax
   10b31:	25 ff 03 00 00       	and    $0x3ff,%eax
   10b36:	29 d0                	sub    %edx,%eax
   10b38:	89 44 24 0c          	mov    %eax,0xc(%esp)
		chars = MIN( BLOCK_SIZE - nr , left );
   10b3c:	b8 00 04 00 00       	mov    $0x400,%eax
   10b41:	2b 44 24 0c          	sub    0xc(%esp),%eax
   10b45:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
   10b49:	0f 4e 44 24 1c       	cmovle 0x1c(%esp),%eax
   10b4e:	89 44 24 18          	mov    %eax,0x18(%esp)
		filp->f_pos += chars;
   10b52:	8b 44 24 34          	mov    0x34(%esp),%eax
   10b56:	8b 50 0c             	mov    0xc(%eax),%edx
   10b59:	8b 44 24 18          	mov    0x18(%esp),%eax
   10b5d:	01 c2                	add    %eax,%edx
   10b5f:	8b 44 24 34          	mov    0x34(%esp),%eax
   10b63:	89 50 0c             	mov    %edx,0xc(%eax)
		left -= chars;
   10b66:	8b 44 24 18          	mov    0x18(%esp),%eax
   10b6a:	29 44 24 1c          	sub    %eax,0x1c(%esp)
		// 若上面从设备上读到了数据，则将p指向缓冲块中开始读取数据的位置，并且复制chars字节到用户缓冲区buf中。否则往用户缓冲区中填入chars
		// 个值字节。
		if (bh) {
   10b6e:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   10b73:	74 74                	je     10be9 <file_read+0x148>
			char * p = nr + bh->b_data;
   10b75:	8b 44 24 14          	mov    0x14(%esp),%eax
   10b79:	8b 10                	mov    (%eax),%edx
   10b7b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10b7f:	01 d0                	add    %edx,%eax
   10b81:	89 44 24 10          	mov    %eax,0x10(%esp)
			while (chars-- > 0)
   10b85:	eb 29                	jmp    10bb0 <file_read+0x10f>
				put_fs_byte(*(p++), buf++);
   10b87:	8b 44 24 38          	mov    0x38(%esp),%eax
   10b8b:	8d 50 01             	lea    0x1(%eax),%edx
   10b8e:	89 54 24 38          	mov    %edx,0x38(%esp)
   10b92:	8b 54 24 10          	mov    0x10(%esp),%edx
   10b96:	8d 4a 01             	lea    0x1(%edx),%ecx
   10b99:	89 4c 24 10          	mov    %ecx,0x10(%esp)
   10b9d:	0f b6 12             	movzbl (%edx),%edx
   10ba0:	0f be d2             	movsbl %dl,%edx
   10ba3:	83 ec 08             	sub    $0x8,%esp
   10ba6:	50                   	push   %eax
   10ba7:	52                   	push   %edx
   10ba8:	e8 da fe ff ff       	call   10a87 <put_fs_byte>
   10bad:	83 c4 10             	add    $0x10,%esp
			while (chars-- > 0)
   10bb0:	8b 44 24 18          	mov    0x18(%esp),%eax
   10bb4:	8d 50 ff             	lea    -0x1(%eax),%edx
   10bb7:	89 54 24 18          	mov    %edx,0x18(%esp)
   10bbb:	85 c0                	test   %eax,%eax
   10bbd:	7f c8                	jg     10b87 <file_read+0xe6>
			brelse(bh);
   10bbf:	83 ec 0c             	sub    $0xc,%esp
   10bc2:	ff 74 24 20          	pushl  0x20(%esp)
   10bc6:	e8 25 ea ff ff       	call   f5f0 <brelse>
   10bcb:	83 c4 10             	add    $0x10,%esp
   10bce:	eb 28                	jmp    10bf8 <file_read+0x157>
		} else {
			while (chars-- > 0)
				put_fs_byte(0, buf++);
   10bd0:	8b 44 24 38          	mov    0x38(%esp),%eax
   10bd4:	8d 50 01             	lea    0x1(%eax),%edx
   10bd7:	89 54 24 38          	mov    %edx,0x38(%esp)
   10bdb:	83 ec 08             	sub    $0x8,%esp
   10bde:	50                   	push   %eax
   10bdf:	6a 00                	push   $0x0
   10be1:	e8 a1 fe ff ff       	call   10a87 <put_fs_byte>
   10be6:	83 c4 10             	add    $0x10,%esp
			while (chars-- > 0)
   10be9:	8b 44 24 18          	mov    0x18(%esp),%eax
   10bed:	8d 50 ff             	lea    -0x1(%eax),%edx
   10bf0:	89 54 24 18          	mov    %edx,0x18(%esp)
   10bf4:	85 c0                	test   %eax,%eax
   10bf6:	7f d8                	jg     10bd0 <file_read+0x12f>
	while (left) {
   10bf8:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   10bfd:	0f 85 be fe ff ff    	jne    10ac1 <file_read+0x20>
		}
	}
	// 修改该i节点的访问时间为当前时间。返回读取的字节数，若读取字节数为0,则返回出错号。
	// CURRENT_TIME是定义在include/linux/sched.h上的宏，用于计算UNIX时间。即从1970年1月1日0时0秒开始，到当前时间。单位是秒。
	inode->i_atime = CURRENT_TIME;
   10c03:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   10c08:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   10c0e:	01 d0                	add    %edx,%eax
   10c10:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10c15:	f7 e2                	mul    %edx
   10c17:	c1 ea 05             	shr    $0x5,%edx
   10c1a:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   10c1f:	01 c2                	add    %eax,%edx
   10c21:	8b 44 24 30          	mov    0x30(%esp),%eax
   10c25:	89 50 28             	mov    %edx,0x28(%eax)
	return (count - left) ? (count-left) : -ERROR;
   10c28:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10c2c:	3b 44 24 1c          	cmp    0x1c(%esp),%eax
   10c30:	74 0a                	je     10c3c <file_read+0x19b>
   10c32:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10c36:	2b 44 24 1c          	sub    0x1c(%esp),%eax
   10c3a:	eb 05                	jmp    10c41 <file_read+0x1a0>
   10c3c:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
}
   10c41:	83 c4 2c             	add    $0x2c,%esp
   10c44:	c3                   	ret    

00010c45 <file_write>:

// 文件写函数 - 根据i节点和文件结构信息，将用户数据写入文件中。
// 由i节点我们可以知道设备号，而由file结构可以知道文件中当前读写指针位置。buf指定用户态中缓冲区的位置，count为需要写入的字节数。
// 返回值是实际写入的字节数，或出错号（小于0).
int file_write(struct m_inode * inode, struct file * filp, char * buf, int count)
{
   10c45:	83 ec 2c             	sub    $0x2c,%esp
	off_t pos;
	int block, c;
	struct buffer_head * bh;
	char * p;
	int i = 0;
   10c48:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   10c4f:	00 
	 */
	/*
	 * OK，当许多进程同时写时，append操作可能不行，但那又怎样。不管怎样那样做会导致混乱一团。
	 */
	// 首先确定数据写入文件的位置。如果是要向文件后添加数据，则将文件读写指针移到文件尾部。否则就将在文件当前读写指针处写入。
	if (filp->f_flags & O_APPEND)
   10c50:	8b 44 24 34          	mov    0x34(%esp),%eax
   10c54:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10c58:	0f b7 c0             	movzwl %ax,%eax
   10c5b:	25 00 04 00 00       	and    $0x400,%eax
   10c60:	85 c0                	test   %eax,%eax
   10c62:	74 10                	je     10c74 <file_write+0x2f>
		pos = inode->i_size;
   10c64:	8b 44 24 30          	mov    0x30(%esp),%eax
   10c68:	8b 40 04             	mov    0x4(%eax),%eax
   10c6b:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   10c6f:	e9 39 01 00 00       	jmp    10dad <file_write+0x168>
	else
		pos = filp->f_pos;
   10c74:	8b 44 24 34          	mov    0x34(%esp),%eax
   10c78:	8b 40 0c             	mov    0xc(%eax),%eax
   10c7b:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	// 然后在已写入字节数i（刚开始时为0）小于指定写入字节数count时，循环执行以下操作。在循环操作过程中，我们先取文件数据块
	// 号（pos/BLOCK_SIZE）在设备上对应的逻辑块号block。如果对应的逻辑块不存在就创建一块。如果得到的逻辑块号 = 0,则表示
	// 创建失败，于是退出循环。否则我们根据该逻辑块号读取设备上的相应逻辑块，若出错也退出循环。
	while (i < count) {
   10c7f:	e9 29 01 00 00       	jmp    10dad <file_write+0x168>
		if (!(block = create_block(inode, pos / BLOCK_SIZE)))
   10c84:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10c88:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
   10c8e:	85 c0                	test   %eax,%eax
   10c90:	0f 48 c2             	cmovs  %edx,%eax
   10c93:	c1 f8 0a             	sar    $0xa,%eax
   10c96:	83 ec 08             	sub    $0x8,%esp
   10c99:	50                   	push   %eax
   10c9a:	ff 74 24 3c          	pushl  0x3c(%esp)
   10c9e:	e8 a0 d9 ff ff       	call   e643 <create_block>
   10ca3:	83 c4 10             	add    $0x10,%esp
   10ca6:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10caa:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10caf:	0f 84 08 01 00 00    	je     10dbd <file_write+0x178>
			break;
		if (!(bh = bread(inode->i_dev, block)))
   10cb5:	8b 44 24 30          	mov    0x30(%esp),%eax
   10cb9:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   10cbd:	0f b7 c0             	movzwl %ax,%eax
   10cc0:	83 ec 08             	sub    $0x8,%esp
   10cc3:	ff 74 24 14          	pushl  0x14(%esp)
   10cc7:	50                   	push   %eax
   10cc8:	e8 79 e9 ff ff       	call   f646 <bread>
   10ccd:	83 c4 10             	add    $0x10,%esp
   10cd0:	89 44 24 08          	mov    %eax,0x8(%esp)
   10cd4:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   10cd9:	0f 84 e1 00 00 00    	je     10dc0 <file_write+0x17b>
			break;
		// 此时缓冲块指针bh正指向刚读入的文件数据块。现在再求出文件当前读写指针在该数据块中的偏移值c，并将指针p指向缓冲块中开始写入
		// 数据的位置，并置该缓冲块已修改标志。对于块中当前指针，从开始读写位置到块末共可写入c = (BLOCK_SIZE - c)个字节。若c大
		// 于剩余还需写入的字节数（count - i），则此次只需再定稿c = (count-i)个字节即可。
		c = pos % BLOCK_SIZE;
   10cdf:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10ce3:	99                   	cltd   
   10ce4:	c1 ea 16             	shr    $0x16,%edx
   10ce7:	01 d0                	add    %edx,%eax
   10ce9:	25 ff 03 00 00       	and    $0x3ff,%eax
   10cee:	29 d0                	sub    %edx,%eax
   10cf0:	89 44 24 18          	mov    %eax,0x18(%esp)
		p = c + bh->b_data;
   10cf4:	8b 44 24 08          	mov    0x8(%esp),%eax
   10cf8:	8b 10                	mov    (%eax),%edx
   10cfa:	8b 44 24 18          	mov    0x18(%esp),%eax
   10cfe:	01 d0                	add    %edx,%eax
   10d00:	89 44 24 14          	mov    %eax,0x14(%esp)
		bh->b_dirt = 1;
   10d04:	8b 44 24 08          	mov    0x8(%esp),%eax
   10d08:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		c = BLOCK_SIZE - c;
   10d0c:	b8 00 04 00 00       	mov    $0x400,%eax
   10d11:	2b 44 24 18          	sub    0x18(%esp),%eax
   10d15:	89 44 24 18          	mov    %eax,0x18(%esp)
		if (c > count - i) c = count - i;
   10d19:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10d1d:	2b 44 24 10          	sub    0x10(%esp),%eax
   10d21:	39 44 24 18          	cmp    %eax,0x18(%esp)
   10d25:	7e 0c                	jle    10d33 <file_write+0xee>
   10d27:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10d2b:	2b 44 24 10          	sub    0x10(%esp),%eax
   10d2f:	89 44 24 18          	mov    %eax,0x18(%esp)
		// 在写入数据之前，我们先预先设置好下一次循环操作要读写文件中的位置。因此我们把pos指针前移此次需要写入的字节数。如果此时pos
		// 位置值超过了文件当前长度，则修改i节点文件长度字段，并置i节点已修改标志。然后把此次要写入的字节数c累加到已写入字节计数值i中，
		// 供循环判断。使用接着双用户缓冲区buf中复制c个字节到调整缓冲块中p指向的开始位置处。复制完后就释放该缓冲块。
		pos += c;
   10d33:	8b 44 24 18          	mov    0x18(%esp),%eax
   10d37:	01 44 24 1c          	add    %eax,0x1c(%esp)
		if (pos > inode->i_size) {
   10d3b:	8b 44 24 30          	mov    0x30(%esp),%eax
   10d3f:	8b 50 04             	mov    0x4(%eax),%edx
   10d42:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10d46:	39 c2                	cmp    %eax,%edx
   10d48:	73 13                	jae    10d5d <file_write+0x118>
			inode->i_size = pos;
   10d4a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   10d4e:	8b 44 24 30          	mov    0x30(%esp),%eax
   10d52:	89 50 04             	mov    %edx,0x4(%eax)
			inode->i_dirt = 1;
   10d55:	8b 44 24 30          	mov    0x30(%esp),%eax
   10d59:	c6 40 37 01          	movb   $0x1,0x37(%eax)
		}
		i += c;
   10d5d:	8b 44 24 18          	mov    0x18(%esp),%eax
   10d61:	01 44 24 10          	add    %eax,0x10(%esp)
		while (c-- > 0)
   10d65:	eb 28                	jmp    10d8f <file_write+0x14a>
			*(p++) = get_fs_byte(buf++);
   10d67:	8b 44 24 38          	mov    0x38(%esp),%eax
   10d6b:	8d 50 01             	lea    0x1(%eax),%edx
   10d6e:	89 54 24 38          	mov    %edx,0x38(%esp)
   10d72:	83 ec 0c             	sub    $0xc,%esp
   10d75:	50                   	push   %eax
   10d76:	e8 fe fc ff ff       	call   10a79 <get_fs_byte>
   10d7b:	83 c4 10             	add    $0x10,%esp
   10d7e:	89 c1                	mov    %eax,%ecx
   10d80:	8b 44 24 14          	mov    0x14(%esp),%eax
   10d84:	8d 50 01             	lea    0x1(%eax),%edx
   10d87:	89 54 24 14          	mov    %edx,0x14(%esp)
   10d8b:	89 ca                	mov    %ecx,%edx
   10d8d:	88 10                	mov    %dl,(%eax)
		while (c-- > 0)
   10d8f:	8b 44 24 18          	mov    0x18(%esp),%eax
   10d93:	8d 50 ff             	lea    -0x1(%eax),%edx
   10d96:	89 54 24 18          	mov    %edx,0x18(%esp)
   10d9a:	85 c0                	test   %eax,%eax
   10d9c:	7f c9                	jg     10d67 <file_write+0x122>
		brelse(bh);
   10d9e:	83 ec 0c             	sub    $0xc,%esp
   10da1:	ff 74 24 14          	pushl  0x14(%esp)
   10da5:	e8 46 e8 ff ff       	call   f5f0 <brelse>
   10daa:	83 c4 10             	add    $0x10,%esp
	while (i < count) {
   10dad:	8b 44 24 10          	mov    0x10(%esp),%eax
   10db1:	3b 44 24 3c          	cmp    0x3c(%esp),%eax
   10db5:	0f 8c c9 fe ff ff    	jl     10c84 <file_write+0x3f>
   10dbb:	eb 04                	jmp    10dc1 <file_write+0x17c>
			break;
   10dbd:	90                   	nop
   10dbe:	eb 01                	jmp    10dc1 <file_write+0x17c>
			break;
   10dc0:	90                   	nop
    }
	// 当数据已经全部写入文件或者在写操作过程中发生问题时就会退出循环。此时我们更改文件修改时间为当前时间，并调整文件读写指针。如果
	// 此次操作不是在文件尾添加数据，则把文件读写指针调整到当前读写位置pos处，并更改文件i节点的修改时间为当前时间。最后返回写入的
	// 字节数，若写入字节数为0,则返回出错号-1。
	inode->i_mtime = CURRENT_TIME;
   10dc1:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   10dc6:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   10dcc:	01 d0                	add    %edx,%eax
   10dce:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10dd3:	f7 e2                	mul    %edx
   10dd5:	c1 ea 05             	shr    $0x5,%edx
   10dd8:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   10ddd:	01 c2                	add    %eax,%edx
   10ddf:	8b 44 24 30          	mov    0x30(%esp),%eax
   10de3:	89 50 08             	mov    %edx,0x8(%eax)
	if (!(filp->f_flags & O_APPEND)) {
   10de6:	8b 44 24 34          	mov    0x34(%esp),%eax
   10dea:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10dee:	0f b7 c0             	movzwl %ax,%eax
   10df1:	25 00 04 00 00       	and    $0x400,%eax
   10df6:	85 c0                	test   %eax,%eax
   10df8:	75 30                	jne    10e2a <file_write+0x1e5>
		filp->f_pos = pos;
   10dfa:	8b 44 24 34          	mov    0x34(%esp),%eax
   10dfe:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   10e02:	89 50 0c             	mov    %edx,0xc(%eax)
		inode->i_ctime = CURRENT_TIME;
   10e05:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   10e0a:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   10e10:	01 d0                	add    %edx,%eax
   10e12:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10e17:	f7 e2                	mul    %edx
   10e19:	c1 ea 05             	shr    $0x5,%edx
   10e1c:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   10e21:	01 c2                	add    %eax,%edx
   10e23:	8b 44 24 30          	mov    0x30(%esp),%eax
   10e27:	89 50 2c             	mov    %edx,0x2c(%eax)
	}
	return (i ? i : -1);
   10e2a:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   10e2f:	74 06                	je     10e37 <file_write+0x1f2>
   10e31:	8b 44 24 10          	mov    0x10(%esp),%eax
   10e35:	eb 05                	jmp    10e3c <file_write+0x1f7>
   10e37:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10e3c:	83 c4 2c             	add    $0x2c,%esp
   10e3f:	c3                   	ret    

00010e40 <put_fs_byte>:
{
   10e40:	83 ec 04             	sub    $0x4,%esp
   10e43:	8b 44 24 08          	mov    0x8(%esp),%eax
   10e47:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   10e4a:	0f b6 04 24          	movzbl (%esp),%eax
   10e4e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   10e52:	64 88 02             	mov    %al,%fs:(%edx)
}
   10e55:	90                   	nop
   10e56:	83 c4 04             	add    $0x4,%esp
   10e59:	c3                   	ret    

00010e5a <cp_stat>:
#include <asm/segment.h>

// 复制文件状态信息。
// 参数inode是文件i节点，statbuf是用户数据空间中stat文件状态结构指针，用于存放取得的状态信息。
static void cp_stat(struct m_inode * inode, struct stat * statbuf)
{
   10e5a:	83 ec 3c             	sub    $0x3c,%esp
	struct stat tmp;
	int i;

	// 首先验证（或分配）存放数据的内存空间。然后临时复制相应节点上的信息。
	verify_area(statbuf, sizeof (struct stat));
   10e5d:	83 ec 08             	sub    $0x8,%esp
   10e60:	6a 20                	push   $0x20
   10e62:	ff 74 24 50          	pushl  0x50(%esp)
   10e66:	e8 30 75 ff ff       	call   839b <verify_area>
   10e6b:	83 c4 10             	add    $0x10,%esp
	tmp.st_dev = inode->i_dev;              						// 文件所在设备号。
   10e6e:	8b 44 24 40          	mov    0x40(%esp),%eax
   10e72:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   10e76:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	tmp.st_ino = inode->i_num;              						// 文件i节点号。
   10e7b:	8b 44 24 40          	mov    0x40(%esp),%eax
   10e7f:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   10e83:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	tmp.st_mode = inode->i_mode;            						// 文件属性。
   10e88:	8b 44 24 40          	mov    0x40(%esp),%eax
   10e8c:	0f b7 00             	movzwl (%eax),%eax
   10e8f:	66 89 44 24 10       	mov    %ax,0x10(%esp)
	tmp.st_nlink = inode->i_nlinks;         						// 文件连接数。
   10e94:	8b 44 24 40          	mov    0x40(%esp),%eax
   10e98:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   10e9c:	88 44 24 12          	mov    %al,0x12(%esp)
	tmp.st_uid = inode->i_uid;              						// 文件的用户ID。
   10ea0:	8b 44 24 40          	mov    0x40(%esp),%eax
   10ea4:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10ea8:	66 89 44 24 14       	mov    %ax,0x14(%esp)
	tmp.st_gid = inode->i_gid;              						// 文件的组ID。
   10ead:	8b 44 24 40          	mov    0x40(%esp),%eax
   10eb1:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   10eb5:	0f b6 c0             	movzbl %al,%eax
   10eb8:	66 89 44 24 16       	mov    %ax,0x16(%esp)
	tmp.st_rdev = inode->i_zone[0];         						// 设备号（若是特殊字符文件或块设备文件)。
   10ebd:	8b 44 24 40          	mov    0x40(%esp),%eax
   10ec1:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   10ec5:	66 89 44 24 18       	mov    %ax,0x18(%esp)
	tmp.st_size = inode->i_size;            						// 文件字节长度（如果文件是常规文件）。
   10eca:	8b 44 24 40          	mov    0x40(%esp),%eax
   10ece:	8b 40 04             	mov    0x4(%eax),%eax
   10ed1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	tmp.st_atime = inode->i_atime;          						// 最后访问时间。
   10ed5:	8b 44 24 40          	mov    0x40(%esp),%eax
   10ed9:	8b 40 28             	mov    0x28(%eax),%eax
   10edc:	89 44 24 20          	mov    %eax,0x20(%esp)
	tmp.st_mtime = inode->i_mtime;          						// 最后修改时间。
   10ee0:	8b 44 24 40          	mov    0x40(%esp),%eax
   10ee4:	8b 40 08             	mov    0x8(%eax),%eax
   10ee7:	89 44 24 24          	mov    %eax,0x24(%esp)
	tmp.st_ctime = inode->i_ctime;          						// 最后i节点修改时间。
   10eeb:	8b 44 24 40          	mov    0x40(%esp),%eax
   10eef:	8b 40 2c             	mov    0x2c(%eax),%eax
   10ef2:	89 44 24 28          	mov    %eax,0x28(%esp)
	// 最后将这些状态信息复制到用户缓冲区中。
	for (i = 0 ; i<sizeof (tmp) ; i++)
   10ef6:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   10efd:	00 
   10efe:	eb 2c                	jmp    10f2c <cp_stat+0xd2>
		put_fs_byte(((char *) &tmp)[i], i + (char *) statbuf);
   10f00:	8b 54 24 2c          	mov    0x2c(%esp),%edx
   10f04:	8b 44 24 44          	mov    0x44(%esp),%eax
   10f08:	01 c2                	add    %eax,%edx
   10f0a:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   10f0e:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
   10f12:	01 c8                	add    %ecx,%eax
   10f14:	0f b6 00             	movzbl (%eax),%eax
   10f17:	0f be c0             	movsbl %al,%eax
   10f1a:	83 ec 08             	sub    $0x8,%esp
   10f1d:	52                   	push   %edx
   10f1e:	50                   	push   %eax
   10f1f:	e8 1c ff ff ff       	call   10e40 <put_fs_byte>
   10f24:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i<sizeof (tmp) ; i++)
   10f27:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   10f2c:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   10f30:	83 f8 1f             	cmp    $0x1f,%eax
   10f33:	76 cb                	jbe    10f00 <cp_stat+0xa6>
}
   10f35:	90                   	nop
   10f36:	83 c4 3c             	add    $0x3c,%esp
   10f39:	c3                   	ret    

00010f3a <sys_stat>:
// 文件状态系统调用。
// 根据给定的文件名获取相关文件状态信息。
// 参数filename是指定的文件名，statbuf是存放状态信息的缓冲区指针。
// 返回：成功返回0,若出错则返回出错码。
int sys_stat(char * filename, struct stat * statbuf)
{
   10f3a:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先根据文件名找出对应的i节点。然后将i节点上的文件状态信息复制到用户缓冲区中，并放回i节点。
	if (!(inode = namei(filename)))
   10f3d:	83 ec 0c             	sub    $0xc,%esp
   10f40:	ff 74 24 2c          	pushl  0x2c(%esp)
   10f44:	e8 44 25 00 00       	call   1348d <namei>
   10f49:	83 c4 10             	add    $0x10,%esp
   10f4c:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10f50:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10f55:	75 07                	jne    10f5e <sys_stat+0x24>
		return -ENOENT;
   10f57:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10f5c:	eb 27                	jmp    10f85 <sys_stat+0x4b>
	cp_stat(inode, statbuf);
   10f5e:	83 ec 08             	sub    $0x8,%esp
   10f61:	ff 74 24 2c          	pushl  0x2c(%esp)
   10f65:	ff 74 24 18          	pushl  0x18(%esp)
   10f69:	e8 ec fe ff ff       	call   10e5a <cp_stat>
   10f6e:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   10f71:	83 ec 0c             	sub    $0xc,%esp
   10f74:	ff 74 24 18          	pushl  0x18(%esp)
   10f78:	e8 e2 d6 ff ff       	call   e65f <iput>
   10f7d:	83 c4 10             	add    $0x10,%esp
	return 0;
   10f80:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f85:	83 c4 1c             	add    $0x1c,%esp
   10f88:	c3                   	ret    

00010f89 <sys_lstat>:

// 文件状态系统调用。
// 根据给定的文件名获取相关文件状态信息。文件路径名中有符号链接文件名，则取符号文件的状态。
// 参数：filename是指定的文件名，statbuf是存放状态信息的缓冲区指针。
int sys_lstat(char * filename, struct stat * statbuf)
{
   10f89:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先根据文件名找出对应的i节点。然后将i节点上的文件状态信息复制到用户缓冲区中，并放回该i节点。
	if (!(inode = lnamei(filename)))        					// 取指定路径名i节点，不跟随符号链接。
   10f8c:	83 ec 0c             	sub    $0xc,%esp
   10f8f:	ff 74 24 2c          	pushl  0x2c(%esp)
   10f93:	e8 db 24 00 00       	call   13473 <lnamei>
   10f98:	83 c4 10             	add    $0x10,%esp
   10f9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10f9f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10fa4:	75 07                	jne    10fad <sys_lstat+0x24>
		return -ENOENT;
   10fa6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10fab:	eb 27                	jmp    10fd4 <sys_lstat+0x4b>
	cp_stat(inode, statbuf);
   10fad:	83 ec 08             	sub    $0x8,%esp
   10fb0:	ff 74 24 2c          	pushl  0x2c(%esp)
   10fb4:	ff 74 24 18          	pushl  0x18(%esp)
   10fb8:	e8 9d fe ff ff       	call   10e5a <cp_stat>
   10fbd:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   10fc0:	83 ec 0c             	sub    $0xc,%esp
   10fc3:	ff 74 24 18          	pushl  0x18(%esp)
   10fc7:	e8 93 d6 ff ff       	call   e65f <iput>
   10fcc:	83 c4 10             	add    $0x10,%esp
	return 0;
   10fcf:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10fd4:	83 c4 1c             	add    $0x1c,%esp
   10fd7:	c3                   	ret    

00010fd8 <sys_fstat>:
// 文件状态系统调用。
// 根据给定的文件句柄获取相关文件状态信息。
// 参数fd是指定文件的句柄（描述符），statbuf是存放状态信息的缓冲区指针。
// 返回：成功返回0,若出错则返回出错码。
int sys_fstat(unsigned int fd, struct stat * statbuf)
{
   10fd8:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先取文件句柄对应的文件结构，然后从中得到文件的i节点。然后将i节点上的文件状态信息复制到用户缓冲区中。如果
	// 文件句柄值大于一个程序最多打开文件数NR_OPEN，或者该句柄的文件结构指针为空，或者对应文件结构的i节点字段为空，
	// 则出错，返回出错码并退出。
	if (fd >= NR_OPEN || !(f = current->filp[fd]) || !(inode = f->f_inode))
   10fdb:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
   10fe0:	77 30                	ja     11012 <sys_fstat+0x3a>
   10fe2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   10fe7:	8b 54 24 20          	mov    0x20(%esp),%edx
   10feb:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   10ff1:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   10ff5:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10ff9:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10ffe:	74 12                	je     11012 <sys_fstat+0x3a>
   11000:	8b 44 24 0c          	mov    0xc(%esp),%eax
   11004:	8b 40 08             	mov    0x8(%eax),%eax
   11007:	89 44 24 08          	mov    %eax,0x8(%esp)
   1100b:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   11010:	75 07                	jne    11019 <sys_fstat+0x41>
		return -EBADF;
   11012:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   11017:	eb 18                	jmp    11031 <sys_fstat+0x59>
	cp_stat(inode, statbuf);
   11019:	83 ec 08             	sub    $0x8,%esp
   1101c:	ff 74 24 2c          	pushl  0x2c(%esp)
   11020:	ff 74 24 14          	pushl  0x14(%esp)
   11024:	e8 31 fe ff ff       	call   10e5a <cp_stat>
   11029:	83 c4 10             	add    $0x10,%esp
	return 0;
   1102c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11031:	83 c4 1c             	add    $0x1c,%esp
   11034:	c3                   	ret    

00011035 <sys_readlink>:
// 该调用读取符号链接文件的内容（即该符号链接所指向文件的路径名字符串），并放到指定长度的用户缓冲区中。若缓冲区
// 太小，就会截断符号链接的内容。
// 参数：path -- 符号链接文件路径名；buf -- 用户缓冲区；bufsiz -- 缓冲区长度。
// 返回：成功则返回放入缓冲区中的字符数；若失败则返回出错码。
int sys_readlink(const char * path, char * buf, int bufsiz)
{
   11035:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	char c;

	// 首先检查和验证函数参数的有效性，并对其进行调整。用户缓冲区字节长度bufsiz必须在1--1023之间。然后取得符号链接
	// 文件名的i节点，并读取该文件的第1块数据内容。之后放回i节点。
	if (bufsiz <= 0)
   11038:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1103d:	7f 0a                	jg     11049 <sys_readlink+0x14>
		return -EBADF;
   1103f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   11044:	e9 07 01 00 00       	jmp    11150 <sys_readlink+0x11b>
	if (bufsiz > 1023)
   11049:	81 7c 24 28 ff 03 00 	cmpl   $0x3ff,0x28(%esp)
   11050:	00 
   11051:	7e 08                	jle    1105b <sys_readlink+0x26>
		bufsiz = 1023;
   11053:	c7 44 24 28 ff 03 00 	movl   $0x3ff,0x28(%esp)
   1105a:	00 
	verify_area(buf, bufsiz);
   1105b:	83 ec 08             	sub    $0x8,%esp
   1105e:	ff 74 24 30          	pushl  0x30(%esp)
   11062:	ff 74 24 30          	pushl  0x30(%esp)
   11066:	e8 30 73 ff ff       	call   839b <verify_area>
   1106b:	83 c4 10             	add    $0x10,%esp
	if (!(inode = lnamei(path)))
   1106e:	83 ec 0c             	sub    $0xc,%esp
   11071:	ff 74 24 2c          	pushl  0x2c(%esp)
   11075:	e8 f9 23 00 00       	call   13473 <lnamei>
   1107a:	83 c4 10             	add    $0x10,%esp
   1107d:	89 44 24 04          	mov    %eax,0x4(%esp)
   11081:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   11086:	75 0a                	jne    11092 <sys_readlink+0x5d>
		return -ENOENT;
   11088:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   1108d:	e9 be 00 00 00       	jmp    11150 <sys_readlink+0x11b>
	if (inode->i_zone[0])
   11092:	8b 44 24 04          	mov    0x4(%esp),%eax
   11096:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1109a:	66 85 c0             	test   %ax,%ax
   1109d:	74 29                	je     110c8 <sys_readlink+0x93>
		bh = bread(inode->i_dev, inode->i_zone[0]);
   1109f:	8b 44 24 04          	mov    0x4(%esp),%eax
   110a3:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   110a7:	0f b7 d0             	movzwl %ax,%edx
   110aa:	8b 44 24 04          	mov    0x4(%esp),%eax
   110ae:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   110b2:	0f b7 c0             	movzwl %ax,%eax
   110b5:	83 ec 08             	sub    $0x8,%esp
   110b8:	52                   	push   %edx
   110b9:	50                   	push   %eax
   110ba:	e8 87 e5 ff ff       	call   f646 <bread>
   110bf:	83 c4 10             	add    $0x10,%esp
   110c2:	89 44 24 0c          	mov    %eax,0xc(%esp)
   110c6:	eb 08                	jmp    110d0 <sys_readlink+0x9b>
	else
		bh = NULL;
   110c8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   110cf:	00 
	iput(inode);
   110d0:	83 ec 0c             	sub    $0xc,%esp
   110d3:	ff 74 24 10          	pushl  0x10(%esp)
   110d7:	e8 83 d5 ff ff       	call   e65f <iput>
   110dc:	83 c4 10             	add    $0x10,%esp
	// 如果读取文件数据内容成功，则从内容中复制最多bufsiz个字符到用户缓冲区中，不复制NULL字符。最后释放缓冲块，并返回
	// 复制的字节数。
	if (!bh)
   110df:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   110e4:	75 07                	jne    110ed <sys_readlink+0xb8>
		return 0;
   110e6:	b8 00 00 00 00       	mov    $0x0,%eax
   110eb:	eb 63                	jmp    11150 <sys_readlink+0x11b>
	i = 0;
   110ed:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   110f4:	00 
	while (i < bufsiz && (c = bh->b_data[i])) {
   110f5:	eb 22                	jmp    11119 <sys_readlink+0xe4>
		i++;
   110f7:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
		put_fs_byte(c, buf++);
   110fc:	8b 44 24 24          	mov    0x24(%esp),%eax
   11100:	8d 50 01             	lea    0x1(%eax),%edx
   11103:	89 54 24 24          	mov    %edx,0x24(%esp)
   11107:	0f be 54 24 03       	movsbl 0x3(%esp),%edx
   1110c:	83 ec 08             	sub    $0x8,%esp
   1110f:	50                   	push   %eax
   11110:	52                   	push   %edx
   11111:	e8 2a fd ff ff       	call   10e40 <put_fs_byte>
   11116:	83 c4 10             	add    $0x10,%esp
	while (i < bufsiz && (c = bh->b_data[i])) {
   11119:	8b 44 24 08          	mov    0x8(%esp),%eax
   1111d:	3b 44 24 28          	cmp    0x28(%esp),%eax
   11121:	7d 1a                	jge    1113d <sys_readlink+0x108>
   11123:	8b 44 24 0c          	mov    0xc(%esp),%eax
   11127:	8b 10                	mov    (%eax),%edx
   11129:	8b 44 24 08          	mov    0x8(%esp),%eax
   1112d:	01 d0                	add    %edx,%eax
   1112f:	0f b6 00             	movzbl (%eax),%eax
   11132:	88 44 24 03          	mov    %al,0x3(%esp)
   11136:	80 7c 24 03 00       	cmpb   $0x0,0x3(%esp)
   1113b:	75 ba                	jne    110f7 <sys_readlink+0xc2>
	}
	brelse(bh);
   1113d:	83 ec 0c             	sub    $0xc,%esp
   11140:	ff 74 24 18          	pushl  0x18(%esp)
   11144:	e8 a7 e4 ff ff       	call   f5f0 <brelse>
   11149:	83 c4 10             	add    $0x10,%esp
	return i;
   1114c:	8b 44 24 08          	mov    0x8(%esp),%eax
}
   11150:	83 c4 1c             	add    $0x1c,%esp
   11153:	c3                   	ret    

00011154 <strncpy>:
{
   11154:	57                   	push   %edi
   11155:	56                   	push   %esi
   11156:	53                   	push   %ebx
__asm__(
   11157:	8b 54 24 14          	mov    0x14(%esp),%edx
   1115b:	8b 5c 24 10          	mov    0x10(%esp),%ebx
   1115f:	8b 4c 24 18          	mov    0x18(%esp),%ecx
   11163:	89 d6                	mov    %edx,%esi
   11165:	89 df                	mov    %ebx,%edi
   11167:	fc                   	cld    
   11168:	49                   	dec    %ecx
   11169:	78 08                	js     11173 <strncpy+0x1f>
   1116b:	ac                   	lods   %ds:(%esi),%al
   1116c:	aa                   	stos   %al,%es:(%edi)
   1116d:	84 c0                	test   %al,%al
   1116f:	75 f7                	jne    11168 <strncpy+0x14>
   11171:	f3 aa                	rep stos %al,%es:(%edi)
return dest;												// 返回目的字符串指针.
   11173:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   11177:	5b                   	pop    %ebx
   11178:	5e                   	pop    %esi
   11179:	5f                   	pop    %edi
   1117a:	c3                   	ret    

0001117b <strchr>:
{
   1117b:	56                   	push   %esi
   1117c:	83 ec 04             	sub    $0x4,%esp
   1117f:	8b 44 24 10          	mov    0x10(%esp),%eax
   11183:	88 04 24             	mov    %al,(%esp)
__asm__(
   11186:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1118a:	0f b6 04 24          	movzbl (%esp),%eax
   1118e:	89 d6                	mov    %edx,%esi
   11190:	fc                   	cld    
   11191:	88 c4                	mov    %al,%ah
   11193:	ac                   	lods   %ds:(%esi),%al
   11194:	38 e0                	cmp    %ah,%al
   11196:	74 09                	je     111a1 <strchr+0x26>
   11198:	84 c0                	test   %al,%al
   1119a:	75 f7                	jne    11193 <strchr+0x18>
   1119c:	be 01 00 00 00       	mov    $0x1,%esi
   111a1:	89 f0                	mov    %esi,%eax
   111a3:	48                   	dec    %eax
}
   111a4:	83 c4 04             	add    $0x4,%esp
   111a7:	5e                   	pop    %esi
   111a8:	c3                   	ret    

000111a9 <get_fs_byte>:
{
   111a9:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   111aa:	8b 44 24 08          	mov    0x8(%esp),%eax
   111ae:	64 8a 00             	mov    %fs:(%eax),%al
   111b1:	89 c3                	mov    %eax,%ebx
	return _v;
   111b3:	89 d8                	mov    %ebx,%eax
}
   111b5:	5b                   	pop    %ebx
   111b6:	c3                   	ret    

000111b7 <get_fs_long>:
{
   111b7:	83 ec 10             	sub    $0x10,%esp
	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   111ba:	8b 44 24 14          	mov    0x14(%esp),%eax
   111be:	64 8b 00             	mov    %fs:(%eax),%eax
   111c1:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   111c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   111c9:	83 c4 10             	add    $0x10,%esp
   111cc:	c3                   	ret    

000111cd <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   111cd:	8b 44 24 04          	mov    0x4(%esp),%eax
   111d1:	8b 54 24 08          	mov    0x8(%esp),%edx
   111d5:	64 89 02             	mov    %eax,%fs:(%edx)
}
   111d8:	90                   	nop
   111d9:	c3                   	ret    

000111da <get_fs>:
 */

//// 取fs段寄存器值(选择符).
// 返回:fs段寄存器值.
static inline unsigned long get_fs()
{
   111da:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;
	__asm__("mov %%fs,%%ax":"=a" (_v):);
   111dd:	66 8c e0             	mov    %fs,%ax
   111e0:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   111e5:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   111ea:	83 c4 10             	add    $0x10,%esp
   111ed:	c3                   	ret    

000111ee <get_ds>:

//// 取ds面寄存器值.
// 返回:ds段寄存器值.
static inline unsigned long get_ds()
{
   111ee:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;
	__asm__("mov %%ds,%%ax":"=a" (_v):);
   111f1:	66 8c d8             	mov    %ds,%ax
   111f4:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   111f9:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   111fe:	83 c4 10             	add    $0x10,%esp
   11201:	c3                   	ret    

00011202 <set_fs>:

//// 设置fs段寄存器.
// 参数:val - 段值(选择符).
static inline void set_fs(unsigned long val)
{
	__asm__("mov %0,%%fs"::"a" ((unsigned short) val));
   11202:	8b 44 24 04          	mov    0x4(%esp),%eax
   11206:	8e e0                	mov    %eax,%fs
}
   11208:	90                   	nop
   11209:	c3                   	ret    

0001120a <sys_uselib>:
// 参数：library - 库文件名。
// 为进程选择一个库文件，并替换进程当前库文件i节点字段值为这里指定库文件名的i节点指针。如果library指针为空，则把进程
// 当前的库文件释放掉。
// 返回：成功返回0，否则返回出错码。
int sys_uselib(const char * library)
{
   1120a:	53                   	push   %ebx
   1120b:	83 ec 18             	sub    $0x18,%esp
	unsigned long base;

	// 首先判断当前进程是否普通进程。这是通过查看当前进程的空间长度来做到的。因为普通进程的空间长度被设置为TASK_SIZE（64
	// MB）。因此若进程逻辑地址空间长度不等于TASK_SIZE则返回出错码（无效参数）。否则取库文件i节点inode。若库文件名指针
	// 空，则设置inode等于NULL。
	if (get_limit(0x17) != TASK_SIZE)
   1120e:	b8 17 00 00 00       	mov    $0x17,%eax
   11213:	0f 03 c0             	lsl    %ax,%eax
   11216:	40                   	inc    %eax
   11217:	89 44 24 08          	mov    %eax,0x8(%esp)
   1121b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1121f:	3d 00 00 00 04       	cmp    $0x4000000,%eax
   11224:	74 0a                	je     11230 <sys_uselib+0x26>
		return -EINVAL;
   11226:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1122b:	e9 ca 00 00 00       	jmp    112fa <sys_uselib+0xf0>
	if (library) {
   11230:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   11235:	74 24                	je     1125b <sys_uselib+0x51>
		if (!(inode = namei(library)))							/* get library inode */
   11237:	83 ec 0c             	sub    $0xc,%esp
   1123a:	ff 74 24 2c          	pushl  0x2c(%esp)
   1123e:	e8 4a 22 00 00       	call   1348d <namei>
   11243:	83 c4 10             	add    $0x10,%esp
   11246:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1124a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1124f:	75 12                	jne    11263 <sys_uselib+0x59>
			return -ENOENT;                 					/* 取库文件i节点 */
   11251:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   11256:	e9 9f 00 00 00       	jmp    112fa <sys_uselib+0xf0>
	} else
		inode = NULL;
   1125b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   11262:	00 
	/* we should check filetypes (headers etc), but we don't */
	/* 我们应该检查一下文件类型（如头部信息等），但是我们还没有这样做。*/
	// 然后放回进程原库文件i节点，并预置进程库i节点字段为空。接着取得进程的库代码所在位置，并释放原库代码的页表所占用的内存
	// 页面。最后让进程库i节点字段指向新库i节点，并返回0（成功）。
	iput(current->library);
   11263:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11268:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
   1126e:	83 ec 0c             	sub    $0xc,%esp
   11271:	50                   	push   %eax
   11272:	e8 e8 d3 ff ff       	call   e65f <iput>
   11277:	83 c4 10             	add    $0x10,%esp
	current->library = NULL;
   1127a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1127f:	c7 80 40 03 00 00 00 	movl   $0x0,0x340(%eax)
   11286:	00 00 00 
	base = get_base(current->ldt[2]);
   11289:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1128e:	05 a8 03 00 00       	add    $0x3a8,%eax
   11293:	83 c0 02             	add    $0x2,%eax
   11296:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   1129c:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
   112a2:	8d 5a 04             	lea    0x4(%edx),%ebx
   112a5:	8b 0d a0 f1 02 00    	mov    0x2f1a0,%ecx
   112ab:	81 c1 a8 03 00 00    	add    $0x3a8,%ecx
   112b1:	83 c1 07             	add    $0x7,%ecx
   112b4:	8a 31                	mov    (%ecx),%dh
   112b6:	8a 13                	mov    (%ebx),%dl
   112b8:	c1 e2 10             	shl    $0x10,%edx
   112bb:	66 8b 10             	mov    (%eax),%dx
   112be:	89 d0                	mov    %edx,%eax
   112c0:	89 44 24 04          	mov    %eax,0x4(%esp)
   112c4:	8b 44 24 04          	mov    0x4(%esp),%eax
   112c8:	89 04 24             	mov    %eax,(%esp)
	base += LIBRARY_OFFSET;
   112cb:	81 04 24 00 00 c0 03 	addl   $0x3c00000,(%esp)
	free_page_tables(base, LIBRARY_SIZE);
   112d2:	83 ec 08             	sub    $0x8,%esp
   112d5:	68 00 00 40 00       	push   $0x400000
   112da:	ff 74 24 0c          	pushl  0xc(%esp)
   112de:	e8 09 aa ff ff       	call   bcec <free_page_tables>
   112e3:	83 c4 10             	add    $0x10,%esp
	current->library = inode;
   112e6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   112eb:	8b 54 24 0c          	mov    0xc(%esp),%edx
   112ef:	89 90 40 03 00 00    	mov    %edx,0x340(%eax)
	return 0;
   112f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   112fa:	83 c4 18             	add    $0x18,%esp
   112fd:	5b                   	pop    %ebx
   112fe:	c3                   	ret    

000112ff <create_tables>:
 */
// 在新任务中创建参数和环境变量指针表.
// 参数:p - 数据段中参数和环境信息偏移指针;argc - 参数个数;envc - 环境变量个数.
// 返回:栈指针值.
static unsigned long * create_tables(char * p, int argc, int envc)
{
   112ff:	83 ec 10             	sub    $0x10,%esp
	// 栈指针是以4字节(1节)为边界进行寻址的,因此这里需让sp为4的整数倍值.此时sp位于参数环境表的末端.然后我们先把sp向下
	// (低地址方向)移动,在栈中空出环境变量指针占用的空间,并让环境变量指针envp指向该处.多空出的一个位置用于在最后存放一
	// 个NULL值.下面指针加1,sp将递增指针宽度字节值(4字节).再把sp向下移动,空出命令行参数指针占用的空间,并让argv指针
	// 指向该处.同样,多空处的一个位置用于存放一个NULL值.此时sp指向参数指针块的起始处,我们将环境参数块指针envp和命令行
	// 参数块指针以及命令行参数个数值分别压入栈中.
	sp = (unsigned long *) (0xfffffffc & (unsigned long) p);
   11302:	8b 44 24 14          	mov    0x14(%esp),%eax
   11306:	83 e0 fc             	and    $0xfffffffc,%eax
   11309:	89 44 24 04          	mov    %eax,0x4(%esp)
	sp -= envc + 1;
   1130d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   11311:	8d 50 01             	lea    0x1(%eax),%edx
   11314:	b8 00 00 00 00       	mov    $0x0,%eax
   11319:	29 d0                	sub    %edx,%eax
   1131b:	c1 e0 02             	shl    $0x2,%eax
   1131e:	01 44 24 04          	add    %eax,0x4(%esp)
	envp = sp;
   11322:	8b 44 24 04          	mov    0x4(%esp),%eax
   11326:	89 44 24 08          	mov    %eax,0x8(%esp)
	sp -= argc + 1;
   1132a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1132e:	8d 50 01             	lea    0x1(%eax),%edx
   11331:	b8 00 00 00 00       	mov    $0x0,%eax
   11336:	29 d0                	sub    %edx,%eax
   11338:	c1 e0 02             	shl    $0x2,%eax
   1133b:	01 44 24 04          	add    %eax,0x4(%esp)
	argv = sp;
   1133f:	8b 44 24 04          	mov    0x4(%esp),%eax
   11343:	89 44 24 0c          	mov    %eax,0xc(%esp)
	put_fs_long((unsigned long)envp, --sp);
   11347:	83 6c 24 04 04       	subl   $0x4,0x4(%esp)
   1134c:	8b 44 24 08          	mov    0x8(%esp),%eax
   11350:	ff 74 24 04          	pushl  0x4(%esp)
   11354:	50                   	push   %eax
   11355:	e8 73 fe ff ff       	call   111cd <put_fs_long>
   1135a:	83 c4 08             	add    $0x8,%esp
	put_fs_long((unsigned long)argv, --sp);
   1135d:	83 6c 24 04 04       	subl   $0x4,0x4(%esp)
   11362:	8b 44 24 0c          	mov    0xc(%esp),%eax
   11366:	ff 74 24 04          	pushl  0x4(%esp)
   1136a:	50                   	push   %eax
   1136b:	e8 5d fe ff ff       	call   111cd <put_fs_long>
   11370:	83 c4 08             	add    $0x8,%esp
	put_fs_long((unsigned long)argc, --sp);
   11373:	83 6c 24 04 04       	subl   $0x4,0x4(%esp)
   11378:	8b 44 24 18          	mov    0x18(%esp),%eax
   1137c:	ff 74 24 04          	pushl  0x4(%esp)
   11380:	50                   	push   %eax
   11381:	e8 47 fe ff ff       	call   111cd <put_fs_long>
   11386:	83 c4 08             	add    $0x8,%esp
	// 再将命令行各参数指针和环境变量各指针分别放入前面空出来的相应地方,最后分别放置一个NULL指针.
	while (argc-- > 0) {
   11389:	eb 32                	jmp    113bd <create_tables+0xbe>
		put_fs_long((unsigned long) p, argv++);
   1138b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1138f:	8d 50 04             	lea    0x4(%eax),%edx
   11392:	89 54 24 0c          	mov    %edx,0xc(%esp)
   11396:	8b 54 24 14          	mov    0x14(%esp),%edx
   1139a:	50                   	push   %eax
   1139b:	52                   	push   %edx
   1139c:	e8 2c fe ff ff       	call   111cd <put_fs_long>
   113a1:	83 c4 08             	add    $0x8,%esp
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
   113a4:	90                   	nop
   113a5:	8b 44 24 14          	mov    0x14(%esp),%eax
   113a9:	8d 50 01             	lea    0x1(%eax),%edx
   113ac:	89 54 24 14          	mov    %edx,0x14(%esp)
   113b0:	50                   	push   %eax
   113b1:	e8 f3 fd ff ff       	call   111a9 <get_fs_byte>
   113b6:	83 c4 04             	add    $0x4,%esp
   113b9:	84 c0                	test   %al,%al
   113bb:	75 e8                	jne    113a5 <create_tables+0xa6>
	while (argc-- > 0) {
   113bd:	8b 44 24 18          	mov    0x18(%esp),%eax
   113c1:	8d 50 ff             	lea    -0x1(%eax),%edx
   113c4:	89 54 24 18          	mov    %edx,0x18(%esp)
   113c8:	85 c0                	test   %eax,%eax
   113ca:	7f bf                	jg     1138b <create_tables+0x8c>
	}
	put_fs_long(0, argv);
   113cc:	ff 74 24 0c          	pushl  0xc(%esp)
   113d0:	6a 00                	push   $0x0
   113d2:	e8 f6 fd ff ff       	call   111cd <put_fs_long>
   113d7:	83 c4 08             	add    $0x8,%esp
	while (envc-- > 0) {
   113da:	eb 32                	jmp    1140e <create_tables+0x10f>
		put_fs_long((unsigned long) p, envp++);
   113dc:	8b 44 24 08          	mov    0x8(%esp),%eax
   113e0:	8d 50 04             	lea    0x4(%eax),%edx
   113e3:	89 54 24 08          	mov    %edx,0x8(%esp)
   113e7:	8b 54 24 14          	mov    0x14(%esp),%edx
   113eb:	50                   	push   %eax
   113ec:	52                   	push   %edx
   113ed:	e8 db fd ff ff       	call   111cd <put_fs_long>
   113f2:	83 c4 08             	add    $0x8,%esp
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
   113f5:	90                   	nop
   113f6:	8b 44 24 14          	mov    0x14(%esp),%eax
   113fa:	8d 50 01             	lea    0x1(%eax),%edx
   113fd:	89 54 24 14          	mov    %edx,0x14(%esp)
   11401:	50                   	push   %eax
   11402:	e8 a2 fd ff ff       	call   111a9 <get_fs_byte>
   11407:	83 c4 04             	add    $0x4,%esp
   1140a:	84 c0                	test   %al,%al
   1140c:	75 e8                	jne    113f6 <create_tables+0xf7>
	while (envc-- > 0) {
   1140e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   11412:	8d 50 ff             	lea    -0x1(%eax),%edx
   11415:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   11419:	85 c0                	test   %eax,%eax
   1141b:	7f bf                	jg     113dc <create_tables+0xdd>
	}
	put_fs_long(0, envp);
   1141d:	ff 74 24 08          	pushl  0x8(%esp)
   11421:	6a 00                	push   $0x0
   11423:	e8 a5 fd ff ff       	call   111cd <put_fs_long>
   11428:	83 c4 08             	add    $0x8,%esp
	return sp;										// 返回构造的当前新栈指针.
   1142b:	8b 44 24 04          	mov    0x4(%esp),%eax
}
   1142f:	83 c4 10             	add    $0x10,%esp
   11432:	c3                   	ret    

00011433 <count>:
// 计算参数个数.
// 参数:argv - 参数指针数组,最后一个指针项是NULL.
// 统计参数指针数组中指针的个数.
// 返回:参数个数.
static int count(char ** argv)
{
   11433:	83 ec 10             	sub    $0x10,%esp
	int i = 0;
   11436:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1143d:	00 
	char ** tmp;

	if (tmp = argv)
   1143e:	8b 44 24 14          	mov    0x14(%esp),%eax
   11442:	89 44 24 08          	mov    %eax,0x8(%esp)
   11446:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1144b:	74 1f                	je     1146c <count+0x39>
		while (get_fs_long((unsigned long *) (tmp++)))
   1144d:	eb 05                	jmp    11454 <count+0x21>
			i++;
   1144f:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
		while (get_fs_long((unsigned long *) (tmp++)))
   11454:	8b 44 24 08          	mov    0x8(%esp),%eax
   11458:	8d 50 04             	lea    0x4(%eax),%edx
   1145b:	89 54 24 08          	mov    %edx,0x8(%esp)
   1145f:	50                   	push   %eax
   11460:	e8 52 fd ff ff       	call   111b7 <get_fs_long>
   11465:	83 c4 04             	add    $0x4,%esp
   11468:	85 c0                	test   %eax,%eax
   1146a:	75 e3                	jne    1144f <count+0x1c>

	return i;
   1146c:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   11470:	83 c4 10             	add    $0x10,%esp
   11473:	c3                   	ret    

00011474 <copy_strings>:
// 并始终指向参数字符串的头部.字符串来源标志from_kmem应该是TYT为了给execve()增添执行脚本文件的功能而新加的参数.当没有运行
// 脚本文件的功能时,所有参数字符串都在用户数据空间中。
// 返回:参数和环境空间当前头部指针.若出错则返回0.
static unsigned long copy_strings(int argc, char ** argv, unsigned long *page,
		unsigned long p, int from_kmem)
{
   11474:	53                   	push   %ebx
   11475:	83 ec 28             	sub    $0x28,%esp
	char *tmp, *pag;
	int len, offset = 0;
   11478:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   1147f:	00 
	unsigned long old_fs, new_fs;

	if (!p)
   11480:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   11485:	75 0a                	jne    11491 <copy_strings+0x1d>
		return 0;												/* bullet-proofing */	/* 偏移指针验证 */
   11487:	b8 00 00 00 00       	mov    $0x0,%eax
   1148c:	e9 b9 01 00 00       	jmp    1164a <copy_strings+0x1d6>
	// 首先取当前段寄存器ds(指向内核数据段)和fs值,分别保存到变量new_fs和old_fs中.如果字符串和字符串数组(指针)来自内核空间,则设置fs段寄存器指向内核数据段.
	new_fs = get_ds();
   11491:	e8 58 fd ff ff       	call   111ee <get_ds>
   11496:	89 44 24 0c          	mov    %eax,0xc(%esp)
	old_fs = get_fs();
   1149a:	e8 3b fd ff ff       	call   111da <get_fs>
   1149f:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (from_kmem == 2)											// 若串指针在内核空间则设置fs指向内核空间.
   114a3:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   114a8:	0f 85 6f 01 00 00    	jne    1161d <copy_strings+0x1a9>
		set_fs(new_fs);
   114ae:	ff 74 24 0c          	pushl  0xc(%esp)
   114b2:	e8 4b fd ff ff       	call   11202 <set_fs>
   114b7:	83 c4 04             	add    $0x4,%esp
	// 然后循环处理各个参数,从最后一个参数逆向开始复制,复制到指定偏移地址处.在循环中,首先取需要复制的当前字符串指针.如果字符串
	// 在用户空间而字符串数组(字符串指针)在内核空间,则设置fs段寄存器指向内核数据段(ds).并在内核数据空间中取了字符串指针tmp之
	// 后就立刻恢复fs段寄存器原值(fs再指回用户空间).否则不用修改fs值而直接从用户空间取字符串指针到tmp.
	while (argc-- > 0) {
   114ba:	e9 5e 01 00 00       	jmp    1161d <copy_strings+0x1a9>
		if (from_kmem == 1)										// 若串指针在内核空间,则fs指向内核空间.
   114bf:	83 7c 24 40 01       	cmpl   $0x1,0x40(%esp)
   114c4:	75 0c                	jne    114d2 <copy_strings+0x5e>
			set_fs(new_fs);
   114c6:	ff 74 24 0c          	pushl  0xc(%esp)
   114ca:	e8 33 fd ff ff       	call   11202 <set_fs>
   114cf:	83 c4 04             	add    $0x4,%esp
		if (!(tmp = (char *)get_fs_long(((unsigned long *)argv) + argc)))
   114d2:	8b 44 24 30          	mov    0x30(%esp),%eax
   114d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   114dd:	8b 44 24 34          	mov    0x34(%esp),%eax
   114e1:	01 d0                	add    %edx,%eax
   114e3:	50                   	push   %eax
   114e4:	e8 ce fc ff ff       	call   111b7 <get_fs_long>
   114e9:	83 c4 04             	add    $0x4,%esp
   114ec:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   114f0:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   114f5:	75 10                	jne    11507 <copy_strings+0x93>
			panic("argc is wrong");
   114f7:	83 ec 0c             	sub    $0xc,%esp
   114fa:	68 50 41 02 00       	push   $0x24150
   114ff:	e8 fe 76 ff ff       	call   8c02 <panic>
   11504:	83 c4 10             	add    $0x10,%esp
		if (from_kmem == 1)										// 若串指针在内核空间,则fs指回用户空间.
   11507:	83 7c 24 40 01       	cmpl   $0x1,0x40(%esp)
   1150c:	75 0f                	jne    1151d <copy_strings+0xa9>
			set_fs(old_fs);
   1150e:	83 ec 0c             	sub    $0xc,%esp
   11511:	ff 74 24 14          	pushl  0x14(%esp)
   11515:	e8 e8 fc ff ff       	call   11202 <set_fs>
   1151a:	83 c4 10             	add    $0x10,%esp
		// 然后从用户空间取该字符串,并计算参数字符串长度len.此后tmp指向该字符串末端.如果该字符串长度超过此时参数和环境空间中还剩余
		// 的空闲长度,则空间不够了.于是恢复fs段寄存器值(如果被改变的话)并返回0.不过因为参数和环境空间留128KB,所以通常不可能发生这
		// 种情况.
		len = 0;												/* remember zero-padding */
   1151d:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   11524:	00 
		do {													/* 我们知道串是以NULL字节结尾的 */
			len++;
   11525:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
		} while (get_fs_byte(tmp++));
   1152a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1152e:	8d 50 01             	lea    0x1(%eax),%edx
   11531:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   11535:	83 ec 0c             	sub    $0xc,%esp
   11538:	50                   	push   %eax
   11539:	e8 6b fc ff ff       	call   111a9 <get_fs_byte>
   1153e:	83 c4 10             	add    $0x10,%esp
   11541:	84 c0                	test   %al,%al
   11543:	75 e0                	jne    11525 <copy_strings+0xb1>
			return 0;
		}
		// 接着我们逆向逐个字符地把字符串复制到参数和环境空间末端处.在循环复制字符串的字符过程中,我们首先要判断参数和环境空间中相应位
		// 置处是否已经有内存页面.如果还没有就先为其申请1页内存页面.偏移量offset被用途为在一个页面中的当前指针偏移值.因为刚开始执行
		// 本函数时,偏移变量offset被初始化为0,所以(offset-1 < 0)肯定成立而使得offset重新被设置为当前p指针在页面范围内的偏移值.
		while (len) {
   11545:	e9 c8 00 00 00       	jmp    11612 <copy_strings+0x19e>
			--p; --tmp; --len;
   1154a:	83 6c 24 3c 01       	subl   $0x1,0x3c(%esp)
   1154f:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
   11554:	83 6c 24 14 01       	subl   $0x1,0x14(%esp)
			if (--offset < 0) {
   11559:	83 6c 24 10 01       	subl   $0x1,0x10(%esp)
   1155e:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   11563:	0f 89 8a 00 00 00    	jns    115f3 <copy_strings+0x17f>
				offset = p % PAGE_SIZE;
   11569:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   1156d:	25 ff 0f 00 00       	and    $0xfff,%eax
   11572:	89 44 24 10          	mov    %eax,0x10(%esp)
				if (from_kmem == 2)								// 若串在内核空间则fs指回用户空间.
   11576:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   1157b:	75 0f                	jne    1158c <copy_strings+0x118>
					set_fs(old_fs);
   1157d:	83 ec 0c             	sub    $0xc,%esp
   11580:	ff 74 24 14          	pushl  0x14(%esp)
   11584:	e8 79 fc ff ff       	call   11202 <set_fs>
   11589:	83 c4 10             	add    $0x10,%esp
				// 如果当前偏移值p所在的串空间页面指针数组项page[p/PAGE_SIZE] == 0,表示此时p指针所处的空间内存页面还不存在,则需申请一空闲
				// 内存页,并将该页面指针填入指针数组,同时也使页面指针pag指向该新页面.若申请不到空闲页面则返回0.
				if (!(pag = (char *) page[p / PAGE_SIZE]) &&
   1158c:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   11590:	c1 e8 0c             	shr    $0xc,%eax
   11593:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1159a:	8b 44 24 38          	mov    0x38(%esp),%eax
   1159e:	01 d0                	add    %edx,%eax
   115a0:	8b 00                	mov    (%eax),%eax
   115a2:	89 44 24 18          	mov    %eax,0x18(%esp)
   115a6:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   115ab:	75 30                	jne    115dd <copy_strings+0x169>
				    !(pag = (char *) (page[p / PAGE_SIZE] =
   115ad:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   115b1:	c1 e8 0c             	shr    $0xc,%eax
   115b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   115bb:	8b 44 24 38          	mov    0x38(%esp),%eax
   115bf:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
				      get_free_page())))
   115c2:	e8 3a ba ff ff       	call   d001 <get_free_page>
				    !(pag = (char *) (page[p / PAGE_SIZE] =
   115c7:	89 03                	mov    %eax,(%ebx)
   115c9:	8b 03                	mov    (%ebx),%eax
   115cb:	89 44 24 18          	mov    %eax,0x18(%esp)
				if (!(pag = (char *) page[p / PAGE_SIZE]) &&
   115cf:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   115d4:	75 07                	jne    115dd <copy_strings+0x169>
					return 0;
   115d6:	b8 00 00 00 00       	mov    $0x0,%eax
   115db:	eb 6d                	jmp    1164a <copy_strings+0x1d6>
				if (from_kmem == 2)								// 若串在内核空间则fs指向内核空间.
   115dd:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   115e2:	75 0f                	jne    115f3 <copy_strings+0x17f>
					set_fs(new_fs);
   115e4:	83 ec 0c             	sub    $0xc,%esp
   115e7:	ff 74 24 18          	pushl  0x18(%esp)
   115eb:	e8 12 fc ff ff       	call   11202 <set_fs>
   115f0:	83 c4 10             	add    $0x10,%esp

			}
			// 然后从fs段中复制字符串的1字节到参数和环境空间内存页面pag的offset处.
			*(pag + offset) = get_fs_byte(tmp);
   115f3:	83 ec 0c             	sub    $0xc,%esp
   115f6:	ff 74 24 28          	pushl  0x28(%esp)
   115fa:	e8 aa fb ff ff       	call   111a9 <get_fs_byte>
   115ff:	83 c4 10             	add    $0x10,%esp
   11602:	89 c1                	mov    %eax,%ecx
   11604:	8b 54 24 10          	mov    0x10(%esp),%edx
   11608:	8b 44 24 18          	mov    0x18(%esp),%eax
   1160c:	01 d0                	add    %edx,%eax
   1160e:	89 ca                	mov    %ecx,%edx
   11610:	88 10                	mov    %dl,(%eax)
		while (len) {
   11612:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   11617:	0f 85 2d ff ff ff    	jne    1154a <copy_strings+0xd6>
	while (argc-- > 0) {
   1161d:	8b 44 24 30          	mov    0x30(%esp),%eax
   11621:	8d 50 ff             	lea    -0x1(%eax),%edx
   11624:	89 54 24 30          	mov    %edx,0x30(%esp)
   11628:	85 c0                	test   %eax,%eax
   1162a:	0f 8f 8f fe ff ff    	jg     114bf <copy_strings+0x4b>
		}
	}
	// 如果字符串和字符串数组在内核空间,则恢复fs段寄存器原值.最后,返回参数和环境空间中已复制参数的头部偏移值.
	if (from_kmem == 2)
   11630:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   11635:	75 0f                	jne    11646 <copy_strings+0x1d2>
		set_fs(old_fs);
   11637:	83 ec 0c             	sub    $0xc,%esp
   1163a:	ff 74 24 14          	pushl  0x14(%esp)
   1163e:	e8 bf fb ff ff       	call   11202 <set_fs>
   11643:	83 c4 10             	add    $0x10,%esp
	return p;
   11646:	8b 44 24 3c          	mov    0x3c(%esp),%eax
}
   1164a:	83 c4 28             	add    $0x28,%esp
   1164d:	5b                   	pop    %ebx
   1164e:	c3                   	ret    

0001164f <change_ldt>:
// 修改任务的局部描述符表内容.
// 修改局部描述符表LDT中描述符的段基址和段限长,并将参数和环境空间页面放置在数据段末端.
// 参数:text_size - 执行文件头部中a_text字段给出的代码段长度值;page - 参数和环境空间页面指针数组.
// 返回:数据段限长值(64MB)
static unsigned long change_ldt(unsigned long text_size, unsigned long * page)
{
   1164f:	56                   	push   %esi
   11650:	53                   	push   %ebx
   11651:	83 ec 24             	sub    $0x24,%esp
	int i;

	// 首先把代码和数据段长度均设置为64MB.然后取当前进程局部描述符表代码段描述符中代码段基址.代码段基址与数据段基址相同.
	// 再使用这些新值重新设置局部表中代码段和数据段描述符中的基址和段限长.这里请注意,由于被加载的新程序的代码和数据段基址
	// 与原程序的相同,因此没有必要再重复设置它们,即186和188行上的两条设置段基址的语句多余,可省略.
	code_limit = TASK_SIZE;
   11654:	c7 44 24 14 00 00 00 	movl   $0x4000000,0x14(%esp)
   1165b:	04 
	data_limit = TASK_SIZE;
   1165c:	c7 44 24 10 00 00 00 	movl   $0x4000000,0x10(%esp)
   11663:	04 
	code_base = get_base(current->ldt[1]);
   11664:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11669:	05 a0 03 00 00       	add    $0x3a0,%eax
   1166e:	83 c0 02             	add    $0x2,%eax
   11671:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   11677:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
   1167d:	8d 5a 04             	lea    0x4(%edx),%ebx
   11680:	8b 0d a0 f1 02 00    	mov    0x2f1a0,%ecx
   11686:	81 c1 a0 03 00 00    	add    $0x3a0,%ecx
   1168c:	83 c1 07             	add    $0x7,%ecx
   1168f:	8a 31                	mov    (%ecx),%dh
   11691:	8a 13                	mov    (%ebx),%dl
   11693:	c1 e2 10             	shl    $0x10,%edx
   11696:	66 8b 10             	mov    (%eax),%dx
   11699:	89 d0                	mov    %edx,%eax
   1169b:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1169f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   116a3:	89 44 24 08          	mov    %eax,0x8(%esp)
	data_base = code_base;
   116a7:	8b 44 24 08          	mov    0x8(%esp),%eax
   116ab:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	set_base(current->ldt[1], code_base);
   116af:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   116b4:	05 a0 03 00 00       	add    $0x3a0,%eax
   116b9:	8d 48 02             	lea    0x2(%eax),%ecx
   116bc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   116c1:	05 a0 03 00 00       	add    $0x3a0,%eax
   116c6:	8d 58 04             	lea    0x4(%eax),%ebx
   116c9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   116ce:	05 a0 03 00 00       	add    $0x3a0,%eax
   116d3:	8d 70 07             	lea    0x7(%eax),%esi
   116d6:	8b 44 24 08          	mov    0x8(%esp),%eax
   116da:	89 c2                	mov    %eax,%edx
   116dc:	66 89 11             	mov    %dx,(%ecx)
   116df:	c1 ca 10             	ror    $0x10,%edx
   116e2:	88 13                	mov    %dl,(%ebx)
   116e4:	88 36                	mov    %dh,(%esi)
   116e6:	89 d0                	mov    %edx,%eax
   116e8:	89 44 24 04          	mov    %eax,0x4(%esp)
	set_limit(current->ldt[1], code_limit);
   116ec:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   116f1:	05 a0 03 00 00       	add    $0x3a0,%eax
   116f6:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   116fc:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
   11702:	8d 4a 06             	lea    0x6(%edx),%ecx
   11705:	8b 54 24 14          	mov    0x14(%esp),%edx
   11709:	83 ea 01             	sub    $0x1,%edx
   1170c:	c1 ea 0c             	shr    $0xc,%edx
   1170f:	66 89 10             	mov    %dx,(%eax)
   11712:	c1 ca 10             	ror    $0x10,%edx
   11715:	8a 31                	mov    (%ecx),%dh
   11717:	80 e6 f0             	and    $0xf0,%dh
   1171a:	08 f2                	or     %dh,%dl
   1171c:	88 11                	mov    %dl,(%ecx)
	set_base(current->ldt[2], data_base);
   1171e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11723:	05 a8 03 00 00       	add    $0x3a8,%eax
   11728:	8d 48 02             	lea    0x2(%eax),%ecx
   1172b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11730:	05 a8 03 00 00       	add    $0x3a8,%eax
   11735:	8d 58 04             	lea    0x4(%eax),%ebx
   11738:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1173d:	05 a8 03 00 00       	add    $0x3a8,%eax
   11742:	8d 70 07             	lea    0x7(%eax),%esi
   11745:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   11749:	89 c2                	mov    %eax,%edx
   1174b:	66 89 11             	mov    %dx,(%ecx)
   1174e:	c1 ca 10             	ror    $0x10,%edx
   11751:	88 13                	mov    %dl,(%ebx)
   11753:	88 36                	mov    %dh,(%esi)
   11755:	89 d0                	mov    %edx,%eax
   11757:	89 04 24             	mov    %eax,(%esp)
	set_limit(current->ldt[2], data_limit);
   1175a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1175f:	05 a8 03 00 00       	add    $0x3a8,%eax
   11764:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   1176a:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
   11770:	8d 4a 06             	lea    0x6(%edx),%ecx
   11773:	8b 54 24 10          	mov    0x10(%esp),%edx
   11777:	83 ea 01             	sub    $0x1,%edx
   1177a:	c1 ea 0c             	shr    $0xc,%edx
   1177d:	66 89 10             	mov    %dx,(%eax)
   11780:	c1 ca 10             	ror    $0x10,%edx
   11783:	8a 31                	mov    (%ecx),%dh
   11785:	80 e6 f0             	and    $0xf0,%dh
   11788:	08 f2                	or     %dh,%dl
   1178a:	88 11                	mov    %dl,(%ecx)
	/* make sure fs points to the NEW data segment */
	/* 要确信fs段寄存器已指向新的数据段 */
	// fs段寄存器中放入局部表数据段描述符的选择符(0x17).即默认情况下fs都指向任务数据段.
	__asm__("pushl $0x17\n\tpop %%fs"::);
   1178c:	6a 17                	push   $0x17
   1178e:	0f a1                	pop    %fs
	// 然后将参数和环境空间已存放数据的页面(最多有MAX_ARG_PAGES页,128KB)放到数据段末端.方法是从进程空间库代码位置开始处
	// 逆向一页一页地放.库文件代码占用进程空间最后4MB.函数put_dirty_page()用于把物理页面映射到进程逻辑空间中.在mm/memory.c中.
	data_base += data_limit - LIBRARY_SIZE;
   11790:	8b 54 24 10          	mov    0x10(%esp),%edx
   11794:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   11798:	01 d0                	add    %edx,%eax
   1179a:	2d 00 00 40 00       	sub    $0x400000,%eax
   1179f:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	for (i = MAX_ARG_PAGES - 1 ; i >= 0 ; i--) {
   117a3:	c7 44 24 18 1f 00 00 	movl   $0x1f,0x18(%esp)
   117aa:	00 
   117ab:	eb 47                	jmp    117f4 <change_ldt+0x1a5>
		data_base -= PAGE_SIZE;
   117ad:	81 6c 24 1c 00 10 00 	subl   $0x1000,0x1c(%esp)
   117b4:	00 
		if (page[i])									// 若该页面存在,就放置该页面.
   117b5:	8b 44 24 18          	mov    0x18(%esp),%eax
   117b9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   117c0:	8b 44 24 34          	mov    0x34(%esp),%eax
   117c4:	01 d0                	add    %edx,%eax
   117c6:	8b 00                	mov    (%eax),%eax
   117c8:	85 c0                	test   %eax,%eax
   117ca:	74 23                	je     117ef <change_ldt+0x1a0>
			put_dirty_page(page[i], data_base);
   117cc:	8b 44 24 18          	mov    0x18(%esp),%eax
   117d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   117d7:	8b 44 24 34          	mov    0x34(%esp),%eax
   117db:	01 d0                	add    %edx,%eax
   117dd:	8b 00                	mov    (%eax),%eax
   117df:	83 ec 08             	sub    $0x8,%esp
   117e2:	ff 74 24 24          	pushl  0x24(%esp)
   117e6:	50                   	push   %eax
   117e7:	e8 0c a9 ff ff       	call   c0f8 <put_dirty_page>
   117ec:	83 c4 10             	add    $0x10,%esp
	for (i = MAX_ARG_PAGES - 1 ; i >= 0 ; i--) {
   117ef:	83 6c 24 18 01       	subl   $0x1,0x18(%esp)
   117f4:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   117f9:	79 b2                	jns    117ad <change_ldt+0x15e>
	}
	return data_limit;									// 最后返回数据段限长(64MB).
   117fb:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   117ff:	83 c4 24             	add    $0x24,%esp
   11802:	5b                   	pop    %ebx
   11803:	5e                   	pop    %esi
   11804:	c3                   	ret    

00011805 <do_execve>:
// argv - 命令行参数指针数组的指针;
// envp - 环境变更指针数组的指针.
// 返回:如果调用成功,则不返回;否则设置出错号,并返回-1.
int do_execve(unsigned long * eip, long tmp, char * filename,
	char ** argv, char ** envp)
{
   11805:	56                   	push   %esi
   11806:	53                   	push   %ebx
   11807:	81 ec 04 02 00 00    	sub    $0x204,%esp
	struct exec ex;
	unsigned long page[MAX_ARG_PAGES];							// 参数和环境串空间页面指针数组.
	int i, argc, envc;
	int e_uid, e_gid;											// 有效用户ID和有效组ID.
	int retval;
	int sh_bang = 0;											// 控制是否需要执行脚本程序.
   1180d:	c7 84 24 ec 01 00 00 	movl   $0x0,0x1ec(%esp)
   11814:	00 00 00 00 
	unsigned long p = PAGE_SIZE * MAX_ARG_PAGES - 4;			// p指向参数和环境空间的最后部.
   11818:	c7 84 24 e8 01 00 00 	movl   $0x1fffc,0x1e8(%esp)
   1181f:	fc ff 01 00 

	// 在内核中打印要执行的文件的文件名字
	char s, filename1[128];
	int index = 0;
   11823:	c7 84 24 e4 01 00 00 	movl   $0x0,0x1e4(%esp)
   1182a:	00 00 00 00 
	while (1) {
		s = get_fs_byte(filename + index);
   1182e:	8b 94 24 18 02 00 00 	mov    0x218(%esp),%edx
   11835:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   1183c:	01 d0                	add    %edx,%eax
   1183e:	50                   	push   %eax
   1183f:	e8 65 f9 ff ff       	call   111a9 <get_fs_byte>
   11844:	83 c4 04             	add    $0x4,%esp
   11847:	88 84 24 df 01 00 00 	mov    %al,0x1df(%esp)
		if (s) {
   1184e:	80 bc 24 df 01 00 00 	cmpb   $0x0,0x1df(%esp)
   11855:	00 
   11856:	74 24                	je     1187c <do_execve+0x77>
			*(filename1 + index) = s;
   11858:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   1185f:	8d 94 24 94 00 00 00 	lea    0x94(%esp),%edx
   11866:	01 c2                	add    %eax,%edx
   11868:	0f b6 84 24 df 01 00 	movzbl 0x1df(%esp),%eax
   1186f:	00 
   11870:	88 02                	mov    %al,(%edx)
			index++;
   11872:	83 84 24 e4 01 00 00 	addl   $0x1,0x1e4(%esp)
   11879:	01 
		s = get_fs_byte(filename + index);
   1187a:	eb b2                	jmp    1182e <do_execve+0x29>
		} else {
			break;
   1187c:	90                   	nop
		}
	}
	*(filename1 + index + 1) = '\0';
   1187d:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   11884:	8d 50 01             	lea    0x1(%eax),%edx
   11887:	8d 84 24 94 00 00 00 	lea    0x94(%esp),%eax
   1188e:	01 d0                	add    %edx,%eax
   11890:	c6 00 00             	movb   $0x0,(%eax)
	Log(LOG_INFO_TYPE, "<<<<< process pid = %d do_execve : %s >>>>>\n", current->pid, filename1);
   11893:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11898:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
   1189e:	8d 94 24 94 00 00 00 	lea    0x94(%esp),%edx
   118a5:	52                   	push   %edx
   118a6:	50                   	push   %eax
   118a7:	68 60 41 02 00       	push   $0x24160
   118ac:	6a 00                	push   $0x0
   118ae:	e8 35 10 01 00       	call   228e8 <Log>
   118b3:	83 c4 10             	add    $0x10,%esp
	// 上行把p初始设置成位于128KB空间的最后1个长字处.在初始参数和环境空间的操作过程中,p将用来指明在128KB空间中的当前位置.
	// 另外,参数eip[1]是调用本次系统调用的原用户程序代码段寄存器CS值,其中的段选择符当然必须是当前任务的代码段选择符(0x000f).
	// 若不是该值,那么CS只能会是内核代码段的选择符0x0008.但这是绝对不允许的,因为内核代码是常驻内存而不能被替换掉的.因此下面根据
	// eip[1]的值确认是否符合正常情况.然后再初始化128KB的参数和环境串空间,把所有字节清零,并取出执行文件的i节点.再根据函数参数
	// 分别计算出命令行参数和环境字符串的个数argc和envc.另外,执行文件必须是常规文件.
	if ((0xffff & eip[1]) != 0x000f)
   118b6:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   118bd:	83 c0 04             	add    $0x4,%eax
   118c0:	8b 00                	mov    (%eax),%eax
   118c2:	0f b7 c0             	movzwl %ax,%eax
   118c5:	83 f8 0f             	cmp    $0xf,%eax
   118c8:	74 10                	je     118da <do_execve+0xd5>
		panic("execve called from supervisor mode");
   118ca:	83 ec 0c             	sub    $0xc,%esp
   118cd:	68 90 41 02 00       	push   $0x24190
   118d2:	e8 2b 73 ff ff       	call   8c02 <panic>
   118d7:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)						/* clear page-table */
   118da:	c7 84 24 f8 01 00 00 	movl   $0x0,0x1f8(%esp)
   118e1:	00 00 00 00 
   118e5:	eb 1a                	jmp    11901 <do_execve+0xfc>
		page[i] = 0;
   118e7:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   118ee:	c7 84 84 14 01 00 00 	movl   $0x0,0x114(%esp,%eax,4)
   118f5:	00 00 00 00 
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)						/* clear page-table */
   118f9:	83 84 24 f8 01 00 00 	addl   $0x1,0x1f8(%esp)
   11900:	01 
   11901:	83 bc 24 f8 01 00 00 	cmpl   $0x1f,0x1f8(%esp)
   11908:	1f 
   11909:	7e dc                	jle    118e7 <do_execve+0xe2>
	if (!(inode = namei(filename)))								/* get executables inode */
   1190b:	8b 84 24 18 02 00 00 	mov    0x218(%esp),%eax
   11912:	83 ec 0c             	sub    $0xc,%esp
   11915:	50                   	push   %eax
   11916:	e8 72 1b 00 00       	call   1348d <namei>
   1191b:	83 c4 10             	add    $0x10,%esp
   1191e:	89 84 24 fc 01 00 00 	mov    %eax,0x1fc(%esp)
   11925:	83 bc 24 fc 01 00 00 	cmpl   $0x0,0x1fc(%esp)
   1192c:	00 
   1192d:	75 0a                	jne    11939 <do_execve+0x134>
		return -ENOENT;
   1192f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   11934:	e9 92 0a 00 00       	jmp    123cb <do_execve+0xbc6>
	argc = count(argv);											// 命令行参数个数.
   11939:	83 ec 0c             	sub    $0xc,%esp
   1193c:	ff b4 24 28 02 00 00 	pushl  0x228(%esp)
   11943:	e8 eb fa ff ff       	call   11433 <count>
   11948:	83 c4 10             	add    $0x10,%esp
   1194b:	89 84 24 f4 01 00 00 	mov    %eax,0x1f4(%esp)
	envc = count(envp);											// 环境字符串变量个数.
   11952:	83 ec 0c             	sub    $0xc,%esp
   11955:	ff b4 24 2c 02 00 00 	pushl  0x22c(%esp)
   1195c:	e8 d2 fa ff ff       	call   11433 <count>
   11961:	83 c4 10             	add    $0x10,%esp
   11964:	89 84 24 d8 01 00 00 	mov    %eax,0x1d8(%esp)

restart_interp:
	if (!S_ISREG(inode->i_mode)) {								/* must be regular file */
   1196b:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11972:	0f b7 00             	movzwl (%eax),%eax
   11975:	0f b7 c0             	movzwl %ax,%eax
   11978:	25 00 f0 00 00       	and    $0xf000,%eax
   1197d:	3d 00 80 00 00       	cmp    $0x8000,%eax
   11982:	74 10                	je     11994 <do_execve+0x18f>
		retval = -EACCES;
   11984:	c7 84 24 f0 01 00 00 	movl   $0xfffffff3,0x1f0(%esp)
   1198b:	f3 ff ff ff 
		goto exec_error2;										// 若不是常规文件则置出错码,跳转到376行.
   1198f:	e9 e5 09 00 00       	jmp    12379 <do_execve+0xb74>
	// 字段值取到i中后,我们首先查看属性中是否设置了"设置-用户-ID"(set-user-ID)标志和"设置-组-ID)(set-group-id)标志.这两
	// 个标志主要是让一般用户能够执行特权用户(如超级用户root)的程序,例如改变密码的程序passwd等.如果set-user-ID标志置位,则
	// 后面执行进程的有效用户ID(euid)就设置成执行文件的用户ID,否则设置成当前进程的euid.如果执行文件set-group-id被置位的话,
	// 则执行进程的有效组ID(egid)就设置为执行执行文件的组ID.否则设置成当前进程的egid.这里暂把这两个判断出来的值保存在变量
	// e_uid和e_gid中.
	i = inode->i_mode;
   11994:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   1199b:	0f b7 00             	movzwl (%eax),%eax
   1199e:	0f b7 c0             	movzwl %ax,%eax
   119a1:	89 84 24 f8 01 00 00 	mov    %eax,0x1f8(%esp)
	e_uid = (i & S_ISUID) ? inode->i_uid : current->euid;
   119a8:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   119af:	25 00 08 00 00       	and    $0x800,%eax
   119b4:	85 c0                	test   %eax,%eax
   119b6:	74 10                	je     119c8 <do_execve+0x1c3>
   119b8:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   119bf:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   119c3:	0f b7 c0             	movzwl %ax,%eax
   119c6:	eb 0f                	jmp    119d7 <do_execve+0x1d2>
   119c8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   119cd:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   119d4:	0f b7 c0             	movzwl %ax,%eax
   119d7:	89 84 24 d4 01 00 00 	mov    %eax,0x1d4(%esp)
	e_gid = (i & S_ISGID) ? inode->i_gid : current->egid;
   119de:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   119e5:	25 00 04 00 00       	and    $0x400,%eax
   119ea:	85 c0                	test   %eax,%eax
   119ec:	74 10                	je     119fe <do_execve+0x1f9>
   119ee:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   119f5:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   119f9:	0f b6 c0             	movzbl %al,%eax
   119fc:	eb 0f                	jmp    11a0d <do_execve+0x208>
   119fe:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11a03:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
   11a0a:	0f b7 c0             	movzwl %ax,%eax
   11a0d:	89 84 24 d0 01 00 00 	mov    %eax,0x1d0(%esp)
	// 现在根据进程的euid和egid和执行文件的访问属性进行比较.如果执行文件属于运行进程的用户,则把文件属性值i右移6位,此时其最低3
	// 位是文件宿主的访问权限标志.否则的话如果执行文件与当前进程的用户属于同组,则使属性最低3位是执行文件组用户的访问权限标志.否则
	// 此时属性字最低3位就是其他用户访问该执行文件的权限.然后我们根据属性字i的最低3位值来判断当前进程是否有权限运行这个执行文件.
	// 如果选出的相应用户没有运行该文件的权力(位0是执行权限),并且其他用户也没有任何权限或者当前进程用户不是超级用户,则表明当前进
	// 程没有权力运行这个执行文件.于是置不可执行出错码,并跳转到exec_error2处去作退出处理.
	if (current->euid == inode->i_uid)
   11a14:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11a19:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   11a20:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11a27:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   11a2b:	66 39 c2             	cmp    %ax,%dx
   11a2e:	75 0a                	jne    11a3a <do_execve+0x235>
		i >>= 6;
   11a30:	c1 bc 24 f8 01 00 00 	sarl   $0x6,0x1f8(%esp)
   11a37:	06 
   11a38:	eb 26                	jmp    11a60 <do_execve+0x25b>
	else if (in_group_p(inode->i_gid))
   11a3a:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11a41:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   11a45:	0f b6 c0             	movzbl %al,%eax
   11a48:	83 ec 0c             	sub    $0xc,%esp
   11a4b:	50                   	push   %eax
   11a4c:	e8 c4 81 ff ff       	call   9c15 <in_group_p>
   11a51:	83 c4 10             	add    $0x10,%esp
   11a54:	85 c0                	test   %eax,%eax
   11a56:	74 08                	je     11a60 <do_execve+0x25b>
		i >>= 3;
   11a58:	c1 bc 24 f8 01 00 00 	sarl   $0x3,0x1f8(%esp)
   11a5f:	03 
	if (!(i & 1) &&
   11a60:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   11a67:	83 e0 01             	and    $0x1,%eax
   11a6a:	85 c0                	test   %eax,%eax
   11a6c:	75 35                	jne    11aa3 <do_execve+0x29e>
	    !((inode->i_mode & 0111) && suser())) {
   11a6e:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11a75:	0f b7 00             	movzwl (%eax),%eax
   11a78:	0f b7 c0             	movzwl %ax,%eax
   11a7b:	83 e0 49             	and    $0x49,%eax
	if (!(i & 1) &&
   11a7e:	85 c0                	test   %eax,%eax
   11a80:	74 11                	je     11a93 <do_execve+0x28e>
	    !((inode->i_mode & 0111) && suser())) {
   11a82:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11a87:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   11a8e:	66 85 c0             	test   %ax,%ax
   11a91:	74 10                	je     11aa3 <do_execve+0x29e>
		retval = -ENOEXEC;
   11a93:	c7 84 24 f0 01 00 00 	movl   $0xfffffff8,0x1f0(%esp)
   11a9a:	f8 ff ff ff 
		goto exec_error2;
   11a9e:	e9 d6 08 00 00       	jmp    12379 <do_execve+0xb74>
	// 的解释程序名及后面的参数(若有的话),然后将这些参数和脚本文件名放进执行文件(此时是解释程序)的命令行参数空间中.在这之前我们当然
	// 需要先把函数指定的原有命令行参数和环境字符串放到128KB空间中,而这里建立起来的命令行参数则放到它们前面位置处(因为是逆向放置).
	// 最后让内核执行脚本文件的解释程序.下面就是在设置好解释程序的脚本文件名等参数后,取出解释程序的i节点并跳转到229行支执行解释程序.
	// 由于我们需要跳转到执行过的代码229行支.因此在下面确认并处理了脚本文件之后需要设置一个禁止再次执行下面的脚本处理代码标志sh_bang.
	// 在后面的代码中该标志也用来表示我们已经设置好执行文件的命令行参数,不要重复设置.
	if (!(bh = bread(inode->i_dev, inode->i_zone[0]))) {
   11aa3:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11aaa:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   11aae:	0f b7 d0             	movzwl %ax,%edx
   11ab1:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11ab8:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   11abc:	0f b7 c0             	movzwl %ax,%eax
   11abf:	83 ec 08             	sub    $0x8,%esp
   11ac2:	52                   	push   %edx
   11ac3:	50                   	push   %eax
   11ac4:	e8 7d db ff ff       	call   f646 <bread>
   11ac9:	83 c4 10             	add    $0x10,%esp
   11acc:	89 84 24 cc 01 00 00 	mov    %eax,0x1cc(%esp)
   11ad3:	83 bc 24 cc 01 00 00 	cmpl   $0x0,0x1cc(%esp)
   11ada:	00 
   11adb:	75 10                	jne    11aed <do_execve+0x2e8>
		retval = -EACCES;
   11add:	c7 84 24 f0 01 00 00 	movl   $0xfffffff3,0x1f0(%esp)
   11ae4:	f3 ff ff ff 
		goto exec_error2;
   11ae8:	e9 8c 08 00 00       	jmp    12379 <do_execve+0xb74>
	}
	ex = *((struct exec *) bh->b_data);								/* read exec-header */
   11aed:	8b 84 24 cc 01 00 00 	mov    0x1cc(%esp),%eax
   11af4:	8b 00                	mov    (%eax),%eax
   11af6:	8b 10                	mov    (%eax),%edx
   11af8:	89 94 24 94 01 00 00 	mov    %edx,0x194(%esp)
   11aff:	8b 50 04             	mov    0x4(%eax),%edx
   11b02:	89 94 24 98 01 00 00 	mov    %edx,0x198(%esp)
   11b09:	8b 50 08             	mov    0x8(%eax),%edx
   11b0c:	89 94 24 9c 01 00 00 	mov    %edx,0x19c(%esp)
   11b13:	8b 50 0c             	mov    0xc(%eax),%edx
   11b16:	89 94 24 a0 01 00 00 	mov    %edx,0x1a0(%esp)
   11b1d:	8b 50 10             	mov    0x10(%eax),%edx
   11b20:	89 94 24 a4 01 00 00 	mov    %edx,0x1a4(%esp)
   11b27:	8b 50 14             	mov    0x14(%eax),%edx
   11b2a:	89 94 24 a8 01 00 00 	mov    %edx,0x1a8(%esp)
   11b31:	8b 50 18             	mov    0x18(%eax),%edx
   11b34:	89 94 24 ac 01 00 00 	mov    %edx,0x1ac(%esp)
   11b3b:	8b 40 1c             	mov    0x1c(%eax),%eax
   11b3e:	89 84 24 b0 01 00 00 	mov    %eax,0x1b0(%esp)
	if ((bh->b_data[0] == '#') && (bh->b_data[1] == '!') && (!sh_bang)) {
   11b45:	8b 84 24 cc 01 00 00 	mov    0x1cc(%esp),%eax
   11b4c:	8b 00                	mov    (%eax),%eax
   11b4e:	0f b6 00             	movzbl (%eax),%eax
   11b51:	3c 23                	cmp    $0x23,%al
   11b53:	0f 85 61 03 00 00    	jne    11eba <do_execve+0x6b5>
   11b59:	8b 84 24 cc 01 00 00 	mov    0x1cc(%esp),%eax
   11b60:	8b 00                	mov    (%eax),%eax
   11b62:	83 c0 01             	add    $0x1,%eax
   11b65:	0f b6 00             	movzbl (%eax),%eax
   11b68:	3c 21                	cmp    $0x21,%al
   11b6a:	0f 85 4a 03 00 00    	jne    11eba <do_execve+0x6b5>
   11b70:	83 bc 24 ec 01 00 00 	cmpl   $0x0,0x1ec(%esp)
   11b77:	00 
   11b78:	0f 85 3c 03 00 00    	jne    11eba <do_execve+0x6b5>
		unsigned long old_fs;

		// 从这里开始，我们从脚本文件中提取解释程序名及其参数，并把解释程序名、解释程序的参数和脚本文件名组合放入环境参数块中。首先复制脚本
		// 文件头1行字符‘#!’后面的字符串到buf中，其中含有脚本解释程序名（例如/bin/sh），也可能还包含解释程序的几个参数。然后对buf中的内容
		// 进行处理。删除开始的空格、制表符。
		strncpy(buf, bh->b_data + 2, 127);
   11b7e:	8b 84 24 cc 01 00 00 	mov    0x1cc(%esp),%eax
   11b85:	8b 00                	mov    (%eax),%eax
   11b87:	83 c0 02             	add    $0x2,%eax
   11b8a:	83 ec 04             	sub    $0x4,%esp
   11b8d:	6a 7f                	push   $0x7f
   11b8f:	50                   	push   %eax
   11b90:	8d 44 24 18          	lea    0x18(%esp),%eax
   11b94:	50                   	push   %eax
   11b95:	e8 ba f5 ff ff       	call   11154 <strncpy>
   11b9a:	83 c4 10             	add    $0x10,%esp
		brelse(bh);             									// 释放缓冲块并放回脚本文件i节点。
   11b9d:	83 ec 0c             	sub    $0xc,%esp
   11ba0:	ff b4 24 d8 01 00 00 	pushl  0x1d8(%esp)
   11ba7:	e8 44 da ff ff       	call   f5f0 <brelse>
   11bac:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   11baf:	83 ec 0c             	sub    $0xc,%esp
   11bb2:	ff b4 24 08 02 00 00 	pushl  0x208(%esp)
   11bb9:	e8 a1 ca ff ff       	call   e65f <iput>
   11bbe:	83 c4 10             	add    $0x10,%esp
		buf[127] = '\0';
   11bc1:	c6 84 24 8b 00 00 00 	movb   $0x0,0x8b(%esp)
   11bc8:	00 
		if (cp = strchr(buf, '\n')) {
   11bc9:	83 ec 08             	sub    $0x8,%esp
   11bcc:	6a 0a                	push   $0xa
   11bce:	8d 44 24 18          	lea    0x18(%esp),%eax
   11bd2:	50                   	push   %eax
   11bd3:	e8 a3 f5 ff ff       	call   1117b <strchr>
   11bd8:	83 c4 10             	add    $0x10,%esp
   11bdb:	89 84 24 e0 01 00 00 	mov    %eax,0x1e0(%esp)
   11be2:	83 bc 24 e0 01 00 00 	cmpl   $0x0,0x1e0(%esp)
   11be9:	00 
   11bea:	74 3b                	je     11c27 <do_execve+0x422>
			*cp = '\0';     										// 第1个换行符换成NULL并去掉行头空格制表符。
   11bec:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11bf3:	c6 00 00             	movb   $0x0,(%eax)
			for (cp = buf; (*cp == ' ') || (*cp == '\t'); cp++);
   11bf6:	8d 44 24 0c          	lea    0xc(%esp),%eax
   11bfa:	89 84 24 e0 01 00 00 	mov    %eax,0x1e0(%esp)
   11c01:	eb 08                	jmp    11c0b <do_execve+0x406>
   11c03:	83 84 24 e0 01 00 00 	addl   $0x1,0x1e0(%esp)
   11c0a:	01 
   11c0b:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11c12:	0f b6 00             	movzbl (%eax),%eax
   11c15:	3c 20                	cmp    $0x20,%al
   11c17:	74 ea                	je     11c03 <do_execve+0x3fe>
   11c19:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11c20:	0f b6 00             	movzbl (%eax),%eax
   11c23:	3c 09                	cmp    $0x9,%al
   11c25:	74 dc                	je     11c03 <do_execve+0x3fe>
		}
		if (!cp || *cp == '\0') {       							// 若该行没有其他内容，则出错。
   11c27:	83 bc 24 e0 01 00 00 	cmpl   $0x0,0x1e0(%esp)
   11c2e:	00 
   11c2f:	74 0e                	je     11c3f <do_execve+0x43a>
   11c31:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11c38:	0f b6 00             	movzbl (%eax),%eax
   11c3b:	84 c0                	test   %al,%al
   11c3d:	75 10                	jne    11c4f <do_execve+0x44a>
			retval = -ENOEXEC; 										/* No interpreter name found */
   11c3f:	c7 84 24 f0 01 00 00 	movl   $0xfffffff8,0x1f0(%esp)
   11c46:	f8 ff ff ff 
			goto exec_error1;       								/* 没有找到脚本解释程序名 */
   11c4a:	e9 3c 07 00 00       	jmp    1238b <do_execve+0xb86>
		}
		// 此时我们得到了开头是脚本解释程序名的一行内容（字符串）。下面分析该行。首先取第一个字符串，它应该是解释程序名，此时i_name指向该
		// 名称。若解释程序名后还有字符，则它们应该是解释程序的参数串，于是令i_arg指向该串。
		interp = i_name = cp;
   11c4f:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11c56:	89 84 24 90 00 00 00 	mov    %eax,0x90(%esp)
   11c5d:	8b 84 24 90 00 00 00 	mov    0x90(%esp),%eax
   11c64:	89 84 24 c8 01 00 00 	mov    %eax,0x1c8(%esp)
		i_arg = 0;
   11c6b:	c7 84 24 8c 00 00 00 	movl   $0x0,0x8c(%esp)
   11c72:	00 00 00 00 
		for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++) {
   11c76:	eb 27                	jmp    11c9f <do_execve+0x49a>
 			if (*cp == '/')
   11c78:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11c7f:	0f b6 00             	movzbl (%eax),%eax
   11c82:	3c 2f                	cmp    $0x2f,%al
   11c84:	75 11                	jne    11c97 <do_execve+0x492>
				i_name = cp+1;
   11c86:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11c8d:	83 c0 01             	add    $0x1,%eax
   11c90:	89 84 24 90 00 00 00 	mov    %eax,0x90(%esp)
		for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++) {
   11c97:	83 84 24 e0 01 00 00 	addl   $0x1,0x1e0(%esp)
   11c9e:	01 
   11c9f:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11ca6:	0f b6 00             	movzbl (%eax),%eax
   11ca9:	84 c0                	test   %al,%al
   11cab:	74 1c                	je     11cc9 <do_execve+0x4c4>
   11cad:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11cb4:	0f b6 00             	movzbl (%eax),%eax
   11cb7:	3c 20                	cmp    $0x20,%al
   11cb9:	74 0e                	je     11cc9 <do_execve+0x4c4>
   11cbb:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11cc2:	0f b6 00             	movzbl (%eax),%eax
   11cc5:	3c 09                	cmp    $0x9,%al
   11cc7:	75 af                	jne    11c78 <do_execve+0x473>
		}
		if (*cp) {
   11cc9:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11cd0:	0f b6 00             	movzbl (%eax),%eax
   11cd3:	84 c0                	test   %al,%al
   11cd5:	74 22                	je     11cf9 <do_execve+0x4f4>
			*cp++ = '\0';           								// 解释程序名尾添加NULL字符。
   11cd7:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11cde:	8d 50 01             	lea    0x1(%eax),%edx
   11ce1:	89 94 24 e0 01 00 00 	mov    %edx,0x1e0(%esp)
   11ce8:	c6 00 00             	movb   $0x0,(%eax)
			i_arg = cp;             								// i_arg指向解释程序参数。
   11ceb:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11cf2:	89 84 24 8c 00 00 00 	mov    %eax,0x8c(%esp)
		// 这里我们把sh_bang标志置上，然后把函数参数提供的原有参数和环境字符串放入到空间中。环境字符串和参数个数分别是envc和
		// argc-1个。少复制的一个原有参数是原来的执行文件名，即这里的脚本文件名。[[?? 可以看出，实际上我们不需要去另行处理脚本
		// 文件名，即这里完全可以复制argc个参数，包括原来执行文件名（即现在的脚本文件名）。因为它位于同一个位置上]]。注意！这里
		// 指针p随着复制信息增加而逐渐向小地址方向移动，因此这两个复制串函数执行完后，环境参数串信息块位于程序命令行参数串信息块
		// 的上方，并且p指向程序的第1个参数串。copy_strings()最后一个参数（0）指明参数字符串在用户空间。
		if (sh_bang++ == 0) {
   11cf9:	8b 84 24 ec 01 00 00 	mov    0x1ec(%esp),%eax
   11d00:	8d 50 01             	lea    0x1(%eax),%edx
   11d03:	89 94 24 ec 01 00 00 	mov    %edx,0x1ec(%esp)
   11d0a:	85 c0                	test   %eax,%eax
   11d0c:	75 6e                	jne    11d7c <do_execve+0x577>
			p = copy_strings(envc, envp, page, p, 0);
   11d0e:	83 ec 0c             	sub    $0xc,%esp
   11d11:	6a 00                	push   $0x0
   11d13:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11d1a:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11d21:	50                   	push   %eax
   11d22:	ff b4 24 38 02 00 00 	pushl  0x238(%esp)
   11d29:	ff b4 24 f4 01 00 00 	pushl  0x1f4(%esp)
   11d30:	e8 3f f7 ff ff       	call   11474 <copy_strings>
   11d35:	83 c4 20             	add    $0x20,%esp
   11d38:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
			p = copy_strings(--argc, argv + 1, page, p, 0);
   11d3f:	8b 84 24 1c 02 00 00 	mov    0x21c(%esp),%eax
   11d46:	8d 50 04             	lea    0x4(%eax),%edx
   11d49:	83 ac 24 f4 01 00 00 	subl   $0x1,0x1f4(%esp)
   11d50:	01 
   11d51:	83 ec 0c             	sub    $0xc,%esp
   11d54:	6a 00                	push   $0x0
   11d56:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11d5d:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11d64:	50                   	push   %eax
   11d65:	52                   	push   %edx
   11d66:	ff b4 24 10 02 00 00 	pushl  0x210(%esp)
   11d6d:	e8 02 f7 ff ff       	call   11474 <copy_strings>
   11d72:	83 c4 20             	add    $0x20,%esp
   11d75:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
         */
		// 接着我们逆向复制脚本文件名、解释程序的参数和解释程序文件名到参数和环境空间中。若出错，则置出错吗，跳转到exec_error1。
		// 另外，由于本函数参数提供的脚本文件名filename在用户空间，但这里赋予copy_strings()的脚本文件名的指针在内核空间，因此
		// 这个复制字符串函数的最后一个参数（字符串来源标志）需要被设置成1。若字符串在内核空间，则copy_strings()的最后一个参数
		// 要设置成功，如下面。
		p = copy_strings(1, &filename, page, p, 1);
   11d7c:	83 ec 0c             	sub    $0xc,%esp
   11d7f:	6a 01                	push   $0x1
   11d81:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11d88:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11d8f:	50                   	push   %eax
   11d90:	8d 84 24 30 02 00 00 	lea    0x230(%esp),%eax
   11d97:	50                   	push   %eax
   11d98:	6a 01                	push   $0x1
   11d9a:	e8 d5 f6 ff ff       	call   11474 <copy_strings>
   11d9f:	83 c4 20             	add    $0x20,%esp
   11da2:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
		argc++;
   11da9:	83 84 24 f4 01 00 00 	addl   $0x1,0x1f4(%esp)
   11db0:	01 
		if (i_arg) {            									// 复制解释程序的多个参数。
   11db1:	8b 84 24 8c 00 00 00 	mov    0x8c(%esp),%eax
   11db8:	85 c0                	test   %eax,%eax
   11dba:	74 35                	je     11df1 <do_execve+0x5ec>
			p = copy_strings(1, &i_arg, page, p, 2);
   11dbc:	83 ec 0c             	sub    $0xc,%esp
   11dbf:	6a 02                	push   $0x2
   11dc1:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11dc8:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11dcf:	50                   	push   %eax
   11dd0:	8d 84 24 a4 00 00 00 	lea    0xa4(%esp),%eax
   11dd7:	50                   	push   %eax
   11dd8:	6a 01                	push   $0x1
   11dda:	e8 95 f6 ff ff       	call   11474 <copy_strings>
   11ddf:	83 c4 20             	add    $0x20,%esp
   11de2:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
			argc++;
   11de9:	83 84 24 f4 01 00 00 	addl   $0x1,0x1f4(%esp)
   11df0:	01 
		}
		p = copy_strings(1, &i_name, page, p, 2);
   11df1:	83 ec 0c             	sub    $0xc,%esp
   11df4:	6a 02                	push   $0x2
   11df6:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11dfd:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11e04:	50                   	push   %eax
   11e05:	8d 84 24 a8 00 00 00 	lea    0xa8(%esp),%eax
   11e0c:	50                   	push   %eax
   11e0d:	6a 01                	push   $0x1
   11e0f:	e8 60 f6 ff ff       	call   11474 <copy_strings>
   11e14:	83 c4 20             	add    $0x20,%esp
   11e17:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
		argc++;
   11e1e:	83 84 24 f4 01 00 00 	addl   $0x1,0x1f4(%esp)
   11e25:	01 
		if (!p) {
   11e26:	83 bc 24 e8 01 00 00 	cmpl   $0x0,0x1e8(%esp)
   11e2d:	00 
   11e2e:	75 10                	jne    11e40 <do_execve+0x63b>
			retval = -ENOMEM;
   11e30:	c7 84 24 f0 01 00 00 	movl   $0xfffffff4,0x1f0(%esp)
   11e37:	f4 ff ff ff 
			goto exec_error1;
   11e3b:	e9 4b 05 00 00       	jmp    1238b <do_execve+0xb86>
		// 最后我们取得解释程序的i节点指针，然后跳转到204行去执行解释程序。为了获得解释程序的i节点，我们需要使用namei()函数，但是该函数
		// 所使用的参数（文件名）是从用户数据空间得到的，即从段寄存器fs所指空间中取得。因此在调用namei()函数之前我们需要先临时让fs指向内
		// 核数据空间，以让函数能从内核空间得到解释程序名，并在namei()返回后恢复fs的默认设置。因此这里我们先临时保存原fs段寄存器（原指向
		// 用户数据段）的值，将其设置成指向内核数据段，然后取解释程序的i节点。之后再恢复fs的原值。并跳转到restart_interp（204行）处重新
		// 处理新的执行文件 -- 脚本文件的解释程序。
		old_fs = get_fs();
   11e40:	e8 95 f3 ff ff       	call   111da <get_fs>
   11e45:	89 84 24 c4 01 00 00 	mov    %eax,0x1c4(%esp)
		set_fs(get_ds());
   11e4c:	e8 9d f3 ff ff       	call   111ee <get_ds>
   11e51:	83 ec 0c             	sub    $0xc,%esp
   11e54:	50                   	push   %eax
   11e55:	e8 a8 f3 ff ff       	call   11202 <set_fs>
   11e5a:	83 c4 10             	add    $0x10,%esp
		if (!(inode = namei(interp))) { 						/* get executables inode */
   11e5d:	83 ec 0c             	sub    $0xc,%esp
   11e60:	ff b4 24 d4 01 00 00 	pushl  0x1d4(%esp)
   11e67:	e8 21 16 00 00       	call   1348d <namei>
   11e6c:	83 c4 10             	add    $0x10,%esp
   11e6f:	89 84 24 fc 01 00 00 	mov    %eax,0x1fc(%esp)
   11e76:	83 bc 24 fc 01 00 00 	cmpl   $0x0,0x1fc(%esp)
   11e7d:	00 
   11e7e:	75 23                	jne    11ea3 <do_execve+0x69e>
			set_fs(old_fs);       								/* 取得解释程序的i节点 */
   11e80:	83 ec 0c             	sub    $0xc,%esp
   11e83:	ff b4 24 d0 01 00 00 	pushl  0x1d0(%esp)
   11e8a:	e8 73 f3 ff ff       	call   11202 <set_fs>
   11e8f:	83 c4 10             	add    $0x10,%esp
			retval = -ENOENT;
   11e92:	c7 84 24 f0 01 00 00 	movl   $0xfffffffe,0x1f0(%esp)
   11e99:	fe ff ff ff 
			goto exec_error1;
   11e9d:	90                   	nop
   11e9e:	e9 e8 04 00 00       	jmp    1238b <do_execve+0xb86>
		}
		set_fs(old_fs);
   11ea3:	83 ec 0c             	sub    $0xc,%esp
   11ea6:	ff b4 24 d0 01 00 00 	pushl  0x1d0(%esp)
   11ead:	e8 50 f3 ff ff       	call   11202 <set_fs>
   11eb2:	83 c4 10             	add    $0x10,%esp
   11eb5:	e9 b1 fa ff ff       	jmp    1196b <do_execve+0x166>
	// 此时缓冲块中的执行文件头结构已经复制到了ex中.于是先释放该缓冲块,并开始对ex中的执行头信息进行判断处理.对于Linux0.12内核来说,
	// 它仅支持ZMAGIC执行格式,并且执行文件代码都从逻辑地址0开始执行,因此不支持含有代码或数据重定位信息的执行文件.当然,如果执行文件
	// 实在太大或者执行文件残缺不全,那么我们也不能运行它.因此对于下列情况将不执行程序:如果执行文件不是需求页可执行文件(ZMAGIC),或者
	// 代码和数据重定位部分长度不等于0,或者(代码段+数据段+堆)长度超过50MB,或者执行文件长度小于(代码段+数据段+符号表长度+执行头部分)
	// 长度的总和.
	brelse(bh);
   11eba:	83 ec 0c             	sub    $0xc,%esp
   11ebd:	ff b4 24 d8 01 00 00 	pushl  0x1d8(%esp)
   11ec4:	e8 27 d7 ff ff       	call   f5f0 <brelse>
   11ec9:	83 c4 10             	add    $0x10,%esp
	if (N_MAGIC(ex) != ZMAGIC || ex.a_trsize || ex.a_drsize ||
   11ecc:	8b 84 24 94 01 00 00 	mov    0x194(%esp),%eax
   11ed3:	3d 0b 01 00 00       	cmp    $0x10b,%eax
   11ed8:	75 7a                	jne    11f54 <do_execve+0x74f>
   11eda:	8b 84 24 ac 01 00 00 	mov    0x1ac(%esp),%eax
   11ee1:	85 c0                	test   %eax,%eax
   11ee3:	75 6f                	jne    11f54 <do_execve+0x74f>
   11ee5:	8b 84 24 b0 01 00 00 	mov    0x1b0(%esp),%eax
   11eec:	85 c0                	test   %eax,%eax
   11eee:	75 64                	jne    11f54 <do_execve+0x74f>
		ex.a_text + ex.a_data + ex.a_bss > 0x3000000 ||
   11ef0:	8b 94 24 98 01 00 00 	mov    0x198(%esp),%edx
   11ef7:	8b 84 24 9c 01 00 00 	mov    0x19c(%esp),%eax
   11efe:	01 c2                	add    %eax,%edx
   11f00:	8b 84 24 a0 01 00 00 	mov    0x1a0(%esp),%eax
   11f07:	01 d0                	add    %edx,%eax
	if (N_MAGIC(ex) != ZMAGIC || ex.a_trsize || ex.a_drsize ||
   11f09:	3d 00 00 00 03       	cmp    $0x3000000,%eax
   11f0e:	77 44                	ja     11f54 <do_execve+0x74f>
		inode->i_size < ex.a_text + ex.a_data + ex.a_syms + N_TXTOFF(ex)) {
   11f10:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11f17:	8b 40 04             	mov    0x4(%eax),%eax
   11f1a:	8b 8c 24 98 01 00 00 	mov    0x198(%esp),%ecx
   11f21:	8b 94 24 9c 01 00 00 	mov    0x19c(%esp),%edx
   11f28:	01 d1                	add    %edx,%ecx
   11f2a:	8b 94 24 a4 01 00 00 	mov    0x1a4(%esp),%edx
   11f31:	01 d1                	add    %edx,%ecx
   11f33:	8b 94 24 94 01 00 00 	mov    0x194(%esp),%edx
   11f3a:	81 fa 0b 01 00 00    	cmp    $0x10b,%edx
   11f40:	75 07                	jne    11f49 <do_execve+0x744>
   11f42:	ba 00 04 00 00       	mov    $0x400,%edx
   11f47:	eb 05                	jmp    11f4e <do_execve+0x749>
   11f49:	ba 20 00 00 00       	mov    $0x20,%edx
   11f4e:	01 ca                	add    %ecx,%edx
		ex.a_text + ex.a_data + ex.a_bss > 0x3000000 ||
   11f50:	39 d0                	cmp    %edx,%eax
   11f52:	73 10                	jae    11f64 <do_execve+0x75f>
		retval = -ENOEXEC;
   11f54:	c7 84 24 f0 01 00 00 	movl   $0xfffffff8,0x1f0(%esp)
   11f5b:	f8 ff ff ff 
		goto exec_error2;
   11f5f:	e9 15 04 00 00       	jmp    12379 <do_execve+0xb74>
	}
	// 另外,如果执行文件中代码开始处没有位于1个页面(1024字节)边界处,则也不能执行.因为需求页(Demand paging)技术要求加载执行文件内容
	// 时以页面为单位,因此要求执行文件映像中代码和数据都从页面边界处开始.
	if (N_TXTOFF(ex) != BLOCK_SIZE) {
   11f64:	8b 84 24 94 01 00 00 	mov    0x194(%esp),%eax
   11f6b:	3d 0b 01 00 00       	cmp    $0x10b,%eax
   11f70:	74 28                	je     11f9a <do_execve+0x795>
		printk("%s: N_TXTOFF != BLOCK_SIZE. See a.out.h.", filename);
   11f72:	8b 84 24 18 02 00 00 	mov    0x218(%esp),%eax
   11f79:	83 ec 08             	sub    $0x8,%esp
   11f7c:	50                   	push   %eax
   11f7d:	68 b4 41 02 00       	push   $0x241b4
   11f82:	e8 ba 6c ff ff       	call   8c41 <printk>
   11f87:	83 c4 10             	add    $0x10,%esp
		retval = -ENOEXEC;
   11f8a:	c7 84 24 f0 01 00 00 	movl   $0xfffffff8,0x1f0(%esp)
   11f91:	f8 ff ff ff 
		goto exec_error2;
   11f95:	e9 df 03 00 00       	jmp    12379 <do_execve+0xb74>
	}
	// 如果sh_bang标志没有设置,则复制指定个数的命令行参数和环境字符串到参数和环境空间中.若sh_bang标志已经设置,则表明将运行脚本解释程序,
	// 此时一环境变量页面已经复制,无须再复制.同样,若sh_bang没有置位而需要复制的话,那么此时指针p随着复制信息增加而逐渐向小地址方向移动,
	// 因此这两个复制串函数执行完后,环境参数串信息块位于程序参数串信息块的上方,并且p指向程序的第1个参数串.事实上,p是128KB参数和环境空间
	// 中的偏移值.因此如果p=0,则表示环境变量与参数空间页面已经被占满,容纳不下了.
	if (!sh_bang) {
   11f9a:	83 bc 24 ec 01 00 00 	cmpl   $0x0,0x1ec(%esp)
   11fa1:	00 
   11fa2:	75 7c                	jne    12020 <do_execve+0x81b>
		p = copy_strings(envc, envp, page, p, 0);
   11fa4:	83 ec 0c             	sub    $0xc,%esp
   11fa7:	6a 00                	push   $0x0
   11fa9:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11fb0:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11fb7:	50                   	push   %eax
   11fb8:	ff b4 24 38 02 00 00 	pushl  0x238(%esp)
   11fbf:	ff b4 24 f4 01 00 00 	pushl  0x1f4(%esp)
   11fc6:	e8 a9 f4 ff ff       	call   11474 <copy_strings>
   11fcb:	83 c4 20             	add    $0x20,%esp
   11fce:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
		p = copy_strings(argc, argv, page, p, 0);
   11fd5:	83 ec 0c             	sub    $0xc,%esp
   11fd8:	6a 00                	push   $0x0
   11fda:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11fe1:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11fe8:	50                   	push   %eax
   11fe9:	ff b4 24 34 02 00 00 	pushl  0x234(%esp)
   11ff0:	ff b4 24 10 02 00 00 	pushl  0x210(%esp)
   11ff7:	e8 78 f4 ff ff       	call   11474 <copy_strings>
   11ffc:	83 c4 20             	add    $0x20,%esp
   11fff:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
		if (!p) {
   12006:	83 bc 24 e8 01 00 00 	cmpl   $0x0,0x1e8(%esp)
   1200d:	00 
   1200e:	75 10                	jne    12020 <do_execve+0x81b>
			retval = -ENOMEM;
   12010:	c7 84 24 f0 01 00 00 	movl   $0xfffffff4,0x1f0(%esp)
   12017:	f4 ff ff ff 
			goto exec_error2;
   1201b:	e9 59 03 00 00       	jmp    12379 <do_execve+0xb74>
	// get_free_page()分配了物理内存页来保存数据,并在chang_ldt()函数中使用put_page()到了进程逻辑空间的末端处.另外,在create_tables()
	// 中也会由于在用户栈上存放参数和环境指针表而引起缺页异常,从而内存管理程序也会就此为用户栈空间映射物理内存页.
	//
	// 这里我们首先放回进程原执行程序的i节点,并且让进程executable字段指向新执行文件的i节点.然后复位原进程的所有信号处理句柄,但对于SIG_IGN
	// 句柄无须复位.
	if (current->executable)
   12020:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12025:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
   1202b:	85 c0                	test   %eax,%eax
   1202d:	74 17                	je     12046 <do_execve+0x841>
		iput(current->executable);
   1202f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12034:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
   1203a:	83 ec 0c             	sub    $0xc,%esp
   1203d:	50                   	push   %eax
   1203e:	e8 1c c6 ff ff       	call   e65f <iput>
   12043:	83 c4 10             	add    $0x10,%esp
	current->executable = inode;
   12046:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1204b:	8b 94 24 fc 01 00 00 	mov    0x1fc(%esp),%edx
   12052:	89 90 3c 03 00 00    	mov    %edx,0x33c(%eax)
	current->signal = 0;
   12058:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1205d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	for (i = 0 ; i < 32 ; i++) {
   12064:	c7 84 24 f8 01 00 00 	movl   $0x0,0x1f8(%esp)
   1206b:	00 00 00 00 
   1206f:	eb 77                	jmp    120e8 <do_execve+0x8e3>
		current->sigaction[i].sa_mask = 0;
   12071:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12076:	8b 94 24 f8 01 00 00 	mov    0x1f8(%esp),%edx
   1207d:	83 c2 01             	add    $0x1,%edx
   12080:	c1 e2 04             	shl    $0x4,%edx
   12083:	01 d0                	add    %edx,%eax
   12085:	83 c0 04             	add    $0x4,%eax
   12088:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		current->sigaction[i].sa_flags = 0;
   1208e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12093:	8b 94 24 f8 01 00 00 	mov    0x1f8(%esp),%edx
   1209a:	83 c2 01             	add    $0x1,%edx
   1209d:	c1 e2 04             	shl    $0x4,%edx
   120a0:	01 d0                	add    %edx,%eax
   120a2:	83 c0 08             	add    $0x8,%eax
   120a5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (current->sigaction[i].sa_handler != SIG_IGN)
   120ab:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   120b0:	8b 94 24 f8 01 00 00 	mov    0x1f8(%esp),%edx
   120b7:	83 c2 01             	add    $0x1,%edx
   120ba:	c1 e2 04             	shl    $0x4,%edx
   120bd:	01 d0                	add    %edx,%eax
   120bf:	8b 00                	mov    (%eax),%eax
   120c1:	83 f8 01             	cmp    $0x1,%eax
   120c4:	74 1a                	je     120e0 <do_execve+0x8db>
			current->sigaction[i].sa_handler = NULL;
   120c6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   120cb:	8b 94 24 f8 01 00 00 	mov    0x1f8(%esp),%edx
   120d2:	83 c2 01             	add    $0x1,%edx
   120d5:	c1 e2 04             	shl    $0x4,%edx
   120d8:	01 d0                	add    %edx,%eax
   120da:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for (i = 0 ; i < 32 ; i++) {
   120e0:	83 84 24 f8 01 00 00 	addl   $0x1,0x1f8(%esp)
   120e7:	01 
   120e8:	83 bc 24 f8 01 00 00 	cmpl   $0x1f,0x1f8(%esp)
   120ef:	1f 
   120f0:	0f 8e 7b ff ff ff    	jle    12071 <do_execve+0x86c>
	}
	// 再根据设定的执行时关闭文件句柄(close_on_exec)位图标志,关闭指定的打开文件并复位该标志
	for (i = 0 ; i < NR_OPEN ; i++)
   120f6:	c7 84 24 f8 01 00 00 	movl   $0x0,0x1f8(%esp)
   120fd:	00 00 00 00 
   12101:	eb 39                	jmp    1213c <do_execve+0x937>
		if ((current->close_on_exec >> i) & 1)
   12103:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12108:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   1210e:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   12115:	89 c1                	mov    %eax,%ecx
   12117:	d3 ea                	shr    %cl,%edx
   12119:	89 d0                	mov    %edx,%eax
   1211b:	83 e0 01             	and    $0x1,%eax
   1211e:	85 c0                	test   %eax,%eax
   12120:	74 12                	je     12134 <do_execve+0x92f>
			sys_close(i);
   12122:	83 ec 0c             	sub    $0xc,%esp
   12125:	ff b4 24 04 02 00 00 	pushl  0x204(%esp)
   1212c:	e8 0d ba ff ff       	call   db3e <sys_close>
   12131:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < NR_OPEN ; i++)
   12134:	83 84 24 f8 01 00 00 	addl   $0x1,0x1f8(%esp)
   1213b:	01 
   1213c:	83 bc 24 f8 01 00 00 	cmpl   $0x13,0x1f8(%esp)
   12143:	13 
   12144:	7e bd                	jle    12103 <do_execve+0x8fe>
	current->close_on_exec = 0;
   12146:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1214b:	c7 80 44 03 00 00 00 	movl   $0x0,0x344(%eax)
   12152:	00 00 00 
	// 然后根据当前进程指定的基地址和限长,释放原来程序的代码段和数据段所对应的内存页表指定的物理内存页面及页表本身.此时新执行文件并没有占用主
	// 内存区任何页面,因此在处理器真正运行新执行文件代码时就会引起缺页异常中断,此时内存管理程序即会执行缺页处理页为新执行文件申请内存页面和
	// 设置相关页表项,并且把相关执行文件页面读入内存中.如果"上次任务使用了协处理器"指向的是当前进程,则将其置空,并复位使用了协处理器的标志.
	free_page_tables(get_base(current->ldt[1]), get_limit(0x0f));
   12155:	b8 0f 00 00 00       	mov    $0xf,%eax
   1215a:	0f 03 c0             	lsl    %ax,%eax
   1215d:	40                   	inc    %eax
   1215e:	89 84 24 c0 01 00 00 	mov    %eax,0x1c0(%esp)
   12165:	8b 8c 24 c0 01 00 00 	mov    0x1c0(%esp),%ecx
   1216c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12171:	05 a0 03 00 00       	add    $0x3a0,%eax
   12176:	83 c0 02             	add    $0x2,%eax
   12179:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   1217f:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
   12185:	8d 72 04             	lea    0x4(%edx),%esi
   12188:	8b 1d a0 f1 02 00    	mov    0x2f1a0,%ebx
   1218e:	81 c3 a0 03 00 00    	add    $0x3a0,%ebx
   12194:	83 c3 07             	add    $0x7,%ebx
   12197:	8a 33                	mov    (%ebx),%dh
   12199:	8a 16                	mov    (%esi),%dl
   1219b:	c1 e2 10             	shl    $0x10,%edx
   1219e:	66 8b 10             	mov    (%eax),%dx
   121a1:	89 d0                	mov    %edx,%eax
   121a3:	89 84 24 bc 01 00 00 	mov    %eax,0x1bc(%esp)
   121aa:	8b 84 24 bc 01 00 00 	mov    0x1bc(%esp),%eax
   121b1:	83 ec 08             	sub    $0x8,%esp
   121b4:	51                   	push   %ecx
   121b5:	50                   	push   %eax
   121b6:	e8 31 9b ff ff       	call   bcec <free_page_tables>
   121bb:	83 c4 10             	add    $0x10,%esp
	free_page_tables(get_base(current->ldt[2]), get_limit(0x17));
   121be:	b8 17 00 00 00       	mov    $0x17,%eax
   121c3:	0f 03 c0             	lsl    %ax,%eax
   121c6:	40                   	inc    %eax
   121c7:	89 84 24 b8 01 00 00 	mov    %eax,0x1b8(%esp)
   121ce:	8b 8c 24 b8 01 00 00 	mov    0x1b8(%esp),%ecx
   121d5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   121da:	05 a8 03 00 00       	add    $0x3a8,%eax
   121df:	83 c0 02             	add    $0x2,%eax
   121e2:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   121e8:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
   121ee:	8d 72 04             	lea    0x4(%edx),%esi
   121f1:	8b 1d a0 f1 02 00    	mov    0x2f1a0,%ebx
   121f7:	81 c3 a8 03 00 00    	add    $0x3a8,%ebx
   121fd:	83 c3 07             	add    $0x7,%ebx
   12200:	8a 33                	mov    (%ebx),%dh
   12202:	8a 16                	mov    (%esi),%dl
   12204:	c1 e2 10             	shl    $0x10,%edx
   12207:	66 8b 10             	mov    (%eax),%dx
   1220a:	89 d0                	mov    %edx,%eax
   1220c:	89 84 24 b4 01 00 00 	mov    %eax,0x1b4(%esp)
   12213:	8b 84 24 b4 01 00 00 	mov    0x1b4(%esp),%eax
   1221a:	83 ec 08             	sub    $0x8,%esp
   1221d:	51                   	push   %ecx
   1221e:	50                   	push   %eax
   1221f:	e8 c8 9a ff ff       	call   bcec <free_page_tables>
   12224:	83 c4 10             	add    $0x10,%esp
	if (last_task_used_math == current)
   12227:	8b 15 0c fb 02 00    	mov    0x2fb0c,%edx
   1222d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12232:	39 c2                	cmp    %eax,%edx
   12234:	75 0a                	jne    12240 <do_execve+0xa3b>
		last_task_used_math = NULL;
   12236:	c7 05 0c fb 02 00 00 	movl   $0x0,0x2fb0c
   1223d:	00 00 00 
	current->used_math = 0;
   12240:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12245:	66 c7 80 28 03 00 00 	movw   $0x0,0x328(%eax)
   1224c:	00 00 
	// 然后我们根据新执行文件头结构中的代码长度字段a_text的值修改局部表中描述符基址和段限长,并将128KB的参数和环境空间页面放置在数据段末端.
	// 执行下面语句之后,p此时更改成以数据段起始处为原点的偏移值,但仍指向参数和环境空间数据开始处,即已转换成栈指针值.然后调用内部函数create_tables()
	// 在栈空间中创建环境和参数变量指针表,供程序的main()作为参数使用,并返回该栈指针.
	p += change_ldt(ex.a_text, page);
   1224e:	8b 84 24 98 01 00 00 	mov    0x198(%esp),%eax
   12255:	83 ec 08             	sub    $0x8,%esp
   12258:	8d 94 24 1c 01 00 00 	lea    0x11c(%esp),%edx
   1225f:	52                   	push   %edx
   12260:	50                   	push   %eax
   12261:	e8 e9 f3 ff ff       	call   1164f <change_ldt>
   12266:	83 c4 10             	add    $0x10,%esp
   12269:	01 84 24 e8 01 00 00 	add    %eax,0x1e8(%esp)
	p -= LIBRARY_SIZE + MAX_ARG_PAGES * PAGE_SIZE;
   12270:	81 ac 24 e8 01 00 00 	subl   $0x420000,0x1e8(%esp)
   12277:	00 00 42 00 
	p = (unsigned long) create_tables((char *)p, argc, envc);
   1227b:	8b 84 24 e8 01 00 00 	mov    0x1e8(%esp),%eax
   12282:	83 ec 04             	sub    $0x4,%esp
   12285:	ff b4 24 dc 01 00 00 	pushl  0x1dc(%esp)
   1228c:	ff b4 24 fc 01 00 00 	pushl  0x1fc(%esp)
   12293:	50                   	push   %eax
   12294:	e8 66 f0 ff ff       	call   112ff <create_tables>
   12299:	83 c4 10             	add    $0x10,%esp
   1229c:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
	// 接着再修改进程各字段值为新执行文件的信息.即令进程任务结构代码尾字段end_code等于执行文件的代码段长度a_text;数据尾字段end_data等于
	// 执行文件的代码段长度加数据段长度(a_data + a_text);并令进程堆结尾字段brk = a_text + a_data + a_bss.brk用于指明进程当前数据段
	// (包括未初始化数据部分)末端位置,供内核为进程分配内存时指定分配开始位置.然后设置进程栈开始字段为栈指针所在页面,并重新设置进程的有效用户
	// id和有效组id.
	current->brk = ex.a_bss +
   122a3:	8b 8c 24 a0 01 00 00 	mov    0x1a0(%esp),%ecx
		(current->end_data = ex.a_data +
   122aa:	8b 9c 24 9c 01 00 00 	mov    0x19c(%esp),%ebx
		(current->end_code = ex.a_text));
   122b1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   122b6:	8b 94 24 98 01 00 00 	mov    0x198(%esp),%edx
   122bd:	89 90 1c 02 00 00    	mov    %edx,0x21c(%eax)
   122c3:	8b 90 1c 02 00 00    	mov    0x21c(%eax),%edx
		(current->end_data = ex.a_data +
   122c9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   122ce:	01 da                	add    %ebx,%edx
   122d0:	89 90 20 02 00 00    	mov    %edx,0x220(%eax)
   122d6:	8b 90 20 02 00 00    	mov    0x220(%eax),%edx
	current->brk = ex.a_bss +
   122dc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   122e1:	01 ca                	add    %ecx,%edx
   122e3:	89 90 24 02 00 00    	mov    %edx,0x224(%eax)
	current->start_stack = p & 0xfffff000;
   122e9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   122ee:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   122f5:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   122fb:	89 90 28 02 00 00    	mov    %edx,0x228(%eax)
	current->suid = current->euid = e_uid;
   12301:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12306:	8b 94 24 d4 01 00 00 	mov    0x1d4(%esp),%edx
   1230d:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
   12314:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   1231a:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   12321:	66 89 82 d0 02 00 00 	mov    %ax,0x2d0(%edx)
	current->sgid = current->egid = e_gid;
   12328:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1232d:	8b 94 24 d0 01 00 00 	mov    0x1d0(%esp),%edx
   12334:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
   1233b:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   12341:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
   12348:	66 89 82 d6 02 00 00 	mov    %ax,0x2d6(%edx)
	// 最后将原调用系统中断的程序在堆栈上的代码指针替换为指向新执行程序的入口点,并将栈指针替换为新执行文件的栈指针.此后返回指令将弹出这些栈数
	// 据并使得CPU去执行新执行文件,因此不会返回到原调用系统中断的程序中去了.
	eip[0] = ex.a_entry;												/* eip, magic happens :-) */	/* eip,魔法起作用了 */
   1234f:	8b 94 24 a8 01 00 00 	mov    0x1a8(%esp),%edx
   12356:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   1235d:	89 10                	mov    %edx,(%eax)
	eip[3] = p;															/* stack pointer */		/* esp,堆栈指针 */
   1235f:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   12366:	8d 50 0c             	lea    0xc(%eax),%edx
   12369:	8b 84 24 e8 01 00 00 	mov    0x1e8(%esp),%eax
   12370:	89 02                	mov    %eax,(%edx)
	return 0;
   12372:	b8 00 00 00 00       	mov    $0x0,%eax
   12377:	eb 52                	jmp    123cb <do_execve+0xbc6>
exec_error2:
	iput(inode);														// 放回i节点.
   12379:	83 ec 0c             	sub    $0xc,%esp
   1237c:	ff b4 24 08 02 00 00 	pushl  0x208(%esp)
   12383:	e8 d7 c2 ff ff       	call   e65f <iput>
   12388:	83 c4 10             	add    $0x10,%esp
exec_error1:
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)
   1238b:	c7 84 24 f8 01 00 00 	movl   $0x0,0x1f8(%esp)
   12392:	00 00 00 00 
   12396:	eb 22                	jmp    123ba <do_execve+0xbb5>
		free_page(page[i]);												// 释放存放参数和环境串的内存页面.
   12398:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   1239f:	8b 84 84 14 01 00 00 	mov    0x114(%esp,%eax,4),%eax
   123a6:	83 ec 0c             	sub    $0xc,%esp
   123a9:	50                   	push   %eax
   123aa:	e8 c3 98 ff ff       	call   bc72 <free_page>
   123af:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)
   123b2:	83 84 24 f8 01 00 00 	addl   $0x1,0x1f8(%esp)
   123b9:	01 
   123ba:	83 bc 24 f8 01 00 00 	cmpl   $0x1f,0x1f8(%esp)
   123c1:	1f 
   123c2:	7e d4                	jle    12398 <do_execve+0xb93>
	return(retval);														// 返回出错码.
   123c4:	8b 84 24 f0 01 00 00 	mov    0x1f0(%esp),%eax
}
   123cb:	81 c4 04 02 00 00    	add    $0x204,%esp
   123d1:	5b                   	pop    %ebx
   123d2:	5e                   	pop    %esi
   123d3:	c3                   	ret    

000123d4 <get_fs_byte>:
{
   123d4:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   123d5:	8b 44 24 08          	mov    0x8(%esp),%eax
   123d9:	64 8a 00             	mov    %fs:(%eax),%al
   123dc:	89 c3                	mov    %eax,%ebx
	return _v;
   123de:	89 d8                	mov    %ebx,%eax
}
   123e0:	5b                   	pop    %ebx
   123e1:	c3                   	ret    

000123e2 <put_fs_byte>:
{
   123e2:	83 ec 04             	sub    $0x4,%esp
   123e5:	8b 44 24 08          	mov    0x8(%esp),%eax
   123e9:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   123ec:	0f b6 04 24          	movzbl (%esp),%eax
   123f0:	8b 54 24 0c          	mov    0xc(%esp),%edx
   123f4:	64 88 02             	mov    %al,%fs:(%edx)
}
   123f7:	90                   	nop
   123f8:	83 c4 04             	add    $0x4,%esp
   123fb:	c3                   	ret    

000123fc <put_fs_long>:
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   123fc:	8b 44 24 04          	mov    0x4(%esp),%eax
   12400:	8b 54 24 08          	mov    0x8(%esp),%edx
   12404:	64 89 02             	mov    %eax,%fs:(%edx)
}
   12407:	90                   	nop
   12408:	c3                   	ret    

00012409 <read_pipe>:
#include <linux/kernel.h>

// 读管道操作函数。
// 参数inode是管道对应的i节点，buf是用户数据缓冲区指针，count是读取的字节数。
int read_pipe(struct m_inode * inode, char * buf, int count)
{
   12409:	83 ec 1c             	sub    $0x1c,%esp
	int chars, size, read = 0;
   1240c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   12413:	00 
	// 如果需要读取的字节数count大于0,我们就循环执行以下操作。在循环读操作过程中，若当前管道中没有数据（size=0），
	// 则唤醒等待该节点的进程，这通常是写管道进程。如果已没有写管道者，即i节点引用计数小于2,则返回已读字节数退出。
	// 如果目前收到非阻塞信号，则立刻返回已读取字节数退出，若还没有收到任何数据，则返回重新启动系统调用号退出。
	// 否则就让进程在该管道上睡眠，用以等待信息的到来。宏PIPE_SIZE定义在include/linux/fs.h中。关于“重新启动
	// 系统调用号”，请参见kernel/signal.c程序。
	while (count > 0) {
   12414:	e9 69 01 00 00       	jmp    12582 <read_pipe+0x179>
		while (!(size = PIPE_SIZE(*inode))) {     						// 取管道中数据长度值。
			// 唤醒等待向该管道写数据的进程
			wake_up(& PIPE_WRITE_WAIT(*inode));
   12419:	8b 44 24 20          	mov    0x20(%esp),%eax
   1241d:	83 c0 24             	add    $0x24,%eax
   12420:	83 ec 0c             	sub    $0xc,%esp
   12423:	50                   	push   %eax
   12424:	e8 24 4d ff ff       	call   714d <wake_up>
   12429:	83 c4 10             	add    $0x10,%esp
			if (inode->i_count != 2) 									/* are there any writers? */
   1242c:	8b 44 24 20          	mov    0x20(%esp),%eax
   12430:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   12434:	66 83 f8 02          	cmp    $0x2,%ax
   12438:	74 09                	je     12443 <read_pipe+0x3a>
				return read;
   1243a:	8b 44 24 04          	mov    0x4(%esp),%eax
   1243e:	e9 61 01 00 00       	jmp    125a4 <read_pipe+0x19b>
			if (current->signal & ~current->blocked)
   12443:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12448:	8b 50 0c             	mov    0xc(%eax),%edx
   1244b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12450:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   12456:	f7 d0                	not    %eax
   12458:	21 d0                	and    %edx,%eax
   1245a:	85 c0                	test   %eax,%eax
   1245c:	74 1a                	je     12478 <read_pipe+0x6f>
				return read ? read : -ERESTARTSYS;
   1245e:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   12463:	74 09                	je     1246e <read_pipe+0x65>
   12465:	8b 44 24 04          	mov    0x4(%esp),%eax
   12469:	e9 36 01 00 00       	jmp    125a4 <read_pipe+0x19b>
   1246e:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
   12473:	e9 2c 01 00 00       	jmp    125a4 <read_pipe+0x19b>
			// 当前进程没有数据可读则进入睡眠等待
			interruptible_sleep_on(& PIPE_READ_WAIT(*inode));
   12478:	8b 44 24 20          	mov    0x20(%esp),%eax
   1247c:	83 c0 20             	add    $0x20,%eax
   1247f:	83 ec 0c             	sub    $0xc,%esp
   12482:	50                   	push   %eax
   12483:	e8 93 4c ff ff       	call   711b <interruptible_sleep_on>
   12488:	83 c4 10             	add    $0x10,%esp
		while (!(size = PIPE_SIZE(*inode))) {     						// 取管道中数据长度值。
   1248b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1248f:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   12493:	8b 44 24 20          	mov    0x20(%esp),%eax
   12497:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   1249b:	29 c2                	sub    %eax,%edx
   1249d:	89 d0                	mov    %edx,%eax
   1249f:	0f b7 c0             	movzwl %ax,%eax
   124a2:	25 ff 0f 00 00       	and    $0xfff,%eax
   124a7:	89 44 24 08          	mov    %eax,0x8(%esp)
   124ab:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   124b0:	0f 84 63 ff ff ff    	je     12419 <read_pipe+0x10>
		}
		// 此时说明管道（缓冲区）中有数据。于是我们取管道尾指针到缓冲区末端的字节数chars。如果其大于还需要读取的字节数
		// count，则令其等于count。如果chars大于当前管道中含有数据的长度size，则令其等于size。然后把需读字节数count
		// 减去可读的字节数chars，并累加已读字节数read。
		chars = PAGE_SIZE - PIPE_TAIL(*inode);
   124b6:	8b 44 24 20          	mov    0x20(%esp),%eax
   124ba:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   124be:	0f b7 c0             	movzwl %ax,%eax
   124c1:	ba 00 10 00 00       	mov    $0x1000,%edx
   124c6:	29 c2                	sub    %eax,%edx
   124c8:	89 d0                	mov    %edx,%eax
   124ca:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > count)
   124ce:	8b 44 24 0c          	mov    0xc(%esp),%eax
   124d2:	3b 44 24 28          	cmp    0x28(%esp),%eax
   124d6:	7e 08                	jle    124e0 <read_pipe+0xd7>
			chars = count;
   124d8:	8b 44 24 28          	mov    0x28(%esp),%eax
   124dc:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > size)
   124e0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   124e4:	3b 44 24 08          	cmp    0x8(%esp),%eax
   124e8:	7e 08                	jle    124f2 <read_pipe+0xe9>
			chars = size;
   124ea:	8b 44 24 08          	mov    0x8(%esp),%eax
   124ee:	89 44 24 0c          	mov    %eax,0xc(%esp)
		count -= chars;
   124f2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   124f6:	29 44 24 28          	sub    %eax,0x28(%esp)
		read += chars;
   124fa:	8b 44 24 0c          	mov    0xc(%esp),%eax
   124fe:	01 44 24 04          	add    %eax,0x4(%esp)
		// 再令size指向管道尾指针处，并调整当前管道尾指针（前移chars字节）。若尾指针超过管道末端则绕回。然后将管道中的
		// 数据复制到用户缓冲区中。对于管道i节点，其i_size字段中是管道缓冲块指针。
		size = PIPE_TAIL(*inode);
   12502:	8b 44 24 20          	mov    0x20(%esp),%eax
   12506:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   1250a:	0f b7 c0             	movzwl %ax,%eax
   1250d:	89 44 24 08          	mov    %eax,0x8(%esp)
		PIPE_TAIL(*inode) += chars;
   12511:	8b 44 24 20          	mov    0x20(%esp),%eax
   12515:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   12519:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1251d:	01 c2                	add    %eax,%edx
   1251f:	8b 44 24 20          	mov    0x20(%esp),%eax
   12523:	66 89 50 10          	mov    %dx,0x10(%eax)
		PIPE_TAIL(*inode) &= (PAGE_SIZE - 1);
   12527:	8b 44 24 20          	mov    0x20(%esp),%eax
   1252b:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   1252f:	66 25 ff 0f          	and    $0xfff,%ax
   12533:	89 c2                	mov    %eax,%edx
   12535:	8b 44 24 20          	mov    0x20(%esp),%eax
   12539:	66 89 50 10          	mov    %dx,0x10(%eax)
		while (chars-- > 0)
   1253d:	eb 34                	jmp    12573 <read_pipe+0x16a>
			put_fs_byte(((char *)inode->i_size)[size++], buf++);
   1253f:	8b 44 24 24          	mov    0x24(%esp),%eax
   12543:	8d 50 01             	lea    0x1(%eax),%edx
   12546:	89 54 24 24          	mov    %edx,0x24(%esp)
   1254a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1254e:	8d 4a 01             	lea    0x1(%edx),%ecx
   12551:	89 4c 24 08          	mov    %ecx,0x8(%esp)
   12555:	89 d1                	mov    %edx,%ecx
   12557:	8b 54 24 20          	mov    0x20(%esp),%edx
   1255b:	8b 52 04             	mov    0x4(%edx),%edx
   1255e:	01 ca                	add    %ecx,%edx
   12560:	0f b6 12             	movzbl (%edx),%edx
   12563:	0f be d2             	movsbl %dl,%edx
   12566:	83 ec 08             	sub    $0x8,%esp
   12569:	50                   	push   %eax
   1256a:	52                   	push   %edx
   1256b:	e8 72 fe ff ff       	call   123e2 <put_fs_byte>
   12570:	83 c4 10             	add    $0x10,%esp
		while (chars-- > 0)
   12573:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12577:	8d 50 ff             	lea    -0x1(%eax),%edx
   1257a:	89 54 24 0c          	mov    %edx,0xc(%esp)
   1257e:	85 c0                	test   %eax,%eax
   12580:	7f bd                	jg     1253f <read_pipe+0x136>
	while (count > 0) {
   12582:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   12587:	0f 8f fe fe ff ff    	jg     1248b <read_pipe+0x82>
	}
	// 当此次读管道操作结束，则唤醒等待该管道的进程，并返回读取的字节数。
	wake_up(& PIPE_WRITE_WAIT(*inode));
   1258d:	8b 44 24 20          	mov    0x20(%esp),%eax
   12591:	83 c0 24             	add    $0x24,%eax
   12594:	83 ec 0c             	sub    $0xc,%esp
   12597:	50                   	push   %eax
   12598:	e8 b0 4b ff ff       	call   714d <wake_up>
   1259d:	83 c4 10             	add    $0x10,%esp
	return read;
   125a0:	8b 44 24 04          	mov    0x4(%esp),%eax
}
   125a4:	83 c4 1c             	add    $0x1c,%esp
   125a7:	c3                   	ret    

000125a8 <write_pipe>:

// 管道写操作函数。
// 参数inode是管道对应的i节点，buf是数据缓冲区指针，count是将写入管道的字节数。
int write_pipe(struct m_inode * inode, char * buf, int count)
{
   125a8:	83 ec 1c             	sub    $0x1c,%esp
	int chars, size, written = 0;
   125ab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   125b2:	00 

	// 如果要写入的字节数count还大于0,那么我们就循环执行以下操作。在循环操作过程中，如果当前管道中已经满了（空闲空间
	// size = 0），则唤醒等待该管道的进程，通常唤醒的是读管道进程。如果已经没有读管道者，即i节点引用计数值小于2,则向
	// 当前进程发送SIGPIPE信号，并返回已写入的字节数退出；若写入0字节，则返回-1。否则让当前进程在该管道上睡眠，以等待
	// 读管道进程来读取数据，从而让管道腾出空间。宏PIPE_SIZE()、PIPE_HEAD()等定义在文件include/linux/fs.h中。
	while (count > 0) {
   125b3:	e9 59 01 00 00       	jmp    12711 <write_pipe+0x169>
		while (!(size = (PAGE_SIZE - 1) - PIPE_SIZE(*inode))) {
			wake_up(& PIPE_READ_WAIT(*inode));
   125b8:	8b 44 24 20          	mov    0x20(%esp),%eax
   125bc:	83 c0 20             	add    $0x20,%eax
   125bf:	83 ec 0c             	sub    $0xc,%esp
   125c2:	50                   	push   %eax
   125c3:	e8 85 4b ff ff       	call   714d <wake_up>
   125c8:	83 c4 10             	add    $0x10,%esp
			if (inode->i_count != 2) { 								/* no readers */
   125cb:	8b 44 24 20          	mov    0x20(%esp),%eax
   125cf:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   125d3:	66 83 f8 02          	cmp    $0x2,%ax
   125d7:	74 2d                	je     12606 <write_pipe+0x5e>
				current->signal |= (1 << (SIGPIPE - 1));
   125d9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   125de:	8b 50 0c             	mov    0xc(%eax),%edx
   125e1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   125e6:	80 ce 10             	or     $0x10,%dh
   125e9:	89 50 0c             	mov    %edx,0xc(%eax)
				return written ? written : -1;
   125ec:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   125f1:	74 09                	je     125fc <write_pipe+0x54>
   125f3:	8b 44 24 04          	mov    0x4(%esp),%eax
   125f7:	e9 37 01 00 00       	jmp    12733 <write_pipe+0x18b>
   125fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12601:	e9 2d 01 00 00       	jmp    12733 <write_pipe+0x18b>
			}
			sleep_on(& PIPE_WRITE_WAIT(*inode));
   12606:	8b 44 24 20          	mov    0x20(%esp),%eax
   1260a:	83 c0 24             	add    $0x24,%eax
   1260d:	83 ec 0c             	sub    $0xc,%esp
   12610:	50                   	push   %eax
   12611:	e8 1e 4b ff ff       	call   7134 <sleep_on>
   12616:	83 c4 10             	add    $0x10,%esp
		while (!(size = (PAGE_SIZE - 1) - PIPE_SIZE(*inode))) {
   12619:	8b 44 24 20          	mov    0x20(%esp),%eax
   1261d:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   12621:	8b 44 24 20          	mov    0x20(%esp),%eax
   12625:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   12629:	29 c2                	sub    %eax,%edx
   1262b:	89 d0                	mov    %edx,%eax
   1262d:	0f b7 c0             	movzwl %ax,%eax
   12630:	f7 d0                	not    %eax
   12632:	25 ff 0f 00 00       	and    $0xfff,%eax
   12637:	89 44 24 08          	mov    %eax,0x8(%esp)
   1263b:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12640:	0f 84 72 ff ff ff    	je     125b8 <write_pipe+0x10>
		}
		// 程序执行到这里表示管道缓冲区中有可写空间size。于是我们取管道头指针到缓冲区末端空间字节数chars。写管道操作是从管道
		// 头指针处开始写的。如果chars大于还需要写入的字节数count，则令其等于count。如果chars大于当前管道中空闲空间长度size
		// 则令其等于size。然后把需要写入字节数count减去此次可写入的字节数chars，并把写入字节数累加到written中。
		chars = PAGE_SIZE - PIPE_HEAD(*inode);
   12646:	8b 44 24 20          	mov    0x20(%esp),%eax
   1264a:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1264e:	0f b7 c0             	movzwl %ax,%eax
   12651:	ba 00 10 00 00       	mov    $0x1000,%edx
   12656:	29 c2                	sub    %eax,%edx
   12658:	89 d0                	mov    %edx,%eax
   1265a:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > count)
   1265e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12662:	3b 44 24 28          	cmp    0x28(%esp),%eax
   12666:	7e 08                	jle    12670 <write_pipe+0xc8>
			chars = count;
   12668:	8b 44 24 28          	mov    0x28(%esp),%eax
   1266c:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > size)
   12670:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12674:	3b 44 24 08          	cmp    0x8(%esp),%eax
   12678:	7e 08                	jle    12682 <write_pipe+0xda>
			chars = size;
   1267a:	8b 44 24 08          	mov    0x8(%esp),%eax
   1267e:	89 44 24 0c          	mov    %eax,0xc(%esp)
		count -= chars;
   12682:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12686:	29 44 24 28          	sub    %eax,0x28(%esp)
		written += chars;
   1268a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1268e:	01 44 24 04          	add    %eax,0x4(%esp)
		// 再令size指向管道数据头指针处，并调整当前管道数据头部指针（前移chars字节）。若头指针超过管道末端则绕回。然后从用户缓冲
		// 区复制chars个字节到管道头指针开始处。对于管道i节点，其i_size字段中是管道缓冲块指针。
		size = PIPE_HEAD(*inode);
   12692:	8b 44 24 20          	mov    0x20(%esp),%eax
   12696:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1269a:	0f b7 c0             	movzwl %ax,%eax
   1269d:	89 44 24 08          	mov    %eax,0x8(%esp)
		PIPE_HEAD(*inode) += chars;
   126a1:	8b 44 24 20          	mov    0x20(%esp),%eax
   126a5:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   126a9:	8b 54 24 0c          	mov    0xc(%esp),%edx
   126ad:	01 c2                	add    %eax,%edx
   126af:	8b 44 24 20          	mov    0x20(%esp),%eax
   126b3:	66 89 50 0e          	mov    %dx,0xe(%eax)
		PIPE_HEAD(*inode) &= (PAGE_SIZE - 1);
   126b7:	8b 44 24 20          	mov    0x20(%esp),%eax
   126bb:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   126bf:	66 25 ff 0f          	and    $0xfff,%ax
   126c3:	89 c2                	mov    %eax,%edx
   126c5:	8b 44 24 20          	mov    0x20(%esp),%eax
   126c9:	66 89 50 0e          	mov    %dx,0xe(%eax)
		while (chars-- > 0)
   126cd:	eb 33                	jmp    12702 <write_pipe+0x15a>
			((char *)inode->i_size)[size++] = get_fs_byte(buf++);
   126cf:	8b 44 24 24          	mov    0x24(%esp),%eax
   126d3:	8d 50 01             	lea    0x1(%eax),%edx
   126d6:	89 54 24 24          	mov    %edx,0x24(%esp)
   126da:	83 ec 0c             	sub    $0xc,%esp
   126dd:	50                   	push   %eax
   126de:	e8 f1 fc ff ff       	call   123d4 <get_fs_byte>
   126e3:	83 c4 10             	add    $0x10,%esp
   126e6:	89 c1                	mov    %eax,%ecx
   126e8:	8b 44 24 08          	mov    0x8(%esp),%eax
   126ec:	8d 50 01             	lea    0x1(%eax),%edx
   126ef:	89 54 24 08          	mov    %edx,0x8(%esp)
   126f3:	89 c2                	mov    %eax,%edx
   126f5:	8b 44 24 20          	mov    0x20(%esp),%eax
   126f9:	8b 40 04             	mov    0x4(%eax),%eax
   126fc:	01 d0                	add    %edx,%eax
   126fe:	89 ca                	mov    %ecx,%edx
   12700:	88 10                	mov    %dl,(%eax)
		while (chars-- > 0)
   12702:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12706:	8d 50 ff             	lea    -0x1(%eax),%edx
   12709:	89 54 24 0c          	mov    %edx,0xc(%esp)
   1270d:	85 c0                	test   %eax,%eax
   1270f:	7f be                	jg     126cf <write_pipe+0x127>
	while (count > 0) {
   12711:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   12716:	0f 8f fd fe ff ff    	jg     12619 <write_pipe+0x71>
	}
	// 当此次写管道操作结束，则唤醒等待管道的进程，返回已写入的字节数，退出。
	wake_up(& PIPE_READ_WAIT(*inode));
   1271c:	8b 44 24 20          	mov    0x20(%esp),%eax
   12720:	83 c0 20             	add    $0x20,%eax
   12723:	83 ec 0c             	sub    $0xc,%esp
   12726:	50                   	push   %eax
   12727:	e8 21 4a ff ff       	call   714d <wake_up>
   1272c:	83 c4 10             	add    $0x10,%esp
	return written;
   1272f:	8b 44 24 04          	mov    0x4(%esp),%eax
}
   12733:	83 c4 1c             	add    $0x1c,%esp
   12736:	c3                   	ret    

00012737 <sys_pipe>:
// 创建管道系统调用。
// 在fildes所指的数组中创建一对句柄（描述符）。这对文件句柄指向一管道i节点。
// 参数：fildes - 文件句柄数组。fildes[0]用于读管道数据，fildes[1]向管道写入数据。
// 成功时返回0,出错时返回-1.
int sys_pipe(unsigned long * fildes)
{
   12737:	53                   	push   %ebx
   12738:	83 ec 28             	sub    $0x28,%esp
	int fd[2];                      						// 文件句柄数组。
	int i, j;

	// 首先从系统文件表中取两个空闲项（引用计数字段为0的项），并分别设置引用计数为1.
	// 若只有1个空闲项，则释放该项（引用计数复位）。若没有找到两个空闲项，则返回-1。
	j = 0;
   1273b:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   12742:	00 
	for(i = 0; j < 2 && i < NR_FILE; i++)
   12743:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1274a:	00 
   1274b:	eb 46                	jmp    12793 <sys_pipe+0x5c>
		if (!file_table[i].f_count)
   1274d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12751:	c1 e0 04             	shl    $0x4,%eax
   12754:	05 84 1f 04 00       	add    $0x41f84,%eax
   12759:	0f b7 00             	movzwl (%eax),%eax
   1275c:	66 85 c0             	test   %ax,%ax
   1275f:	75 2d                	jne    1278e <sys_pipe+0x57>
			(f[j++] = i + file_table)->f_count++;
   12761:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12765:	c1 e0 04             	shl    $0x4,%eax
   12768:	89 c1                	mov    %eax,%ecx
   1276a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1276e:	8d 50 01             	lea    0x1(%eax),%edx
   12771:	89 54 24 18          	mov    %edx,0x18(%esp)
   12775:	8d 91 80 1f 04 00    	lea    0x41f80(%ecx),%edx
   1277b:	89 54 84 0c          	mov    %edx,0xc(%esp,%eax,4)
   1277f:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
   12783:	0f b7 50 04          	movzwl 0x4(%eax),%edx
   12787:	83 c2 01             	add    $0x1,%edx
   1278a:	66 89 50 04          	mov    %dx,0x4(%eax)
	for(i = 0; j < 2 && i < NR_FILE; i++)
   1278e:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   12793:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12798:	7f 07                	jg     127a1 <sys_pipe+0x6a>
   1279a:	83 7c 24 1c 3f       	cmpl   $0x3f,0x1c(%esp)
   1279f:	7e ac                	jle    1274d <sys_pipe+0x16>
	if (j == 1)
   127a1:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   127a6:	75 0a                	jne    127b2 <sys_pipe+0x7b>
		f[0]->f_count = 0;
   127a8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   127ac:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
	if (j < 2)
   127b2:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   127b7:	7f 0a                	jg     127c3 <sys_pipe+0x8c>
		return -1;
   127b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   127be:	e9 80 01 00 00       	jmp    12943 <sys_pipe+0x20c>
	// 针对上面取得的两个文件表结构项，分别分配一文件句柄号，并使进程文件结构指针数组的两项分别指向这两个文件
	// 结构。而文件句柄即是该数组的索引号。类似地，如果只有一个空闲文件句柄，则释放该句柄（置空相应数组项）。如
	// 果没有找到两个空闲句柄，则释放上面获取的两个文件结构项（复位引用计数值），并返回-1。
	j = 0;
   127c3:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   127ca:	00 
	for(i = 0; j < 2 && i < NR_OPEN; i++)
   127cb:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   127d2:	00 
   127d3:	eb 4c                	jmp    12821 <sys_pipe+0xea>
		if (!current->filp[i]) {
   127d5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   127da:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   127de:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   127e4:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   127e8:	85 c0                	test   %eax,%eax
   127ea:	75 30                	jne    1281c <sys_pipe+0xe5>
			current->filp[ fd[j] = i ] = f[j];
   127ec:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   127f1:	8b 54 24 18          	mov    0x18(%esp),%edx
   127f5:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   127f9:	89 4c 94 04          	mov    %ecx,0x4(%esp,%edx,4)
   127fd:	8b 54 24 18          	mov    0x18(%esp),%edx
   12801:	8b 4c 94 04          	mov    0x4(%esp,%edx,4),%ecx
   12805:	8b 54 24 18          	mov    0x18(%esp),%edx
   12809:	8b 54 94 0c          	mov    0xc(%esp,%edx,4),%edx
   1280d:	81 c1 d0 00 00 00    	add    $0xd0,%ecx
   12813:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
			j++;
   12817:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
	for(i = 0; j < 2 && i < NR_OPEN; i++)
   1281c:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   12821:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12826:	7f 07                	jg     1282f <sys_pipe+0xf8>
   12828:	83 7c 24 1c 13       	cmpl   $0x13,0x1c(%esp)
   1282d:	7e a6                	jle    127d5 <sys_pipe+0x9e>
		}
	if (j == 1)
   1282f:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12834:	75 17                	jne    1284d <sys_pipe+0x116>
		current->filp[fd[0]] = NULL;
   12836:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1283b:	8b 54 24 04          	mov    0x4(%esp),%edx
   1283f:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   12845:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   1284c:	00 
	if (j < 2) {
   1284d:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12852:	7f 20                	jg     12874 <sys_pipe+0x13d>
		f[0]->f_count = f[1]->f_count = 0;
   12854:	8b 44 24 10          	mov    0x10(%esp),%eax
   12858:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   1285e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12862:	0f b7 40 04          	movzwl 0x4(%eax),%eax
   12866:	66 89 42 04          	mov    %ax,0x4(%edx)
		return -1;
   1286a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1286f:	e9 cf 00 00 00       	jmp    12943 <sys_pipe+0x20c>
	}
	// 然后利用函数get_pipe_inode()申请一个管道使用的i节点，并为管道分配一页内存作为缓冲区。如果不成功，则
	// 相应释放两个文件句柄和文件结构项，并返回-1.
	if (!(inode = get_pipe_inode())) {                		// fs/inode.c。
   12874:	e8 f1 c0 ff ff       	call   e96a <get_pipe_inode>
   12879:	89 44 24 14          	mov    %eax,0x14(%esp)
   1287d:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   12882:	75 52                	jne    128d6 <sys_pipe+0x19f>
		current->filp[fd[0]] =
			current->filp[fd[1]] = NULL;
   12884:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12889:	8b 54 24 08          	mov    0x8(%esp),%edx
   1288d:	8d 8a d0 00 00 00    	lea    0xd0(%edx),%ecx
   12893:	c7 44 88 08 00 00 00 	movl   $0x0,0x8(%eax,%ecx,4)
   1289a:	00 
		current->filp[fd[0]] =
   1289b:	8b 0d a0 f1 02 00    	mov    0x2f1a0,%ecx
   128a1:	8b 5c 24 04          	mov    0x4(%esp),%ebx
			current->filp[fd[1]] = NULL;
   128a5:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   128ab:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
		current->filp[fd[0]] =
   128af:	8d 93 d0 00 00 00    	lea    0xd0(%ebx),%edx
   128b5:	89 44 91 08          	mov    %eax,0x8(%ecx,%edx,4)
		f[0]->f_count = f[1]->f_count = 0;
   128b9:	8b 44 24 10          	mov    0x10(%esp),%eax
   128bd:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   128c3:	8b 54 24 0c          	mov    0xc(%esp),%edx
   128c7:	0f b7 40 04          	movzwl 0x4(%eax),%eax
   128cb:	66 89 42 04          	mov    %ax,0x4(%edx)
		return -1;
   128cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   128d4:	eb 6d                	jmp    12943 <sys_pipe+0x20c>
	}
	// 如果管道i节点申请成功，则对两个文件结构进行初始化操作，让它们都指向同一个管道i节点，并把读写指针都置零。
	// 第1个文件结构的文件模式为读，第2个文件结构的文件模式置为写。最后将文件句柄数组复制到对应的用户空间数组中，
	// 成功返回0,退出。
	f[0]->f_inode = f[1]->f_inode = inode;
   128d6:	8b 44 24 10          	mov    0x10(%esp),%eax
   128da:	8b 54 24 14          	mov    0x14(%esp),%edx
   128de:	89 50 08             	mov    %edx,0x8(%eax)
   128e1:	8b 54 24 0c          	mov    0xc(%esp),%edx
   128e5:	8b 40 08             	mov    0x8(%eax),%eax
   128e8:	89 42 08             	mov    %eax,0x8(%edx)
	f[0]->f_pos = f[1]->f_pos = 0;
   128eb:	8b 44 24 10          	mov    0x10(%esp),%eax
   128ef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   128f6:	8b 54 24 0c          	mov    0xc(%esp),%edx
   128fa:	8b 40 0c             	mov    0xc(%eax),%eax
   128fd:	89 42 0c             	mov    %eax,0xc(%edx)
	f[0]->f_mode = 1;										/* read */
   12900:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12904:	66 c7 00 01 00       	movw   $0x1,(%eax)
	f[1]->f_mode = 2;										/* write */
   12909:	8b 44 24 10          	mov    0x10(%esp),%eax
   1290d:	66 c7 00 02 00       	movw   $0x2,(%eax)
	put_fs_long(fd[0], 0 + fildes);
   12912:	8b 44 24 04          	mov    0x4(%esp),%eax
   12916:	83 ec 08             	sub    $0x8,%esp
   12919:	ff 74 24 38          	pushl  0x38(%esp)
   1291d:	50                   	push   %eax
   1291e:	e8 d9 fa ff ff       	call   123fc <put_fs_long>
   12923:	83 c4 10             	add    $0x10,%esp
	put_fs_long(fd[1], 1 + fildes);
   12926:	8b 44 24 30          	mov    0x30(%esp),%eax
   1292a:	83 c0 04             	add    $0x4,%eax
   1292d:	8b 54 24 08          	mov    0x8(%esp),%edx
   12931:	83 ec 08             	sub    $0x8,%esp
   12934:	50                   	push   %eax
   12935:	52                   	push   %edx
   12936:	e8 c1 fa ff ff       	call   123fc <put_fs_long>
   1293b:	83 c4 10             	add    $0x10,%esp
	return 0;
   1293e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12943:	83 c4 28             	add    $0x28,%esp
   12946:	5b                   	pop    %ebx
   12947:	c3                   	ret    

00012948 <pipe_ioctl>:

// 管道io控制函数。
// 参数：pino - 管道i节点指针；cmd - 控制命令；arg - 参数。
// 函数返回0表示执行成功，否则返回出错码。
int pipe_ioctl(struct m_inode *pino, int cmd, int arg)
{
   12948:	83 ec 0c             	sub    $0xc,%esp
	// 如果命令是取管道中当前可读数据长度，则把管道数据长度值添入用户参数指定的位置处，并返回0。否则返回无效命令
	// 错误码。
	switch (cmd) {
   1294b:	81 7c 24 14 1b 54 00 	cmpl   $0x541b,0x14(%esp)
   12952:	00 
   12953:	75 47                	jne    1299c <pipe_ioctl+0x54>
		case FIONREAD:
			verify_area((void *) arg, 4);
   12955:	8b 44 24 18          	mov    0x18(%esp),%eax
   12959:	83 ec 08             	sub    $0x8,%esp
   1295c:	6a 04                	push   $0x4
   1295e:	50                   	push   %eax
   1295f:	e8 37 5a ff ff       	call   839b <verify_area>
   12964:	83 c4 10             	add    $0x10,%esp
			put_fs_long(PIPE_SIZE(*pino), (unsigned long *) arg);
   12967:	8b 44 24 18          	mov    0x18(%esp),%eax
   1296b:	8b 54 24 10          	mov    0x10(%esp),%edx
   1296f:	0f b7 4a 0e          	movzwl 0xe(%edx),%ecx
   12973:	8b 54 24 10          	mov    0x10(%esp),%edx
   12977:	0f b7 52 10          	movzwl 0x10(%edx),%edx
   1297b:	29 d1                	sub    %edx,%ecx
   1297d:	89 ca                	mov    %ecx,%edx
   1297f:	0f b7 d2             	movzwl %dx,%edx
   12982:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
   12988:	83 ec 08             	sub    $0x8,%esp
   1298b:	50                   	push   %eax
   1298c:	52                   	push   %edx
   1298d:	e8 6a fa ff ff       	call   123fc <put_fs_long>
   12992:	83 c4 10             	add    $0x10,%esp
			return 0;
   12995:	b8 00 00 00 00       	mov    $0x0,%eax
   1299a:	eb 05                	jmp    129a1 <pipe_ioctl+0x59>
		default:
			return -EINVAL;
   1299c:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	}
}
   129a1:	83 c4 0c             	add    $0xc,%esp
   129a4:	c3                   	ret    

000129a5 <get_fs_byte>:
{
   129a5:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   129a6:	8b 44 24 08          	mov    0x8(%esp),%eax
   129aa:	64 8a 00             	mov    %fs:(%eax),%al
   129ad:	89 c3                	mov    %eax,%ebx
	return _v;
   129af:	89 d8                	mov    %ebx,%eax
}
   129b1:	5b                   	pop    %ebx
   129b2:	c3                   	ret    

000129b3 <strcpy>:
{
   129b3:	57                   	push   %edi
   129b4:	56                   	push   %esi
__asm__(
   129b5:	8b 54 24 10          	mov    0x10(%esp),%edx
   129b9:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   129bd:	89 d6                	mov    %edx,%esi
   129bf:	89 cf                	mov    %ecx,%edi
   129c1:	fc                   	cld    
   129c2:	ac                   	lods   %ds:(%esi),%al
   129c3:	aa                   	stos   %al,%es:(%edi)
   129c4:	84 c0                	test   %al,%al
   129c6:	75 fa                	jne    129c2 <strcpy+0xf>
return dest;												// 返回目的字符串指针.
   129c8:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   129cc:	5e                   	pop    %esi
   129cd:	5f                   	pop    %edi
   129ce:	c3                   	ret    

000129cf <strcmp>:
{
   129cf:	57                   	push   %edi
   129d0:	56                   	push   %esi
__asm__(
   129d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   129d5:	8b 54 24 10          	mov    0x10(%esp),%edx
   129d9:	89 c7                	mov    %eax,%edi
   129db:	89 d6                	mov    %edx,%esi
   129dd:	fc                   	cld    
   129de:	ac                   	lods   %ds:(%esi),%al
   129df:	ae                   	scas   %es:(%edi),%al
   129e0:	75 08                	jne    129ea <strcmp+0x1b>
   129e2:	84 c0                	test   %al,%al
   129e4:	75 f8                	jne    129de <strcmp+0xf>
   129e6:	31 c0                	xor    %eax,%eax
   129e8:	eb 09                	jmp    129f3 <strcmp+0x24>
   129ea:	b8 01 00 00 00       	mov    $0x1,%eax
   129ef:	7c 02                	jl     129f3 <strcmp+0x24>
   129f1:	f7 d8                	neg    %eax
}
   129f3:	5e                   	pop    %esi
   129f4:	5f                   	pop    %edi
   129f5:	c3                   	ret    

000129f6 <permission>:
 */
// 检测文件访问许可权限.
// 参数:inode - 文件的i节点指针;mask - 访问属性屏蔽码.
// 返回:访问许可返回1,否则返回0.
static int permission(struct m_inode * inode, int mask)
{
   129f6:	83 ec 1c             	sub    $0x1c,%esp
	int mode = inode->i_mode;								// 文件访问属性.
   129f9:	8b 44 24 20          	mov    0x20(%esp),%eax
   129fd:	0f b7 00             	movzwl (%eax),%eax
   12a00:	0f b7 c0             	movzwl %ax,%eax
   12a03:	89 44 24 0c          	mov    %eax,0xc(%esp)

	/* special case: not even root can read/write a deleted file */
	/* 特殊情况:即使是超级用户(root)也不能读/写一个已被删除的文件. */
	// 如果i节点有对应的设备,但该i节点的链接计数值等于0,表示该文件已被删除,则返回.
	if (inode->i_dev && !inode->i_nlinks)
   12a07:	8b 44 24 20          	mov    0x20(%esp),%eax
   12a0b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12a0f:	66 85 c0             	test   %ax,%ax
   12a12:	74 13                	je     12a27 <permission+0x31>
   12a14:	8b 44 24 20          	mov    0x20(%esp),%eax
   12a18:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   12a1c:	84 c0                	test   %al,%al
   12a1e:	75 07                	jne    12a27 <permission+0x31>
		return 0;
   12a20:	b8 00 00 00 00       	mov    $0x0,%eax
   12a25:	eb 6e                	jmp    12a95 <permission+0x9f>
	// 如果进程的有效用户id(euid)与i节点的用户id相同,则取文件宿主的访问权限
	else if (current->euid == inode->i_uid)
   12a27:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12a2c:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   12a33:	8b 44 24 20          	mov    0x20(%esp),%eax
   12a37:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   12a3b:	66 39 c2             	cmp    %ax,%dx
   12a3e:	75 07                	jne    12a47 <permission+0x51>
		mode >>= 6;
   12a40:	c1 7c 24 0c 06       	sarl   $0x6,0xc(%esp)
   12a45:	eb 20                	jmp    12a67 <permission+0x71>
	// 如果进程有效组id(egid)与i节点的组id相同,则取组用户的访问权限
	else if (in_group_p(inode->i_gid))
   12a47:	8b 44 24 20          	mov    0x20(%esp),%eax
   12a4b:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   12a4f:	0f b6 c0             	movzbl %al,%eax
   12a52:	83 ec 0c             	sub    $0xc,%esp
   12a55:	50                   	push   %eax
   12a56:	e8 ba 71 ff ff       	call   9c15 <in_group_p>
   12a5b:	83 c4 10             	add    $0x10,%esp
   12a5e:	85 c0                	test   %eax,%eax
   12a60:	74 05                	je     12a67 <permission+0x71>
		mode >>= 3;
   12a62:	c1 7c 24 0c 03       	sarl   $0x3,0xc(%esp)
	// 最后判断如果所取的的访问权限与屏蔽码相同,或者是超级用户,则返回1,否则返回0.
	if (((mode & mask & 0007) == mask) || suser())
   12a67:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12a6b:	23 44 24 24          	and    0x24(%esp),%eax
   12a6f:	83 e0 07             	and    $0x7,%eax
   12a72:	39 44 24 24          	cmp    %eax,0x24(%esp)
   12a76:	74 11                	je     12a89 <permission+0x93>
   12a78:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12a7d:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   12a84:	66 85 c0             	test   %ax,%ax
   12a87:	75 07                	jne    12a90 <permission+0x9a>
		return 1;
   12a89:	b8 01 00 00 00       	mov    $0x1,%eax
   12a8e:	eb 05                	jmp    12a95 <permission+0x9f>
	return 0;
   12a90:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12a95:	83 c4 1c             	add    $0x1c,%esp
   12a98:	c3                   	ret    

00012a99 <match>:
 */
// 指定长度字符串比较函数.
// 参数:len - 比较的字符串长度;name - 文件名指针;de - 目录项结构.
// 返回:相同返回1,不同返回0.
static int match(int len, const char * name, struct dir_entry * de)
{
   12a99:	57                   	push   %edi
   12a9a:	56                   	push   %esi
   12a9b:	53                   	push   %ebx
	register int same __asm__("ax");

	// 首先判断函数参数的有效性.如果目录项指针空,或者目录项i节点等于0,或者要比较的字符串长度超过文件名长度,则返回0(不匹配).
	if (!de || !de->inode || len > NAME_LEN)
   12a9c:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   12aa1:	74 13                	je     12ab6 <match+0x1d>
   12aa3:	8b 44 24 18          	mov    0x18(%esp),%eax
   12aa7:	0f b7 00             	movzwl (%eax),%eax
   12aaa:	66 85 c0             	test   %ax,%ax
   12aad:	74 07                	je     12ab6 <match+0x1d>
   12aaf:	83 7c 24 10 0e       	cmpl   $0xe,0x10(%esp)
   12ab4:	7e 07                	jle    12abd <match+0x24>
		return 0;
   12ab6:	b8 00 00 00 00       	mov    $0x0,%eax
   12abb:	eb 69                	jmp    12b26 <match+0x8d>
	/* "" means "." ---> so paths like "/usr/lib//libc.a" work */
    /* ""当作"."来看待 ---> 这样就能处理象"/usr/lib//libc.a"那样的路径名 */
    // 如果比较的长度len等于0并且目录项中文件名的第1个字符是'.',并且只有这么一个字符,那么我们就认为是相同的,因此返回1(匹配)
	if (!len && (de->name[0] == '.') && (de->name[1] == '\0'))
   12abd:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   12ac2:	75 1f                	jne    12ae3 <match+0x4a>
   12ac4:	8b 44 24 18          	mov    0x18(%esp),%eax
   12ac8:	0f b6 40 02          	movzbl 0x2(%eax),%eax
   12acc:	3c 2e                	cmp    $0x2e,%al
   12ace:	75 13                	jne    12ae3 <match+0x4a>
   12ad0:	8b 44 24 18          	mov    0x18(%esp),%eax
   12ad4:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   12ad8:	84 c0                	test   %al,%al
   12ada:	75 07                	jne    12ae3 <match+0x4a>
		return 1;
   12adc:	b8 01 00 00 00       	mov    $0x1,%eax
   12ae1:	eb 43                	jmp    12b26 <match+0x8d>
	// 如果要比较的长度len小于NAME_LEN,但是目录项中文件名长度超过len,则也返回0(不匹配)
	// 第75行上对目录项中文件名长度是否超过len的判断方法是检测name[len]是否为NULL.若长度超过len,则name[len]处就是一个不是NULL的普通字符.而对于长度
	// 为len的字符串name,字符name[len]就应该是NULL.
	if (len < NAME_LEN && de->name[len])
   12ae3:	83 7c 24 10 0d       	cmpl   $0xd,0x10(%esp)
   12ae8:	7f 1b                	jg     12b05 <match+0x6c>
   12aea:	8b 54 24 18          	mov    0x18(%esp),%edx
   12aee:	8b 44 24 10          	mov    0x10(%esp),%eax
   12af2:	01 d0                	add    %edx,%eax
   12af4:	83 c0 02             	add    $0x2,%eax
   12af7:	0f b6 00             	movzbl (%eax),%eax
   12afa:	84 c0                	test   %al,%al
   12afc:	74 07                	je     12b05 <match+0x6c>
		return 0;
   12afe:	b8 00 00 00 00       	mov    $0x0,%eax
   12b03:	eb 21                	jmp    12b26 <match+0x8d>
	__asm__(\
		"cld\n\t"							// 清方向标志位.
		"fs ; repe ; cmpsb\n\t"				// 用户空间执行循环比较[esi++]和[edi++]操作.
		"setz %%al"							// 若比较结果一样(zf=0)则置al=1(same=eax).
		:"=a" (same)
		:"0" (0), "S" ((long) name), "D" ((long) de->name), "c" (len)
   12b05:	8b 54 24 14          	mov    0x14(%esp),%edx
   12b09:	8b 44 24 18          	mov    0x18(%esp),%eax
   12b0d:	83 c0 02             	add    $0x2,%eax
   12b10:	89 c3                	mov    %eax,%ebx
	__asm__(\
   12b12:	b8 00 00 00 00       	mov    $0x0,%eax
   12b17:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   12b1b:	89 d6                	mov    %edx,%esi
   12b1d:	89 df                	mov    %ebx,%edi
   12b1f:	fc                   	cld    
   12b20:	64 f3 a6             	repz cmpsb %es:(%edi),%fs:(%esi)
   12b23:	0f 94 c0             	sete   %al
		:);
	return same;							// 返回比较结果.
}
   12b26:	5b                   	pop    %ebx
   12b27:	5e                   	pop    %esi
   12b28:	5f                   	pop    %edi
   12b29:	c3                   	ret    

00012b2a <find_entry>:
// 参数:*dir - 指定目录i节点的指针;name - 文件名;namelen - 文件名长度;该函数在指定目录的数据(文件)中搜索指定文件名的目录项.并对指定
// 文件名是'..'的情况根据当前进行的相关设置进行特殊处理.
// 返回:成功则返回高速缓冲区指针,并在*res_dir处返回的目录项结构指针.失败则返回空指针NULL.
static struct buffer_head * find_entry(struct m_inode ** dir,
	const char * name, int namelen, struct dir_entry ** res_dir)
{
   12b2a:	83 ec 2c             	sub    $0x2c,%esp
	// 则不予处理.如果没有定义过NO_TRUNCATE,那么在文件名长度超过最大长度NAME_LEN时截短之.
#ifdef NO_TRUNCATE
	if (namelen > NAME_LEN)
		return NULL;
#else
	if (namelen > NAME_LEN)
   12b2d:	83 7c 24 38 0e       	cmpl   $0xe,0x38(%esp)
   12b32:	7e 08                	jle    12b3c <find_entry+0x12>
		namelen = NAME_LEN;
   12b34:	c7 44 24 38 0e 00 00 	movl   $0xe,0x38(%esp)
   12b3b:	00 
#endif
	// 首先计算本目录中目录项项数entries.目录i节点i_size字段中含有本目录包含的数据长度,因此其除以一个目录项的长度(16字节)即可得到该目录中目录项数.然后
	// 置空返回目录项结构指针.
	entries = (*dir)->i_size / (sizeof (struct dir_entry));
   12b3c:	8b 44 24 30          	mov    0x30(%esp),%eax
   12b40:	8b 00                	mov    (%eax),%eax
   12b42:	8b 40 04             	mov    0x4(%eax),%eax
   12b45:	c1 e8 04             	shr    $0x4,%eax
   12b48:	89 44 24 10          	mov    %eax,0x10(%esp)
	*res_dir = NULL;
   12b4c:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   12b50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// 只能访问该目录中的项而不能退到其父目录中去.也即对于该进程本目录就如同是文件系统的根目录.因此我们需要将文件名修改为'.'.
	// 否则,如果该目录的i节点号等于ROOT_INO(1号)的话,说明确实是文件系统的根i节点.则取文件系统的超级块.如果被安装到的i节点存在,则先放回原i节点,然后对被
	// 安装到的i节点进行处理.于是我们让*dir指向该被安装到的i节点;并且该i节点的引用数加1.即针对这种情况,我们悄悄进行了"偷梁换柱"工程:)
	/* check for '..', as we might have to do some "magic" for it */
	/* 检查目录项'..',因为我们可能需要对其进行特殊处理 */
	if (namelen == 2 && get_fs_byte(name) == '.' && get_fs_byte(name + 1) == '.') {
   12b56:	83 7c 24 38 02       	cmpl   $0x2,0x38(%esp)
   12b5b:	0f 85 b3 00 00 00    	jne    12c14 <find_entry+0xea>
   12b61:	ff 74 24 34          	pushl  0x34(%esp)
   12b65:	e8 3b fe ff ff       	call   129a5 <get_fs_byte>
   12b6a:	83 c4 04             	add    $0x4,%esp
   12b6d:	3c 2e                	cmp    $0x2e,%al
   12b6f:	0f 85 9f 00 00 00    	jne    12c14 <find_entry+0xea>
   12b75:	8b 44 24 34          	mov    0x34(%esp),%eax
   12b79:	83 c0 01             	add    $0x1,%eax
   12b7c:	50                   	push   %eax
   12b7d:	e8 23 fe ff ff       	call   129a5 <get_fs_byte>
   12b82:	83 c4 04             	add    $0x4,%esp
   12b85:	3c 2e                	cmp    $0x2e,%al
   12b87:	0f 85 87 00 00 00    	jne    12c14 <find_entry+0xea>
		/* '..' in a pseudo-root results in a faked '.' (just change namelen) */
		/* 伪根中的'..'如同一个假'.'(只需改变名字长度) */
		if ((*dir) == current->root)
   12b8d:	8b 44 24 30          	mov    0x30(%esp),%eax
   12b91:	8b 10                	mov    (%eax),%edx
   12b93:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12b98:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
   12b9e:	39 c2                	cmp    %eax,%edx
   12ba0:	75 0a                	jne    12bac <find_entry+0x82>
			namelen = 1;
   12ba2:	c7 44 24 38 01 00 00 	movl   $0x1,0x38(%esp)
   12ba9:	00 
   12baa:	eb 68                	jmp    12c14 <find_entry+0xea>
		else if ((*dir)->i_num == ROOT_INO) {
   12bac:	8b 44 24 30          	mov    0x30(%esp),%eax
   12bb0:	8b 00                	mov    (%eax),%eax
   12bb2:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   12bb6:	66 83 f8 01          	cmp    $0x1,%ax
   12bba:	75 58                	jne    12c14 <find_entry+0xea>
			/* '..' over a mount-point results in 'dir' being exchanged for the mounted
			   directory-inode. NOTE! We set mounted, so that we can iput the new dir */
			/* 在一个安装点上的'..'将导致目录交换到被安装文件系统的目录i节点上.注意! 由于我们设置了mounted标志,因而我们能够放回该新目录 */
			sb = get_super((*dir)->i_dev);
   12bbc:	8b 44 24 30          	mov    0x30(%esp),%eax
   12bc0:	8b 00                	mov    (%eax),%eax
   12bc2:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12bc6:	0f b7 c0             	movzwl %ax,%eax
   12bc9:	83 ec 0c             	sub    $0xc,%esp
   12bcc:	50                   	push   %eax
   12bcd:	e8 e5 ce ff ff       	call   fab7 <get_super>
   12bd2:	83 c4 10             	add    $0x10,%esp
   12bd5:	89 44 24 0c          	mov    %eax,0xc(%esp)
			if (sb->s_imount) {
   12bd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12bdd:	8b 40 5c             	mov    0x5c(%eax),%eax
   12be0:	85 c0                	test   %eax,%eax
   12be2:	74 30                	je     12c14 <find_entry+0xea>
				iput(*dir);
   12be4:	8b 44 24 30          	mov    0x30(%esp),%eax
   12be8:	8b 00                	mov    (%eax),%eax
   12bea:	83 ec 0c             	sub    $0xc,%esp
   12bed:	50                   	push   %eax
   12bee:	e8 6c ba ff ff       	call   e65f <iput>
   12bf3:	83 c4 10             	add    $0x10,%esp
				(*dir)=sb->s_imount;
   12bf6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12bfa:	8b 50 5c             	mov    0x5c(%eax),%edx
   12bfd:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c01:	89 10                	mov    %edx,(%eax)
				(*dir)->i_count++;
   12c03:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c07:	8b 00                	mov    (%eax),%eax
   12c09:	0f b7 50 34          	movzwl 0x34(%eax),%edx
   12c0d:	83 c2 01             	add    $0x1,%edx
   12c10:	66 89 50 34          	mov    %dx,0x34(%eax)
		}
	}
	// 现在我们开始正常操作，查找指定文件名的目录项在什么地方。因此我们需要读取目录的数据，即取出目录i节点对应块设备数据区中的数据块（逻辑块）信息。这些逻辑块的
	// 块号保存在i节点结构的i_zone[9]数组中.我们先取其中第1个块号.如果目录i节点指向的第一个直接盘块号为0,则说明该目录竟然不含数据,这不正常.于是返回NULL退出.
	// 否则我们就从节点所在设备读取指定的目录项数据块.当然,如果不成功,则也返回NULL退出.
	if (!(block = (*dir)->i_zone[0]))
   12c14:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c18:	8b 00                	mov    (%eax),%eax
   12c1a:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12c1e:	0f b7 c0             	movzwl %ax,%eax
   12c21:	89 44 24 08          	mov    %eax,0x8(%esp)
   12c25:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12c2a:	75 0a                	jne    12c36 <find_entry+0x10c>
		return NULL;
   12c2c:	b8 00 00 00 00       	mov    $0x0,%eax
   12c31:	e9 2e 01 00 00       	jmp    12d64 <find_entry+0x23a>
	if (!(bh = bread((*dir)->i_dev, block)))
   12c36:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c3a:	8b 00                	mov    (%eax),%eax
   12c3c:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12c40:	0f b7 c0             	movzwl %ax,%eax
   12c43:	83 ec 08             	sub    $0x8,%esp
   12c46:	ff 74 24 10          	pushl  0x10(%esp)
   12c4a:	50                   	push   %eax
   12c4b:	e8 f6 c9 ff ff       	call   f646 <bread>
   12c50:	83 c4 10             	add    $0x10,%esp
   12c53:	89 44 24 18          	mov    %eax,0x18(%esp)
   12c57:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   12c5c:	75 0a                	jne    12c68 <find_entry+0x13e>
		return NULL;
   12c5e:	b8 00 00 00 00       	mov    $0x0,%eax
   12c63:	e9 fc 00 00 00       	jmp    12d64 <find_entry+0x23a>
	// 此时我们就在这个读取的目录i节点数据块中搜索匹配指定文件名的目录项.首先让de指向缓冲块中的数据块部分,并在不超过目录项数据的条件下,循环执行搜索.其中i是目录
	// 中的目录项索引号,在循环开始时初始化为0.
	i = 0;
   12c68:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   12c6f:	00 
	de = (struct dir_entry *) bh->b_data;
   12c70:	8b 44 24 18          	mov    0x18(%esp),%eax
   12c74:	8b 00                	mov    (%eax),%eax
   12c76:	89 44 24 14          	mov    %eax,0x14(%esp)
	while (i < entries) {
   12c7a:	e9 c3 00 00 00       	jmp    12d42 <find_entry+0x218>
		// 如果当前目录项数据块已经搜索完,还没有找到匹配的目录项,则释放当前目录项数据块.再读入目录的下一个逻辑块.若这块为空,则只要还没有搜索完目录中的所有目录项,就
		// 跳过该块,继续读目录的下一逻辑块.若该块不空,就让de指向该数据块,然后在其中继续搜索.其中141行上i/DIR_ENTRIES_PER_BLOCK可得到当前搜索的目录项所在目录文件中的
		// 块号,而bmap()函数(inode.c)则可计算出在设备上对应的逻辑块号.
		if ((char *)de >= BLOCK_SIZE + bh->b_data) {
   12c7f:	8b 44 24 18          	mov    0x18(%esp),%eax
   12c83:	8b 00                	mov    (%eax),%eax
   12c85:	05 00 04 00 00       	add    $0x400,%eax
   12c8a:	39 44 24 14          	cmp    %eax,0x14(%esp)
   12c8e:	72 7d                	jb     12d0d <find_entry+0x1e3>
			brelse(bh);
   12c90:	83 ec 0c             	sub    $0xc,%esp
   12c93:	ff 74 24 24          	pushl  0x24(%esp)
   12c97:	e8 54 c9 ff ff       	call   f5f0 <brelse>
   12c9c:	83 c4 10             	add    $0x10,%esp
			bh = NULL;
   12c9f:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   12ca6:	00 
			if (!(block = bmap(*dir, i / DIR_ENTRIES_PER_BLOCK)) ||
   12ca7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12cab:	c1 e8 06             	shr    $0x6,%eax
   12cae:	89 c2                	mov    %eax,%edx
   12cb0:	8b 44 24 30          	mov    0x30(%esp),%eax
   12cb4:	8b 00                	mov    (%eax),%eax
   12cb6:	83 ec 08             	sub    $0x8,%esp
   12cb9:	52                   	push   %edx
   12cba:	50                   	push   %eax
   12cbb:	e8 67 b9 ff ff       	call   e627 <bmap>
   12cc0:	83 c4 10             	add    $0x10,%esp
   12cc3:	89 44 24 08          	mov    %eax,0x8(%esp)
   12cc7:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12ccc:	74 28                	je     12cf6 <find_entry+0x1cc>
			    !(bh = bread((*dir)->i_dev, block))) {
   12cce:	8b 44 24 30          	mov    0x30(%esp),%eax
   12cd2:	8b 00                	mov    (%eax),%eax
   12cd4:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12cd8:	0f b7 c0             	movzwl %ax,%eax
   12cdb:	83 ec 08             	sub    $0x8,%esp
   12cde:	ff 74 24 10          	pushl  0x10(%esp)
   12ce2:	50                   	push   %eax
   12ce3:	e8 5e c9 ff ff       	call   f646 <bread>
   12ce8:	83 c4 10             	add    $0x10,%esp
   12ceb:	89 44 24 18          	mov    %eax,0x18(%esp)
			if (!(block = bmap(*dir, i / DIR_ENTRIES_PER_BLOCK)) ||
   12cef:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   12cf4:	75 0d                	jne    12d03 <find_entry+0x1d9>
				i += DIR_ENTRIES_PER_BLOCK;
   12cf6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12cfa:	83 c0 40             	add    $0x40,%eax
   12cfd:	89 44 24 1c          	mov    %eax,0x1c(%esp)
				continue;
   12d01:	eb 3f                	jmp    12d42 <find_entry+0x218>
			}
			de = (struct dir_entry *) bh->b_data;
   12d03:	8b 44 24 18          	mov    0x18(%esp),%eax
   12d07:	8b 00                	mov    (%eax),%eax
   12d09:	89 44 24 14          	mov    %eax,0x14(%esp)
		}
		// 如果找到匹配的目录项的话,则返回目录项结构指针de和该目录项i节点指针*dir以及该目录项数据块指针bh,并退出函数.否则继续在目录项数据块中比较下一个目录项.
		if (match(namelen, name, de)) {
   12d0d:	83 ec 04             	sub    $0x4,%esp
   12d10:	ff 74 24 18          	pushl  0x18(%esp)
   12d14:	ff 74 24 3c          	pushl  0x3c(%esp)
   12d18:	ff 74 24 44          	pushl  0x44(%esp)
   12d1c:	e8 78 fd ff ff       	call   12a99 <match>
   12d21:	83 c4 10             	add    $0x10,%esp
   12d24:	85 c0                	test   %eax,%eax
   12d26:	74 10                	je     12d38 <find_entry+0x20e>
			*res_dir = de;
   12d28:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   12d2c:	8b 54 24 14          	mov    0x14(%esp),%edx
   12d30:	89 10                	mov    %edx,(%eax)
			return bh;
   12d32:	8b 44 24 18          	mov    0x18(%esp),%eax
   12d36:	eb 2c                	jmp    12d64 <find_entry+0x23a>
		}
		de++;
   12d38:	83 44 24 14 10       	addl   $0x10,0x14(%esp)
		i++;
   12d3d:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
	while (i < entries) {
   12d42:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12d46:	3b 44 24 10          	cmp    0x10(%esp),%eax
   12d4a:	0f 8c 2f ff ff ff    	jl     12c7f <find_entry+0x155>
	}
	// 如果指定目录中的所有目录项都搜索赛后,还没有找到相应的目录项,则释放目录的数据块,最后返回NULL(失败).
	brelse(bh);
   12d50:	83 ec 0c             	sub    $0xc,%esp
   12d53:	ff 74 24 24          	pushl  0x24(%esp)
   12d57:	e8 94 c8 ff ff       	call   f5f0 <brelse>
   12d5c:	83 c4 10             	add    $0x10,%esp
	return NULL;
   12d5f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12d64:	83 c4 2c             	add    $0x2c,%esp
   12d67:	c3                   	ret    

00012d68 <add_entry>:
// 根据指定的目录和文件名添加目录项。
// 参数：dir - 指定目录的i节点；name - 文件名；namelen - 文件名长度；
// 返回：高速缓冲区指针；res_dir - 返回的目录项结构指针。
static struct buffer_head * add_entry(struct m_inode * dir,
	const char * name, int namelen, struct dir_entry ** res_dir)
{
   12d68:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 同样，本函数一开始也需要对函数参数的有效性进行判断和验证。如果我们在前面定义了符号常数NO_TRUNCATE，那么如果文件
	// 名长度超过最大长度NAME_LEN，则不予处理。如果没有定义过NO_TRUNCATE，那么在文件长度超过最大长度NAME_LEN时截短之。
	*res_dir = NULL;                							// 用于返回目录项结构指针。
   12d6b:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   12d6f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#ifdef NO_TRUNCATE
	if (namelen > NAME_LEN)
		return NULL;
#else
	if (namelen > NAME_LEN)
   12d75:	83 7c 24 28 0e       	cmpl   $0xe,0x28(%esp)
   12d7a:	7e 08                	jle    12d84 <add_entry+0x1c>
		namelen = NAME_LEN;
   12d7c:	c7 44 24 28 0e 00 00 	movl   $0xe,0x28(%esp)
   12d83:	00 
#endif
	// 现在我们开始操作，向指定目录中添加一个指定文件名的目录项。因此我们需要先读取目录的数据，即取出目录i节点对应块设备
	// 数据区中的数据块（逻辑块）信息。这些逻辑块的块号保存在i节点结构的i_zone[9]数组中。我们先取其第1个块号。如果目录
	// i节点指向的第一个直接磁盘块号为0,则说明该目录竟然不含数据，这不正常。于是返回NULL退出。否则我们就从节点所在设备读取
	// 指定的目录项数据块。如果不成功，则也返回NULL退出。另外，如果参数提供的文件名长度等于0,则也返回NULL退出。
	if (!namelen)
   12d84:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   12d89:	75 0a                	jne    12d95 <add_entry+0x2d>
		return NULL;
   12d8b:	b8 00 00 00 00       	mov    $0x0,%eax
   12d90:	e9 fd 01 00 00       	jmp    12f92 <add_entry+0x22a>
	if (!(block = dir->i_zone[0]))
   12d95:	8b 44 24 20          	mov    0x20(%esp),%eax
   12d99:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12d9d:	0f b7 c0             	movzwl %ax,%eax
   12da0:	89 04 24             	mov    %eax,(%esp)
   12da3:	83 3c 24 00          	cmpl   $0x0,(%esp)
   12da7:	75 0a                	jne    12db3 <add_entry+0x4b>
		return NULL;
   12da9:	b8 00 00 00 00       	mov    $0x0,%eax
   12dae:	e9 df 01 00 00       	jmp    12f92 <add_entry+0x22a>
	if (!(bh = bread(dir->i_dev, block)))
   12db3:	8b 44 24 20          	mov    0x20(%esp),%eax
   12db7:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12dbb:	0f b7 c0             	movzwl %ax,%eax
   12dbe:	83 ec 08             	sub    $0x8,%esp
   12dc1:	ff 74 24 08          	pushl  0x8(%esp)
   12dc5:	50                   	push   %eax
   12dc6:	e8 7b c8 ff ff       	call   f646 <bread>
   12dcb:	83 c4 10             	add    $0x10,%esp
   12dce:	89 44 24 08          	mov    %eax,0x8(%esp)
   12dd2:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12dd7:	75 0a                	jne    12de3 <add_entry+0x7b>
		return NULL;
   12dd9:	b8 00 00 00 00       	mov    $0x0,%eax
   12dde:	e9 af 01 00 00       	jmp    12f92 <add_entry+0x22a>
	// 此时我们就在这个目录i节点数据块中循环查找最后未使用的空目录项。首先让目录项结构指针de指向缓冲块中的数据块部分，即第
	// 一个目录项处。其中i是目录中的目录项索引号，在循环开始时初始化为0。
	i = 0;
   12de3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   12dea:	00 
	de = (struct dir_entry *) bh->b_data;
   12deb:	8b 44 24 08          	mov    0x8(%esp),%eax
   12def:	8b 00                	mov    (%eax),%eax
   12df1:	89 44 24 04          	mov    %eax,0x4(%esp)
		// 对应的逻辑块不存在就创建一块。若读取或创建操作失败则返回空。如果此次读取的磁盘逻辑块数据返回的缓冲块指针为空，说明这
		// 块逻辑块可能是因为不存在而新创建的空块，则把目录项索引值加上一块逻辑块所能容纳的目录项数DIR_ENTRIES_PER_BLOCK，
		// 用以跳过该块并继续搜索。否则说明新读入的块上有目录项数据，于是让目录项结构指针de指向该块的缓冲块数据部分，然后在其中
		// 继续搜索。其中i/DIR_ENTRIES_PER_BLOCK可计算得到当前搜索的目录项i所在目录文件中的块号，而create_block()函数
		// （inode.c）则可读取或创建出在设备上对应的逻辑块。
		if ((char *)de >= BLOCK_SIZE + bh->b_data) {
   12df5:	8b 44 24 08          	mov    0x8(%esp),%eax
   12df9:	8b 00                	mov    (%eax),%eax
   12dfb:	05 00 04 00 00       	add    $0x400,%eax
   12e00:	39 44 24 04          	cmp    %eax,0x4(%esp)
   12e04:	0f 82 81 00 00 00    	jb     12e8b <add_entry+0x123>
			brelse(bh);
   12e0a:	83 ec 0c             	sub    $0xc,%esp
   12e0d:	ff 74 24 14          	pushl  0x14(%esp)
   12e11:	e8 da c7 ff ff       	call   f5f0 <brelse>
   12e16:	83 c4 10             	add    $0x10,%esp
			bh = NULL;
   12e19:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   12e20:	00 
			block = create_block(dir, i / DIR_ENTRIES_PER_BLOCK);
   12e21:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12e25:	c1 e8 06             	shr    $0x6,%eax
   12e28:	83 ec 08             	sub    $0x8,%esp
   12e2b:	50                   	push   %eax
   12e2c:	ff 74 24 2c          	pushl  0x2c(%esp)
   12e30:	e8 0e b8 ff ff       	call   e643 <create_block>
   12e35:	83 c4 10             	add    $0x10,%esp
   12e38:	89 04 24             	mov    %eax,(%esp)
			if (!block)
   12e3b:	83 3c 24 00          	cmpl   $0x0,(%esp)
   12e3f:	75 0a                	jne    12e4b <add_entry+0xe3>
				return NULL;
   12e41:	b8 00 00 00 00       	mov    $0x0,%eax
   12e46:	e9 47 01 00 00       	jmp    12f92 <add_entry+0x22a>
			if (!(bh = bread(dir->i_dev, block))) {          			// 若空则跳过该块继续。
   12e4b:	8b 44 24 20          	mov    0x20(%esp),%eax
   12e4f:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12e53:	0f b7 c0             	movzwl %ax,%eax
   12e56:	83 ec 08             	sub    $0x8,%esp
   12e59:	ff 74 24 08          	pushl  0x8(%esp)
   12e5d:	50                   	push   %eax
   12e5e:	e8 e3 c7 ff ff       	call   f646 <bread>
   12e63:	83 c4 10             	add    $0x10,%esp
   12e66:	89 44 24 08          	mov    %eax,0x8(%esp)
   12e6a:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12e6f:	75 10                	jne    12e81 <add_entry+0x119>
				i += DIR_ENTRIES_PER_BLOCK;
   12e71:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12e75:	83 c0 40             	add    $0x40,%eax
   12e78:	89 44 24 0c          	mov    %eax,0xc(%esp)
				continue;
   12e7c:	e9 0c 01 00 00       	jmp    12f8d <add_entry+0x225>
			}
			de = (struct dir_entry *) bh->b_data;
   12e81:	8b 44 24 08          	mov    0x8(%esp),%eax
   12e85:	8b 00                	mov    (%eax),%eax
   12e87:	89 44 24 04          	mov    %eax,0x4(%esp)
		}
		// 如果当前所操作的目录项序号i乘上结构大小所得长度值已经超过目录i节点信息所指出的目录数据长度值i_size，则说明整个目录
		// 文件数据中没有由于删除文件留下的空目录项，因此我们只能把需要添加的新目录项附加到目录文件数据的末端处。于是对该处目录
		// 项进行设置（置该目录项的i节点指针为空），并更新该目录文件的长度值（加上一个目录项的长度），然后设置目录的i节点已修改
		// 标志，再更新该目录的改变时间为当前时间。
		if (i * sizeof(struct dir_entry) >= dir->i_size) {
   12e8b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12e8f:	c1 e0 04             	shl    $0x4,%eax
   12e92:	89 c2                	mov    %eax,%edx
   12e94:	8b 44 24 20          	mov    0x20(%esp),%eax
   12e98:	8b 40 04             	mov    0x4(%eax),%eax
   12e9b:	39 c2                	cmp    %eax,%edx
   12e9d:	72 49                	jb     12ee8 <add_entry+0x180>
			de->inode = 0;
   12e9f:	8b 44 24 04          	mov    0x4(%esp),%eax
   12ea3:	66 c7 00 00 00       	movw   $0x0,(%eax)
			dir->i_size = (i + 1) * sizeof(struct dir_entry);
   12ea8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12eac:	83 c0 01             	add    $0x1,%eax
   12eaf:	c1 e0 04             	shl    $0x4,%eax
   12eb2:	89 c2                	mov    %eax,%edx
   12eb4:	8b 44 24 20          	mov    0x20(%esp),%eax
   12eb8:	89 50 04             	mov    %edx,0x4(%eax)
			dir->i_dirt = 1;
   12ebb:	8b 44 24 20          	mov    0x20(%esp),%eax
   12ebf:	c6 40 37 01          	movb   $0x1,0x37(%eax)
			dir->i_ctime = CURRENT_TIME;
   12ec3:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   12ec8:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   12ece:	01 d0                	add    %edx,%eax
   12ed0:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   12ed5:	f7 e2                	mul    %edx
   12ed7:	c1 ea 05             	shr    $0x5,%edx
   12eda:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   12edf:	01 c2                	add    %eax,%edx
   12ee1:	8b 44 24 20          	mov    0x20(%esp),%eax
   12ee5:	89 50 2c             	mov    %edx,0x2c(%eax)
		}
		// 若当前搜索的目录项de的i节点为空，则表示找到一个还未使用的空闲目录项或是添加的新目录项。于是更新目录的修改时间为当前
		// 时间，并从用户数据区复制文件名到该目录项的文件名字段，置含有本目录项的相应高速缓冲块已修改标志。返回该目录项的指针以及
		// 该高速缓冲块的指针，退出。
		if (!de->inode) {
   12ee8:	8b 44 24 04          	mov    0x4(%esp),%eax
   12eec:	0f b7 00             	movzwl (%eax),%eax
   12eef:	66 85 c0             	test   %ax,%ax
   12ef2:	0f 85 8b 00 00 00    	jne    12f83 <add_entry+0x21b>
			dir->i_mtime = CURRENT_TIME;
   12ef8:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   12efd:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   12f03:	01 d0                	add    %edx,%eax
   12f05:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   12f0a:	f7 e2                	mul    %edx
   12f0c:	c1 ea 05             	shr    $0x5,%edx
   12f0f:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   12f14:	01 c2                	add    %eax,%edx
   12f16:	8b 44 24 20          	mov    0x20(%esp),%eax
   12f1a:	89 50 08             	mov    %edx,0x8(%eax)
			for (i = 0; i < NAME_LEN ; i++)
   12f1d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   12f24:	00 
   12f25:	eb 3d                	jmp    12f64 <add_entry+0x1fc>
				de->name[i] = (i < namelen) ? get_fs_byte(name + i) : 0;
   12f27:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12f2b:	3b 44 24 28          	cmp    0x28(%esp),%eax
   12f2f:	7d 1a                	jge    12f4b <add_entry+0x1e3>
   12f31:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12f35:	8b 44 24 24          	mov    0x24(%esp),%eax
   12f39:	01 d0                	add    %edx,%eax
   12f3b:	83 ec 0c             	sub    $0xc,%esp
   12f3e:	50                   	push   %eax
   12f3f:	e8 61 fa ff ff       	call   129a5 <get_fs_byte>
   12f44:	83 c4 10             	add    $0x10,%esp
   12f47:	89 c1                	mov    %eax,%ecx
   12f49:	eb 05                	jmp    12f50 <add_entry+0x1e8>
   12f4b:	b9 00 00 00 00       	mov    $0x0,%ecx
   12f50:	8b 54 24 04          	mov    0x4(%esp),%edx
   12f54:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12f58:	01 d0                	add    %edx,%eax
   12f5a:	83 c0 02             	add    $0x2,%eax
   12f5d:	88 08                	mov    %cl,(%eax)
			for (i = 0; i < NAME_LEN ; i++)
   12f5f:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   12f64:	83 7c 24 0c 0d       	cmpl   $0xd,0xc(%esp)
   12f69:	7e bc                	jle    12f27 <add_entry+0x1bf>
			bh->b_dirt = 1;
   12f6b:	8b 44 24 08          	mov    0x8(%esp),%eax
   12f6f:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
			*res_dir = de;
   12f73:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   12f77:	8b 54 24 04          	mov    0x4(%esp),%edx
   12f7b:	89 10                	mov    %edx,(%eax)
			return bh;
   12f7d:	8b 44 24 08          	mov    0x8(%esp),%eax
   12f81:	eb 0f                	jmp    12f92 <add_entry+0x22a>
		}
		de++;           												// 如果该目录项已经被使用，则继续检测下一个目录项。
   12f83:	83 44 24 04 10       	addl   $0x10,0x4(%esp)
		i++;
   12f88:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
		if ((char *)de >= BLOCK_SIZE + bh->b_data) {
   12f8d:	e9 63 fe ff ff       	jmp    12df5 <add_entry+0x8d>
	}
	// 本函数执行不到这里。这也许是Linus在写这段代码时，先复制了上面find_entry()函数的代码，而后修改成本函数的。
	brelse(bh);
	return NULL;
}
   12f92:	83 c4 1c             	add    $0x1c,%esp
   12f95:	c3                   	ret    

00012f96 <follow_link>:

// 查找符号链接的i节点.
// 参数:dir - 目录i节点;inode - 目录项i节点.
// 返回:返回符号链接到文件的i节点指针.出错返回NULL.
static struct m_inode * follow_link(struct m_inode * dir, struct m_inode * inode)
{
   12f96:	83 ec 1c             	sub    $0x1c,%esp
	unsigned short fs;													// 用于临时保存fs段寄存器值.
	struct buffer_head * bh;

	// 首先判断函数参数的有效性.如果没有给出目录i节点,我们就使用进程任务结构中设置的根i节点,并把链接数增1.如果没有给出目录
	// 项i节点,则放回目录i节点后返回NULL.如果指定目录项不是一个符号链接,就直接返回目录项对应的i节点inode.
	if (!dir) {
   12f99:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   12f9e:	75 22                	jne    12fc2 <follow_link+0x2c>
		dir = current->root;
   12fa0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12fa5:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
   12fab:	89 44 24 20          	mov    %eax,0x20(%esp)
		dir->i_count++;
   12faf:	8b 44 24 20          	mov    0x20(%esp),%eax
   12fb3:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   12fb7:	8d 50 01             	lea    0x1(%eax),%edx
   12fba:	8b 44 24 20          	mov    0x20(%esp),%eax
   12fbe:	66 89 50 34          	mov    %dx,0x34(%eax)
	}
	if (!inode) {
   12fc2:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   12fc7:	75 19                	jne    12fe2 <follow_link+0x4c>
		iput(dir);
   12fc9:	83 ec 0c             	sub    $0xc,%esp
   12fcc:	ff 74 24 2c          	pushl  0x2c(%esp)
   12fd0:	e8 8a b6 ff ff       	call   e65f <iput>
   12fd5:	83 c4 10             	add    $0x10,%esp
		return NULL;
   12fd8:	b8 00 00 00 00       	mov    $0x0,%eax
   12fdd:	e9 ea 00 00 00       	jmp    130cc <follow_link+0x136>
	}
	if (!S_ISLNK(inode->i_mode)) {
   12fe2:	8b 44 24 24          	mov    0x24(%esp),%eax
   12fe6:	0f b7 00             	movzwl (%eax),%eax
   12fe9:	0f b7 c0             	movzwl %ax,%eax
   12fec:	25 00 f0 00 00       	and    $0xf000,%eax
   12ff1:	3d 00 a0 00 00       	cmp    $0xa000,%eax
   12ff6:	74 18                	je     13010 <follow_link+0x7a>
		iput(dir);
   12ff8:	83 ec 0c             	sub    $0xc,%esp
   12ffb:	ff 74 24 2c          	pushl  0x2c(%esp)
   12fff:	e8 5b b6 ff ff       	call   e65f <iput>
   13004:	83 c4 10             	add    $0x10,%esp
		return inode;
   13007:	8b 44 24 24          	mov    0x24(%esp),%eax
   1300b:	e9 bc 00 00 00       	jmp    130cc <follow_link+0x136>
	}
	// 然后取fs段寄存器值.fs通常保存着指向任务数据段的选择符0x17.如果fs没有指向用户数据段,或者给出的目录项i节点第1个直接块
	// 块号等于0,或者是读取第1个直接块出错,则放回dir和inode两个i节点并返回NULL退出.否则说明现在fs正指向用户数据段,并且我
	// 们已经成功地读取了符号链接目录项的文件内容,并且文件内容已经在bh指向的缓冲块数据区中.实际上,这个缓冲块数据区中仅包含一
	// 个链接指向的文件路径名字符串.
	__asm__("mov %%fs, %0":"=r" (fs));
   13010:	66 8c e0             	mov    %fs,%ax
   13013:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	if (fs != 0x17 || !inode->i_zone[0] ||
   13018:	66 83 7c 24 0e 17    	cmpw   $0x17,0xe(%esp)
   1301e:	75 3b                	jne    1305b <follow_link+0xc5>
   13020:	8b 44 24 24          	mov    0x24(%esp),%eax
   13024:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13028:	66 85 c0             	test   %ax,%ax
   1302b:	74 2e                	je     1305b <follow_link+0xc5>
	   !(bh = bread(inode->i_dev, inode->i_zone[0]))) {
   1302d:	8b 44 24 24          	mov    0x24(%esp),%eax
   13031:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13035:	0f b7 d0             	movzwl %ax,%edx
   13038:	8b 44 24 24          	mov    0x24(%esp),%eax
   1303c:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13040:	0f b7 c0             	movzwl %ax,%eax
   13043:	83 ec 08             	sub    $0x8,%esp
   13046:	52                   	push   %edx
   13047:	50                   	push   %eax
   13048:	e8 f9 c5 ff ff       	call   f646 <bread>
   1304d:	83 c4 10             	add    $0x10,%esp
   13050:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (fs != 0x17 || !inode->i_zone[0] ||
   13054:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   13059:	75 25                	jne    13080 <follow_link+0xea>
		iput(dir);
   1305b:	83 ec 0c             	sub    $0xc,%esp
   1305e:	ff 74 24 2c          	pushl  0x2c(%esp)
   13062:	e8 f8 b5 ff ff       	call   e65f <iput>
   13067:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   1306a:	83 ec 0c             	sub    $0xc,%esp
   1306d:	ff 74 24 30          	pushl  0x30(%esp)
   13071:	e8 e9 b5 ff ff       	call   e65f <iput>
   13076:	83 c4 10             	add    $0x10,%esp
		return NULL;
   13079:	b8 00 00 00 00       	mov    $0x0,%eax
   1307e:	eb 4c                	jmp    130cc <follow_link+0x136>
	}
	// 此时我们已经不需要符号链接目录项的i节点了,于是把它放回.现在遇到一个问题,那就是内核函数处理的用户数据都是存放在用户数据
	// 空间中的,并使用了fs段寄存器来从用户空间传递数据到内核空间中.而这里需要处理的数据却在内核空间中.因此为了正确地处理位于
	// 内核中的用户数据,我们需要让fs段寄存器临时指向内核空间,即让fs=0x10.并在调用函数处理完后再恢复原fs的值.最后释放相应缓冲
	// 块,并返回_namei()解析得到符号链接指向的文件i节点.
	iput(inode);
   13080:	83 ec 0c             	sub    $0xc,%esp
   13083:	ff 74 24 30          	pushl  0x30(%esp)
   13087:	e8 d3 b5 ff ff       	call   e65f <iput>
   1308c:	83 c4 10             	add    $0x10,%esp
	__asm__("mov %0, %%fs"::"r" ((unsigned short) 0x10));
   1308f:	b8 10 00 00 00       	mov    $0x10,%eax
   13094:	8e e0                	mov    %eax,%fs
	inode = _namei(bh->b_data,dir,0);
   13096:	8b 44 24 08          	mov    0x8(%esp),%eax
   1309a:	8b 00                	mov    (%eax),%eax
   1309c:	83 ec 04             	sub    $0x4,%esp
   1309f:	6a 00                	push   $0x0
   130a1:	ff 74 24 28          	pushl  0x28(%esp)
   130a5:	50                   	push   %eax
   130a6:	e8 82 02 00 00       	call   1332d <_namei>
   130ab:	83 c4 10             	add    $0x10,%esp
   130ae:	89 44 24 24          	mov    %eax,0x24(%esp)
	__asm__("mov %0, %%fs"::"r" (fs));
   130b2:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
   130b7:	8e e0                	mov    %eax,%fs
	brelse(bh);
   130b9:	83 ec 0c             	sub    $0xc,%esp
   130bc:	ff 74 24 14          	pushl  0x14(%esp)
   130c0:	e8 2b c5 ff ff       	call   f5f0 <brelse>
   130c5:	83 c4 10             	add    $0x10,%esp
	return inode;
   130c8:	8b 44 24 24          	mov    0x24(%esp),%eax
}
   130cc:	83 c4 1c             	add    $0x1c,%esp
   130cf:	c3                   	ret    

000130d0 <get_dir>:
 */
// 从指定目录开始搜寻指定路径名的目录(或文件名)的i节点.
// 参数:pathname - 路径名;inode - 指定起始目录的i节点.
// 返回:目录或文件的i节点指针.失败时返回NULL.
static struct m_inode * get_dir(const char * pathname, struct m_inode * inode)
{
   130d0:	83 ec 2c             	sub    $0x2c,%esp
	int namelen, inr;
	struct dir_entry * de;
	struct m_inode * dir;

	// 首先判断参数有效性.如果给出的指定目录的i节点指针inode为空,则使用当前进程的工作目录i节点.
	if (!inode) {
   130d3:	8b 44 24 34          	mov    0x34(%esp),%eax
   130d7:	85 c0                	test   %eax,%eax
   130d9:	75 1e                	jne    130f9 <get_dir+0x29>
		inode = current->pwd;									// 进程的当前工作目录i节点.
   130db:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   130e0:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
   130e6:	89 44 24 34          	mov    %eax,0x34(%esp)
		inode->i_count++;
   130ea:	8b 44 24 34          	mov    0x34(%esp),%eax
   130ee:	0f b7 50 34          	movzwl 0x34(%eax),%edx
   130f2:	83 c2 01             	add    $0x1,%edx
   130f5:	66 89 50 34          	mov    %dx,0x34(%eax)
	}
	// 如果用户指定路径名的第1个字符是'/',则说明路径名是绝对路径名.则应该从当前进程任务结构中设置的根(或伪根)i节点开始操作.
	// 于是我们需要先放回参数指定的或者设定的目录i节点,并取得进程使用的根i节点.然后把该i节点的引用计数加1,
	// 并删除路径名的第1个字符'/'.这样就可以保证进程只能以其设定的根i节点作为搜索的起点.
	if ((c = get_fs_byte(pathname)) == '/') {
   130f9:	ff 74 24 30          	pushl  0x30(%esp)
   130fd:	e8 a3 f8 ff ff       	call   129a5 <get_fs_byte>
   13102:	83 c4 04             	add    $0x4,%esp
   13105:	88 44 24 1b          	mov    %al,0x1b(%esp)
   13109:	80 7c 24 1b 2f       	cmpb   $0x2f,0x1b(%esp)
   1310e:	75 33                	jne    13143 <get_dir+0x73>
		iput(inode);											// 放回原i节点.
   13110:	8b 44 24 34          	mov    0x34(%esp),%eax
   13114:	83 ec 0c             	sub    $0xc,%esp
   13117:	50                   	push   %eax
   13118:	e8 42 b5 ff ff       	call   e65f <iput>
   1311d:	83 c4 10             	add    $0x10,%esp
		inode = current->root;									// 为进程指定的根i节点.
   13120:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   13125:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
   1312b:	89 44 24 34          	mov    %eax,0x34(%esp)
		pathname++;
   1312f:	83 44 24 30 01       	addl   $0x1,0x30(%esp)
		inode->i_count++;
   13134:	8b 44 24 34          	mov    0x34(%esp),%eax
   13138:	0f b7 50 34          	movzwl 0x34(%eax),%edx
   1313c:	83 c2 01             	add    $0x1,%edx
   1313f:	66 89 50 34          	mov    %dx,0x34(%eax)
	}
	// 然后针对路径名中的各个目录名部分和文件名进行循环处理。在循环处理过程中，我们先要对当前正在处理的目录名部分的i节点进行有效性判断，并且把
	// 变量thisname指向当前正在处理的目录名部分。如果该i节点表明当前处理的目录名部分不是目录类型，或者没有可进入该目录的访问许可，则放回该i节点
	// 并返回NULL退出。当然在刚进入循环时，当前目录的ｉ节点inode就是进程根i节点或者是当前工作目录的i节点，或者是参数指定的某个搜索起始目录的i节点。
	while (1) {
		thisname = pathname;
   13143:	8b 44 24 30          	mov    0x30(%esp),%eax
   13147:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (!S_ISDIR(inode->i_mode) || !permission(inode, MAY_EXEC)) {
   1314b:	8b 44 24 34          	mov    0x34(%esp),%eax
   1314f:	0f b7 00             	movzwl (%eax),%eax
   13152:	0f b7 c0             	movzwl %ax,%eax
   13155:	25 00 f0 00 00       	and    $0xf000,%eax
   1315a:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1315f:	75 16                	jne    13177 <get_dir+0xa7>
   13161:	8b 44 24 34          	mov    0x34(%esp),%eax
   13165:	83 ec 08             	sub    $0x8,%esp
   13168:	6a 01                	push   $0x1
   1316a:	50                   	push   %eax
   1316b:	e8 86 f8 ff ff       	call   129f6 <permission>
   13170:	83 c4 10             	add    $0x10,%esp
   13173:	85 c0                	test   %eax,%eax
   13175:	75 1a                	jne    13191 <get_dir+0xc1>
			iput(inode);
   13177:	8b 44 24 34          	mov    0x34(%esp),%eax
   1317b:	83 ec 0c             	sub    $0xc,%esp
   1317e:	50                   	push   %eax
   1317f:	e8 db b4 ff ff       	call   e65f <iput>
   13184:	83 c4 10             	add    $0x10,%esp
			return NULL;
   13187:	b8 00 00 00 00       	mov    $0x0,%eax
   1318c:	e9 12 01 00 00       	jmp    132a3 <get_dir+0x1d3>
		// 每次循环我们处理路径名中一个目录名(或文件名)部分.因此在每次循环中我们都要从路径名字符串中分离出一个目录名(或文件名).方法是从当前路径名指针
		// pathname开始处搜索检测字符,直到字符是一个结尾符(NULL)或者是一个'/'字符.此时变量namelen正好是当前处理目录名部分的长度,而变量thisname正指向
		// 该目录名部分的开始处.此时如果字符是结尾符NULL,则表明已经搜索到路径名末尾,并已到达最后指定目录名或文件名,则返回该i节点指针退出.
		// 注意!如果路径名中最后一个名称也是一个目录名,但其后面没有加上'/'字符,则函数不会返回该最后目录名的i节点!例如:对于路径/usr/src/linux,该函数将
		// 只返回src/目录名的i节点.
		for(namelen = 0; (c = get_fs_byte(pathname++)) && (c != '/'); namelen++)
   13191:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   13198:	00 
   13199:	eb 05                	jmp    131a0 <get_dir+0xd0>
   1319b:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   131a0:	8b 44 24 30          	mov    0x30(%esp),%eax
   131a4:	8d 50 01             	lea    0x1(%eax),%edx
   131a7:	89 54 24 30          	mov    %edx,0x30(%esp)
   131ab:	83 ec 0c             	sub    $0xc,%esp
   131ae:	50                   	push   %eax
   131af:	e8 f1 f7 ff ff       	call   129a5 <get_fs_byte>
   131b4:	83 c4 10             	add    $0x10,%esp
   131b7:	88 44 24 1b          	mov    %al,0x1b(%esp)
   131bb:	80 7c 24 1b 00       	cmpb   $0x0,0x1b(%esp)
   131c0:	74 07                	je     131c9 <get_dir+0xf9>
   131c2:	80 7c 24 1b 2f       	cmpb   $0x2f,0x1b(%esp)
   131c7:	75 d2                	jne    1319b <get_dir+0xcb>
			/* nothing */ ;
		if (!c)
   131c9:	80 7c 24 1b 00       	cmpb   $0x0,0x1b(%esp)
   131ce:	75 09                	jne    131d9 <get_dir+0x109>
			return inode;
   131d0:	8b 44 24 34          	mov    0x34(%esp),%eax
   131d4:	e9 ca 00 00 00       	jmp    132a3 <get_dir+0x1d3>
		// 在得到当前目录名部分(或文件名)后,我们调用查找目录项函数find_entry()在当前处理的目录中寻找指定名称的目录项.如果没有找到,则放回该i节点,并返回
		// NULL退出.然后在找到的目录项中取出其i节点号inr和设备号idev,释放包含该目录项的高速缓冲块并放回该i节点.然后取节点号inr的i节点inode,并以该目录
		// 项为当前目录继续循环处理路径名中的下一目录名部分(或文件名).如果当前处理的目录项是一个符号链接名,则使用follow_link()就可以得到其指向的目录项名i节点.
		if (!(bh = find_entry(&inode, thisname, namelen, &de))) {
   131d9:	8d 44 24 04          	lea    0x4(%esp),%eax
   131dd:	50                   	push   %eax
   131de:	ff 74 24 20          	pushl  0x20(%esp)
   131e2:	ff 74 24 1c          	pushl  0x1c(%esp)
   131e6:	8d 44 24 40          	lea    0x40(%esp),%eax
   131ea:	50                   	push   %eax
   131eb:	e8 3a f9 ff ff       	call   12b2a <find_entry>
   131f0:	83 c4 10             	add    $0x10,%esp
   131f3:	89 44 24 10          	mov    %eax,0x10(%esp)
   131f7:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   131fc:	75 1a                	jne    13218 <get_dir+0x148>
			iput(inode);
   131fe:	8b 44 24 34          	mov    0x34(%esp),%eax
   13202:	83 ec 0c             	sub    $0xc,%esp
   13205:	50                   	push   %eax
   13206:	e8 54 b4 ff ff       	call   e65f <iput>
   1320b:	83 c4 10             	add    $0x10,%esp
			return NULL;
   1320e:	b8 00 00 00 00       	mov    $0x0,%eax
   13213:	e9 8b 00 00 00       	jmp    132a3 <get_dir+0x1d3>
		}
		inr = de->inode;										// 当前目录名部分的i节点号.
   13218:	8b 44 24 04          	mov    0x4(%esp),%eax
   1321c:	0f b7 00             	movzwl (%eax),%eax
   1321f:	0f b7 c0             	movzwl %ax,%eax
   13222:	89 44 24 0c          	mov    %eax,0xc(%esp)
		brelse(bh);
   13226:	83 ec 0c             	sub    $0xc,%esp
   13229:	ff 74 24 1c          	pushl  0x1c(%esp)
   1322d:	e8 be c3 ff ff       	call   f5f0 <brelse>
   13232:	83 c4 10             	add    $0x10,%esp
		dir = inode;
   13235:	8b 44 24 34          	mov    0x34(%esp),%eax
   13239:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (!(inode = iget(dir->i_dev, inr))) {					// 取i节点内容.
   1323d:	8b 44 24 08          	mov    0x8(%esp),%eax
   13241:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13245:	0f b7 c0             	movzwl %ax,%eax
   13248:	83 ec 08             	sub    $0x8,%esp
   1324b:	ff 74 24 14          	pushl  0x14(%esp)
   1324f:	50                   	push   %eax
   13250:	e8 8d b7 ff ff       	call   e9e2 <iget>
   13255:	83 c4 10             	add    $0x10,%esp
   13258:	89 44 24 34          	mov    %eax,0x34(%esp)
   1325c:	8b 44 24 34          	mov    0x34(%esp),%eax
   13260:	85 c0                	test   %eax,%eax
   13262:	75 16                	jne    1327a <get_dir+0x1aa>
			iput(dir);
   13264:	83 ec 0c             	sub    $0xc,%esp
   13267:	ff 74 24 14          	pushl  0x14(%esp)
   1326b:	e8 ef b3 ff ff       	call   e65f <iput>
   13270:	83 c4 10             	add    $0x10,%esp
			return NULL;
   13273:	b8 00 00 00 00       	mov    $0x0,%eax
   13278:	eb 29                	jmp    132a3 <get_dir+0x1d3>
		}
		if (!(inode = follow_link(dir, inode)))
   1327a:	8b 44 24 34          	mov    0x34(%esp),%eax
   1327e:	83 ec 08             	sub    $0x8,%esp
   13281:	50                   	push   %eax
   13282:	ff 74 24 14          	pushl  0x14(%esp)
   13286:	e8 0b fd ff ff       	call   12f96 <follow_link>
   1328b:	83 c4 10             	add    $0x10,%esp
   1328e:	89 44 24 34          	mov    %eax,0x34(%esp)
   13292:	8b 44 24 34          	mov    0x34(%esp),%eax
   13296:	85 c0                	test   %eax,%eax
   13298:	0f 85 a5 fe ff ff    	jne    13143 <get_dir+0x73>
			return NULL;
   1329e:	b8 00 00 00 00       	mov    $0x0,%eax
        }
}
   132a3:	83 c4 2c             	add    $0x2c,%esp
   132a6:	c3                   	ret    

000132a7 <dir_namei>:
// base - 搜索起始目录的i节点.
// 返回:指定目录名最顶层的i节点指针和最顶层目录名称及长度.出错时返回NULL.
// 注意!!这里"最顶层目录"是指路径名中最靠近末端的目录.
static struct m_inode * dir_namei(const char * pathname,
	int * namelen, const char ** name, struct m_inode * base)
{
   132a7:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * dir;

	// 首先取得指定路径名最顶层目录的i节点.然后对路径名pathname进行搜索检测,查出最后一个'/'字符后面的名字字符串,计算其长度,并且
	// 返回最顶层目录的i节点指针.注意!如果路径名最后一个字符是斜杠字符'/',那么返回的目录名为空,并且长度为0.但返回的i节点指针仍然
	// 指向最后一个'/'字符前目录名的i节点.
	if (!(dir = get_dir(pathname, base)))					// base是指定的起始目录i节点.
   132aa:	83 ec 08             	sub    $0x8,%esp
   132ad:	ff 74 24 34          	pushl  0x34(%esp)
   132b1:	ff 74 24 2c          	pushl  0x2c(%esp)
   132b5:	e8 16 fe ff ff       	call   130d0 <get_dir>
   132ba:	83 c4 10             	add    $0x10,%esp
   132bd:	89 44 24 08          	mov    %eax,0x8(%esp)
   132c1:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   132c6:	75 07                	jne    132cf <dir_namei+0x28>
		return NULL;
   132c8:	b8 00 00 00 00       	mov    $0x0,%eax
   132cd:	eb 5a                	jmp    13329 <dir_namei+0x82>
	basename = pathname;
   132cf:	8b 44 24 20          	mov    0x20(%esp),%eax
   132d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (c = get_fs_byte(pathname++))
   132d7:	eb 0f                	jmp    132e8 <dir_namei+0x41>
		if (c == '/')
   132d9:	80 7c 24 07 2f       	cmpb   $0x2f,0x7(%esp)
   132de:	75 08                	jne    132e8 <dir_namei+0x41>
			basename = pathname;
   132e0:	8b 44 24 20          	mov    0x20(%esp),%eax
   132e4:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (c = get_fs_byte(pathname++))
   132e8:	8b 44 24 20          	mov    0x20(%esp),%eax
   132ec:	8d 50 01             	lea    0x1(%eax),%edx
   132ef:	89 54 24 20          	mov    %edx,0x20(%esp)
   132f3:	83 ec 0c             	sub    $0xc,%esp
   132f6:	50                   	push   %eax
   132f7:	e8 a9 f6 ff ff       	call   129a5 <get_fs_byte>
   132fc:	83 c4 10             	add    $0x10,%esp
   132ff:	88 44 24 07          	mov    %al,0x7(%esp)
   13303:	80 7c 24 07 00       	cmpb   $0x0,0x7(%esp)
   13308:	75 cf                	jne    132d9 <dir_namei+0x32>
	*namelen = pathname - basename - 1;
   1330a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1330e:	2b 44 24 0c          	sub    0xc(%esp),%eax
   13312:	8d 50 ff             	lea    -0x1(%eax),%edx
   13315:	8b 44 24 24          	mov    0x24(%esp),%eax
   13319:	89 10                	mov    %edx,(%eax)
	*name = basename;
   1331b:	8b 44 24 28          	mov    0x28(%esp),%eax
   1331f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   13323:	89 10                	mov    %edx,(%eax)
	return dir;
   13325:	8b 44 24 08          	mov    0x8(%esp),%eax
}
   13329:	83 c4 1c             	add    $0x1c,%esp
   1332c:	c3                   	ret    

0001332d <_namei>:

// 取指定路径名的i节点内部函数.
// 参数:pathname - 路径名;base - 搜索起点目录i节点;follow_links - 是否跟随符号链接的标志,1 - 需要,0 不需要.
struct m_inode * _namei(const char * pathname, struct m_inode * base,
	int follow_links)
{
   1332d:	83 ec 2c             	sub    $0x2c,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 首先查找指定路径名中最顶层目录的目录名并得到其i节点.若不存在,则返回NULL退出.如果返回的最顶层名字的长度是0,则表示该路径名以一个目录名为
	// 最后一项.因此说明我们已经找到对应目录的i节点,可以直接返回该i节点退出.
	if (!(base = dir_namei(pathname, &namelen, &basename, base)))
   13330:	8b 44 24 34          	mov    0x34(%esp),%eax
   13334:	50                   	push   %eax
   13335:	8d 44 24 14          	lea    0x14(%esp),%eax
   13339:	50                   	push   %eax
   1333a:	8d 44 24 14          	lea    0x14(%esp),%eax
   1333e:	50                   	push   %eax
   1333f:	ff 74 24 3c          	pushl  0x3c(%esp)
   13343:	e8 5f ff ff ff       	call   132a7 <dir_namei>
   13348:	83 c4 10             	add    $0x10,%esp
   1334b:	89 44 24 34          	mov    %eax,0x34(%esp)
   1334f:	8b 44 24 34          	mov    0x34(%esp),%eax
   13353:	85 c0                	test   %eax,%eax
   13355:	75 0a                	jne    13361 <_namei+0x34>
		return NULL;
   13357:	b8 00 00 00 00       	mov    $0x0,%eax
   1335c:	e9 0e 01 00 00       	jmp    1346f <_namei+0x142>
	if (!namelen)										/* special case: '/usr/' etc */
   13361:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13365:	85 c0                	test   %eax,%eax
   13367:	75 09                	jne    13372 <_namei+0x45>
		return base;									/* 对应于'/usr/'等情况 */
   13369:	8b 44 24 34          	mov    0x34(%esp),%eax
   1336d:	e9 fd 00 00 00       	jmp    1346f <_namei+0x142>
	// 然后在返回的顶层目录中寻找指定文件名目录项的i节点.注意!因为如果最后也是一个目录名,但其后没有加'/',则不会返回该最后目录的i节点!例如:/usr/src/linux,
	// 将只返回src/目录名的i节点.因为函数dir_namei()将不以'/'结束的最后一个名字当作一个文件名来看待,因此这里需要单独对这种情况使用寻找目录项i节点函数
	// find_entry()进行处理.此时de中含有寻找到的目录项指针,而base是包含该目录项的目录的i节点指针.
	bh = find_entry(&base, basename, namelen, &de);
   13372:	8b 54 24 0c          	mov    0xc(%esp),%edx
   13376:	8b 44 24 10          	mov    0x10(%esp),%eax
   1337a:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   1337e:	51                   	push   %ecx
   1337f:	52                   	push   %edx
   13380:	50                   	push   %eax
   13381:	8d 44 24 40          	lea    0x40(%esp),%eax
   13385:	50                   	push   %eax
   13386:	e8 9f f7 ff ff       	call   12b2a <find_entry>
   1338b:	83 c4 10             	add    $0x10,%esp
   1338e:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!bh) {
   13392:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13397:	75 1a                	jne    133b3 <_namei+0x86>
		iput(base);
   13399:	8b 44 24 34          	mov    0x34(%esp),%eax
   1339d:	83 ec 0c             	sub    $0xc,%esp
   133a0:	50                   	push   %eax
   133a1:	e8 b9 b2 ff ff       	call   e65f <iput>
   133a6:	83 c4 10             	add    $0x10,%esp
		return NULL;
   133a9:	b8 00 00 00 00       	mov    $0x0,%eax
   133ae:	e9 bc 00 00 00       	jmp    1346f <_namei+0x142>
	}
	// 接着取该目录项的i节点号,并释放包含该目录项的高速缓冲块并放回目录i节点.然后取对应节点号的i节点,修改其被访问时间为当前时间,并置已修改标志.最后返回
	// 该i节点指针inode.如果当前处理的目录项是一个符号链接名,则使用follow_link()得到其指向的目录项名的i节点.
	inr = de->inode;
   133b3:	8b 44 24 08          	mov    0x8(%esp),%eax
   133b7:	0f b7 00             	movzwl (%eax),%eax
   133ba:	0f b7 c0             	movzwl %ax,%eax
   133bd:	89 44 24 14          	mov    %eax,0x14(%esp)
	brelse(bh);
   133c1:	83 ec 0c             	sub    $0xc,%esp
   133c4:	ff 74 24 24          	pushl  0x24(%esp)
   133c8:	e8 23 c2 ff ff       	call   f5f0 <brelse>
   133cd:	83 c4 10             	add    $0x10,%esp
	if (!(inode = iget(base->i_dev, inr))) {
   133d0:	8b 44 24 34          	mov    0x34(%esp),%eax
   133d4:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   133d8:	0f b7 c0             	movzwl %ax,%eax
   133db:	83 ec 08             	sub    $0x8,%esp
   133de:	ff 74 24 1c          	pushl  0x1c(%esp)
   133e2:	50                   	push   %eax
   133e3:	e8 fa b5 ff ff       	call   e9e2 <iget>
   133e8:	83 c4 10             	add    $0x10,%esp
   133eb:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   133ef:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   133f4:	75 17                	jne    1340d <_namei+0xe0>
		iput(base);
   133f6:	8b 44 24 34          	mov    0x34(%esp),%eax
   133fa:	83 ec 0c             	sub    $0xc,%esp
   133fd:	50                   	push   %eax
   133fe:	e8 5c b2 ff ff       	call   e65f <iput>
   13403:	83 c4 10             	add    $0x10,%esp
		return NULL;
   13406:	b8 00 00 00 00       	mov    $0x0,%eax
   1340b:	eb 62                	jmp    1346f <_namei+0x142>
	}
	if (follow_links)
   1340d:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   13412:	74 1a                	je     1342e <_namei+0x101>
		inode = follow_link(base, inode);
   13414:	8b 44 24 34          	mov    0x34(%esp),%eax
   13418:	83 ec 08             	sub    $0x8,%esp
   1341b:	ff 74 24 24          	pushl  0x24(%esp)
   1341f:	50                   	push   %eax
   13420:	e8 71 fb ff ff       	call   12f96 <follow_link>
   13425:	83 c4 10             	add    $0x10,%esp
   13428:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   1342c:	eb 10                	jmp    1343e <_namei+0x111>
	else
		iput(base);
   1342e:	8b 44 24 34          	mov    0x34(%esp),%eax
   13432:	83 ec 0c             	sub    $0xc,%esp
   13435:	50                   	push   %eax
   13436:	e8 24 b2 ff ff       	call   e65f <iput>
   1343b:	83 c4 10             	add    $0x10,%esp
	inode->i_atime = CURRENT_TIME;
   1343e:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   13443:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   13449:	01 d0                	add    %edx,%eax
   1344b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   13450:	f7 e2                	mul    %edx
   13452:	c1 ea 05             	shr    $0x5,%edx
   13455:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   1345a:	01 c2                	add    %eax,%edx
   1345c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13460:	89 50 28             	mov    %edx,0x28(%eax)
	inode->i_dirt = 1;
   13463:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13467:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	return inode;
   1346b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
}
   1346f:	83 c4 2c             	add    $0x2c,%esp
   13472:	c3                   	ret    

00013473 <lnamei>:

// 取指定路径名的i节点，不跟随符号链接。
// 参数：pathname - 路径名。
// 返回：对应的i节点。
struct m_inode * lnamei(const char * pathname)
{
   13473:	83 ec 0c             	sub    $0xc,%esp
	return _namei(pathname, NULL, 0);
   13476:	83 ec 04             	sub    $0x4,%esp
   13479:	6a 00                	push   $0x0
   1347b:	6a 00                	push   $0x0
   1347d:	ff 74 24 1c          	pushl  0x1c(%esp)
   13481:	e8 a7 fe ff ff       	call   1332d <_namei>
   13486:	83 c4 10             	add    $0x10,%esp
}
   13489:	83 c4 0c             	add    $0xc,%esp
   1348c:	c3                   	ret    

0001348d <namei>:
 */
// 取指定路径名的i节点,跟随符号链接.
// 参数:pathname - 路径名.
// 返回:对应的i节点.
struct m_inode * namei(const char * pathname)
{
   1348d:	83 ec 0c             	sub    $0xc,%esp
	return _namei(pathname, NULL, 1);
   13490:	83 ec 04             	sub    $0x4,%esp
   13493:	6a 01                	push   $0x1
   13495:	6a 00                	push   $0x0
   13497:	ff 74 24 1c          	pushl  0x1c(%esp)
   1349b:	e8 8d fe ff ff       	call   1332d <_namei>
   134a0:	83 c4 10             	add    $0x10,%esp
}
   134a3:	83 c4 0c             	add    $0xc,%esp
   134a6:	c3                   	ret    

000134a7 <open_namei>:
// 执行)等等.对于新创建的文件,这些属性只应用于将来对文件的访问,创建了只读文件的打开调用也将返回一个读写的文件句柄.如果调用
// 操作成功,则返回文件句柄(文件描述符),否则返回出错码.参见sys/stat.h,fcntl.h.
// 返回:成功返回0,否则返回出错码;res_inode - 返回对应文件路径名的i节点指针.
int open_namei(const char * pathname, int flag, int mode,
	struct m_inode ** res_inode)
{
   134a7:	53                   	push   %ebx
   134a8:	83 ec 28             	sub    $0x28,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 首先对函数参数进行合理的处理.如果文件访问模式标志是只读(O),但是文件截零标志O_TRUNC却置位了,则在文件打开标志中添加只写标志
	// O_WRONLY.这样做的原因是由于截零标志O_TRUNC必须在文件可写情况下有效.
	if ((flag & O_TRUNC) && !(flag & O_ACCMODE))
   134ab:	8b 44 24 34          	mov    0x34(%esp),%eax
   134af:	25 00 02 00 00       	and    $0x200,%eax
   134b4:	85 c0                	test   %eax,%eax
   134b6:	74 10                	je     134c8 <open_namei+0x21>
   134b8:	8b 44 24 34          	mov    0x34(%esp),%eax
   134bc:	83 e0 03             	and    $0x3,%eax
   134bf:	85 c0                	test   %eax,%eax
   134c1:	75 05                	jne    134c8 <open_namei+0x21>
		flag |= O_WRONLY;
   134c3:	83 4c 24 34 01       	orl    $0x1,0x34(%esp)
	// 使用当前进程的文件访问许可屏蔽码,屏蔽掉给定模式中的相应位,并添上普通文件标志I_REGULAR.
	// 该标志将用于打开的文件不存在而需要创建文件时,作为新文件的默认属性
	mode &= 0777 & ~current->umask;
   134c8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   134cd:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
   134d4:	0f b7 c0             	movzwl %ax,%eax
   134d7:	f7 d0                	not    %eax
   134d9:	25 ff 01 00 00       	and    $0x1ff,%eax
   134de:	21 44 24 38          	and    %eax,0x38(%esp)
	mode |= I_REGULAR;													// 常规文件标志.见参见include/const.h文件.
   134e2:	81 4c 24 38 00 80 00 	orl    $0x8000,0x38(%esp)
   134e9:	00 
	// 然后根据指定的路径名寻找到对应的i节点,以及最顶端目录名及其长度.此时如果最顶端目录名长度为0(例如'/usr/'这种路径名的情况),那么
	// 若操作不是读写,创建和文件长度截0,则表示是在打开一个目录名文件操作.于是直接返回该目录的i节点并返回0退出.否则说明进程操作非法,于是
	// 放回该i节点,返回出错码.
	if (!(dir = dir_namei(pathname, &namelen, &basename, NULL)))
   134ea:	6a 00                	push   $0x0
   134ec:	8d 44 24 10          	lea    0x10(%esp),%eax
   134f0:	50                   	push   %eax
   134f1:	8d 44 24 10          	lea    0x10(%esp),%eax
   134f5:	50                   	push   %eax
   134f6:	ff 74 24 3c          	pushl  0x3c(%esp)
   134fa:	e8 a8 fd ff ff       	call   132a7 <dir_namei>
   134ff:	83 c4 10             	add    $0x10,%esp
   13502:	89 44 24 04          	mov    %eax,0x4(%esp)
   13506:	8b 44 24 04          	mov    0x4(%esp),%eax
   1350a:	85 c0                	test   %eax,%eax
   1350c:	75 0a                	jne    13518 <open_namei+0x71>
		return -ENOENT;
   1350e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13513:	e9 08 03 00 00       	jmp    13820 <open_namei+0x379>
	// 文件名字为空，则返回
	if (!namelen) {														/* special case: '/usr/' etc */
   13518:	8b 44 24 08          	mov    0x8(%esp),%eax
   1351c:	85 c0                	test   %eax,%eax
   1351e:	75 3b                	jne    1355b <open_namei+0xb4>
		if (!(flag & (O_ACCMODE | O_CREAT | O_TRUNC))) {
   13520:	8b 44 24 34          	mov    0x34(%esp),%eax
   13524:	25 43 02 00 00       	and    $0x243,%eax
   13529:	85 c0                	test   %eax,%eax
   1352b:	75 14                	jne    13541 <open_namei+0x9a>
			*res_inode = dir;
   1352d:	8b 54 24 04          	mov    0x4(%esp),%edx
   13531:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   13535:	89 10                	mov    %edx,(%eax)
			return 0;
   13537:	b8 00 00 00 00       	mov    $0x0,%eax
   1353c:	e9 df 02 00 00       	jmp    13820 <open_namei+0x379>
		}
		iput(dir);
   13541:	8b 44 24 04          	mov    0x4(%esp),%eax
   13545:	83 ec 0c             	sub    $0xc,%esp
   13548:	50                   	push   %eax
   13549:	e8 11 b1 ff ff       	call   e65f <iput>
   1354e:	83 c4 10             	add    $0x10,%esp
		return -EISDIR;
   13551:	b8 eb ff ff ff       	mov    $0xffffffeb,%eax
   13556:	e9 c5 02 00 00       	jmp    13820 <open_namei+0x379>
	}
	// 接着根据上面得到的最顶层目录名的i节点dir,在其中查找取得路径名字符串中最后的文件名对应的目录项结构de,并同时得到该目录项所在的高速缓冲
	// 区指针.如果该高速缓冲指针为NULL,则表示没有找到对应文件名的目录项,因此只可能是创建文件操作.此时如果不是创建文件,则放回该目录的i节点,返回
	// 出错号退出.如果用户在该目录没有写的权力,则放回该目录的i节点,返回出错号退出.
	bh = find_entry(&dir, basename, namelen, &de);
   1355b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1355f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13563:	89 e1                	mov    %esp,%ecx
   13565:	51                   	push   %ecx
   13566:	52                   	push   %edx
   13567:	50                   	push   %eax
   13568:	8d 44 24 10          	lea    0x10(%esp),%eax
   1356c:	50                   	push   %eax
   1356d:	e8 b8 f5 ff ff       	call   12b2a <find_entry>
   13572:	83 c4 10             	add    $0x10,%esp
   13575:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   13579:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1357e:	0f 85 63 01 00 00    	jne    136e7 <open_namei+0x240>
		if (!(flag & O_CREAT)) {                						// 不是创建文件，放回i节点
   13584:	8b 44 24 34          	mov    0x34(%esp),%eax
   13588:	83 e0 40             	and    $0x40,%eax
   1358b:	85 c0                	test   %eax,%eax
   1358d:	75 1a                	jne    135a9 <open_namei+0x102>
			iput(dir);
   1358f:	8b 44 24 04          	mov    0x4(%esp),%eax
   13593:	83 ec 0c             	sub    $0xc,%esp
   13596:	50                   	push   %eax
   13597:	e8 c3 b0 ff ff       	call   e65f <iput>
   1359c:	83 c4 10             	add    $0x10,%esp
			return -ENOENT;
   1359f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   135a4:	e9 77 02 00 00       	jmp    13820 <open_namei+0x379>
		}
		if (!permission(dir, MAY_WRITE)) {       						// 没有写权限，放回i节点
   135a9:	8b 44 24 04          	mov    0x4(%esp),%eax
   135ad:	83 ec 08             	sub    $0x8,%esp
   135b0:	6a 02                	push   $0x2
   135b2:	50                   	push   %eax
   135b3:	e8 3e f4 ff ff       	call   129f6 <permission>
   135b8:	83 c4 10             	add    $0x10,%esp
   135bb:	85 c0                	test   %eax,%eax
   135bd:	75 1a                	jne    135d9 <open_namei+0x132>
			iput(dir);
   135bf:	8b 44 24 04          	mov    0x4(%esp),%eax
   135c3:	83 ec 0c             	sub    $0xc,%esp
   135c6:	50                   	push   %eax
   135c7:	e8 93 b0 ff ff       	call   e65f <iput>
   135cc:	83 c4 10             	add    $0x10,%esp
			return -EACCES;
   135cf:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   135d4:	e9 47 02 00 00       	jmp    13820 <open_namei+0x379>
		}
		// 现在我们确定了是创建操作并且有写操作许可。因此我们就在目录i节点对应设备上申请一个新的i节点给路径名上指定的文件使用。
		// 若失败则放回目录的i节点，并返回没有空间出错码。否则使用该新i节点，对其进行初始设置：置节点的用户id；对应节点访问模式；
		// 置已修改标志。然后并在指定目录dir中添加一个新目录项。
		inode = new_inode(dir->i_dev);
   135d9:	8b 44 24 04          	mov    0x4(%esp),%eax
   135dd:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   135e1:	0f b7 c0             	movzwl %ax,%eax
   135e4:	83 ec 0c             	sub    $0xc,%esp
   135e7:	50                   	push   %eax
   135e8:	e8 1b 1b 00 00       	call   15108 <new_inode>
   135ed:	83 c4 10             	add    $0x10,%esp
   135f0:	89 44 24 18          	mov    %eax,0x18(%esp)
		if (!inode) {
   135f4:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   135f9:	75 1a                	jne    13615 <open_namei+0x16e>
			iput(dir);
   135fb:	8b 44 24 04          	mov    0x4(%esp),%eax
   135ff:	83 ec 0c             	sub    $0xc,%esp
   13602:	50                   	push   %eax
   13603:	e8 57 b0 ff ff       	call   e65f <iput>
   13608:	83 c4 10             	add    $0x10,%esp
			return -ENOSPC;
   1360b:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13610:	e9 0b 02 00 00       	jmp    13820 <open_namei+0x379>
		}
		inode->i_uid = current->euid;
   13615:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1361a:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   13621:	8b 44 24 18          	mov    0x18(%esp),%eax
   13625:	66 89 50 02          	mov    %dx,0x2(%eax)
		inode->i_mode = mode;
   13629:	8b 44 24 38          	mov    0x38(%esp),%eax
   1362d:	89 c2                	mov    %eax,%edx
   1362f:	8b 44 24 18          	mov    0x18(%esp),%eax
   13633:	66 89 10             	mov    %dx,(%eax)
		inode->i_dirt = 1;
   13636:	8b 44 24 18          	mov    0x18(%esp),%eax
   1363a:	c6 40 37 01          	movb   $0x1,0x37(%eax)
		bh = add_entry(dir, basename, namelen, &de);
   1363e:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   13642:	8b 54 24 0c          	mov    0xc(%esp),%edx
   13646:	8b 44 24 04          	mov    0x4(%esp),%eax
   1364a:	89 e3                	mov    %esp,%ebx
   1364c:	53                   	push   %ebx
   1364d:	51                   	push   %ecx
   1364e:	52                   	push   %edx
   1364f:	50                   	push   %eax
   13650:	e8 13 f7 ff ff       	call   12d68 <add_entry>
   13655:	83 c4 10             	add    $0x10,%esp
   13658:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		// 如果返回的应该含有新目录项的调整缓冲区指针为NULL，则表示添加目录项操作失败。于是将该新i节点的引用连接计数减1,放回该
		// i节点与目录的i节点并返回出错码退出。否则说明添加目录项操作成功。于是我们来设置该新目录项的一些初始值：置i节点号为新申
		// 请到的i节点的号码；并置高速缓冲区修改标志。然后释放该高速缓冲区，放回目录的i节点。返回新目录项的i节点指针，并成功退出。
		if (!bh) {
   1365c:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13661:	75 3b                	jne    1369e <open_namei+0x1f7>
			inode->i_nlinks--;
   13663:	8b 44 24 18          	mov    0x18(%esp),%eax
   13667:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1366b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1366e:	8b 44 24 18          	mov    0x18(%esp),%eax
   13672:	88 50 0d             	mov    %dl,0xd(%eax)
			iput(inode);
   13675:	83 ec 0c             	sub    $0xc,%esp
   13678:	ff 74 24 24          	pushl  0x24(%esp)
   1367c:	e8 de af ff ff       	call   e65f <iput>
   13681:	83 c4 10             	add    $0x10,%esp
			iput(dir);
   13684:	8b 44 24 04          	mov    0x4(%esp),%eax
   13688:	83 ec 0c             	sub    $0xc,%esp
   1368b:	50                   	push   %eax
   1368c:	e8 ce af ff ff       	call   e65f <iput>
   13691:	83 c4 10             	add    $0x10,%esp
			return -ENOSPC;
   13694:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13699:	e9 82 01 00 00       	jmp    13820 <open_namei+0x379>
		}
		de->inode = inode->i_num;
   1369e:	8b 04 24             	mov    (%esp),%eax
   136a1:	8b 54 24 18          	mov    0x18(%esp),%edx
   136a5:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   136a9:	66 89 10             	mov    %dx,(%eax)
		bh->b_dirt = 1;
   136ac:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   136b0:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		brelse(bh);
   136b4:	83 ec 0c             	sub    $0xc,%esp
   136b7:	ff 74 24 28          	pushl  0x28(%esp)
   136bb:	e8 30 bf ff ff       	call   f5f0 <brelse>
   136c0:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   136c3:	8b 44 24 04          	mov    0x4(%esp),%eax
   136c7:	83 ec 0c             	sub    $0xc,%esp
   136ca:	50                   	push   %eax
   136cb:	e8 8f af ff ff       	call   e65f <iput>
   136d0:	83 c4 10             	add    $0x10,%esp
		*res_inode = inode;
   136d3:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   136d7:	8b 54 24 18          	mov    0x18(%esp),%edx
   136db:	89 10                	mov    %edx,(%eax)
		return 0;
   136dd:	b8 00 00 00 00       	mov    $0x0,%eax
   136e2:	e9 39 01 00 00       	jmp    13820 <open_namei+0x379>
    }
	// 若上面(411行)在目录中取文件名对应目录项结构的操作成功(即bh不为NULL),则说明指定打开的文件已经存在.于是取出该目录项的i节点和其所在设备号,并释放
	// 该高速缓冲区以及放回目录的i节点.如果此时独占操作标志O_EXCL置位,但现在文件已经存在,则返回文件已存在出错码退出.
	inr = de->inode;
   136e7:	8b 04 24             	mov    (%esp),%eax
   136ea:	0f b7 00             	movzwl (%eax),%eax
   136ed:	0f b7 c0             	movzwl %ax,%eax
   136f0:	89 44 24 14          	mov    %eax,0x14(%esp)
	dev = dir->i_dev;
   136f4:	8b 44 24 04          	mov    0x4(%esp),%eax
   136f8:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   136fc:	0f b7 c0             	movzwl %ax,%eax
   136ff:	89 44 24 10          	mov    %eax,0x10(%esp)
	brelse(bh);
   13703:	83 ec 0c             	sub    $0xc,%esp
   13706:	ff 74 24 28          	pushl  0x28(%esp)
   1370a:	e8 e1 be ff ff       	call   f5f0 <brelse>
   1370f:	83 c4 10             	add    $0x10,%esp
	if (flag & O_EXCL) {
   13712:	8b 44 24 34          	mov    0x34(%esp),%eax
   13716:	25 80 00 00 00       	and    $0x80,%eax
   1371b:	85 c0                	test   %eax,%eax
   1371d:	74 1a                	je     13739 <open_namei+0x292>
		iput(dir);
   1371f:	8b 44 24 04          	mov    0x4(%esp),%eax
   13723:	83 ec 0c             	sub    $0xc,%esp
   13726:	50                   	push   %eax
   13727:	e8 33 af ff ff       	call   e65f <iput>
   1372c:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   1372f:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   13734:	e9 e7 00 00 00       	jmp    13820 <open_namei+0x379>
	}
	// 然后我们读取该目录项的i节点内容.若该i节点是一个目录的i节点并且访问模式是只写或读写,或者没有访问的许可权限,则放回该i节点,返回访问权限出错码退出.
	if (!(inode = follow_link(dir, iget(dev, inr))))
   13739:	83 ec 08             	sub    $0x8,%esp
   1373c:	ff 74 24 1c          	pushl  0x1c(%esp)
   13740:	ff 74 24 1c          	pushl  0x1c(%esp)
   13744:	e8 99 b2 ff ff       	call   e9e2 <iget>
   13749:	83 c4 10             	add    $0x10,%esp
   1374c:	89 c2                	mov    %eax,%edx
   1374e:	8b 44 24 04          	mov    0x4(%esp),%eax
   13752:	83 ec 08             	sub    $0x8,%esp
   13755:	52                   	push   %edx
   13756:	50                   	push   %eax
   13757:	e8 3a f8 ff ff       	call   12f96 <follow_link>
   1375c:	83 c4 10             	add    $0x10,%esp
   1375f:	89 44 24 18          	mov    %eax,0x18(%esp)
   13763:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13768:	75 0a                	jne    13774 <open_namei+0x2cd>
		return -EACCES;
   1376a:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   1376f:	e9 ac 00 00 00       	jmp    13820 <open_namei+0x379>
	if ((S_ISDIR(inode->i_mode) && (flag & O_ACCMODE)) ||
   13774:	8b 44 24 18          	mov    0x18(%esp),%eax
   13778:	0f b7 00             	movzwl (%eax),%eax
   1377b:	0f b7 c0             	movzwl %ax,%eax
   1377e:	25 00 f0 00 00       	and    $0xf000,%eax
   13783:	3d 00 40 00 00       	cmp    $0x4000,%eax
   13788:	75 0b                	jne    13795 <open_namei+0x2ee>
   1378a:	8b 44 24 34          	mov    0x34(%esp),%eax
   1378e:	83 e0 03             	and    $0x3,%eax
   13791:	85 c0                	test   %eax,%eax
   13793:	75 25                	jne    137ba <open_namei+0x313>
	    !permission(inode, ACC_MODE(flag))) {
   13795:	8b 44 24 34          	mov    0x34(%esp),%eax
   13799:	83 e0 03             	and    $0x3,%eax
   1379c:	0f b6 80 e0 41 02 00 	movzbl 0x241e0(%eax),%eax
   137a3:	0f be c0             	movsbl %al,%eax
   137a6:	83 ec 08             	sub    $0x8,%esp
   137a9:	50                   	push   %eax
   137aa:	ff 74 24 24          	pushl  0x24(%esp)
   137ae:	e8 43 f2 ff ff       	call   129f6 <permission>
   137b3:	83 c4 10             	add    $0x10,%esp
	if ((S_ISDIR(inode->i_mode) && (flag & O_ACCMODE)) ||
   137b6:	85 c0                	test   %eax,%eax
   137b8:	75 16                	jne    137d0 <open_namei+0x329>
		iput(inode);
   137ba:	83 ec 0c             	sub    $0xc,%esp
   137bd:	ff 74 24 24          	pushl  0x24(%esp)
   137c1:	e8 99 ae ff ff       	call   e65f <iput>
   137c6:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   137c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   137ce:	eb 50                	jmp    13820 <open_namei+0x379>
	}
	// 接着我们更新该i节点的访问时间字段值为当前时间.如果设立了截0标志,则将该i节点的文件长度截为0.最后返回该目录项i节点的指针.并返回0(成功).
	inode->i_atime = CURRENT_TIME;
   137d0:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   137d5:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   137db:	01 d0                	add    %edx,%eax
   137dd:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   137e2:	f7 e2                	mul    %edx
   137e4:	c1 ea 05             	shr    $0x5,%edx
   137e7:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   137ec:	01 c2                	add    %eax,%edx
   137ee:	8b 44 24 18          	mov    0x18(%esp),%eax
   137f2:	89 50 28             	mov    %edx,0x28(%eax)
	if (flag & O_TRUNC)
   137f5:	8b 44 24 34          	mov    0x34(%esp),%eax
   137f9:	25 00 02 00 00       	and    $0x200,%eax
   137fe:	85 c0                	test   %eax,%eax
   13800:	74 0f                	je     13811 <open_namei+0x36a>
		truncate(inode);
   13802:	83 ec 0c             	sub    $0xc,%esp
   13805:	ff 74 24 24          	pushl  0x24(%esp)
   13809:	e8 03 20 00 00       	call   15811 <truncate>
   1380e:	83 c4 10             	add    $0x10,%esp
	*res_inode = inode;
   13811:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   13815:	8b 54 24 18          	mov    0x18(%esp),%edx
   13819:	89 10                	mov    %edx,(%eax)
	return 0;
   1381b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13820:	83 c4 28             	add    $0x28,%esp
   13823:	5b                   	pop    %ebx
   13824:	c3                   	ret    

00013825 <sys_mknod>:

// 创建一个设备特殊文件或普通文件节点（node）。
// 该函数创建名称为filename，由mode和dev指定的文件系统节点（普通文件、设备特殊文件或命名管道）。
// 参数：filename - 路径名；mode - 指定使用许可以及所创建节点的类型；dev - 设备号。
int sys_mknod(const char * filename, int mode, int dev)
{
   13825:	53                   	push   %ebx
   13826:	83 ec 28             	sub    $0x28,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 首先检查操作许可和参数的有效性并取路径名中顶层目录的i节点。如果不是超级用户，则返回访问许可出错码。
	// 如果不是超级用户，则返回访问许可出错码。
	if (!suser())
   13829:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1382e:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   13835:	66 85 c0             	test   %ax,%ax
   13838:	74 0a                	je     13844 <sys_mknod+0x1f>
		return -EPERM;
   1383a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1383f:	e9 21 02 00 00       	jmp    13a65 <sys_mknod+0x240>
	// 如果找不到对应路径名中顶层目录的i节点，则返回出错码。
	if (!(dir = dir_namei(filename, &namelen, &basename, NULL)))
   13844:	6a 00                	push   $0x0
   13846:	8d 44 24 18          	lea    0x18(%esp),%eax
   1384a:	50                   	push   %eax
   1384b:	8d 44 24 18          	lea    0x18(%esp),%eax
   1384f:	50                   	push   %eax
   13850:	ff 74 24 3c          	pushl  0x3c(%esp)
   13854:	e8 4e fa ff ff       	call   132a7 <dir_namei>
   13859:	83 c4 10             	add    $0x10,%esp
   1385c:	89 44 24 0c          	mov    %eax,0xc(%esp)
   13860:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13864:	85 c0                	test   %eax,%eax
   13866:	75 0a                	jne    13872 <sys_mknod+0x4d>
		return -ENOENT;
   13868:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   1386d:	e9 f3 01 00 00       	jmp    13a65 <sys_mknod+0x240>
	// 如果最顶端的文件名长度为0，则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。
	if (!namelen) {
   13872:	8b 44 24 10          	mov    0x10(%esp),%eax
   13876:	85 c0                	test   %eax,%eax
   13878:	75 1a                	jne    13894 <sys_mknod+0x6f>
		iput(dir);
   1387a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1387e:	83 ec 0c             	sub    $0xc,%esp
   13881:	50                   	push   %eax
   13882:	e8 d8 ad ff ff       	call   e65f <iput>
   13887:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   1388a:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   1388f:	e9 d1 01 00 00       	jmp    13a65 <sys_mknod+0x240>
	}
	// 如果在该目录中没有写的权限，则放回该目录的i节点，返回访问许可出错码退出。
	if (!permission(dir, MAY_WRITE)) {
   13894:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13898:	83 ec 08             	sub    $0x8,%esp
   1389b:	6a 02                	push   $0x2
   1389d:	50                   	push   %eax
   1389e:	e8 53 f1 ff ff       	call   129f6 <permission>
   138a3:	83 c4 10             	add    $0x10,%esp
   138a6:	85 c0                	test   %eax,%eax
   138a8:	75 1a                	jne    138c4 <sys_mknod+0x9f>
		iput(dir);
   138aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
   138ae:	83 ec 0c             	sub    $0xc,%esp
   138b1:	50                   	push   %eax
   138b2:	e8 a8 ad ff ff       	call   e65f <iput>
   138b7:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   138ba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   138bf:	e9 a1 01 00 00       	jmp    13a65 <sys_mknod+0x240>
	}
	// 然后我们搜索一下路径名指定的文件是否已经存在。若已经存在则不能创建同名文件节点。如果对应路径名上最后的文件名的
	// 目录项已经存在，则释放包含该目录项的缓冲区块并放回目录的i节点，返回文件已经存在的出错退出。
	bh = find_entry(&dir, basename, namelen, &de);
   138c4:	8b 54 24 10          	mov    0x10(%esp),%edx
   138c8:	8b 44 24 14          	mov    0x14(%esp),%eax
   138cc:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   138d0:	51                   	push   %ecx
   138d1:	52                   	push   %edx
   138d2:	50                   	push   %eax
   138d3:	8d 44 24 18          	lea    0x18(%esp),%eax
   138d7:	50                   	push   %eax
   138d8:	e8 4d f2 ff ff       	call   12b2a <find_entry>
   138dd:	83 c4 10             	add    $0x10,%esp
   138e0:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (bh) {
   138e4:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   138e9:	74 29                	je     13914 <sys_mknod+0xef>
		brelse(bh);
   138eb:	83 ec 0c             	sub    $0xc,%esp
   138ee:	ff 74 24 28          	pushl  0x28(%esp)
   138f2:	e8 f9 bc ff ff       	call   f5f0 <brelse>
   138f7:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   138fa:	8b 44 24 0c          	mov    0xc(%esp),%eax
   138fe:	83 ec 0c             	sub    $0xc,%esp
   13901:	50                   	push   %eax
   13902:	e8 58 ad ff ff       	call   e65f <iput>
   13907:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   1390a:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   1390f:	e9 51 01 00 00       	jmp    13a65 <sys_mknod+0x240>
	}
	// 否则我们就申请一个新的i节点，并设置该i节点的属性模式。
	inode = new_inode(dir->i_dev);
   13914:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13918:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1391c:	0f b7 c0             	movzwl %ax,%eax
   1391f:	83 ec 0c             	sub    $0xc,%esp
   13922:	50                   	push   %eax
   13923:	e8 e0 17 00 00       	call   15108 <new_inode>
   13928:	83 c4 10             	add    $0x10,%esp
   1392b:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!inode) {
   1392f:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13934:	75 1a                	jne    13950 <sys_mknod+0x12b>
		iput(dir);
   13936:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1393a:	83 ec 0c             	sub    $0xc,%esp
   1393d:	50                   	push   %eax
   1393e:	e8 1c ad ff ff       	call   e65f <iput>
   13943:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13946:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   1394b:	e9 15 01 00 00       	jmp    13a65 <sys_mknod+0x240>
	}
	inode->i_mode = mode;
   13950:	8b 44 24 34          	mov    0x34(%esp),%eax
   13954:	89 c2                	mov    %eax,%edx
   13956:	8b 44 24 18          	mov    0x18(%esp),%eax
   1395a:	66 89 10             	mov    %dx,(%eax)
	// 如果要创建的是块设备文件或者是字符设备文件，则令i节点的直接逻辑块指针0等于设备号。即对于设备文件来说，
	// 其i节点的i_zone[0]中存放的是该设备文件所定义设备的设备号。
	if (S_ISBLK(mode) || S_ISCHR(mode))
   1395d:	8b 44 24 34          	mov    0x34(%esp),%eax
   13961:	25 00 f0 00 00       	and    $0xf000,%eax
   13966:	3d 00 60 00 00       	cmp    $0x6000,%eax
   1396b:	74 10                	je     1397d <sys_mknod+0x158>
   1396d:	8b 44 24 34          	mov    0x34(%esp),%eax
   13971:	25 00 f0 00 00       	and    $0xf000,%eax
   13976:	3d 00 20 00 00       	cmp    $0x2000,%eax
   1397b:	75 0e                	jne    1398b <sys_mknod+0x166>
		inode->i_zone[0] = dev;
   1397d:	8b 44 24 38          	mov    0x38(%esp),%eax
   13981:	89 c2                	mov    %eax,%edx
   13983:	8b 44 24 18          	mov    0x18(%esp),%eax
   13987:	66 89 50 0e          	mov    %dx,0xe(%eax)
	// 设置该i节点的修改时间、访问时间为当前时间，并设置i节点已修改标志。
	inode->i_mtime = inode->i_atime = CURRENT_TIME;
   1398b:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   13990:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   13996:	01 d0                	add    %edx,%eax
   13998:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   1399d:	f7 e2                	mul    %edx
   1399f:	c1 ea 05             	shr    $0x5,%edx
   139a2:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   139a7:	01 c2                	add    %eax,%edx
   139a9:	8b 44 24 18          	mov    0x18(%esp),%eax
   139ad:	89 50 28             	mov    %edx,0x28(%eax)
   139b0:	8b 44 24 18          	mov    0x18(%esp),%eax
   139b4:	8b 50 28             	mov    0x28(%eax),%edx
   139b7:	8b 44 24 18          	mov    0x18(%esp),%eax
   139bb:	89 50 08             	mov    %edx,0x8(%eax)
	inode->i_dirt = 1;
   139be:	8b 44 24 18          	mov    0x18(%esp),%eax
   139c2:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 接着为这个新的i节点在目录中新添加一个目录项。如果失败（包含该目录项的高速缓冲块指针为NULL），则放回目录的i节点；
	// 把所申请的i节点引用连接计数复位，并放回该i节点，返回出错码退出。
	bh = add_entry(dir, basename, namelen, &de);
   139c6:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   139ca:	8b 54 24 14          	mov    0x14(%esp),%edx
   139ce:	8b 44 24 0c          	mov    0xc(%esp),%eax
   139d2:	8d 5c 24 08          	lea    0x8(%esp),%ebx
   139d6:	53                   	push   %ebx
   139d7:	51                   	push   %ecx
   139d8:	52                   	push   %edx
   139d9:	50                   	push   %eax
   139da:	e8 89 f3 ff ff       	call   12d68 <add_entry>
   139df:	83 c4 10             	add    $0x10,%esp
   139e2:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   139e6:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   139eb:	75 2e                	jne    13a1b <sys_mknod+0x1f6>
		iput(dir);
   139ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
   139f1:	83 ec 0c             	sub    $0xc,%esp
   139f4:	50                   	push   %eax
   139f5:	e8 65 ac ff ff       	call   e65f <iput>
   139fa:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks = 0;
   139fd:	8b 44 24 18          	mov    0x18(%esp),%eax
   13a01:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
		iput(inode);
   13a05:	83 ec 0c             	sub    $0xc,%esp
   13a08:	ff 74 24 24          	pushl  0x24(%esp)
   13a0c:	e8 4e ac ff ff       	call   e65f <iput>
   13a11:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13a14:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13a19:	eb 4a                	jmp    13a65 <sys_mknod+0x240>
	}
	// 现在添加目录项操作也成功了，于是我们来设置这个目录项内容。令该目录项的i节点字段等于新i节点号，并置高速缓冲区已修
	// 改标志，放回目录和新的i节点，释放高速缓冲区，最后返回0（成功）。
	de->inode = inode->i_num;
   13a1b:	8b 44 24 08          	mov    0x8(%esp),%eax
   13a1f:	8b 54 24 18          	mov    0x18(%esp),%edx
   13a23:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13a27:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   13a2a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13a2e:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	iput(dir);
   13a32:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13a36:	83 ec 0c             	sub    $0xc,%esp
   13a39:	50                   	push   %eax
   13a3a:	e8 20 ac ff ff       	call   e65f <iput>
   13a3f:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   13a42:	83 ec 0c             	sub    $0xc,%esp
   13a45:	ff 74 24 24          	pushl  0x24(%esp)
   13a49:	e8 11 ac ff ff       	call   e65f <iput>
   13a4e:	83 c4 10             	add    $0x10,%esp
	brelse(bh);
   13a51:	83 ec 0c             	sub    $0xc,%esp
   13a54:	ff 74 24 28          	pushl  0x28(%esp)
   13a58:	e8 93 bb ff ff       	call   f5f0 <brelse>
   13a5d:	83 c4 10             	add    $0x10,%esp
	return 0;
   13a60:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13a65:	83 c4 28             	add    $0x28,%esp
   13a68:	5b                   	pop    %ebx
   13a69:	c3                   	ret    

00013a6a <sys_mkdir>:

// 创建一个目录。
// 参数：pathname - 路径名；mode - 目录使用的权限属性。
// 返回：成功则返回0,否则返回出错码。
int sys_mkdir(const char * pathname, int mode)
{
   13a6a:	53                   	push   %ebx
   13a6b:	83 ec 28             	sub    $0x28,%esp
	struct m_inode * dir, * inode;
	struct buffer_head * bh, *dir_block;
	struct dir_entry * de;

	// 首先检查参数的有效性并取路径名中顶层目录的i节点。如果找不到对应路径名中顶层目录的i节点，则返回出错码。
	if (!(dir = dir_namei(pathname,&namelen,&basename, NULL)))
   13a6e:	6a 00                	push   $0x0
   13a70:	8d 44 24 14          	lea    0x14(%esp),%eax
   13a74:	50                   	push   %eax
   13a75:	8d 44 24 14          	lea    0x14(%esp),%eax
   13a79:	50                   	push   %eax
   13a7a:	ff 74 24 3c          	pushl  0x3c(%esp)
   13a7e:	e8 24 f8 ff ff       	call   132a7 <dir_namei>
   13a83:	83 c4 10             	add    $0x10,%esp
   13a86:	89 44 24 08          	mov    %eax,0x8(%esp)
   13a8a:	8b 44 24 08          	mov    0x8(%esp),%eax
   13a8e:	85 c0                	test   %eax,%eax
   13a90:	75 0a                	jne    13a9c <sys_mkdir+0x32>
		return -ENOENT;
   13a92:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13a97:	e9 63 03 00 00       	jmp    13dff <sys_mkdir+0x395>
	// 如果最顶端文件名长度为0,则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。
	if (!namelen) {
   13a9c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13aa0:	85 c0                	test   %eax,%eax
   13aa2:	75 1a                	jne    13abe <sys_mkdir+0x54>
		iput(dir);
   13aa4:	8b 44 24 08          	mov    0x8(%esp),%eax
   13aa8:	83 ec 0c             	sub    $0xc,%esp
   13aab:	50                   	push   %eax
   13aac:	e8 ae ab ff ff       	call   e65f <iput>
   13ab1:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   13ab4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13ab9:	e9 41 03 00 00       	jmp    13dff <sys_mkdir+0x395>
	}
	// 如果在该目录中没有写的权限，则放回该目录i节点，返回访问许可出错码退出。
	// 如果不是超级用户，则返回访问许可出错码。
	if (!permission(dir, MAY_WRITE)) {
   13abe:	8b 44 24 08          	mov    0x8(%esp),%eax
   13ac2:	83 ec 08             	sub    $0x8,%esp
   13ac5:	6a 02                	push   $0x2
   13ac7:	50                   	push   %eax
   13ac8:	e8 29 ef ff ff       	call   129f6 <permission>
   13acd:	83 c4 10             	add    $0x10,%esp
   13ad0:	85 c0                	test   %eax,%eax
   13ad2:	75 1a                	jne    13aee <sys_mkdir+0x84>
		iput(dir);
   13ad4:	8b 44 24 08          	mov    0x8(%esp),%eax
   13ad8:	83 ec 0c             	sub    $0xc,%esp
   13adb:	50                   	push   %eax
   13adc:	e8 7e ab ff ff       	call   e65f <iput>
   13ae1:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   13ae4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13ae9:	e9 11 03 00 00       	jmp    13dff <sys_mkdir+0x395>
	}
	// 然后我们搜索一下路径名指定的目录名是否已经存在。若已经存在则不能创建同名目录节点。如果对应路径名上最后的目录名的目录
	// 项已经存在，则释放包含该目录项的缓冲区块并放回目录的i节点，返回文件已经存在 的出错码退出。否则我们就申请一个新的i节
	// 点，并设置该i节点的属性模式：置该新i节点对应的文件长度为32字节（2个目录项的大小）、置节点已修改标志，以及节点的修改
	// 时间和访问时间。2个目录项分别用于'.'和'..'目录。
	bh = find_entry(&dir, basename, namelen, &de);
   13aee:	8b 54 24 0c          	mov    0xc(%esp),%edx
   13af2:	8b 44 24 10          	mov    0x10(%esp),%eax
   13af6:	8d 4c 24 04          	lea    0x4(%esp),%ecx
   13afa:	51                   	push   %ecx
   13afb:	52                   	push   %edx
   13afc:	50                   	push   %eax
   13afd:	8d 44 24 14          	lea    0x14(%esp),%eax
   13b01:	50                   	push   %eax
   13b02:	e8 23 f0 ff ff       	call   12b2a <find_entry>
   13b07:	83 c4 10             	add    $0x10,%esp
   13b0a:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (bh) {
   13b0e:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13b13:	74 29                	je     13b3e <sys_mkdir+0xd4>
		brelse(bh);
   13b15:	83 ec 0c             	sub    $0xc,%esp
   13b18:	ff 74 24 28          	pushl  0x28(%esp)
   13b1c:	e8 cf ba ff ff       	call   f5f0 <brelse>
   13b21:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   13b24:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b28:	83 ec 0c             	sub    $0xc,%esp
   13b2b:	50                   	push   %eax
   13b2c:	e8 2e ab ff ff       	call   e65f <iput>
   13b31:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   13b34:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   13b39:	e9 c1 02 00 00       	jmp    13dff <sys_mkdir+0x395>
	}
	inode = new_inode(dir->i_dev);
   13b3e:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b42:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13b46:	0f b7 c0             	movzwl %ax,%eax
   13b49:	83 ec 0c             	sub    $0xc,%esp
   13b4c:	50                   	push   %eax
   13b4d:	e8 b6 15 00 00       	call   15108 <new_inode>
   13b52:	83 c4 10             	add    $0x10,%esp
   13b55:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!inode) {           						// 若不成功则放回目录的i节点，返回无空间出错码。
   13b59:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13b5e:	75 1a                	jne    13b7a <sys_mkdir+0x110>
		iput(dir);
   13b60:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b64:	83 ec 0c             	sub    $0xc,%esp
   13b67:	50                   	push   %eax
   13b68:	e8 f2 aa ff ff       	call   e65f <iput>
   13b6d:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13b70:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13b75:	e9 85 02 00 00       	jmp    13dff <sys_mkdir+0x395>
	}
	inode->i_size = 32;
   13b7a:	8b 44 24 18          	mov    0x18(%esp),%eax
   13b7e:	c7 40 04 20 00 00 00 	movl   $0x20,0x4(%eax)
	inode->i_dirt = 1;
   13b85:	8b 44 24 18          	mov    0x18(%esp),%eax
   13b89:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	inode->i_mtime = inode->i_atime = CURRENT_TIME;
   13b8d:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   13b92:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   13b98:	01 d0                	add    %edx,%eax
   13b9a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   13b9f:	f7 e2                	mul    %edx
   13ba1:	c1 ea 05             	shr    $0x5,%edx
   13ba4:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   13ba9:	01 c2                	add    %eax,%edx
   13bab:	8b 44 24 18          	mov    0x18(%esp),%eax
   13baf:	89 50 28             	mov    %edx,0x28(%eax)
   13bb2:	8b 44 24 18          	mov    0x18(%esp),%eax
   13bb6:	8b 50 28             	mov    0x28(%eax),%edx
   13bb9:	8b 44 24 18          	mov    0x18(%esp),%eax
   13bbd:	89 50 08             	mov    %edx,0x8(%eax)
	// 接着为该新i节点申请一用于保存目录项数据的磁盘块，并令i节点的第一个直接块指针等于该块号。如果申请失败则放回对应目录
	// 的i节点；复位新申请的i节点连接计数；放回该新的i节点，返回没有空间出错码退出。否则置该新的i节点已修改标志。
	if (!(inode->i_zone[0] = new_block(inode->i_dev))) {
   13bc0:	8b 44 24 18          	mov    0x18(%esp),%eax
   13bc4:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13bc8:	0f b7 c0             	movzwl %ax,%eax
   13bcb:	83 ec 0c             	sub    $0xc,%esp
   13bce:	50                   	push   %eax
   13bcf:	e8 ff 11 00 00       	call   14dd3 <new_block>
   13bd4:	83 c4 10             	add    $0x10,%esp
   13bd7:	89 c2                	mov    %eax,%edx
   13bd9:	8b 44 24 18          	mov    0x18(%esp),%eax
   13bdd:	66 89 50 0e          	mov    %dx,0xe(%eax)
   13be1:	8b 44 24 18          	mov    0x18(%esp),%eax
   13be5:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13be9:	66 85 c0             	test   %ax,%ax
   13bec:	75 3b                	jne    13c29 <sys_mkdir+0x1bf>
		iput(dir);
   13bee:	8b 44 24 08          	mov    0x8(%esp),%eax
   13bf2:	83 ec 0c             	sub    $0xc,%esp
   13bf5:	50                   	push   %eax
   13bf6:	e8 64 aa ff ff       	call   e65f <iput>
   13bfb:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   13bfe:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c02:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   13c06:	8d 50 ff             	lea    -0x1(%eax),%edx
   13c09:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c0d:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   13c10:	83 ec 0c             	sub    $0xc,%esp
   13c13:	ff 74 24 24          	pushl  0x24(%esp)
   13c17:	e8 43 aa ff ff       	call   e65f <iput>
   13c1c:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13c1f:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13c24:	e9 d6 01 00 00       	jmp    13dff <sys_mkdir+0x395>
	}
	inode->i_dirt = 1;
   13c29:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c2d:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 从设备上读取新申请的磁盘块（目的是把对应块放到高速缓冲区中）。若出错，则放回对应目录的i节点；释放申请的磁盘块；复位新
	// 申请的i节点连接计数；放回该新的i节点，返回没有空间出错码退出。
	if (!(dir_block = bread(inode->i_dev, inode->i_zone[0]))) {
   13c31:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c35:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13c39:	0f b7 d0             	movzwl %ax,%edx
   13c3c:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c40:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13c44:	0f b7 c0             	movzwl %ax,%eax
   13c47:	83 ec 08             	sub    $0x8,%esp
   13c4a:	52                   	push   %edx
   13c4b:	50                   	push   %eax
   13c4c:	e8 f5 b9 ff ff       	call   f646 <bread>
   13c51:	83 c4 10             	add    $0x10,%esp
   13c54:	89 44 24 14          	mov    %eax,0x14(%esp)
   13c58:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   13c5d:	75 3b                	jne    13c9a <sys_mkdir+0x230>
		iput(dir);
   13c5f:	8b 44 24 08          	mov    0x8(%esp),%eax
   13c63:	83 ec 0c             	sub    $0xc,%esp
   13c66:	50                   	push   %eax
   13c67:	e8 f3 a9 ff ff       	call   e65f <iput>
   13c6c:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   13c6f:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c73:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   13c77:	8d 50 ff             	lea    -0x1(%eax),%edx
   13c7a:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c7e:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   13c81:	83 ec 0c             	sub    $0xc,%esp
   13c84:	ff 74 24 24          	pushl  0x24(%esp)
   13c88:	e8 d2 a9 ff ff       	call   e65f <iput>
   13c8d:	83 c4 10             	add    $0x10,%esp
		return -ERROR;
   13c90:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
   13c95:	e9 65 01 00 00       	jmp    13dff <sys_mkdir+0x395>
	}
	// 然后我们在缓冲块中建立起所创建目录文件中的2个默认的新目录项（'.'和'..'）结构数据。首先令de指向存放目录项的数据块，然
	// 后置该目录项的i节点号字段等于新申请的i节点号，名字字段等于“.”。然后de指向下一个目录项结构，并在该结构中存放上级目录的
	// i节点号和名字“..”。然后设置该高速缓冲块已修改标志，并释放该缓冲区块。再初始化设置新i节点的模式字段，并置该i节点已修改
	// 标志。
	de = (struct dir_entry *) dir_block->b_data;
   13c9a:	8b 44 24 14          	mov    0x14(%esp),%eax
   13c9e:	8b 00                	mov    (%eax),%eax
   13ca0:	89 44 24 04          	mov    %eax,0x4(%esp)
	de->inode = inode->i_num;         				// 设置'.'目录项。
   13ca4:	8b 44 24 04          	mov    0x4(%esp),%eax
   13ca8:	8b 54 24 18          	mov    0x18(%esp),%edx
   13cac:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13cb0:	66 89 10             	mov    %dx,(%eax)
	strcpy(de->name, ".");
   13cb3:	8b 44 24 04          	mov    0x4(%esp),%eax
   13cb7:	83 c0 02             	add    $0x2,%eax
   13cba:	83 ec 08             	sub    $0x8,%esp
   13cbd:	68 e5 41 02 00       	push   $0x241e5
   13cc2:	50                   	push   %eax
   13cc3:	e8 eb ec ff ff       	call   129b3 <strcpy>
   13cc8:	83 c4 10             	add    $0x10,%esp
	de++;
   13ccb:	8b 44 24 04          	mov    0x4(%esp),%eax
   13ccf:	83 c0 10             	add    $0x10,%eax
   13cd2:	89 44 24 04          	mov    %eax,0x4(%esp)
	de->inode = dir->i_num;         				// 设置'..'目录项。
   13cd6:	8b 54 24 08          	mov    0x8(%esp),%edx
   13cda:	8b 44 24 04          	mov    0x4(%esp),%eax
   13cde:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13ce2:	66 89 10             	mov    %dx,(%eax)
	strcpy(de->name, "..");
   13ce5:	8b 44 24 04          	mov    0x4(%esp),%eax
   13ce9:	83 c0 02             	add    $0x2,%eax
   13cec:	83 ec 08             	sub    $0x8,%esp
   13cef:	68 e7 41 02 00       	push   $0x241e7
   13cf4:	50                   	push   %eax
   13cf5:	e8 b9 ec ff ff       	call   129b3 <strcpy>
   13cfa:	83 c4 10             	add    $0x10,%esp
	inode->i_nlinks = 2;
   13cfd:	8b 44 24 18          	mov    0x18(%esp),%eax
   13d01:	c6 40 0d 02          	movb   $0x2,0xd(%eax)
	dir_block->b_dirt = 1;
   13d05:	8b 44 24 14          	mov    0x14(%esp),%eax
   13d09:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(dir_block);
   13d0d:	83 ec 0c             	sub    $0xc,%esp
   13d10:	ff 74 24 20          	pushl  0x20(%esp)
   13d14:	e8 d7 b8 ff ff       	call   f5f0 <brelse>
   13d19:	83 c4 10             	add    $0x10,%esp
	inode->i_mode = I_DIRECTORY | (mode & 0777 & ~current->umask);
   13d1c:	8b 44 24 34          	mov    0x34(%esp),%eax
   13d20:	66 25 ff 01          	and    $0x1ff,%ax
   13d24:	89 c2                	mov    %eax,%edx
   13d26:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   13d2b:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
   13d32:	f7 d0                	not    %eax
   13d34:	21 d0                	and    %edx,%eax
   13d36:	80 cc 40             	or     $0x40,%ah
   13d39:	89 c2                	mov    %eax,%edx
   13d3b:	8b 44 24 18          	mov    0x18(%esp),%eax
   13d3f:	66 89 10             	mov    %dx,(%eax)
	inode->i_dirt = 1;
   13d42:	8b 44 24 18          	mov    0x18(%esp),%eax
   13d46:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 现在我们在指定目录中新添加一个目录项，用于存放新建目录的i节点和目录名。如果失败（包含该目录项的高速缓冲区指针为NULL），
	// 则放回目录的i节点；所申请的i节点引用连接计数复位，并放回该i节点。返回出错码退出。
	bh = add_entry(dir, basename, namelen, &de);
   13d4a:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   13d4e:	8b 54 24 10          	mov    0x10(%esp),%edx
   13d52:	8b 44 24 08          	mov    0x8(%esp),%eax
   13d56:	8d 5c 24 04          	lea    0x4(%esp),%ebx
   13d5a:	53                   	push   %ebx
   13d5b:	51                   	push   %ecx
   13d5c:	52                   	push   %edx
   13d5d:	50                   	push   %eax
   13d5e:	e8 05 f0 ff ff       	call   12d68 <add_entry>
   13d63:	83 c4 10             	add    $0x10,%esp
   13d66:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   13d6a:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13d6f:	75 2e                	jne    13d9f <sys_mkdir+0x335>
		iput(dir);
   13d71:	8b 44 24 08          	mov    0x8(%esp),%eax
   13d75:	83 ec 0c             	sub    $0xc,%esp
   13d78:	50                   	push   %eax
   13d79:	e8 e1 a8 ff ff       	call   e65f <iput>
   13d7e:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks = 0;
   13d81:	8b 44 24 18          	mov    0x18(%esp),%eax
   13d85:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
		iput(inode);
   13d89:	83 ec 0c             	sub    $0xc,%esp
   13d8c:	ff 74 24 24          	pushl  0x24(%esp)
   13d90:	e8 ca a8 ff ff       	call   e65f <iput>
   13d95:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13d98:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13d9d:	eb 60                	jmp    13dff <sys_mkdir+0x395>
	}
	// 最后令该新目录项的i节点字段等于新i节点号，并置高速缓冲块已修改标志，放回目录和新的i节点，释放高速缓冲区，最后返回0（成功）。
	de->inode = inode->i_num;
   13d9f:	8b 44 24 04          	mov    0x4(%esp),%eax
   13da3:	8b 54 24 18          	mov    0x18(%esp),%edx
   13da7:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13dab:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   13dae:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13db2:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	dir->i_nlinks++;
   13db6:	8b 44 24 08          	mov    0x8(%esp),%eax
   13dba:	0f b6 50 0d          	movzbl 0xd(%eax),%edx
   13dbe:	83 c2 01             	add    $0x1,%edx
   13dc1:	88 50 0d             	mov    %dl,0xd(%eax)
	dir->i_dirt = 1;
   13dc4:	8b 44 24 08          	mov    0x8(%esp),%eax
   13dc8:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(dir);
   13dcc:	8b 44 24 08          	mov    0x8(%esp),%eax
   13dd0:	83 ec 0c             	sub    $0xc,%esp
   13dd3:	50                   	push   %eax
   13dd4:	e8 86 a8 ff ff       	call   e65f <iput>
   13dd9:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   13ddc:	83 ec 0c             	sub    $0xc,%esp
   13ddf:	ff 74 24 24          	pushl  0x24(%esp)
   13de3:	e8 77 a8 ff ff       	call   e65f <iput>
   13de8:	83 c4 10             	add    $0x10,%esp
	brelse(bh);
   13deb:	83 ec 0c             	sub    $0xc,%esp
   13dee:	ff 74 24 28          	pushl  0x28(%esp)
   13df2:	e8 f9 b7 ff ff       	call   f5f0 <brelse>
   13df7:	83 c4 10             	add    $0x10,%esp
	return 0;
   13dfa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13dff:	83 c4 28             	add    $0x28,%esp
   13e02:	5b                   	pop    %ebx
   13e03:	c3                   	ret    

00013e04 <empty_dir>:
 */
// 检查指定目录是否为空。
// 参数：inode - 指定目录的i节点指针。
// 返回：1 - 目录中是空的；0 - 不空。
static int empty_dir(struct m_inode * inode)
{
   13e04:	83 ec 2c             	sub    $0x2c,%esp
	struct dir_entry * de;

	// 首先计算指定目录中现有目录项个数并检查开始两个特定目录项中信息是否正确。一个目录中应该起码有2个目录项：即“.”和“..”。
	// 如果目录项个数少于2个或者该目录i节点的第1个直接块没有指向任何磁盘块号，或者该直接块读不出，则显示警告信息“设备dev上
	// 目录错”，返回0（失败）。
	len = inode->i_size / sizeof (struct dir_entry);        		// 目录中目录项个数。
   13e07:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e0b:	8b 40 04             	mov    0x4(%eax),%eax
   13e0e:	c1 e8 04             	shr    $0x4,%eax
   13e11:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (len < 2 || !inode->i_zone[0] ||
   13e15:	83 7c 24 10 01       	cmpl   $0x1,0x10(%esp)
   13e1a:	7e 3b                	jle    13e57 <empty_dir+0x53>
   13e1c:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e20:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13e24:	66 85 c0             	test   %ax,%ax
   13e27:	74 2e                	je     13e57 <empty_dir+0x53>
	    !(bh = bread(inode->i_dev, inode->i_zone[0]))) {
   13e29:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e2d:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13e31:	0f b7 d0             	movzwl %ax,%edx
   13e34:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e38:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13e3c:	0f b7 c0             	movzwl %ax,%eax
   13e3f:	83 ec 08             	sub    $0x8,%esp
   13e42:	52                   	push   %edx
   13e43:	50                   	push   %eax
   13e44:	e8 fd b7 ff ff       	call   f646 <bread>
   13e49:	83 c4 10             	add    $0x10,%esp
   13e4c:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (len < 2 || !inode->i_zone[0] ||
   13e50:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13e55:	75 26                	jne    13e7d <empty_dir+0x79>
	    	printk("warning - bad directory on dev %04x\n", inode->i_dev);
   13e57:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e5b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13e5f:	0f b7 c0             	movzwl %ax,%eax
   13e62:	83 ec 08             	sub    $0x8,%esp
   13e65:	50                   	push   %eax
   13e66:	68 ec 41 02 00       	push   $0x241ec
   13e6b:	e8 d1 4d ff ff       	call   8c41 <printk>
   13e70:	83 c4 10             	add    $0x10,%esp
		return 0;
   13e73:	b8 00 00 00 00       	mov    $0x0,%eax
   13e78:	e9 74 01 00 00       	jmp    13ff1 <empty_dir+0x1ed>
	}
	// 此时bh所指缓冲块中含有目录项数据。我们让目录项指针de指向缓冲块中第1个目录项。对于第1个目录项（“.”），它的i节点号字段
	// inode应该等于当前目录的i节点号。对于第2个目录项（“..”），节点号字段inode应该等于上一层目录的i节点号，不会为0.因此，
	// 如果第1个目录项的i节点号字段值不等于该目录的i节点号，或者第2个目录项的i节点号字段为零，或者两个目录项的名字字段不分别
	// 等于“.”和“..”，则显示出错警告信息“设备dev上目录错”，并返回0。
	de = (struct dir_entry *) bh->b_data;
   13e7d:	8b 44 24 18          	mov    0x18(%esp),%eax
   13e81:	8b 00                	mov    (%eax),%eax
   13e83:	89 44 24 14          	mov    %eax,0x14(%esp)
	if (de[0].inode != inode->i_num || !de[1].inode ||
   13e87:	8b 44 24 14          	mov    0x14(%esp),%eax
   13e8b:	0f b7 10             	movzwl (%eax),%edx
   13e8e:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e92:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   13e96:	66 39 c2             	cmp    %ax,%dx
   13e99:	75 4a                	jne    13ee5 <empty_dir+0xe1>
   13e9b:	8b 44 24 14          	mov    0x14(%esp),%eax
   13e9f:	83 c0 10             	add    $0x10,%eax
   13ea2:	0f b7 00             	movzwl (%eax),%eax
   13ea5:	66 85 c0             	test   %ax,%ax
   13ea8:	74 3b                	je     13ee5 <empty_dir+0xe1>
	    strcmp(".", de[0].name) || strcmp("..", de[1].name)) {
   13eaa:	8b 44 24 14          	mov    0x14(%esp),%eax
   13eae:	83 c0 02             	add    $0x2,%eax
   13eb1:	83 ec 08             	sub    $0x8,%esp
   13eb4:	50                   	push   %eax
   13eb5:	68 e5 41 02 00       	push   $0x241e5
   13eba:	e8 10 eb ff ff       	call   129cf <strcmp>
   13ebf:	83 c4 10             	add    $0x10,%esp
	if (de[0].inode != inode->i_num || !de[1].inode ||
   13ec2:	85 c0                	test   %eax,%eax
   13ec4:	75 1f                	jne    13ee5 <empty_dir+0xe1>
	    strcmp(".", de[0].name) || strcmp("..", de[1].name)) {
   13ec6:	8b 44 24 14          	mov    0x14(%esp),%eax
   13eca:	83 c0 10             	add    $0x10,%eax
   13ecd:	83 c0 02             	add    $0x2,%eax
   13ed0:	83 ec 08             	sub    $0x8,%esp
   13ed3:	50                   	push   %eax
   13ed4:	68 e7 41 02 00       	push   $0x241e7
   13ed9:	e8 f1 ea ff ff       	call   129cf <strcmp>
   13ede:	83 c4 10             	add    $0x10,%esp
   13ee1:	85 c0                	test   %eax,%eax
   13ee3:	74 26                	je     13f0b <empty_dir+0x107>
	    	printk("warning - bad directory on dev %04x\n", inode->i_dev);
   13ee5:	8b 44 24 30          	mov    0x30(%esp),%eax
   13ee9:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13eed:	0f b7 c0             	movzwl %ax,%eax
   13ef0:	83 ec 08             	sub    $0x8,%esp
   13ef3:	50                   	push   %eax
   13ef4:	68 ec 41 02 00       	push   $0x241ec
   13ef9:	e8 43 4d ff ff       	call   8c41 <printk>
   13efe:	83 c4 10             	add    $0x10,%esp
		return 0;
   13f01:	b8 00 00 00 00       	mov    $0x0,%eax
   13f06:	e9 e6 00 00 00       	jmp    13ff1 <empty_dir+0x1ed>
	}
	// 然后我们令nr等于目录项序号（从0开始计）；de指向第三个目录项。并循环检测该目录中其余所有的（len - 2）个目录项，看有没有
	// 目录项的i节点号字段不为0（被使用）。
	nr = 2;
   13f0b:	c7 44 24 1c 02 00 00 	movl   $0x2,0x1c(%esp)
   13f12:	00 
	de += 2;
   13f13:	83 44 24 14 20       	addl   $0x20,0x14(%esp)
	while (nr < len) {
   13f18:	e9 b2 00 00 00       	jmp    13fcf <empty_dir+0x1cb>
		// 如果该块磁盘块中的目录项已经全部检测完毕，则释放该磁盘块的缓冲块，并读取目录数据文件中下一块含有目录项的磁盘块。读取的方
		// 法是根据当前检测的目录项序号nr计算出对应目录项在目录数据文件中的数据块号（nr/DIR_ENTRIES_PER_BLOCK），然后使用bmap()
		// 函数取得对应的盘块号block，再使用读设备块函数bread()把相应盘块读入缓冲块中，并返回该缓冲块的指针。若所读取的相应盘块没有
		// 使用（或已经不用，如文件已经删除等），则继续读下一块，若读不出，则出错返回0.否则让de指向读出块的第1个目录项。
		if ((void *) de >= (void *) (bh->b_data + BLOCK_SIZE)) {
   13f1d:	8b 44 24 18          	mov    0x18(%esp),%eax
   13f21:	8b 00                	mov    (%eax),%eax
   13f23:	05 00 04 00 00       	add    $0x400,%eax
   13f28:	39 44 24 14          	cmp    %eax,0x14(%esp)
   13f2c:	72 75                	jb     13fa3 <empty_dir+0x19f>
			brelse(bh);
   13f2e:	83 ec 0c             	sub    $0xc,%esp
   13f31:	ff 74 24 24          	pushl  0x24(%esp)
   13f35:	e8 b6 b6 ff ff       	call   f5f0 <brelse>
   13f3a:	83 c4 10             	add    $0x10,%esp
			block = bmap(inode, nr / DIR_ENTRIES_PER_BLOCK);
   13f3d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13f41:	c1 e8 06             	shr    $0x6,%eax
   13f44:	83 ec 08             	sub    $0x8,%esp
   13f47:	50                   	push   %eax
   13f48:	ff 74 24 3c          	pushl  0x3c(%esp)
   13f4c:	e8 d6 a6 ff ff       	call   e627 <bmap>
   13f51:	83 c4 10             	add    $0x10,%esp
   13f54:	89 44 24 0c          	mov    %eax,0xc(%esp)
			if (!block) {
   13f58:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   13f5d:	75 0d                	jne    13f6c <empty_dir+0x168>
				nr += DIR_ENTRIES_PER_BLOCK;
   13f5f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13f63:	83 c0 40             	add    $0x40,%eax
   13f66:	89 44 24 1c          	mov    %eax,0x1c(%esp)
				continue;
   13f6a:	eb 63                	jmp    13fcf <empty_dir+0x1cb>
			}
			if (!(bh = bread(inode->i_dev, block)))
   13f6c:	8b 44 24 30          	mov    0x30(%esp),%eax
   13f70:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13f74:	0f b7 c0             	movzwl %ax,%eax
   13f77:	83 ec 08             	sub    $0x8,%esp
   13f7a:	ff 74 24 14          	pushl  0x14(%esp)
   13f7e:	50                   	push   %eax
   13f7f:	e8 c2 b6 ff ff       	call   f646 <bread>
   13f84:	83 c4 10             	add    $0x10,%esp
   13f87:	89 44 24 18          	mov    %eax,0x18(%esp)
   13f8b:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13f90:	75 07                	jne    13f99 <empty_dir+0x195>
				return 0;
   13f92:	b8 00 00 00 00       	mov    $0x0,%eax
   13f97:	eb 58                	jmp    13ff1 <empty_dir+0x1ed>
			de = (struct dir_entry *) bh->b_data;
   13f99:	8b 44 24 18          	mov    0x18(%esp),%eax
   13f9d:	8b 00                	mov    (%eax),%eax
   13f9f:	89 44 24 14          	mov    %eax,0x14(%esp)
		}
		// 对于de指向的当前目录项，如果该目录项的i节点号字段不等于0,则表示该目录项目前正被使用，则释放该高速缓冲区，返回0退出。否则，
		// 若还没有查询完该目录中的所有目录项，则把目录项序号nr增1、de指向下一个目录项，继续检测。
		if (de->inode) {
   13fa3:	8b 44 24 14          	mov    0x14(%esp),%eax
   13fa7:	0f b7 00             	movzwl (%eax),%eax
   13faa:	66 85 c0             	test   %ax,%ax
   13fad:	74 16                	je     13fc5 <empty_dir+0x1c1>
			brelse(bh);
   13faf:	83 ec 0c             	sub    $0xc,%esp
   13fb2:	ff 74 24 24          	pushl  0x24(%esp)
   13fb6:	e8 35 b6 ff ff       	call   f5f0 <brelse>
   13fbb:	83 c4 10             	add    $0x10,%esp
			return 0;
   13fbe:	b8 00 00 00 00       	mov    $0x0,%eax
   13fc3:	eb 2c                	jmp    13ff1 <empty_dir+0x1ed>
		}
		de++;
   13fc5:	83 44 24 14 10       	addl   $0x10,0x14(%esp)
		nr++;
   13fca:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
	while (nr < len) {
   13fcf:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13fd3:	3b 44 24 10          	cmp    0x10(%esp),%eax
   13fd7:	0f 8c 40 ff ff ff    	jl     13f1d <empty_dir+0x119>
	}
	// 执行到这里说明该目录中没有找到已用的目录项（当然除了头两个以外），则释放缓冲块返回1。
	brelse(bh);
   13fdd:	83 ec 0c             	sub    $0xc,%esp
   13fe0:	ff 74 24 24          	pushl  0x24(%esp)
   13fe4:	e8 07 b6 ff ff       	call   f5f0 <brelse>
   13fe9:	83 c4 10             	add    $0x10,%esp
	return 1;
   13fec:	b8 01 00 00 00       	mov    $0x1,%eax
}
   13ff1:	83 c4 2c             	add    $0x2c,%esp
   13ff4:	c3                   	ret    

00013ff5 <sys_rmdir>:

// 删除目录。
// 参数：name - 目录名（路径名）。
// 返回：返回0表示成功，否则返回出错号。
int sys_rmdir(const char * name)
{
   13ff5:	83 ec 2c             	sub    $0x2c,%esp
	struct dir_entry * de;

	// 首先检查参数的有效性并取路径名中顶层目录的i节点。如果找不到对应路径名中顶层目录的i节点，则返回出错码。如果最顶端
	// 文件名长度为0,则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。如果在该目录中没有写的权限，
	// 则放回该目录i节点，返回访问许可出错码退出。如果不是超级用户，则返回访问许可出错码。
	if (!(dir = dir_namei(name, &namelen, &basename, NULL)))
   13ff8:	6a 00                	push   $0x0
   13ffa:	8d 44 24 18          	lea    0x18(%esp),%eax
   13ffe:	50                   	push   %eax
   13fff:	8d 44 24 18          	lea    0x18(%esp),%eax
   14003:	50                   	push   %eax
   14004:	ff 74 24 3c          	pushl  0x3c(%esp)
   14008:	e8 9a f2 ff ff       	call   132a7 <dir_namei>
   1400d:	83 c4 10             	add    $0x10,%esp
   14010:	89 44 24 0c          	mov    %eax,0xc(%esp)
   14014:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14018:	85 c0                	test   %eax,%eax
   1401a:	75 0a                	jne    14026 <sys_rmdir+0x31>
		return -ENOENT;
   1401c:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14021:	e9 58 03 00 00       	jmp    1437e <sys_rmdir+0x389>
	if (!namelen) {
   14026:	8b 44 24 10          	mov    0x10(%esp),%eax
   1402a:	85 c0                	test   %eax,%eax
   1402c:	75 1a                	jne    14048 <sys_rmdir+0x53>
		iput(dir);
   1402e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14032:	83 ec 0c             	sub    $0xc,%esp
   14035:	50                   	push   %eax
   14036:	e8 24 a6 ff ff       	call   e65f <iput>
   1403b:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   1403e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14043:	e9 36 03 00 00       	jmp    1437e <sys_rmdir+0x389>
	}
	if (!permission(dir,MAY_WRITE)) {
   14048:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1404c:	83 ec 08             	sub    $0x8,%esp
   1404f:	6a 02                	push   $0x2
   14051:	50                   	push   %eax
   14052:	e8 9f e9 ff ff       	call   129f6 <permission>
   14057:	83 c4 10             	add    $0x10,%esp
   1405a:	85 c0                	test   %eax,%eax
   1405c:	75 1a                	jne    14078 <sys_rmdir+0x83>
		iput(dir);
   1405e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14062:	83 ec 0c             	sub    $0xc,%esp
   14065:	50                   	push   %eax
   14066:	e8 f4 a5 ff ff       	call   e65f <iput>
   1406b:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1406e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14073:	e9 06 03 00 00       	jmp    1437e <sys_rmdir+0x389>
	}
	// 然后根据指定目录的i节点和目录名利用函数find_entry()寻找对应目录项，并返回包含该目录项的缓冲块指针bh、包含该目录
	// 项的目录的i节点指针dir和该目录项指针de。再根据该目录项de中的i节点号利用iget()函数得到对应的i节点inode。如果对应
	// 路径名上最后目录的名的目录项不存在，则释放包含该目录项的高速缓冲区，放回目录的i节点，返回文件不存在出错码，并退出。
	// 如果取目录项的i节点出错，则放回目录的i节点，并释放含有目录项的高速缓冲区，返回出错号。
	bh = find_entry(&dir, basename, namelen, &de);
   14078:	8b 54 24 10          	mov    0x10(%esp),%edx
   1407c:	8b 44 24 14          	mov    0x14(%esp),%eax
   14080:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   14084:	51                   	push   %ecx
   14085:	52                   	push   %edx
   14086:	50                   	push   %eax
   14087:	8d 44 24 18          	lea    0x18(%esp),%eax
   1408b:	50                   	push   %eax
   1408c:	e8 99 ea ff ff       	call   12b2a <find_entry>
   14091:	83 c4 10             	add    $0x10,%esp
   14094:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   14098:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1409d:	75 1a                	jne    140b9 <sys_rmdir+0xc4>
		iput(dir);
   1409f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   140a3:	83 ec 0c             	sub    $0xc,%esp
   140a6:	50                   	push   %eax
   140a7:	e8 b3 a5 ff ff       	call   e65f <iput>
   140ac:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   140af:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   140b4:	e9 c5 02 00 00       	jmp    1437e <sys_rmdir+0x389>
	}
	if (!(inode = iget(dir->i_dev, de->inode))) {
   140b9:	8b 44 24 08          	mov    0x8(%esp),%eax
   140bd:	0f b7 00             	movzwl (%eax),%eax
   140c0:	0f b7 d0             	movzwl %ax,%edx
   140c3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   140c7:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   140cb:	0f b7 c0             	movzwl %ax,%eax
   140ce:	83 ec 08             	sub    $0x8,%esp
   140d1:	52                   	push   %edx
   140d2:	50                   	push   %eax
   140d3:	e8 0a a9 ff ff       	call   e9e2 <iget>
   140d8:	83 c4 10             	add    $0x10,%esp
   140db:	89 44 24 18          	mov    %eax,0x18(%esp)
   140df:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   140e4:	75 29                	jne    1410f <sys_rmdir+0x11a>
		iput(dir);
   140e6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   140ea:	83 ec 0c             	sub    $0xc,%esp
   140ed:	50                   	push   %eax
   140ee:	e8 6c a5 ff ff       	call   e65f <iput>
   140f3:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   140f6:	83 ec 0c             	sub    $0xc,%esp
   140f9:	ff 74 24 28          	pushl  0x28(%esp)
   140fd:	e8 ee b4 ff ff       	call   f5f0 <brelse>
   14102:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14105:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1410a:	e9 6f 02 00 00       	jmp    1437e <sys_rmdir+0x389>
	// 此时我们已有包含要被删除目录项的目录i节点dir、要被删除目录项的i节点inode和要被删除目录项指针de。下面我们通过对这3
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点和该要删除目录的i节点，然后释放高速缓冲区，
	// 返回出错码。
	if ((dir->i_mode & S_ISVTX) && current->euid &&
   1410f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14113:	0f b7 00             	movzwl (%eax),%eax
   14116:	0f b7 c0             	movzwl %ax,%eax
   14119:	25 00 02 00 00       	and    $0x200,%eax
   1411e:	85 c0                	test   %eax,%eax
   14120:	74 62                	je     14184 <sys_rmdir+0x18f>
   14122:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   14127:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   1412e:	66 85 c0             	test   %ax,%ax
   14131:	74 51                	je     14184 <sys_rmdir+0x18f>
	    inode->i_uid != current->euid) {
   14133:	8b 44 24 18          	mov    0x18(%esp),%eax
   14137:	0f b7 50 02          	movzwl 0x2(%eax),%edx
   1413b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   14140:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
	if ((dir->i_mode & S_ISVTX) && current->euid &&
   14147:	66 39 c2             	cmp    %ax,%dx
   1414a:	74 38                	je     14184 <sys_rmdir+0x18f>
		iput(dir);
   1414c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14150:	83 ec 0c             	sub    $0xc,%esp
   14153:	50                   	push   %eax
   14154:	e8 06 a5 ff ff       	call   e65f <iput>
   14159:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   1415c:	83 ec 0c             	sub    $0xc,%esp
   1415f:	ff 74 24 24          	pushl  0x24(%esp)
   14163:	e8 f7 a4 ff ff       	call   e65f <iput>
   14168:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   1416b:	83 ec 0c             	sub    $0xc,%esp
   1416e:	ff 74 24 28          	pushl  0x28(%esp)
   14172:	e8 79 b4 ff ff       	call   f5f0 <brelse>
   14177:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1417a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1417f:	e9 fa 01 00 00       	jmp    1437e <sys_rmdir+0x389>
	}
	// 如果要被删除的目录项i节点的设备号不等于包含该目录项的目录的设备号，或者该被删除目录的引用连接计数大于1（表示有符号连
	// 接等），则不能删除该目录。于是释放包含要删除目录名的目录i节点和该要删除目录的i节点，释放高速缓冲块，返回出错码。
	if (inode->i_dev != dir->i_dev || inode->i_count > 1) {
   14184:	8b 44 24 18          	mov    0x18(%esp),%eax
   14188:	0f b7 50 30          	movzwl 0x30(%eax),%edx
   1418c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14190:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14194:	66 39 c2             	cmp    %ax,%dx
   14197:	75 0e                	jne    141a7 <sys_rmdir+0x1b2>
   14199:	8b 44 24 18          	mov    0x18(%esp),%eax
   1419d:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   141a1:	66 83 f8 01          	cmp    $0x1,%ax
   141a5:	76 38                	jbe    141df <sys_rmdir+0x1ea>
		iput(dir);
   141a7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   141ab:	83 ec 0c             	sub    $0xc,%esp
   141ae:	50                   	push   %eax
   141af:	e8 ab a4 ff ff       	call   e65f <iput>
   141b4:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   141b7:	83 ec 0c             	sub    $0xc,%esp
   141ba:	ff 74 24 24          	pushl  0x24(%esp)
   141be:	e8 9c a4 ff ff       	call   e65f <iput>
   141c3:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   141c6:	83 ec 0c             	sub    $0xc,%esp
   141c9:	ff 74 24 28          	pushl  0x28(%esp)
   141cd:	e8 1e b4 ff ff       	call   f5f0 <brelse>
   141d2:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   141d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   141da:	e9 9f 01 00 00       	jmp    1437e <sys_rmdir+0x389>
	}
	// 如果要被删除目录的目录项i节点就等于包含该需删除目录的目录i节点，则表示试图删除“.”目录，这是不允许的。于是放回包含要删
	// 除目录名的目录i节点和要删除目录的i节点，释放高速缓冲块，返回出错码。
	if (inode == dir) {						/* we may not delete ".", but "../dir" is ok */
   141df:	8b 44 24 0c          	mov    0xc(%esp),%eax
   141e3:	39 44 24 18          	cmp    %eax,0x18(%esp)
   141e7:	75 38                	jne    14221 <sys_rmdir+0x22c>
		iput(inode);
   141e9:	83 ec 0c             	sub    $0xc,%esp
   141ec:	ff 74 24 24          	pushl  0x24(%esp)
   141f0:	e8 6a a4 ff ff       	call   e65f <iput>
   141f5:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   141f8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   141fc:	83 ec 0c             	sub    $0xc,%esp
   141ff:	50                   	push   %eax
   14200:	e8 5a a4 ff ff       	call   e65f <iput>
   14205:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14208:	83 ec 0c             	sub    $0xc,%esp
   1420b:	ff 74 24 28          	pushl  0x28(%esp)
   1420f:	e8 dc b3 ff ff       	call   f5f0 <brelse>
   14214:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14217:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1421c:	e9 5d 01 00 00       	jmp    1437e <sys_rmdir+0x389>
	}
	// 若要被删除目录i节点的属性表明这不是一个目录，则本删除操作的前提完全不存在。于是放回包含删除目录名的目录i节点和该要删除
	// 目录的i节点，释放高速缓冲块，返回出错码。
	if (!S_ISDIR(inode->i_mode)) {
   14221:	8b 44 24 18          	mov    0x18(%esp),%eax
   14225:	0f b7 00             	movzwl (%eax),%eax
   14228:	0f b7 c0             	movzwl %ax,%eax
   1422b:	25 00 f0 00 00       	and    $0xf000,%eax
   14230:	3d 00 40 00 00       	cmp    $0x4000,%eax
   14235:	74 38                	je     1426f <sys_rmdir+0x27a>
		iput(inode);
   14237:	83 ec 0c             	sub    $0xc,%esp
   1423a:	ff 74 24 24          	pushl  0x24(%esp)
   1423e:	e8 1c a4 ff ff       	call   e65f <iput>
   14243:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14246:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1424a:	83 ec 0c             	sub    $0xc,%esp
   1424d:	50                   	push   %eax
   1424e:	e8 0c a4 ff ff       	call   e65f <iput>
   14253:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14256:	83 ec 0c             	sub    $0xc,%esp
   14259:	ff 74 24 28          	pushl  0x28(%esp)
   1425d:	e8 8e b3 ff ff       	call   f5f0 <brelse>
   14262:	83 c4 10             	add    $0x10,%esp
		return -ENOTDIR;
   14265:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
   1426a:	e9 0f 01 00 00       	jmp    1437e <sys_rmdir+0x389>
	}
	// 若该需要被删除的目录不空，则也不能删除。于是放回包含要删除目录名的目录i节点和该要删除目录的i节点，释放高速缓冲块，返回
	// 出错码。
	if (!empty_dir(inode)) {
   1426f:	83 ec 0c             	sub    $0xc,%esp
   14272:	ff 74 24 24          	pushl  0x24(%esp)
   14276:	e8 89 fb ff ff       	call   13e04 <empty_dir>
   1427b:	83 c4 10             	add    $0x10,%esp
   1427e:	85 c0                	test   %eax,%eax
   14280:	75 38                	jne    142ba <sys_rmdir+0x2c5>
		iput(inode);
   14282:	83 ec 0c             	sub    $0xc,%esp
   14285:	ff 74 24 24          	pushl  0x24(%esp)
   14289:	e8 d1 a3 ff ff       	call   e65f <iput>
   1428e:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14291:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14295:	83 ec 0c             	sub    $0xc,%esp
   14298:	50                   	push   %eax
   14299:	e8 c1 a3 ff ff       	call   e65f <iput>
   1429e:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   142a1:	83 ec 0c             	sub    $0xc,%esp
   142a4:	ff 74 24 28          	pushl  0x28(%esp)
   142a8:	e8 43 b3 ff ff       	call   f5f0 <brelse>
   142ad:	83 c4 10             	add    $0x10,%esp
		return -ENOTEMPTY;
   142b0:	b8 d9 ff ff ff       	mov    $0xffffffd9,%eax
   142b5:	e9 c4 00 00 00       	jmp    1437e <sys_rmdir+0x389>
	}
	// 对于一个空目录，其目录项链接数应该为2（链接到上层目录和本目录）。若该需被删除目录的i节点的连接数不等于2,则显示警告信息，
	// 但删除操作仍然执行。于是置该需删除目录的目录项的i节点号字段为0,表示该目录项不再使用，并置含有该目录项的调整缓冲块已修改
	// 标志，并释放该缓冲块。然后再置被删除目录i节点的链接数为0（表示空闲），并置i节点已修改标志。
	if (inode->i_nlinks != 2)
   142ba:	8b 44 24 18          	mov    0x18(%esp),%eax
   142be:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   142c2:	3c 02                	cmp    $0x2,%al
   142c4:	74 1c                	je     142e2 <sys_rmdir+0x2ed>
		printk("empty directory has nlink!=2 (%d)", inode->i_nlinks);
   142c6:	8b 44 24 18          	mov    0x18(%esp),%eax
   142ca:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   142ce:	0f b6 c0             	movzbl %al,%eax
   142d1:	83 ec 08             	sub    $0x8,%esp
   142d4:	50                   	push   %eax
   142d5:	68 14 42 02 00       	push   $0x24214
   142da:	e8 62 49 ff ff       	call   8c41 <printk>
   142df:	83 c4 10             	add    $0x10,%esp
	de->inode = 0;
   142e2:	8b 44 24 08          	mov    0x8(%esp),%eax
   142e6:	66 c7 00 00 00       	movw   $0x0,(%eax)
	bh->b_dirt = 1;
   142eb:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   142ef:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   142f3:	83 ec 0c             	sub    $0xc,%esp
   142f6:	ff 74 24 28          	pushl  0x28(%esp)
   142fa:	e8 f1 b2 ff ff       	call   f5f0 <brelse>
   142ff:	83 c4 10             	add    $0x10,%esp
	inode->i_nlinks = 0;
   14302:	8b 44 24 18          	mov    0x18(%esp),%eax
   14306:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	inode->i_dirt = 1;
   1430a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1430e:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 再将包含被删除目录名的目录的i节点链接计数减1,修改其改变时间和修改时间为当前时间，并置该节点已修改标志。最后放回包含要删除
	// 目录名的目录i节点和该要删除目录的i节点，返回0（删除操作成功）。
	dir->i_nlinks--;
   14312:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14316:	0f b6 50 0d          	movzbl 0xd(%eax),%edx
   1431a:	83 ea 01             	sub    $0x1,%edx
   1431d:	88 50 0d             	mov    %dl,0xd(%eax)
	dir->i_ctime = dir->i_mtime = CURRENT_TIME;
   14320:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   14325:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   1432b:	01 d0                	add    %edx,%eax
   1432d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   14332:	f7 e2                	mul    %edx
   14334:	89 d1                	mov    %edx,%ecx
   14336:	c1 e9 05             	shr    $0x5,%ecx
   14339:	8b 15 04 fb 02 00    	mov    0x2fb04,%edx
   1433f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14343:	01 ca                	add    %ecx,%edx
   14345:	89 50 08             	mov    %edx,0x8(%eax)
   14348:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1434c:	8b 40 08             	mov    0x8(%eax),%eax
   1434f:	89 42 2c             	mov    %eax,0x2c(%edx)
	dir->i_dirt = 1;
   14352:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14356:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(dir);
   1435a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1435e:	83 ec 0c             	sub    $0xc,%esp
   14361:	50                   	push   %eax
   14362:	e8 f8 a2 ff ff       	call   e65f <iput>
   14367:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   1436a:	83 ec 0c             	sub    $0xc,%esp
   1436d:	ff 74 24 24          	pushl  0x24(%esp)
   14371:	e8 e9 a2 ff ff       	call   e65f <iput>
   14376:	83 c4 10             	add    $0x10,%esp
	return 0;
   14379:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1437e:	83 c4 2c             	add    $0x2c,%esp
   14381:	c3                   	ret    

00014382 <sys_unlink>:
// 删除（释放）文件名对应的目录项。
// 从文件系统删除一个名字。如果是文件的最后一个链接，并且没有进程正打开该文件，则该文件也将被删除，并释放所占用的设备空间。
// 参数：name - 文件名（路径名）。
// 返回：成功则返回0,否则返回出错号。
int sys_unlink(const char * name)
{
   14382:	83 ec 2c             	sub    $0x2c,%esp
	struct dir_entry * de;

	// 首先检查参数的有效性并取路径名中顶层目录的i节点。如果找不到对应路径名中顶层目录的i节点，则返回出错码。如果最顶端
	// 文件名长度为0,则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。如果在该目录中没有写的权限，
	// 则放回该目录i节点，返回访问许可出错码退出。如果不是超级用户，则返回访问许可出错码。
	if (!(dir = dir_namei(name, &namelen, &basename, NULL)))
   14385:	6a 00                	push   $0x0
   14387:	8d 44 24 18          	lea    0x18(%esp),%eax
   1438b:	50                   	push   %eax
   1438c:	8d 44 24 18          	lea    0x18(%esp),%eax
   14390:	50                   	push   %eax
   14391:	ff 74 24 3c          	pushl  0x3c(%esp)
   14395:	e8 0d ef ff ff       	call   132a7 <dir_namei>
   1439a:	83 c4 10             	add    $0x10,%esp
   1439d:	89 44 24 0c          	mov    %eax,0xc(%esp)
   143a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   143a5:	85 c0                	test   %eax,%eax
   143a7:	75 0a                	jne    143b3 <sys_unlink+0x31>
		return -ENOENT;
   143a9:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   143ae:	e9 8d 02 00 00       	jmp    14640 <sys_unlink+0x2be>
	if (!namelen) {
   143b3:	8b 44 24 10          	mov    0x10(%esp),%eax
   143b7:	85 c0                	test   %eax,%eax
   143b9:	75 1a                	jne    143d5 <sys_unlink+0x53>
		iput(dir);
   143bb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   143bf:	83 ec 0c             	sub    $0xc,%esp
   143c2:	50                   	push   %eax
   143c3:	e8 97 a2 ff ff       	call   e65f <iput>
   143c8:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   143cb:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   143d0:	e9 6b 02 00 00       	jmp    14640 <sys_unlink+0x2be>
	}
	if (!permission(dir, MAY_WRITE)) {
   143d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   143d9:	83 ec 08             	sub    $0x8,%esp
   143dc:	6a 02                	push   $0x2
   143de:	50                   	push   %eax
   143df:	e8 12 e6 ff ff       	call   129f6 <permission>
   143e4:	83 c4 10             	add    $0x10,%esp
   143e7:	85 c0                	test   %eax,%eax
   143e9:	75 1a                	jne    14405 <sys_unlink+0x83>
		iput(dir);
   143eb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   143ef:	83 ec 0c             	sub    $0xc,%esp
   143f2:	50                   	push   %eax
   143f3:	e8 67 a2 ff ff       	call   e65f <iput>
   143f8:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   143fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14400:	e9 3b 02 00 00       	jmp    14640 <sys_unlink+0x2be>
	}
	// 然后根据指定目录的i节点和目录名利用函数find_entry()寻找对应目录项，并返回包含该目录项的缓冲块指针bh、包含该目录
	// 项的目录的i节点指针dir和该目录项指针de。再根据该目录项de中的i节点号利用iget()函数得到对应的i节点inode。如果对应
	// 路径名上最后目录的名的目录项不存在，则释放包含该目录项的高速缓冲区，放回目录的i节点，返回文件不存在出错码，并退出。
	// 如果取目录项的i节点出错，则放回目录的i节点，并释放含有目录项的高速缓冲区，返回出错号。
	bh = find_entry(&dir, basename, namelen, &de);
   14405:	8b 54 24 10          	mov    0x10(%esp),%edx
   14409:	8b 44 24 14          	mov    0x14(%esp),%eax
   1440d:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   14411:	51                   	push   %ecx
   14412:	52                   	push   %edx
   14413:	50                   	push   %eax
   14414:	8d 44 24 18          	lea    0x18(%esp),%eax
   14418:	50                   	push   %eax
   14419:	e8 0c e7 ff ff       	call   12b2a <find_entry>
   1441e:	83 c4 10             	add    $0x10,%esp
   14421:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   14425:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1442a:	75 1a                	jne    14446 <sys_unlink+0xc4>
		iput(dir);
   1442c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14430:	83 ec 0c             	sub    $0xc,%esp
   14433:	50                   	push   %eax
   14434:	e8 26 a2 ff ff       	call   e65f <iput>
   14439:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   1443c:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14441:	e9 fa 01 00 00       	jmp    14640 <sys_unlink+0x2be>
	}
	if (!(inode = iget(dir->i_dev, de->inode))) {
   14446:	8b 44 24 08          	mov    0x8(%esp),%eax
   1444a:	0f b7 00             	movzwl (%eax),%eax
   1444d:	0f b7 d0             	movzwl %ax,%edx
   14450:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14454:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14458:	0f b7 c0             	movzwl %ax,%eax
   1445b:	83 ec 08             	sub    $0x8,%esp
   1445e:	52                   	push   %edx
   1445f:	50                   	push   %eax
   14460:	e8 7d a5 ff ff       	call   e9e2 <iget>
   14465:	83 c4 10             	add    $0x10,%esp
   14468:	89 44 24 18          	mov    %eax,0x18(%esp)
   1446c:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14471:	75 29                	jne    1449c <sys_unlink+0x11a>
		iput(dir);
   14473:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14477:	83 ec 0c             	sub    $0xc,%esp
   1447a:	50                   	push   %eax
   1447b:	e8 df a1 ff ff       	call   e65f <iput>
   14480:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14483:	83 ec 0c             	sub    $0xc,%esp
   14486:	ff 74 24 28          	pushl  0x28(%esp)
   1448a:	e8 61 b1 ff ff       	call   f5f0 <brelse>
   1448f:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   14492:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14497:	e9 a4 01 00 00       	jmp    14640 <sys_unlink+0x2be>
	// 此时我们已有包含要被删除目录项的目录i节点dir、要被删除目录项的i节点inode和要被删除目录项指针de。下面我们通过对这3
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，并且进程的euid也不等于目录i节点的用户id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点
	// 和该要删除目录的i节点，然后释放高速缓冲区，返回出错码。
	if ((dir->i_mode & S_ISVTX) && !suser() &&
   1449c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   144a0:	0f b7 00             	movzwl (%eax),%eax
   144a3:	0f b7 c0             	movzwl %ax,%eax
   144a6:	25 00 02 00 00       	and    $0x200,%eax
   144ab:	85 c0                	test   %eax,%eax
   144ad:	74 7b                	je     1452a <sys_unlink+0x1a8>
   144af:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   144b4:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   144bb:	66 85 c0             	test   %ax,%ax
   144be:	74 6a                	je     1452a <sys_unlink+0x1a8>
	    current->euid != inode->i_uid &&
   144c0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   144c5:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   144cc:	8b 44 24 18          	mov    0x18(%esp),%eax
   144d0:	0f b7 40 02          	movzwl 0x2(%eax),%eax
	if ((dir->i_mode & S_ISVTX) && !suser() &&
   144d4:	66 39 c2             	cmp    %ax,%dx
   144d7:	74 51                	je     1452a <sys_unlink+0x1a8>
	    current->euid != dir->i_uid) {
   144d9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   144de:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   144e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   144e9:	0f b7 40 02          	movzwl 0x2(%eax),%eax
	    current->euid != inode->i_uid &&
   144ed:	66 39 c2             	cmp    %ax,%dx
   144f0:	74 38                	je     1452a <sys_unlink+0x1a8>
		iput(dir);
   144f2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   144f6:	83 ec 0c             	sub    $0xc,%esp
   144f9:	50                   	push   %eax
   144fa:	e8 60 a1 ff ff       	call   e65f <iput>
   144ff:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   14502:	83 ec 0c             	sub    $0xc,%esp
   14505:	ff 74 24 24          	pushl  0x24(%esp)
   14509:	e8 51 a1 ff ff       	call   e65f <iput>
   1450e:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14511:	83 ec 0c             	sub    $0xc,%esp
   14514:	ff 74 24 28          	pushl  0x28(%esp)
   14518:	e8 d3 b0 ff ff       	call   f5f0 <brelse>
   1451d:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14520:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14525:	e9 16 01 00 00       	jmp    14640 <sys_unlink+0x2be>
	}
	// 如果该指定文件名是一个目录，则也不能删除。放回该目录i节点和该文件名目录项的i节点，释放包含该目录项的缓冲块，返回出错号。
	if (S_ISDIR(inode->i_mode)) {
   1452a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1452e:	0f b7 00             	movzwl (%eax),%eax
   14531:	0f b7 c0             	movzwl %ax,%eax
   14534:	25 00 f0 00 00       	and    $0xf000,%eax
   14539:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1453e:	75 38                	jne    14578 <sys_unlink+0x1f6>
		iput(inode);
   14540:	83 ec 0c             	sub    $0xc,%esp
   14543:	ff 74 24 24          	pushl  0x24(%esp)
   14547:	e8 13 a1 ff ff       	call   e65f <iput>
   1454c:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   1454f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14553:	83 ec 0c             	sub    $0xc,%esp
   14556:	50                   	push   %eax
   14557:	e8 03 a1 ff ff       	call   e65f <iput>
   1455c:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   1455f:	83 ec 0c             	sub    $0xc,%esp
   14562:	ff 74 24 28          	pushl  0x28(%esp)
   14566:	e8 85 b0 ff ff       	call   f5f0 <brelse>
   1456b:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1456e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14573:	e9 c8 00 00 00       	jmp    14640 <sys_unlink+0x2be>
	}
	// 如果该i节点的链接计数值已经为0,则显示警告信息，并修正其为1。
	if (!inode->i_nlinks) {
   14578:	8b 44 24 18          	mov    0x18(%esp),%eax
   1457c:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14580:	84 c0                	test   %al,%al
   14582:	75 39                	jne    145bd <sys_unlink+0x23b>
		printk("Deleting nonexistent file (%04x:%d), %d\n",
			inode->i_dev, inode->i_num, inode->i_nlinks);
   14584:	8b 44 24 18          	mov    0x18(%esp),%eax
   14588:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
		printk("Deleting nonexistent file (%04x:%d), %d\n",
   1458c:	0f b6 c8             	movzbl %al,%ecx
			inode->i_dev, inode->i_num, inode->i_nlinks);
   1458f:	8b 44 24 18          	mov    0x18(%esp),%eax
   14593:	0f b7 40 32          	movzwl 0x32(%eax),%eax
		printk("Deleting nonexistent file (%04x:%d), %d\n",
   14597:	0f b7 d0             	movzwl %ax,%edx
			inode->i_dev, inode->i_num, inode->i_nlinks);
   1459a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1459e:	0f b7 40 30          	movzwl 0x30(%eax),%eax
		printk("Deleting nonexistent file (%04x:%d), %d\n",
   145a2:	0f b7 c0             	movzwl %ax,%eax
   145a5:	51                   	push   %ecx
   145a6:	52                   	push   %edx
   145a7:	50                   	push   %eax
   145a8:	68 38 42 02 00       	push   $0x24238
   145ad:	e8 8f 46 ff ff       	call   8c41 <printk>
   145b2:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks = 1;
   145b5:	8b 44 24 18          	mov    0x18(%esp),%eax
   145b9:	c6 40 0d 01          	movb   $0x1,0xd(%eax)
	}
	// 现在我们可以删除文件名对应的目录项了。于是将该文件名目录项中的i节点号字段置为0,表示释放该目录项，并设置包含该目录项的缓
	// 冲块已修改标志，释放该高速缓冲块。
	de->inode = 0;
   145bd:	8b 44 24 08          	mov    0x8(%esp),%eax
   145c1:	66 c7 00 00 00       	movw   $0x0,(%eax)
	bh->b_dirt = 1;
   145c6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   145ca:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   145ce:	83 ec 0c             	sub    $0xc,%esp
   145d1:	ff 74 24 28          	pushl  0x28(%esp)
   145d5:	e8 16 b0 ff ff       	call   f5f0 <brelse>
   145da:	83 c4 10             	add    $0x10,%esp
	// 然后把文件名对应i节点的链接数减1,置已修改标志，更新改变时间为当前时间。最后放回该i节点和目录的i节点，返回0（成功）。如果
	// 是文件的最后一个链接，即i节点链接数减1后等于0,并且此时没有进程正打开该文件，那么在调用iput()放回i节点时，该文件也将被删除
	// 并释放所占用的设备空间。参见fs/inode.c。
	inode->i_nlinks--;
   145dd:	8b 44 24 18          	mov    0x18(%esp),%eax
   145e1:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   145e5:	8d 50 ff             	lea    -0x1(%eax),%edx
   145e8:	8b 44 24 18          	mov    0x18(%esp),%eax
   145ec:	88 50 0d             	mov    %dl,0xd(%eax)
	inode->i_dirt = 1;
   145ef:	8b 44 24 18          	mov    0x18(%esp),%eax
   145f3:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	inode->i_ctime = CURRENT_TIME;
   145f7:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   145fc:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   14602:	01 d0                	add    %edx,%eax
   14604:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   14609:	f7 e2                	mul    %edx
   1460b:	c1 ea 05             	shr    $0x5,%edx
   1460e:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   14613:	01 c2                	add    %eax,%edx
   14615:	8b 44 24 18          	mov    0x18(%esp),%eax
   14619:	89 50 2c             	mov    %edx,0x2c(%eax)
	iput(inode);
   1461c:	83 ec 0c             	sub    $0xc,%esp
   1461f:	ff 74 24 24          	pushl  0x24(%esp)
   14623:	e8 37 a0 ff ff       	call   e65f <iput>
   14628:	83 c4 10             	add    $0x10,%esp
	iput(dir);
   1462b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1462f:	83 ec 0c             	sub    $0xc,%esp
   14632:	50                   	push   %eax
   14633:	e8 27 a0 ff ff       	call   e65f <iput>
   14638:	83 c4 10             	add    $0x10,%esp
	return 0;
   1463b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14640:	83 c4 2c             	add    $0x2c,%esp
   14643:	c3                   	ret    

00014644 <sys_symlink>:
// 建立符号链接。
// 为一个已存在文件创建一个符号链接（也称为软连接 - hard link）。
// 参数：oldname - 原路径名；newname - 新的路径名。
// 返回：若成功则返回0，否则返回出错号。
int sys_symlink(const char * oldname, const char * newname)
{
   14644:	53                   	push   %ebx
   14645:	83 ec 38             	sub    $0x38,%esp
	char c;

	// 首先查找新路径名的最顶层目录的i节点dir，并返回最后的文件名及其长度。如果目录的i节点没有找到，则返回出错号。如果新路径名
	// 中不包括文件名，则放回新路径名目录的i节点，返回出错号。另外，如果用户没有在新目录中写的权限，则也不能建立连接，于是放回
	// 新路径名目录的i节点，返回出错号。
	dir = dir_namei(newname, &namelen, &basename, NULL);
   14648:	6a 00                	push   $0x0
   1464a:	8d 44 24 14          	lea    0x14(%esp),%eax
   1464e:	50                   	push   %eax
   1464f:	8d 44 24 14          	lea    0x14(%esp),%eax
   14653:	50                   	push   %eax
   14654:	ff 74 24 50          	pushl  0x50(%esp)
   14658:	e8 4a ec ff ff       	call   132a7 <dir_namei>
   1465d:	83 c4 10             	add    $0x10,%esp
   14660:	89 44 24 14          	mov    %eax,0x14(%esp)
	if (!dir)
   14664:	8b 44 24 14          	mov    0x14(%esp),%eax
   14668:	85 c0                	test   %eax,%eax
   1466a:	75 0a                	jne    14676 <sys_symlink+0x32>
		return -EACCES;
   1466c:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14671:	e9 33 03 00 00       	jmp    149a9 <sys_symlink+0x365>
	if (!namelen) {
   14676:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1467a:	85 c0                	test   %eax,%eax
   1467c:	75 1a                	jne    14698 <sys_symlink+0x54>
		iput(dir);
   1467e:	8b 44 24 14          	mov    0x14(%esp),%eax
   14682:	83 ec 0c             	sub    $0xc,%esp
   14685:	50                   	push   %eax
   14686:	e8 d4 9f ff ff       	call   e65f <iput>
   1468b:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1468e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14693:	e9 11 03 00 00       	jmp    149a9 <sys_symlink+0x365>
	}
	if (!permission(dir, MAY_WRITE)) {
   14698:	8b 44 24 14          	mov    0x14(%esp),%eax
   1469c:	83 ec 08             	sub    $0x8,%esp
   1469f:	6a 02                	push   $0x2
   146a1:	50                   	push   %eax
   146a2:	e8 4f e3 ff ff       	call   129f6 <permission>
   146a7:	83 c4 10             	add    $0x10,%esp
   146aa:	85 c0                	test   %eax,%eax
   146ac:	75 1a                	jne    146c8 <sys_symlink+0x84>
		iput(dir);
   146ae:	8b 44 24 14          	mov    0x14(%esp),%eax
   146b2:	83 ec 0c             	sub    $0xc,%esp
   146b5:	50                   	push   %eax
   146b6:	e8 a4 9f ff ff       	call   e65f <iput>
   146bb:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
   146be:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   146c3:	e9 e1 02 00 00       	jmp    149a9 <sys_symlink+0x365>
	}
	// 现在我们在目录指定设备上申请一个新的i节点，并设置该i节点模式为符号链接类型以及进程规定的模式屏蔽码。并且设置该i节点已修
	// 改标志。
	if (!(inode = new_inode(dir->i_dev))) {
   146c8:	8b 44 24 14          	mov    0x14(%esp),%eax
   146cc:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   146d0:	0f b7 c0             	movzwl %ax,%eax
   146d3:	83 ec 0c             	sub    $0xc,%esp
   146d6:	50                   	push   %eax
   146d7:	e8 2c 0a 00 00       	call   15108 <new_inode>
   146dc:	83 c4 10             	add    $0x10,%esp
   146df:	89 44 24 28          	mov    %eax,0x28(%esp)
   146e3:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   146e8:	75 1a                	jne    14704 <sys_symlink+0xc0>
		iput(dir);
   146ea:	8b 44 24 14          	mov    0x14(%esp),%eax
   146ee:	83 ec 0c             	sub    $0xc,%esp
   146f1:	50                   	push   %eax
   146f2:	e8 68 9f ff ff       	call   e65f <iput>
   146f7:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   146fa:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   146ff:	e9 a5 02 00 00       	jmp    149a9 <sys_symlink+0x365>
	}
	inode->i_mode = S_IFLNK | (0777 & ~current->umask);
   14704:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   14709:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
   14710:	f7 d0                	not    %eax
   14712:	66 25 ff 01          	and    $0x1ff,%ax
   14716:	66 0d 00 a0          	or     $0xa000,%ax
   1471a:	89 c2                	mov    %eax,%edx
   1471c:	8b 44 24 28          	mov    0x28(%esp),%eax
   14720:	66 89 10             	mov    %dx,(%eax)
	inode->i_dirt = 1;
   14723:	8b 44 24 28          	mov    0x28(%esp),%eax
   14727:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 为了保存符号链接路径名字符串信息，我们需要为该i节点申请一个磁盘块，并让i节点的第1个直接块号i_zone[0]等于得到的逻辑块号。
	// 然后置i节点已修改标志。如果申请失败则放回对应目录的i节点；复位新申请的i节点链接计数；放回该新的i节点，返回没有空间出错码
	// 退出。
	if (!(inode->i_zone[0] = new_block(inode->i_dev))) {
   1472b:	8b 44 24 28          	mov    0x28(%esp),%eax
   1472f:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14733:	0f b7 c0             	movzwl %ax,%eax
   14736:	83 ec 0c             	sub    $0xc,%esp
   14739:	50                   	push   %eax
   1473a:	e8 94 06 00 00       	call   14dd3 <new_block>
   1473f:	83 c4 10             	add    $0x10,%esp
   14742:	89 c2                	mov    %eax,%edx
   14744:	8b 44 24 28          	mov    0x28(%esp),%eax
   14748:	66 89 50 0e          	mov    %dx,0xe(%eax)
   1474c:	8b 44 24 28          	mov    0x28(%esp),%eax
   14750:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   14754:	66 85 c0             	test   %ax,%ax
   14757:	75 3b                	jne    14794 <sys_symlink+0x150>
		iput(dir);
   14759:	8b 44 24 14          	mov    0x14(%esp),%eax
   1475d:	83 ec 0c             	sub    $0xc,%esp
   14760:	50                   	push   %eax
   14761:	e8 f9 9e ff ff       	call   e65f <iput>
   14766:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   14769:	8b 44 24 28          	mov    0x28(%esp),%eax
   1476d:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14771:	8d 50 ff             	lea    -0x1(%eax),%edx
   14774:	8b 44 24 28          	mov    0x28(%esp),%eax
   14778:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   1477b:	83 ec 0c             	sub    $0xc,%esp
   1477e:	ff 74 24 34          	pushl  0x34(%esp)
   14782:	e8 d8 9e ff ff       	call   e65f <iput>
   14787:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   1478a:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   1478f:	e9 15 02 00 00       	jmp    149a9 <sys_symlink+0x365>
	}
	inode->i_dirt = 1;
   14794:	8b 44 24 28          	mov    0x28(%esp),%eax
   14798:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 然后从设备上读取新申请的磁盘块（目的是把对应块放到高速缓冲区中）。若出错，则放回对应目录的i节点；复位新申请的i节点链接计数；
	// 放回该新的i节点，返回没有空间出错码退出。
	if (!(name_block = bread(inode->i_dev, inode->i_zone[0]))) {
   1479c:	8b 44 24 28          	mov    0x28(%esp),%eax
   147a0:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   147a4:	0f b7 d0             	movzwl %ax,%edx
   147a7:	8b 44 24 28          	mov    0x28(%esp),%eax
   147ab:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   147af:	0f b7 c0             	movzwl %ax,%eax
   147b2:	83 ec 08             	sub    $0x8,%esp
   147b5:	52                   	push   %edx
   147b6:	50                   	push   %eax
   147b7:	e8 8a ae ff ff       	call   f646 <bread>
   147bc:	83 c4 10             	add    $0x10,%esp
   147bf:	89 44 24 24          	mov    %eax,0x24(%esp)
   147c3:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   147c8:	75 3b                	jne    14805 <sys_symlink+0x1c1>
		iput(dir);
   147ca:	8b 44 24 14          	mov    0x14(%esp),%eax
   147ce:	83 ec 0c             	sub    $0xc,%esp
   147d1:	50                   	push   %eax
   147d2:	e8 88 9e ff ff       	call   e65f <iput>
   147d7:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   147da:	8b 44 24 28          	mov    0x28(%esp),%eax
   147de:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   147e2:	8d 50 ff             	lea    -0x1(%eax),%edx
   147e5:	8b 44 24 28          	mov    0x28(%esp),%eax
   147e9:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   147ec:	83 ec 0c             	sub    $0xc,%esp
   147ef:	ff 74 24 34          	pushl  0x34(%esp)
   147f3:	e8 67 9e ff ff       	call   e65f <iput>
   147f8:	83 c4 10             	add    $0x10,%esp
		return -ERROR;
   147fb:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
   14800:	e9 a4 01 00 00       	jmp    149a9 <sys_symlink+0x365>
	}
	// 现在我们可以把符号链接名字字符串放入这个盘块中了。盘块长度为1024字节，因此默认符号链接名长度最大也只能是1024字节。我们把用
	// 户空间中的符号链接名字符串复制到盘块所在的缓冲块中，并置缓冲块已修改标志。为防止用户提供的字符串没有以NULL结尾，我们在缓冲块
	// 数据区最后一个字节处放上一个NULL。然后释放该缓冲块，并设置i节点对应文件中数据长度等于符号链接名字符串长度，并置i节点已修改
	// 标志。
	i = 0;
   14805:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   1480c:	00 
	while (i < 1023 && (c = get_fs_byte(oldname++)))
   1480d:	eb 1b                	jmp    1482a <sys_symlink+0x1e6>
		name_block->b_data[i++] = c;
   1480f:	8b 44 24 24          	mov    0x24(%esp),%eax
   14813:	8b 08                	mov    (%eax),%ecx
   14815:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   14819:	8d 50 01             	lea    0x1(%eax),%edx
   1481c:	89 54 24 2c          	mov    %edx,0x2c(%esp)
   14820:	8d 14 01             	lea    (%ecx,%eax,1),%edx
   14823:	0f b6 44 24 23       	movzbl 0x23(%esp),%eax
   14828:	88 02                	mov    %al,(%edx)
	while (i < 1023 && (c = get_fs_byte(oldname++)))
   1482a:	81 7c 24 2c fe 03 00 	cmpl   $0x3fe,0x2c(%esp)
   14831:	00 
   14832:	7f 22                	jg     14856 <sys_symlink+0x212>
   14834:	8b 44 24 40          	mov    0x40(%esp),%eax
   14838:	8d 50 01             	lea    0x1(%eax),%edx
   1483b:	89 54 24 40          	mov    %edx,0x40(%esp)
   1483f:	83 ec 0c             	sub    $0xc,%esp
   14842:	50                   	push   %eax
   14843:	e8 5d e1 ff ff       	call   129a5 <get_fs_byte>
   14848:	83 c4 10             	add    $0x10,%esp
   1484b:	88 44 24 23          	mov    %al,0x23(%esp)
   1484f:	80 7c 24 23 00       	cmpb   $0x0,0x23(%esp)
   14854:	75 b9                	jne    1480f <sys_symlink+0x1cb>
	name_block->b_data[i] = 0;
   14856:	8b 44 24 24          	mov    0x24(%esp),%eax
   1485a:	8b 10                	mov    (%eax),%edx
   1485c:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   14860:	01 d0                	add    %edx,%eax
   14862:	c6 00 00             	movb   $0x0,(%eax)
	name_block->b_dirt = 1;
   14865:	8b 44 24 24          	mov    0x24(%esp),%eax
   14869:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(name_block);
   1486d:	83 ec 0c             	sub    $0xc,%esp
   14870:	ff 74 24 30          	pushl  0x30(%esp)
   14874:	e8 77 ad ff ff       	call   f5f0 <brelse>
   14879:	83 c4 10             	add    $0x10,%esp
	inode->i_size = i;
   1487c:	8b 54 24 2c          	mov    0x2c(%esp),%edx
   14880:	8b 44 24 28          	mov    0x28(%esp),%eax
   14884:	89 50 04             	mov    %edx,0x4(%eax)
	inode->i_dirt = 1;
   14887:	8b 44 24 28          	mov    0x28(%esp),%eax
   1488b:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 然后我们搜索一下路径名指定的符号链接名是否已经存在。若已经存在则不能创建同名目录项i节点。如果对应符号链接文件名已经存在，则
	// 释放包含该目录项的缓冲区块，复位新申请的i节点连接计数，并施加目录的i节点，返回文件已经存在的出错码退出。
	bh = find_entry(&dir, basename, namelen, &de);
   1488f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   14893:	8b 44 24 10          	mov    0x10(%esp),%eax
   14897:	8d 4c 24 18          	lea    0x18(%esp),%ecx
   1489b:	51                   	push   %ecx
   1489c:	52                   	push   %edx
   1489d:	50                   	push   %eax
   1489e:	8d 44 24 20          	lea    0x20(%esp),%eax
   148a2:	50                   	push   %eax
   148a3:	e8 82 e2 ff ff       	call   12b2a <find_entry>
   148a8:	83 c4 10             	add    $0x10,%esp
   148ab:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (bh) {
   148af:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   148b4:	74 4a                	je     14900 <sys_symlink+0x2bc>
		inode->i_nlinks--;
   148b6:	8b 44 24 28          	mov    0x28(%esp),%eax
   148ba:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   148be:	8d 50 ff             	lea    -0x1(%eax),%edx
   148c1:	8b 44 24 28          	mov    0x28(%esp),%eax
   148c5:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   148c8:	83 ec 0c             	sub    $0xc,%esp
   148cb:	ff 74 24 34          	pushl  0x34(%esp)
   148cf:	e8 8b 9d ff ff       	call   e65f <iput>
   148d4:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   148d7:	83 ec 0c             	sub    $0xc,%esp
   148da:	ff 74 24 28          	pushl  0x28(%esp)
   148de:	e8 0d ad ff ff       	call   f5f0 <brelse>
   148e3:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   148e6:	8b 44 24 14          	mov    0x14(%esp),%eax
   148ea:	83 ec 0c             	sub    $0xc,%esp
   148ed:	50                   	push   %eax
   148ee:	e8 6c 9d ff ff       	call   e65f <iput>
   148f3:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   148f6:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   148fb:	e9 a9 00 00 00       	jmp    149a9 <sys_symlink+0x365>
	}
	// 现在我们在指定目录中新添加一个目录项，用于存放新建符号链接文件名的i节点号和目录名。如果失败（包含该目录项的高速缓冲区指针为
	// NULL），则放回目录的i节点；所申请的i节点引用链接计数复位，并放回该i节点。返回出错码退出。
	bh = add_entry(dir, basename, namelen, &de);
   14900:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   14904:	8b 54 24 10          	mov    0x10(%esp),%edx
   14908:	8b 44 24 14          	mov    0x14(%esp),%eax
   1490c:	8d 5c 24 18          	lea    0x18(%esp),%ebx
   14910:	53                   	push   %ebx
   14911:	51                   	push   %ecx
   14912:	52                   	push   %edx
   14913:	50                   	push   %eax
   14914:	e8 4f e4 ff ff       	call   12d68 <add_entry>
   14919:	83 c4 10             	add    $0x10,%esp
   1491c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   14920:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14925:	75 38                	jne    1495f <sys_symlink+0x31b>
		inode->i_nlinks--;
   14927:	8b 44 24 28          	mov    0x28(%esp),%eax
   1492b:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1492f:	8d 50 ff             	lea    -0x1(%eax),%edx
   14932:	8b 44 24 28          	mov    0x28(%esp),%eax
   14936:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   14939:	83 ec 0c             	sub    $0xc,%esp
   1493c:	ff 74 24 34          	pushl  0x34(%esp)
   14940:	e8 1a 9d ff ff       	call   e65f <iput>
   14945:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14948:	8b 44 24 14          	mov    0x14(%esp),%eax
   1494c:	83 ec 0c             	sub    $0xc,%esp
   1494f:	50                   	push   %eax
   14950:	e8 0a 9d ff ff       	call   e65f <iput>
   14955:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   14958:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   1495d:	eb 4a                	jmp    149a9 <sys_symlink+0x365>
	}
	// 最后令该新目录项的i节点字段等于新i节点号，并置高速缓冲块已修改标志，释放高速缓冲块，放回目录和新的i节点，最后返回0（成功）。
	de->inode = inode->i_num;
   1495f:	8b 44 24 18          	mov    0x18(%esp),%eax
   14963:	8b 54 24 28          	mov    0x28(%esp),%edx
   14967:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   1496b:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   1496e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14972:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14976:	83 ec 0c             	sub    $0xc,%esp
   14979:	ff 74 24 28          	pushl  0x28(%esp)
   1497d:	e8 6e ac ff ff       	call   f5f0 <brelse>
   14982:	83 c4 10             	add    $0x10,%esp
	iput(dir);
   14985:	8b 44 24 14          	mov    0x14(%esp),%eax
   14989:	83 ec 0c             	sub    $0xc,%esp
   1498c:	50                   	push   %eax
   1498d:	e8 cd 9c ff ff       	call   e65f <iput>
   14992:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   14995:	83 ec 0c             	sub    $0xc,%esp
   14998:	ff 74 24 34          	pushl  0x34(%esp)
   1499c:	e8 be 9c ff ff       	call   e65f <iput>
   149a1:	83 c4 10             	add    $0x10,%esp
	return 0;
   149a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   149a9:	83 c4 38             	add    $0x38,%esp
   149ac:	5b                   	pop    %ebx
   149ad:	c3                   	ret    

000149ae <sys_link>:
// 为文件建立一个文件名目录项。
// 为一个已存在的文件创建一个新链接（也称为硬连接 - hard link）。
// 参数：oldname - 原路径名；newname - 新的路径名。
// 返回：若成功则返回0,否则返回出错号。
int sys_link(const char * oldname, const char * newname)
{
   149ae:	53                   	push   %ebx
   149af:	83 ec 28             	sub    $0x28,%esp
	const char * basename;
	int namelen;

	// 首先对原文件名进行有效性验证，它应该存在并且不是一个目录名。所以我们先取原文件路径名对应的i节点oldinode。如果为0，则
	// 表示出错，返回出错号。如果原路径名对应的是一个目录名，则放回该i节点，也返回出错号。
	oldinode = namei(oldname);
   149b2:	83 ec 0c             	sub    $0xc,%esp
   149b5:	ff 74 24 3c          	pushl  0x3c(%esp)
   149b9:	e8 cf ea ff ff       	call   1348d <namei>
   149be:	83 c4 10             	add    $0x10,%esp
   149c1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!oldinode)
   149c5:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   149ca:	75 0a                	jne    149d6 <sys_link+0x28>
		return -ENOENT;
   149cc:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   149d1:	e9 52 02 00 00       	jmp    14c28 <sys_link+0x27a>
	if (S_ISDIR(oldinode->i_mode)) {
   149d6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   149da:	0f b7 00             	movzwl (%eax),%eax
   149dd:	0f b7 c0             	movzwl %ax,%eax
   149e0:	25 00 f0 00 00       	and    $0xf000,%eax
   149e5:	3d 00 40 00 00       	cmp    $0x4000,%eax
   149ea:	75 19                	jne    14a05 <sys_link+0x57>
		iput(oldinode);
   149ec:	83 ec 0c             	sub    $0xc,%esp
   149ef:	ff 74 24 28          	pushl  0x28(%esp)
   149f3:	e8 67 9c ff ff       	call   e65f <iput>
   149f8:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   149fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a00:	e9 23 02 00 00       	jmp    14c28 <sys_link+0x27a>
	}
	// 然后查找新路径名的最顶层目录的i节点dir，并返回最后的文件名及其长度。如果目录的i节点没有找到，则放回原路径名的i节点，返
	// 回出错号。如果新路径名中不包括文件名，则放回原路径名i节点和新路径名目录的i节点，返回出错号。
	dir = dir_namei(newname, &namelen, &basename, NULL);
   14a05:	6a 00                	push   $0x0
   14a07:	8d 44 24 10          	lea    0x10(%esp),%eax
   14a0b:	50                   	push   %eax
   14a0c:	8d 44 24 10          	lea    0x10(%esp),%eax
   14a10:	50                   	push   %eax
   14a11:	ff 74 24 40          	pushl  0x40(%esp)
   14a15:	e8 8d e8 ff ff       	call   132a7 <dir_namei>
   14a1a:	83 c4 10             	add    $0x10,%esp
   14a1d:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (!dir) {
   14a21:	8b 44 24 10          	mov    0x10(%esp),%eax
   14a25:	85 c0                	test   %eax,%eax
   14a27:	75 19                	jne    14a42 <sys_link+0x94>
		iput(oldinode);
   14a29:	83 ec 0c             	sub    $0xc,%esp
   14a2c:	ff 74 24 28          	pushl  0x28(%esp)
   14a30:	e8 2a 9c ff ff       	call   e65f <iput>
   14a35:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
   14a38:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14a3d:	e9 e6 01 00 00       	jmp    14c28 <sys_link+0x27a>
	}
	if (!namelen) {
   14a42:	8b 44 24 08          	mov    0x8(%esp),%eax
   14a46:	85 c0                	test   %eax,%eax
   14a48:	75 29                	jne    14a73 <sys_link+0xc5>
		iput(oldinode);
   14a4a:	83 ec 0c             	sub    $0xc,%esp
   14a4d:	ff 74 24 28          	pushl  0x28(%esp)
   14a51:	e8 09 9c ff ff       	call   e65f <iput>
   14a56:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14a59:	8b 44 24 10          	mov    0x10(%esp),%eax
   14a5d:	83 ec 0c             	sub    $0xc,%esp
   14a60:	50                   	push   %eax
   14a61:	e8 f9 9b ff ff       	call   e65f <iput>
   14a66:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14a69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a6e:	e9 b5 01 00 00       	jmp    14c28 <sys_link+0x27a>
	}
	// 我们不能跨设备建立硬链接。因此如果新路径名顶层目录的设备号与原路径名的设备号不一样，则放回新路径名目录的i节点和原路径名
	// 的i节点，返回出错号。另外，如果用户没有在新目录中写的权限，则也不能建立连接，于是放回新路径名目录的i节点和原路径名的i节点
	// 返回出错号。
	if (dir->i_dev != oldinode->i_dev) {
   14a73:	8b 44 24 10          	mov    0x10(%esp),%eax
   14a77:	0f b7 50 30          	movzwl 0x30(%eax),%edx
   14a7b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14a7f:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14a83:	66 39 c2             	cmp    %ax,%dx
   14a86:	74 29                	je     14ab1 <sys_link+0x103>
		iput(dir);
   14a88:	8b 44 24 10          	mov    0x10(%esp),%eax
   14a8c:	83 ec 0c             	sub    $0xc,%esp
   14a8f:	50                   	push   %eax
   14a90:	e8 ca 9b ff ff       	call   e65f <iput>
   14a95:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14a98:	83 ec 0c             	sub    $0xc,%esp
   14a9b:	ff 74 24 28          	pushl  0x28(%esp)
   14a9f:	e8 bb 9b ff ff       	call   e65f <iput>
   14aa4:	83 c4 10             	add    $0x10,%esp
		return -EXDEV;
   14aa7:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
   14aac:	e9 77 01 00 00       	jmp    14c28 <sys_link+0x27a>
	}
	if (!permission(dir, MAY_WRITE)) {
   14ab1:	8b 44 24 10          	mov    0x10(%esp),%eax
   14ab5:	83 ec 08             	sub    $0x8,%esp
   14ab8:	6a 02                	push   $0x2
   14aba:	50                   	push   %eax
   14abb:	e8 36 df ff ff       	call   129f6 <permission>
   14ac0:	83 c4 10             	add    $0x10,%esp
   14ac3:	85 c0                	test   %eax,%eax
   14ac5:	75 29                	jne    14af0 <sys_link+0x142>
		iput(dir);
   14ac7:	8b 44 24 10          	mov    0x10(%esp),%eax
   14acb:	83 ec 0c             	sub    $0xc,%esp
   14ace:	50                   	push   %eax
   14acf:	e8 8b 9b ff ff       	call   e65f <iput>
   14ad4:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14ad7:	83 ec 0c             	sub    $0xc,%esp
   14ada:	ff 74 24 28          	pushl  0x28(%esp)
   14ade:	e8 7c 9b ff ff       	call   e65f <iput>
   14ae3:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
   14ae6:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14aeb:	e9 38 01 00 00       	jmp    14c28 <sys_link+0x27a>
	}
	// 现在查询该新路径名是否已经存在，如果存在则也不能建立链接。于是释放包含该已存在目录项的高速缓冲块，放回新路径名目录的i节点
	// 和原路径名的i节点，返回出错号。
	bh = find_entry(&dir, basename, namelen, &de);
   14af0:	8b 54 24 08          	mov    0x8(%esp),%edx
   14af4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14af8:	8d 4c 24 14          	lea    0x14(%esp),%ecx
   14afc:	51                   	push   %ecx
   14afd:	52                   	push   %edx
   14afe:	50                   	push   %eax
   14aff:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   14b03:	50                   	push   %eax
   14b04:	e8 21 e0 ff ff       	call   12b2a <find_entry>
   14b09:	83 c4 10             	add    $0x10,%esp
   14b0c:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (bh) {
   14b10:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14b15:	74 38                	je     14b4f <sys_link+0x1a1>
		brelse(bh);
   14b17:	83 ec 0c             	sub    $0xc,%esp
   14b1a:	ff 74 24 24          	pushl  0x24(%esp)
   14b1e:	e8 cd aa ff ff       	call   f5f0 <brelse>
   14b23:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14b26:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b2a:	83 ec 0c             	sub    $0xc,%esp
   14b2d:	50                   	push   %eax
   14b2e:	e8 2c 9b ff ff       	call   e65f <iput>
   14b33:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14b36:	83 ec 0c             	sub    $0xc,%esp
   14b39:	ff 74 24 28          	pushl  0x28(%esp)
   14b3d:	e8 1d 9b ff ff       	call   e65f <iput>
   14b42:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   14b45:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   14b4a:	e9 d9 00 00 00       	jmp    14c28 <sys_link+0x27a>
	}
	// 现在所有条件都满足了，于是我们在新目录中添加一个目录项。若失败则放回该目录的i节点和原路径名的i节点，返回出错号。否则初始
	// 设置该目录项的i节点号等于原路径名的i节点号，并置包含该新添目录的缓冲块已修改标志，释放该缓冲块，放回目录的i节点。
	bh = add_entry(dir, basename, namelen, &de);
   14b4f:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   14b53:	8b 54 24 0c          	mov    0xc(%esp),%edx
   14b57:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b5b:	8d 5c 24 14          	lea    0x14(%esp),%ebx
   14b5f:	53                   	push   %ebx
   14b60:	51                   	push   %ecx
   14b61:	52                   	push   %edx
   14b62:	50                   	push   %eax
   14b63:	e8 00 e2 ff ff       	call   12d68 <add_entry>
   14b68:	83 c4 10             	add    $0x10,%esp
   14b6b:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!bh) {
   14b6f:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14b74:	75 29                	jne    14b9f <sys_link+0x1f1>
		iput(dir);
   14b76:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b7a:	83 ec 0c             	sub    $0xc,%esp
   14b7d:	50                   	push   %eax
   14b7e:	e8 dc 9a ff ff       	call   e65f <iput>
   14b83:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14b86:	83 ec 0c             	sub    $0xc,%esp
   14b89:	ff 74 24 28          	pushl  0x28(%esp)
   14b8d:	e8 cd 9a ff ff       	call   e65f <iput>
   14b92:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   14b95:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   14b9a:	e9 89 00 00 00       	jmp    14c28 <sys_link+0x27a>
	}
	de->inode = oldinode->i_num;
   14b9f:	8b 44 24 14          	mov    0x14(%esp),%eax
   14ba3:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   14ba7:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   14bab:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   14bae:	8b 44 24 18          	mov    0x18(%esp),%eax
   14bb2:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14bb6:	83 ec 0c             	sub    $0xc,%esp
   14bb9:	ff 74 24 24          	pushl  0x24(%esp)
   14bbd:	e8 2e aa ff ff       	call   f5f0 <brelse>
   14bc2:	83 c4 10             	add    $0x10,%esp
	iput(dir);
   14bc5:	8b 44 24 10          	mov    0x10(%esp),%eax
   14bc9:	83 ec 0c             	sub    $0xc,%esp
   14bcc:	50                   	push   %eax
   14bcd:	e8 8d 9a ff ff       	call   e65f <iput>
   14bd2:	83 c4 10             	add    $0x10,%esp
	// 再将原节点的链接计数加1,修改其改变时间为当前时间，并设置i节点已修改标志。最后放回原路径名的i节点，并返回0（成功）。
	oldinode->i_nlinks++;
   14bd5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14bd9:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14bdd:	8d 50 01             	lea    0x1(%eax),%edx
   14be0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14be4:	88 50 0d             	mov    %dl,0xd(%eax)
	oldinode->i_ctime = CURRENT_TIME;
   14be7:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   14bec:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   14bf2:	01 d0                	add    %edx,%eax
   14bf4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   14bf9:	f7 e2                	mul    %edx
   14bfb:	c1 ea 05             	shr    $0x5,%edx
   14bfe:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   14c03:	01 c2                	add    %eax,%edx
   14c05:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14c09:	89 50 2c             	mov    %edx,0x2c(%eax)
	oldinode->i_dirt = 1;
   14c0c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14c10:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(oldinode);
   14c14:	83 ec 0c             	sub    $0xc,%esp
   14c17:	ff 74 24 28          	pushl  0x28(%esp)
   14c1b:	e8 3f 9a ff ff       	call   e65f <iput>
   14c20:	83 c4 10             	add    $0x10,%esp
	return 0;
   14c23:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14c28:	83 c4 28             	add    $0x28,%esp
   14c2b:	5b                   	pop    %ebx
   14c2c:	c3                   	ret    

00014c2d <memset>:
{
   14c2d:	57                   	push   %edi
   14c2e:	83 ec 04             	sub    $0x4,%esp
   14c31:	8b 44 24 10          	mov    0x10(%esp),%eax
   14c35:	88 04 24             	mov    %al,(%esp)
__asm__(
   14c38:	0f b6 04 24          	movzbl (%esp),%eax
   14c3c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   14c40:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   14c44:	89 d7                	mov    %edx,%edi
   14c46:	fc                   	cld    
   14c47:	57                   	push   %edi
   14c48:	f3 aa                	rep stos %al,%es:(%edi)
   14c4a:	5f                   	pop    %edi
return s;
   14c4b:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   14c4f:	83 c4 04             	add    $0x4,%esp
   14c52:	5f                   	pop    %edi
   14c53:	c3                   	ret    

00014c54 <free_block>:

// 释放设备dev上数据区中的逻辑块block。
// 复位指定逻辑块block对应的逻辑块位图位。成功则返回1,否则返回0.
// 参数：dev是设备号，block是逻辑块号（盘块号）。
int free_block(int dev, int block)
{
   14c54:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	// 首先取设备dev上文件系统的超级块信息，根据其中数据区开始逻辑块号和文件系统中逻辑块总数信息判断参数block的有效
	// 性。如果指定设备超级块不存在，则出错停机。若逻辑块号小于盘上数据区第1个逻辑块号或者大于设备上总逻辑块数，也出
	// 错停机。
	if (!(sb = get_super(dev)))             						// fs/super.c
   14c57:	83 ec 0c             	sub    $0xc,%esp
   14c5a:	ff 74 24 2c          	pushl  0x2c(%esp)
   14c5e:	e8 54 ae ff ff       	call   fab7 <get_super>
   14c63:	83 c4 10             	add    $0x10,%esp
   14c66:	89 44 24 0c          	mov    %eax,0xc(%esp)
   14c6a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   14c6f:	75 10                	jne    14c81 <free_block+0x2d>
		panic("trying to free block on nonexistent device");
   14c71:	83 ec 0c             	sub    $0xc,%esp
   14c74:	68 64 42 02 00       	push   $0x24264
   14c79:	e8 84 3f ff ff       	call   8c02 <panic>
   14c7e:	83 c4 10             	add    $0x10,%esp
	if (block < sb->s_firstdatazone || block >= sb->s_nzones)
   14c81:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14c85:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14c89:	0f b7 c0             	movzwl %ax,%eax
   14c8c:	39 44 24 24          	cmp    %eax,0x24(%esp)
   14c90:	7c 11                	jl     14ca3 <free_block+0x4f>
   14c92:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14c96:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   14c9a:	0f b7 c0             	movzwl %ax,%eax
   14c9d:	39 44 24 24          	cmp    %eax,0x24(%esp)
   14ca1:	7c 10                	jl     14cb3 <free_block+0x5f>
		panic("trying to free block not in datazone");
   14ca3:	83 ec 0c             	sub    $0xc,%esp
   14ca6:	68 90 42 02 00       	push   $0x24290
   14cab:	e8 52 3f ff ff       	call   8c02 <panic>
   14cb0:	83 c4 10             	add    $0x10,%esp
	bh = get_hash_table(dev, block);
   14cb3:	83 ec 08             	sub    $0x8,%esp
   14cb6:	ff 74 24 2c          	pushl  0x2c(%esp)
   14cba:	ff 74 24 2c          	pushl  0x2c(%esp)
   14cbe:	e8 f0 a6 ff ff       	call   f3b3 <get_hash_table>
   14cc3:	83 c4 10             	add    $0x10,%esp
   14cc6:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 然后从hash表中寻找该块数据。若找到了则判断其有效性，并清已修改和更新标志，释放该数据块。该段代码的主要用途是如果
	// 该逻辑块目前存在于高速缓冲区中，就释放对应的缓冲块。
	if (bh) {
   14cca:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   14ccf:	74 50                	je     14d21 <free_block+0xcd>
		if (bh->b_count > 1) {          							// 如果引用次数大于1,则调用brelse()。
   14cd1:	8b 44 24 08          	mov    0x8(%esp),%eax
   14cd5:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   14cd9:	3c 01                	cmp    $0x1,%al
   14cdb:	76 19                	jbe    14cf6 <free_block+0xa2>
			brelse(bh);             								// b_count--后退出，该块还有人用。
   14cdd:	83 ec 0c             	sub    $0xc,%esp
   14ce0:	ff 74 24 14          	pushl  0x14(%esp)
   14ce4:	e8 07 a9 ff ff       	call   f5f0 <brelse>
   14ce9:	83 c4 10             	add    $0x10,%esp
			return 0;
   14cec:	b8 00 00 00 00       	mov    $0x0,%eax
   14cf1:	e9 d9 00 00 00       	jmp    14dcf <free_block+0x17b>
		}
		bh->b_dirt = 0;                   							// 否则复位已修改和已更新标志。
   14cf6:	8b 44 24 08          	mov    0x8(%esp),%eax
   14cfa:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
		bh->b_uptodate = 0;
   14cfe:	8b 44 24 08          	mov    0x8(%esp),%eax
   14d02:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
		if (bh->b_count)                							// 若此时b_count为1,则调用brelse()释放之。
   14d06:	8b 44 24 08          	mov    0x8(%esp),%eax
   14d0a:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   14d0e:	84 c0                	test   %al,%al
   14d10:	74 0f                	je     14d21 <free_block+0xcd>
			brelse(bh);
   14d12:	83 ec 0c             	sub    $0xc,%esp
   14d15:	ff 74 24 14          	pushl  0x14(%esp)
   14d19:	e8 d2 a8 ff ff       	call   f5f0 <brelse>
   14d1e:	83 c4 10             	add    $0x10,%esp
	}
	// 接着我们复位block在逻辑块位图中的位（置0）。先计算block在数据区开始算起的数据逻辑块号（从1开始计数）。然后对逻辑
	// 块（区块）位图进行操作，复位对应的位。如果对应位原来就是0,则出错停机。由于1个缓冲块有1024字节，即8192位，因此
	// block/8192即可计算出指定块block在逻辑位图中的哪个块上。而block&8191可以得到block在逻辑块位图当前块中的位偏移
	// 位置。
	block -= sb->s_firstdatazone - 1 ;
   14d21:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14d25:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14d29:	0f b7 c0             	movzwl %ax,%eax
   14d2c:	83 e8 01             	sub    $0x1,%eax
   14d2f:	29 44 24 24          	sub    %eax,0x24(%esp)
	if (clear_bit(block & 8191, sb->s_zmap[block / 8192]->b_data)) {
   14d33:	8b 44 24 24          	mov    0x24(%esp),%eax
   14d37:	25 ff 1f 00 00       	and    $0x1fff,%eax
   14d3c:	89 c1                	mov    %eax,%ecx
   14d3e:	8b 44 24 24          	mov    0x24(%esp),%eax
   14d42:	8d 90 ff 1f 00 00    	lea    0x1fff(%eax),%edx
   14d48:	85 c0                	test   %eax,%eax
   14d4a:	0f 48 c2             	cmovs  %edx,%eax
   14d4d:	c1 f8 0d             	sar    $0xd,%eax
   14d50:	89 c2                	mov    %eax,%edx
   14d52:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14d56:	83 c2 0c             	add    $0xc,%edx
   14d59:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   14d5d:	8b 10                	mov    (%eax),%edx
   14d5f:	b8 00 00 00 00       	mov    $0x0,%eax
   14d64:	0f b3 0a             	btr    %ecx,(%edx)
   14d67:	0f 93 c0             	setae  %al
   14d6a:	85 c0                	test   %eax,%eax
   14d6c:	74 39                	je     14da7 <free_block+0x153>
		printk("block (%04x:%d) ", dev, block + sb->s_firstdatazone - 1);
   14d6e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14d72:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14d76:	0f b7 d0             	movzwl %ax,%edx
   14d79:	8b 44 24 24          	mov    0x24(%esp),%eax
   14d7d:	01 d0                	add    %edx,%eax
   14d7f:	83 e8 01             	sub    $0x1,%eax
   14d82:	83 ec 04             	sub    $0x4,%esp
   14d85:	50                   	push   %eax
   14d86:	ff 74 24 28          	pushl  0x28(%esp)
   14d8a:	68 b5 42 02 00       	push   $0x242b5
   14d8f:	e8 ad 3e ff ff       	call   8c41 <printk>
   14d94:	83 c4 10             	add    $0x10,%esp
		printk("free_block: bit already cleared\n");
   14d97:	83 ec 0c             	sub    $0xc,%esp
   14d9a:	68 c8 42 02 00       	push   $0x242c8
   14d9f:	e8 9d 3e ff ff       	call   8c41 <printk>
   14da4:	83 c4 10             	add    $0x10,%esp
	}
	// 最后置相应逻辑块位图所在缓冲区已修改标志。
	sb->s_zmap[block / 8192]->b_dirt = 1;
   14da7:	8b 44 24 24          	mov    0x24(%esp),%eax
   14dab:	8d 90 ff 1f 00 00    	lea    0x1fff(%eax),%edx
   14db1:	85 c0                	test   %eax,%eax
   14db3:	0f 48 c2             	cmovs  %edx,%eax
   14db6:	c1 f8 0d             	sar    $0xd,%eax
   14db9:	89 c2                	mov    %eax,%edx
   14dbb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14dbf:	83 c2 0c             	add    $0xc,%edx
   14dc2:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   14dc6:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	return 1;
   14dca:	b8 01 00 00 00       	mov    $0x1,%eax
}
   14dcf:	83 c4 1c             	add    $0x1c,%esp
   14dd2:	c3                   	ret    

00014dd3 <new_block>:
// 向设备申请一个逻辑块(盘块,区块).
// 函数首先取得设备的超级块,并在超级块中的逻辑块位图中寻找第一个0值位(代表一个空闲逻辑块).然后置位对应逻辑块在逻辑位图
// 中的位.接着为该逻辑块在缓冲区中取得一块对应缓冲块.最后将该缓冲块清零,并设置其已更新标志和已修改标志.并返回逻辑块号.
// 函数执行成功则返回逻辑块号(盘块号),否则返回0.
int new_block(int dev)
{
   14dd3:	57                   	push   %edi
   14dd4:	56                   	push   %esi
   14dd5:	53                   	push   %ebx
   14dd6:	83 ec 20             	sub    $0x20,%esp
	int i,j;

	// 首先获取设备dev的超级块.如果指定设备的超级块不存在,则出错停机.然后扫描文件系统的8块逻辑块位图,寻找首个0值位,以寻找
	// 空闲逻辑块,获取设置该逻辑块的块号.如果全部扫描完8块逻辑块位图的所有位(i >=8 或 j >= 8192)还没有找到0值位或者位图
	// 所在的缓冲块指针无效(bn = NULL)则返回0退出(没有空闲逻辑块).
	if (!(sb = get_super(dev)))
   14dd9:	83 ec 0c             	sub    $0xc,%esp
   14ddc:	ff 74 24 3c          	pushl  0x3c(%esp)
   14de0:	e8 d2 ac ff ff       	call   fab7 <get_super>
   14de5:	83 c4 10             	add    $0x10,%esp
   14de8:	89 44 24 10          	mov    %eax,0x10(%esp)
   14dec:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   14df1:	75 10                	jne    14e03 <new_block+0x30>
		panic("trying to get new block from nonexistant device");
   14df3:	83 ec 0c             	sub    $0xc,%esp
   14df6:	68 ec 42 02 00       	push   $0x242ec
   14dfb:	e8 02 3e ff ff       	call   8c02 <panic>
   14e00:	83 c4 10             	add    $0x10,%esp
	j = 8192;
   14e03:	c7 44 24 14 00 20 00 	movl   $0x2000,0x14(%esp)
   14e0a:	00 
	for (i = 0 ; i < 8 ; i++)
   14e0b:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   14e12:	00 
   14e13:	eb 5a                	jmp    14e6f <new_block+0x9c>
		if (bh = sb->s_zmap[i])
   14e15:	8b 44 24 10          	mov    0x10(%esp),%eax
   14e19:	8b 54 24 18          	mov    0x18(%esp),%edx
   14e1d:	83 c2 0c             	add    $0xc,%edx
   14e20:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   14e24:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   14e28:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14e2d:	74 3b                	je     14e6a <new_block+0x97>
			if ((j = find_first_zero(bh->b_data)) < 8192)
   14e2f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14e33:	8b 18                	mov    (%eax),%ebx
   14e35:	b9 00 00 00 00       	mov    $0x0,%ecx
   14e3a:	89 de                	mov    %ebx,%esi
   14e3c:	fc                   	cld    
   14e3d:	ad                   	lods   %ds:(%esi),%eax
   14e3e:	f7 d0                	not    %eax
   14e40:	0f bc d0             	bsf    %eax,%edx
   14e43:	74 04                	je     14e49 <new_block+0x76>
   14e45:	01 d1                	add    %edx,%ecx
   14e47:	eb 0b                	jmp    14e54 <new_block+0x81>
   14e49:	83 c1 20             	add    $0x20,%ecx
   14e4c:	81 f9 00 20 00 00    	cmp    $0x2000,%ecx
   14e52:	7c e9                	jl     14e3d <new_block+0x6a>
   14e54:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
   14e58:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14e5c:	89 44 24 14          	mov    %eax,0x14(%esp)
   14e60:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   14e67:	00 
   14e68:	7e 0e                	jle    14e78 <new_block+0xa5>
	for (i = 0 ; i < 8 ; i++)
   14e6a:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   14e6f:	83 7c 24 18 07       	cmpl   $0x7,0x18(%esp)
   14e74:	7e 9f                	jle    14e15 <new_block+0x42>
   14e76:	eb 01                	jmp    14e79 <new_block+0xa6>
				break;
   14e78:	90                   	nop
	if (i >= 8 || !bh || j >= 8192)
   14e79:	83 7c 24 18 07       	cmpl   $0x7,0x18(%esp)
   14e7e:	7f 11                	jg     14e91 <new_block+0xbe>
   14e80:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14e85:	74 0a                	je     14e91 <new_block+0xbe>
   14e87:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   14e8e:	00 
   14e8f:	7e 0a                	jle    14e9b <new_block+0xc8>
		return 0;
   14e91:	b8 00 00 00 00       	mov    $0x0,%eax
   14e96:	e9 ef 00 00 00       	jmp    14f8a <new_block+0x1b7>
	// 接着设置找到的新逻辑块j对应逻辑块位图中的位.若对应位已经置位,则出错停机.否则置存在位图的对应缓冲区块已修改标志.因为
	// 逻辑块位图仅表示盘上数据区中逻辑块的占用情况,即逻辑块位图中位偏移值表示从数据区开始处算起的块号,因此这里需要加上数据
	// 区第1个逻辑块的块号,把j转换成逻辑块号.此时如果新逻辑块大于该设备上的总逻辑块数,则说明指定逻辑块在对应设备上不存在.
	// 申请失败,返回0退出.
	if (set_bit(j, bh->b_data))
   14e9b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14e9f:	8b 08                	mov    (%eax),%ecx
   14ea1:	b8 00 00 00 00       	mov    $0x0,%eax
   14ea6:	8b 54 24 14          	mov    0x14(%esp),%edx
   14eaa:	0f ab 11             	bts    %edx,(%ecx)
   14ead:	0f 92 c0             	setb   %al
   14eb0:	85 c0                	test   %eax,%eax
   14eb2:	74 10                	je     14ec4 <new_block+0xf1>
		panic("new_block: bit already set");
   14eb4:	83 ec 0c             	sub    $0xc,%esp
   14eb7:	68 1c 43 02 00       	push   $0x2431c
   14ebc:	e8 41 3d ff ff       	call   8c02 <panic>
   14ec1:	83 c4 10             	add    $0x10,%esp
	bh->b_dirt = 1;
   14ec4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14ec8:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	j += i * 8192 + sb->s_firstdatazone - 1;
   14ecc:	8b 44 24 18          	mov    0x18(%esp),%eax
   14ed0:	c1 e0 0d             	shl    $0xd,%eax
   14ed3:	89 c2                	mov    %eax,%edx
   14ed5:	8b 44 24 10          	mov    0x10(%esp),%eax
   14ed9:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14edd:	0f b7 c0             	movzwl %ax,%eax
   14ee0:	01 d0                	add    %edx,%eax
   14ee2:	83 e8 01             	sub    $0x1,%eax
   14ee5:	01 44 24 14          	add    %eax,0x14(%esp)
	if (j >= sb->s_nzones)
   14ee9:	8b 44 24 10          	mov    0x10(%esp),%eax
   14eed:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   14ef1:	0f b7 c0             	movzwl %ax,%eax
   14ef4:	39 44 24 14          	cmp    %eax,0x14(%esp)
   14ef8:	7c 0a                	jl     14f04 <new_block+0x131>
		return 0;
   14efa:	b8 00 00 00 00       	mov    $0x0,%eax
   14eff:	e9 86 00 00 00       	jmp    14f8a <new_block+0x1b7>
	// 然后在高速缓冲区中为该设备上指定的逻辑块号取得一个缓冲块,并返回缓冲块头指针.
	// 因为刚取得的逻辑块其引用次数一定为1(getblk()中会设置),因此若不为1则停机.最后将新逻辑块清零,并设置其已更新标志和已
	// 修改标志.然后释放对应缓冲块,返回逻辑块号.
	if (!(bh = getblk(dev, j)))
   14f04:	83 ec 08             	sub    $0x8,%esp
   14f07:	ff 74 24 1c          	pushl  0x1c(%esp)
   14f0b:	ff 74 24 3c          	pushl  0x3c(%esp)
   14f0f:	e8 23 a5 ff ff       	call   f437 <getblk>
   14f14:	83 c4 10             	add    $0x10,%esp
   14f17:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   14f1b:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14f20:	75 10                	jne    14f32 <new_block+0x15f>
		panic("new_block: cannot get block");
   14f22:	83 ec 0c             	sub    $0xc,%esp
   14f25:	68 37 43 02 00       	push   $0x24337
   14f2a:	e8 d3 3c ff ff       	call   8c02 <panic>
   14f2f:	83 c4 10             	add    $0x10,%esp
	if (bh->b_count != 1)
   14f32:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f36:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   14f3a:	3c 01                	cmp    $0x1,%al
   14f3c:	74 10                	je     14f4e <new_block+0x17b>
		panic("new block: count is != 1");
   14f3e:	83 ec 0c             	sub    $0xc,%esp
   14f41:	68 53 43 02 00       	push   $0x24353
   14f46:	e8 b7 3c ff ff       	call   8c02 <panic>
   14f4b:	83 c4 10             	add    $0x10,%esp
	clear_block(bh->b_data);
   14f4e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f52:	8b 00                	mov    (%eax),%eax
   14f54:	89 c3                	mov    %eax,%ebx
   14f56:	b8 00 00 00 00       	mov    $0x0,%eax
   14f5b:	ba 00 01 00 00       	mov    $0x100,%edx
   14f60:	89 d1                	mov    %edx,%ecx
   14f62:	89 df                	mov    %ebx,%edi
   14f64:	fc                   	cld    
   14f65:	f3 ab                	rep stos %eax,%es:(%edi)
	bh->b_uptodate = 1;
   14f67:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f6b:	c6 40 0a 01          	movb   $0x1,0xa(%eax)
	bh->b_dirt = 1;
   14f6f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f73:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14f77:	83 ec 0c             	sub    $0xc,%esp
   14f7a:	ff 74 24 28          	pushl  0x28(%esp)
   14f7e:	e8 6d a6 ff ff       	call   f5f0 <brelse>
   14f83:	83 c4 10             	add    $0x10,%esp
	return j;
   14f86:	8b 44 24 14          	mov    0x14(%esp),%eax
}
   14f8a:	83 c4 20             	add    $0x20,%esp
   14f8d:	5b                   	pop    %ebx
   14f8e:	5e                   	pop    %esi
   14f8f:	5f                   	pop    %edi
   14f90:	c3                   	ret    

00014f91 <free_inode>:

// 释放指定的i节点。
// 该函数首先判断参数给出的i节点号的有效性和可释放性。若i节点仍然在使用中则不能被释放。然后利用超级块信息对i节点位图进行
// 操作，复位i节点号对应的i节点位图中位，并清空i节点结构。
void free_inode(struct m_inode * inode)
{
   14f91:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	// 首先判断参数给出的需要释放的i节点有效性或合法性。如果i节点指针=NULL，则退出。
	// 如果i节点上的设备号字段为0,说明该节点没有使用。于是用0清空对应i节点所占内存区并返回memset()定义在include/string.h
	// 处。这里表示用0填写inode指针指定处、长度是sizeof(*inode)的内存块。
	if (!inode)
   14f94:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   14f99:	0f 84 64 01 00 00    	je     15103 <free_inode+0x172>
		return;
	if (!inode->i_dev) {
   14f9f:	8b 44 24 20          	mov    0x20(%esp),%eax
   14fa3:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14fa7:	66 85 c0             	test   %ax,%ax
   14faa:	75 15                	jne    14fc1 <free_inode+0x30>
		memset(inode, 0, sizeof(*inode));
   14fac:	6a 3c                	push   $0x3c
   14fae:	6a 00                	push   $0x0
   14fb0:	ff 74 24 28          	pushl  0x28(%esp)
   14fb4:	e8 74 fc ff ff       	call   14c2d <memset>
   14fb9:	83 c4 0c             	add    $0xc,%esp
		return;
   14fbc:	e9 43 01 00 00       	jmp    15104 <free_inode+0x173>
	}
	// 如果此i节点还有其他程序引用，则不释放，说明内核有问题，停机。如果文件连接数不为0,则表示还有其他文件目录项在使用该节点，
	// 因此也不应释放，而应该放回等。
	if (inode->i_count > 1) {
   14fc1:	8b 44 24 20          	mov    0x20(%esp),%eax
   14fc5:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   14fc9:	66 83 f8 01          	cmp    $0x1,%ax
   14fcd:	76 2c                	jbe    14ffb <free_inode+0x6a>
		printk("trying to free inode with count=%d\n", inode->i_count);
   14fcf:	8b 44 24 20          	mov    0x20(%esp),%eax
   14fd3:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   14fd7:	0f b7 c0             	movzwl %ax,%eax
   14fda:	83 ec 08             	sub    $0x8,%esp
   14fdd:	50                   	push   %eax
   14fde:	68 6c 43 02 00       	push   $0x2436c
   14fe3:	e8 59 3c ff ff       	call   8c41 <printk>
   14fe8:	83 c4 10             	add    $0x10,%esp
		panic("free_inode");
   14feb:	83 ec 0c             	sub    $0xc,%esp
   14fee:	68 90 43 02 00       	push   $0x24390
   14ff3:	e8 0a 3c ff ff       	call   8c02 <panic>
   14ff8:	83 c4 10             	add    $0x10,%esp
	}
	if (inode->i_nlinks)
   14ffb:	8b 44 24 20          	mov    0x20(%esp),%eax
   14fff:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   15003:	84 c0                	test   %al,%al
   15005:	74 10                	je     15017 <free_inode+0x86>
		panic("trying to free inode with links");
   15007:	83 ec 0c             	sub    $0xc,%esp
   1500a:	68 9c 43 02 00       	push   $0x2439c
   1500f:	e8 ee 3b ff ff       	call   8c02 <panic>
   15014:	83 c4 10             	add    $0x10,%esp
	// 在判断完i节点的合理性之后，我们开始利用其超级块信息对其i节点位图进行操作。首先取i节点所在设备的超级块，测试设备是否存在。
	// 然后判断i节点号的范围是否正确，如果i节点号等于0或大于该设备上i节点总数，则出错（0号i节点保留没有使用）。如果该i节点对应
	// 的节点位图不存在，则出错。因为一个缓冲块的i节点位图有8192比特位。因此i_num>>13（即i_num/8192）可以得到当前i节点号所
	// 在的s_imap[]项，即所在盘块。
	if (!(sb = get_super(inode->i_dev)))
   15017:	8b 44 24 20          	mov    0x20(%esp),%eax
   1501b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1501f:	0f b7 c0             	movzwl %ax,%eax
   15022:	83 ec 0c             	sub    $0xc,%esp
   15025:	50                   	push   %eax
   15026:	e8 8c aa ff ff       	call   fab7 <get_super>
   1502b:	83 c4 10             	add    $0x10,%esp
   1502e:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15032:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15037:	75 10                	jne    15049 <free_inode+0xb8>
		panic("trying to free inode on nonexistent device");
   15039:	83 ec 0c             	sub    $0xc,%esp
   1503c:	68 bc 43 02 00       	push   $0x243bc
   15041:	e8 bc 3b ff ff       	call   8c02 <panic>
   15046:	83 c4 10             	add    $0x10,%esp
	if (inode->i_num < 1 || inode->i_num > sb->s_ninodes)
   15049:	8b 44 24 20          	mov    0x20(%esp),%eax
   1504d:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   15051:	66 85 c0             	test   %ax,%ax
   15054:	74 14                	je     1506a <free_inode+0xd9>
   15056:	8b 44 24 20          	mov    0x20(%esp),%eax
   1505a:	0f b7 50 32          	movzwl 0x32(%eax),%edx
   1505e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15062:	0f b7 00             	movzwl (%eax),%eax
   15065:	66 39 c2             	cmp    %ax,%dx
   15068:	76 10                	jbe    1507a <free_inode+0xe9>
		panic("trying to free inode 0 or nonexistant inode");
   1506a:	83 ec 0c             	sub    $0xc,%esp
   1506d:	68 e8 43 02 00       	push   $0x243e8
   15072:	e8 8b 3b ff ff       	call   8c02 <panic>
   15077:	83 c4 10             	add    $0x10,%esp
	if (!(bh = sb->s_imap[inode->i_num >> 13]))
   1507a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1507e:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   15082:	66 c1 e8 0d          	shr    $0xd,%ax
   15086:	0f b7 d0             	movzwl %ax,%edx
   15089:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1508d:	83 c2 04             	add    $0x4,%edx
   15090:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   15094:	89 44 24 08          	mov    %eax,0x8(%esp)
   15098:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1509d:	75 10                	jne    150af <free_inode+0x11e>
		panic("nonexistent imap in superblock");
   1509f:	83 ec 0c             	sub    $0xc,%esp
   150a2:	68 14 44 02 00       	push   $0x24414
   150a7:	e8 56 3b ff ff       	call   8c02 <panic>
   150ac:	83 c4 10             	add    $0x10,%esp
	// 现在我们复位i节点对应的节点位图中的位。如果该位已经等于0,则显示出错警告信息。最后置i节点位图所在缓冲区已修改标志，并清空
	// 该i节点结构所占内存区。
	if (clear_bit(inode->i_num & 8191, bh->b_data))
   150af:	8b 44 24 20          	mov    0x20(%esp),%eax
   150b3:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   150b7:	0f b7 c0             	movzwl %ax,%eax
   150ba:	25 ff 1f 00 00       	and    $0x1fff,%eax
   150bf:	89 c1                	mov    %eax,%ecx
   150c1:	8b 44 24 08          	mov    0x8(%esp),%eax
   150c5:	8b 10                	mov    (%eax),%edx
   150c7:	b8 00 00 00 00       	mov    $0x0,%eax
   150cc:	0f b3 0a             	btr    %ecx,(%edx)
   150cf:	0f 93 c0             	setae  %al
   150d2:	85 c0                	test   %eax,%eax
   150d4:	74 10                	je     150e6 <free_inode+0x155>
		printk("free_inode: bit already cleared.\n\r");
   150d6:	83 ec 0c             	sub    $0xc,%esp
   150d9:	68 34 44 02 00       	push   $0x24434
   150de:	e8 5e 3b ff ff       	call   8c41 <printk>
   150e3:	83 c4 10             	add    $0x10,%esp
	bh->b_dirt = 1;
   150e6:	8b 44 24 08          	mov    0x8(%esp),%eax
   150ea:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	memset(inode, 0, sizeof(*inode));
   150ee:	83 ec 04             	sub    $0x4,%esp
   150f1:	6a 3c                	push   $0x3c
   150f3:	6a 00                	push   $0x0
   150f5:	ff 74 24 2c          	pushl  0x2c(%esp)
   150f9:	e8 2f fb ff ff       	call   14c2d <memset>
   150fe:	83 c4 10             	add    $0x10,%esp
   15101:	eb 01                	jmp    15104 <free_inode+0x173>
		return;
   15103:	90                   	nop
}
   15104:	83 c4 1c             	add    $0x1c,%esp
   15107:	c3                   	ret    

00015108 <new_inode>:

// 为设备dev建立一个新i节点。初始化并返回该新i节点的指针。
// 在内存i节点表中获取一个空闲i节点表项，并从i节点位图中找一个空闲i节点。
struct m_inode * new_inode(int dev)
{
   15108:	56                   	push   %esi
   15109:	53                   	push   %ebx
   1510a:	83 ec 24             	sub    $0x24,%esp
	int i, j;

	// 首先从内在i节点表（inode_table）中获取一个空闲i节点项，并读取指定设备的超级块结构。然后扫描超级块中8块i节点位图，
	// 寻找第1个0位，寻找空闲节点，获取放置该i节点的节点号。如果全部扫描完还没找到，或者位图所在的缓冲块无效（bh = NULL）
	// 则放回先前申请的i节点表中的i节点，并返回空指针退出（没有空闲i节点）。
	if (!(inode = get_empty_inode()))
   1510d:	e8 0c 97 ff ff       	call   e81e <get_empty_inode>
   15112:	89 44 24 10          	mov    %eax,0x10(%esp)
   15116:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   1511b:	75 0a                	jne    15127 <new_inode+0x1f>
		return NULL;
   1511d:	b8 00 00 00 00       	mov    $0x0,%eax
   15122:	e9 c5 01 00 00       	jmp    152ec <new_inode+0x1e4>
	if (!(sb = get_super(dev)))
   15127:	83 ec 0c             	sub    $0xc,%esp
   1512a:	ff 74 24 3c          	pushl  0x3c(%esp)
   1512e:	e8 84 a9 ff ff       	call   fab7 <get_super>
   15133:	83 c4 10             	add    $0x10,%esp
   15136:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1513a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1513f:	75 10                	jne    15151 <new_inode+0x49>
		panic("new_inode with unknown device");
   15141:	83 ec 0c             	sub    $0xc,%esp
   15144:	68 57 44 02 00       	push   $0x24457
   15149:	e8 b4 3a ff ff       	call   8c02 <panic>
   1514e:	83 c4 10             	add    $0x10,%esp
	j = 8192;
   15151:	c7 44 24 14 00 20 00 	movl   $0x2000,0x14(%esp)
   15158:	00 
	for (i = 0 ; i < 8 ; i++)
   15159:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   15160:	00 
   15161:	eb 5a                	jmp    151bd <new_inode+0xb5>
		if (bh = sb->s_imap[i])
   15163:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15167:	8b 54 24 18          	mov    0x18(%esp),%edx
   1516b:	83 c2 04             	add    $0x4,%edx
   1516e:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   15172:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   15176:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1517b:	74 3b                	je     151b8 <new_inode+0xb0>
			if ((j = find_first_zero(bh->b_data)) < 8192)
   1517d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   15181:	8b 18                	mov    (%eax),%ebx
   15183:	b9 00 00 00 00       	mov    $0x0,%ecx
   15188:	89 de                	mov    %ebx,%esi
   1518a:	fc                   	cld    
   1518b:	ad                   	lods   %ds:(%esi),%eax
   1518c:	f7 d0                	not    %eax
   1518e:	0f bc d0             	bsf    %eax,%edx
   15191:	74 04                	je     15197 <new_inode+0x8f>
   15193:	01 d1                	add    %edx,%ecx
   15195:	eb 0b                	jmp    151a2 <new_inode+0x9a>
   15197:	83 c1 20             	add    $0x20,%ecx
   1519a:	81 f9 00 20 00 00    	cmp    $0x2000,%ecx
   151a0:	7c e9                	jl     1518b <new_inode+0x83>
   151a2:	89 4c 24 08          	mov    %ecx,0x8(%esp)
   151a6:	8b 44 24 08          	mov    0x8(%esp),%eax
   151aa:	89 44 24 14          	mov    %eax,0x14(%esp)
   151ae:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   151b5:	00 
   151b6:	7e 0e                	jle    151c6 <new_inode+0xbe>
	for (i = 0 ; i < 8 ; i++)
   151b8:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   151bd:	83 7c 24 18 07       	cmpl   $0x7,0x18(%esp)
   151c2:	7e 9f                	jle    15163 <new_inode+0x5b>
   151c4:	eb 01                	jmp    151c7 <new_inode+0xbf>
				break;
   151c6:	90                   	nop
	if (!bh || j >= 8192 || j + i * 8192 > sb->s_ninodes) {
   151c7:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   151cc:	74 27                	je     151f5 <new_inode+0xed>
   151ce:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   151d5:	00 
   151d6:	7f 1d                	jg     151f5 <new_inode+0xed>
   151d8:	8b 44 24 18          	mov    0x18(%esp),%eax
   151dc:	c1 e0 0d             	shl    $0xd,%eax
   151df:	89 c2                	mov    %eax,%edx
   151e1:	8b 44 24 14          	mov    0x14(%esp),%eax
   151e5:	01 c2                	add    %eax,%edx
   151e7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   151eb:	0f b7 00             	movzwl (%eax),%eax
   151ee:	0f b7 c0             	movzwl %ax,%eax
   151f1:	39 c2                	cmp    %eax,%edx
   151f3:	7e 19                	jle    1520e <new_inode+0x106>
		iput(inode);
   151f5:	83 ec 0c             	sub    $0xc,%esp
   151f8:	ff 74 24 1c          	pushl  0x1c(%esp)
   151fc:	e8 5e 94 ff ff       	call   e65f <iput>
   15201:	83 c4 10             	add    $0x10,%esp
		return NULL;
   15204:	b8 00 00 00 00       	mov    $0x0,%eax
   15209:	e9 de 00 00 00       	jmp    152ec <new_inode+0x1e4>
	}
	// 现在我们已经找到了还未使用的i节点号j。于是置位i节点j对应的i节点位图相应比特位（如果已经置位，则出错）。然后置i节点
	// 位图所在缓冲块已修改标志。最后初始化该i节点结构（i_ctime是i节点内容改变时间）。
	if (set_bit(j, bh->b_data))
   1520e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   15212:	8b 08                	mov    (%eax),%ecx
   15214:	b8 00 00 00 00       	mov    $0x0,%eax
   15219:	8b 54 24 14          	mov    0x14(%esp),%edx
   1521d:	0f ab 11             	bts    %edx,(%ecx)
   15220:	0f 92 c0             	setb   %al
   15223:	85 c0                	test   %eax,%eax
   15225:	74 10                	je     15237 <new_inode+0x12f>
		panic("new_inode: bit already set");
   15227:	83 ec 0c             	sub    $0xc,%esp
   1522a:	68 75 44 02 00       	push   $0x24475
   1522f:	e8 ce 39 ff ff       	call   8c02 <panic>
   15234:	83 c4 10             	add    $0x10,%esp
	bh->b_dirt = 1;
   15237:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1523b:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	inode->i_count = 1;               										// 引用计数。
   1523f:	8b 44 24 10          	mov    0x10(%esp),%eax
   15243:	66 c7 40 34 01 00    	movw   $0x1,0x34(%eax)
	inode->i_nlinks = 1;              										// 文件目录项链接数。
   15249:	8b 44 24 10          	mov    0x10(%esp),%eax
   1524d:	c6 40 0d 01          	movb   $0x1,0xd(%eax)
	inode->i_dev = dev;               										// i节点所在的设备号。
   15251:	8b 44 24 30          	mov    0x30(%esp),%eax
   15255:	89 c2                	mov    %eax,%edx
   15257:	8b 44 24 10          	mov    0x10(%esp),%eax
   1525b:	66 89 50 30          	mov    %dx,0x30(%eax)
	inode->i_uid = current->euid;     										// i节点所属用户id。
   1525f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15264:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   1526b:	8b 44 24 10          	mov    0x10(%esp),%eax
   1526f:	66 89 50 02          	mov    %dx,0x2(%eax)
	inode->i_gid = current->egid;     										// 组id。
   15273:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15278:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
   1527f:	89 c2                	mov    %eax,%edx
   15281:	8b 44 24 10          	mov    0x10(%esp),%eax
   15285:	88 50 0c             	mov    %dl,0xc(%eax)
	inode->i_dirt = 1;                										// 已修改标志置位。
   15288:	8b 44 24 10          	mov    0x10(%esp),%eax
   1528c:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	inode->i_num = j + i * 8192;      										// 对应设备中的i节点号。
   15290:	8b 44 24 18          	mov    0x18(%esp),%eax
   15294:	c1 e0 0d             	shl    $0xd,%eax
   15297:	89 c2                	mov    %eax,%edx
   15299:	8b 44 24 14          	mov    0x14(%esp),%eax
   1529d:	01 c2                	add    %eax,%edx
   1529f:	8b 44 24 10          	mov    0x10(%esp),%eax
   152a3:	66 89 50 32          	mov    %dx,0x32(%eax)
	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;        // 设置时间。
   152a7:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   152ac:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   152b2:	01 d0                	add    %edx,%eax
   152b4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   152b9:	f7 e2                	mul    %edx
   152bb:	c1 ea 05             	shr    $0x5,%edx
   152be:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   152c3:	01 c2                	add    %eax,%edx
   152c5:	8b 44 24 10          	mov    0x10(%esp),%eax
   152c9:	89 50 2c             	mov    %edx,0x2c(%eax)
   152cc:	8b 44 24 10          	mov    0x10(%esp),%eax
   152d0:	8b 50 2c             	mov    0x2c(%eax),%edx
   152d3:	8b 44 24 10          	mov    0x10(%esp),%eax
   152d7:	89 50 28             	mov    %edx,0x28(%eax)
   152da:	8b 44 24 10          	mov    0x10(%esp),%eax
   152de:	8b 50 28             	mov    0x28(%eax),%edx
   152e1:	8b 44 24 10          	mov    0x10(%esp),%eax
   152e5:	89 50 08             	mov    %edx,0x8(%eax)
	return inode;                   										// 返回该i节点指针。
   152e8:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   152ec:	83 c4 24             	add    $0x24,%esp
   152ef:	5b                   	pop    %ebx
   152f0:	5e                   	pop    %esi
   152f1:	c3                   	ret    

000152f2 <dupfd>:

// 复制文件句柄(文件描述符).
// 参数fd是欲复制的文件句柄,arg指定新文件句柄的最小数值.
// 返回新文件句柄或出错码.
static int dupfd(unsigned int fd, unsigned int arg)
{
   152f2:	53                   	push   %ebx
	// 首先检查函数参数的有效性.如果文件句柄值大于一个程序最多打开文件数NR_OPEN,或者该句柄的文件结构不存在,则返回出错码并退出.如果指定的新
	// 句柄值arg大于最多打开文件数,也返回出错码并退出.注意,实际上文件句柄就是进程文件结构指针数组项索引号.
	if (fd >= NR_OPEN || !current->filp[fd])
   152f3:	83 7c 24 08 13       	cmpl   $0x13,0x8(%esp)
   152f8:	77 17                	ja     15311 <dupfd+0x1f>
   152fa:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   152ff:	8b 54 24 08          	mov    0x8(%esp),%edx
   15303:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15309:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1530d:	85 c0                	test   %eax,%eax
   1530f:	75 0a                	jne    1531b <dupfd+0x29>
		return -EBADF;
   15311:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15316:	e9 b4 00 00 00       	jmp    153cf <dupfd+0xdd>
	if (arg >= NR_OPEN)
   1531b:	83 7c 24 0c 13       	cmpl   $0x13,0xc(%esp)
   15320:	76 26                	jbe    15348 <dupfd+0x56>
		return -EINVAL;
   15322:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   15327:	e9 a3 00 00 00       	jmp    153cf <dupfd+0xdd>
	// 然后在当前进程的文件结构指针数组中寻找索引号等于或大于arg,但还没有使用的项.若找到的新句柄值arg大于最多打开文件数(即没有空闲项),则返回
	// 出错码并退出.
	while (arg < NR_OPEN)
		if (current->filp[arg])
   1532c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15331:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15335:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   1533b:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1533f:	85 c0                	test   %eax,%eax
   15341:	74 0e                	je     15351 <dupfd+0x5f>
			arg++;
   15343:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
	while (arg < NR_OPEN)
   15348:	83 7c 24 0c 13       	cmpl   $0x13,0xc(%esp)
   1534d:	76 dd                	jbe    1532c <dupfd+0x3a>
   1534f:	eb 01                	jmp    15352 <dupfd+0x60>
		else
			break;
   15351:	90                   	nop
	if (arg >= NR_OPEN)
   15352:	83 7c 24 0c 13       	cmpl   $0x13,0xc(%esp)
   15357:	76 07                	jbe    15360 <dupfd+0x6e>
		return -EMFILE;
   15359:	b8 e8 ff ff ff       	mov    $0xffffffe8,%eax
   1535e:	eb 6f                	jmp    153cf <dupfd+0xdd>
	// 否则针对找到的空闲项(句柄),在执行时关闭标志位图close_on_exec中复位该句柄位.即在运行exec()类函数时,不会关闭用dup()创建的的句柄.并令该
	// 文件结构指针等于原句柄fd的指针,并且将文件引用数增1.最后返回新的文件句柄arg.
	current->close_on_exec &= ~(1 << arg);
   15360:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15365:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   1536b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1536f:	bb 01 00 00 00       	mov    $0x1,%ebx
   15374:	89 c1                	mov    %eax,%ecx
   15376:	d3 e3                	shl    %cl,%ebx
   15378:	89 d8                	mov    %ebx,%eax
   1537a:	f7 d0                	not    %eax
   1537c:	89 c1                	mov    %eax,%ecx
   1537e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15383:	21 ca                	and    %ecx,%edx
   15385:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
	(current->filp[arg] = current->filp[fd])->f_count++;
   1538b:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   15391:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15396:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1539a:	81 c1 d0 00 00 00    	add    $0xd0,%ecx
   153a0:	8b 54 8a 08          	mov    0x8(%edx,%ecx,4),%edx
   153a4:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   153a8:	81 c1 d0 00 00 00    	add    $0xd0,%ecx
   153ae:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
   153b2:	8b 54 24 0c          	mov    0xc(%esp),%edx
   153b6:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   153bc:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   153c0:	0f b7 50 04          	movzwl 0x4(%eax),%edx
   153c4:	83 c2 01             	add    $0x1,%edx
   153c7:	66 89 50 04          	mov    %dx,0x4(%eax)
	return arg;
   153cb:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   153cf:	5b                   	pop    %ebx
   153d0:	c3                   	ret    

000153d1 <sys_dup2>:
// 复制文件句柄系统调用。
// 复制指定文件句柄oldfd，新文件句柄值等于newfd。如果newfd已打开，则首先关闭之。
// 参数：oldfd -- 原文件句柄；newfd - 新文件句柄。
// 返回新文件句柄值。
int sys_dup2(unsigned int oldfd, unsigned int newfd)
{
   153d1:	83 ec 0c             	sub    $0xc,%esp
	sys_close(newfd);               						// 若句柄newfd已经打开，则首先关闭之。
   153d4:	8b 44 24 14          	mov    0x14(%esp),%eax
   153d8:	83 ec 0c             	sub    $0xc,%esp
   153db:	50                   	push   %eax
   153dc:	e8 5d 87 ff ff       	call   db3e <sys_close>
   153e1:	83 c4 10             	add    $0x10,%esp
	return dupfd(oldfd, newfd);      						// 复制并返回新句柄。
   153e4:	83 ec 08             	sub    $0x8,%esp
   153e7:	ff 74 24 1c          	pushl  0x1c(%esp)
   153eb:	ff 74 24 1c          	pushl  0x1c(%esp)
   153ef:	e8 fe fe ff ff       	call   152f2 <dupfd>
   153f4:	83 c4 10             	add    $0x10,%esp
}
   153f7:	83 c4 0c             	add    $0xc,%esp
   153fa:	c3                   	ret    

000153fb <sys_dup>:
// 复制指定文件句柄oldfd,新句柄的值是当前最小的未用句柄值.
// 参数:fildes -- 被复制的文件句柄.
// 返回新文件句柄值.
int sys_dup(unsigned int fildes)
{
	return dupfd(fildes, 0);
   153fb:	6a 00                	push   $0x0
   153fd:	ff 74 24 08          	pushl  0x8(%esp)
   15401:	e8 ec fe ff ff       	call   152f2 <dupfd>
   15406:	83 c4 08             	add    $0x8,%esp
}
   15409:	c3                   	ret    

0001540a <sys_fcntl>:
// arg是新文件句可取的最小值；对于设置文件操作和访问标志命令F_SETFL，arg是新的文件操作和访问模式。对于文件上锁命令
// F_GETLK、F_SETLK和F_SETLKW，arg是指向flock结构的指针。但本内核中没有实现文件上锁功能。
// 返回：若出错，则所有操作都返回-1.若成功，那么F_DUPFD返回新文件句柄；F_GETFD返回文件句柄的当前执行时关闭标志
// close_on_exec；F_GETFL返回文件操作和访问标志。
int sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg)
{
   1540a:	53                   	push   %ebx
   1540b:	83 ec 10             	sub    $0x10,%esp
	struct file * filp;

	// 首先检查给出的文件句柄有效性。然后根据不同命令cmd进行分别处理。如果文件句柄值大于一个进程最多打开文件数NR_OPEN，或者
	// 该句柄的文件结构指针为空，则返回出错码并退出。
	if (fd >= NR_OPEN || !(filp = current->filp[fd]))
   1540e:	83 7c 24 18 13       	cmpl   $0x13,0x18(%esp)
   15413:	77 1e                	ja     15433 <sys_fcntl+0x29>
   15415:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1541a:	8b 54 24 18          	mov    0x18(%esp),%edx
   1541e:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15424:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15428:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1542c:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15431:	75 0a                	jne    1543d <sys_fcntl+0x33>
		return -EBADF;
   15433:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15438:	e9 05 01 00 00       	jmp    15542 <sys_fcntl+0x138>
	switch (cmd) {
   1543d:	83 7c 24 1c 07       	cmpl   $0x7,0x1c(%esp)
   15442:	0f 87 f5 00 00 00    	ja     1553d <sys_fcntl+0x133>
   15448:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1544c:	c1 e0 02             	shl    $0x2,%eax
   1544f:	05 90 44 02 00       	add    $0x24490,%eax
   15454:	8b 00                	mov    (%eax),%eax
   15456:	ff e0                	jmp    *%eax
		case F_DUPFD:   										// 复制文件句柄。
			return dupfd(fd,arg);
   15458:	ff 74 24 20          	pushl  0x20(%esp)
   1545c:	ff 74 24 1c          	pushl  0x1c(%esp)
   15460:	e8 8d fe ff ff       	call   152f2 <dupfd>
   15465:	83 c4 08             	add    $0x8,%esp
   15468:	e9 d5 00 00 00       	jmp    15542 <sys_fcntl+0x138>
		case F_GETFD:   										// 取文件句柄的执行时关闭标志。
			return (current->close_on_exec >> fd) & 1;
   1546d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15472:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   15478:	8b 44 24 18          	mov    0x18(%esp),%eax
   1547c:	89 c1                	mov    %eax,%ecx
   1547e:	d3 ea                	shr    %cl,%edx
   15480:	89 d0                	mov    %edx,%eax
   15482:	83 e0 01             	and    $0x1,%eax
   15485:	e9 b8 00 00 00       	jmp    15542 <sys_fcntl+0x138>
		case F_SETFD:   										// 设置执行时关闭标志。arg位0置位是设置，否则关闭。
			if (arg & 1)
   1548a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1548e:	83 e0 01             	and    $0x1,%eax
   15491:	85 c0                	test   %eax,%eax
   15493:	74 2b                	je     154c0 <sys_fcntl+0xb6>
				current->close_on_exec |= (1 << fd);
   15495:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1549a:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   154a0:	8b 44 24 18          	mov    0x18(%esp),%eax
   154a4:	bb 01 00 00 00       	mov    $0x1,%ebx
   154a9:	89 c1                	mov    %eax,%ecx
   154ab:	d3 e3                	shl    %cl,%ebx
   154ad:	89 d8                	mov    %ebx,%eax
   154af:	89 c1                	mov    %eax,%ecx
   154b1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   154b6:	09 ca                	or     %ecx,%edx
   154b8:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
   154be:	eb 2b                	jmp    154eb <sys_fcntl+0xe1>
			else
				current->close_on_exec &= ~(1 << fd);
   154c0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   154c5:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   154cb:	8b 44 24 18          	mov    0x18(%esp),%eax
   154cf:	bb 01 00 00 00       	mov    $0x1,%ebx
   154d4:	89 c1                	mov    %eax,%ecx
   154d6:	d3 e3                	shl    %cl,%ebx
   154d8:	89 d8                	mov    %ebx,%eax
   154da:	f7 d0                	not    %eax
   154dc:	89 c1                	mov    %eax,%ecx
   154de:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   154e3:	21 ca                	and    %ecx,%edx
   154e5:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
			return 0;
   154eb:	b8 00 00 00 00       	mov    $0x0,%eax
   154f0:	eb 50                	jmp    15542 <sys_fcntl+0x138>
		case F_GETFL:   										// 取文件状态标志和访问模式。
			return filp->f_flags;
   154f2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   154f6:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   154fa:	0f b7 c0             	movzwl %ax,%eax
   154fd:	eb 43                	jmp    15542 <sys_fcntl+0x138>
		case F_SETFL:   										// 设置文件状态和访问模式（根据arg设置添加、非阻塞标志）。
			filp->f_flags &= ~(O_APPEND | O_NONBLOCK);
   154ff:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15503:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   15507:	80 e4 f3             	and    $0xf3,%ah
   1550a:	89 c2                	mov    %eax,%edx
   1550c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15510:	66 89 50 02          	mov    %dx,0x2(%eax)
			filp->f_flags |= arg & (O_APPEND | O_NONBLOCK);
   15514:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15518:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   1551c:	8b 54 24 20          	mov    0x20(%esp),%edx
   15520:	66 81 e2 00 0c       	and    $0xc00,%dx
   15525:	09 c2                	or     %eax,%edx
   15527:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1552b:	66 89 50 02          	mov    %dx,0x2(%eax)
			return 0;
   1552f:	b8 00 00 00 00       	mov    $0x0,%eax
   15534:	eb 0c                	jmp    15542 <sys_fcntl+0x138>
		case F_GETLK:	case F_SETLK:	case F_SETLKW:  		// 未实现。
			return -1;
   15536:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1553b:	eb 05                	jmp    15542 <sys_fcntl+0x138>
		default:
			return -1;
   1553d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
   15542:	83 c4 10             	add    $0x10,%esp
   15545:	5b                   	pop    %ebx
   15546:	c3                   	ret    

00015547 <sys_ioctl>:
// 该函数首先判断参数给出的文件描述符是否有效。然后根据对应i节点中文件属性判断文件类型，并根据具体文件类型调用相关
// 的处理函数。
// 参数：fd - 文件描述符； cmd - 命令码； arg - 参数。
// 返回：成功则返回0,否则返回出错码。
int sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg)
{
   15547:	83 ec 1c             	sub    $0x1c,%esp
	struct file * filp;
	int dev, mode;

	// 首先判断给出的文件描述符的有效性。如果文件描述符超出可打开的文件数，或者对应描述符的文件结构指针为空，则返回出错
	// 码退出。
	if (fd >= NR_OPEN || !(filp = current->filp[fd]))
   1554a:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
   1554f:	77 1e                	ja     1556f <sys_ioctl+0x28>
   15551:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15556:	8b 54 24 20          	mov    0x20(%esp),%edx
   1555a:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15560:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15564:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15568:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1556d:	75 0a                	jne    15579 <sys_ioctl+0x32>
		return -EBADF;
   1556f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15574:	e9 e6 00 00 00       	jmp    1565f <sys_ioctl+0x118>
	// 如果文件结构对应的是管道i节点，则根据进程是否有权操作该管道确定是否执行管道IO控制操作。若有权执行则调用pipe_ioctl()，
	// 否则返回无效文件错误码。
	if (filp->f_inode->i_pipe)
   15579:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1557d:	8b 40 08             	mov    0x8(%eax),%eax
   15580:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15584:	84 c0                	test   %al,%al
   15586:	74 3d                	je     155c5 <sys_ioctl+0x7e>
		return (filp->f_mode & 1) ? pipe_ioctl(filp->f_inode, cmd, arg) : -EBADF;
   15588:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1558c:	0f b7 00             	movzwl (%eax),%eax
   1558f:	0f b7 c0             	movzwl %ax,%eax
   15592:	83 e0 01             	and    $0x1,%eax
   15595:	85 c0                	test   %eax,%eax
   15597:	74 22                	je     155bb <sys_ioctl+0x74>
   15599:	8b 4c 24 28          	mov    0x28(%esp),%ecx
   1559d:	8b 54 24 24          	mov    0x24(%esp),%edx
   155a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   155a5:	8b 40 08             	mov    0x8(%eax),%eax
   155a8:	83 ec 04             	sub    $0x4,%esp
   155ab:	51                   	push   %ecx
   155ac:	52                   	push   %edx
   155ad:	50                   	push   %eax
   155ae:	e8 95 d3 ff ff       	call   12948 <pipe_ioctl>
   155b3:	83 c4 10             	add    $0x10,%esp
   155b6:	e9 a4 00 00 00       	jmp    1565f <sys_ioctl+0x118>
   155bb:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   155c0:	e9 9a 00 00 00       	jmp    1565f <sys_ioctl+0x118>
	// 对于其他类型文件，取对应文件的属性，并据此判断文件的类型。如果该文件即不是字符设备文件，也不是块设备文件，则返回
	// 出错码退出。若是字符或块设备文件，则从文件的i节点中取设备号。如果设备号大于系统现有的设备数，则返回出错号。
	mode = filp->f_inode->i_mode;
   155c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   155c9:	8b 40 08             	mov    0x8(%eax),%eax
   155cc:	0f b7 00             	movzwl (%eax),%eax
   155cf:	0f b7 c0             	movzwl %ax,%eax
   155d2:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!S_ISCHR(mode) && !S_ISBLK(mode))
   155d6:	8b 44 24 08          	mov    0x8(%esp),%eax
   155da:	25 00 f0 00 00       	and    $0xf000,%eax
   155df:	3d 00 20 00 00       	cmp    $0x2000,%eax
   155e4:	74 17                	je     155fd <sys_ioctl+0xb6>
   155e6:	8b 44 24 08          	mov    0x8(%esp),%eax
   155ea:	25 00 f0 00 00       	and    $0xf000,%eax
   155ef:	3d 00 60 00 00       	cmp    $0x6000,%eax
   155f4:	74 07                	je     155fd <sys_ioctl+0xb6>
		return -EINVAL;
   155f6:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   155fb:	eb 62                	jmp    1565f <sys_ioctl+0x118>
	dev = filp->f_inode->i_zone[0];
   155fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15601:	8b 40 08             	mov    0x8(%eax),%eax
   15604:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15608:	0f b7 c0             	movzwl %ax,%eax
   1560b:	89 44 24 04          	mov    %eax,0x4(%esp)
	if (MAJOR(dev) >= NRDEVS)
   1560f:	8b 44 24 04          	mov    0x4(%esp),%eax
   15613:	c1 e8 08             	shr    $0x8,%eax
   15616:	83 f8 07             	cmp    $0x7,%eax
   15619:	76 07                	jbe    15622 <sys_ioctl+0xdb>
		return -ENODEV;
   1561b:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
   15620:	eb 3d                	jmp    1565f <sys_ioctl+0x118>
	// 然后根据IO控制表ioctl_table查得对应设备的ioctl函数指针，并调用该函数。如果该设备在ioctl函数指针表中没有对应函数，
	// 则返回出错码。
	if (!ioctl_table[MAJOR(dev)])
   15622:	8b 44 24 04          	mov    0x4(%esp),%eax
   15626:	c1 e8 08             	shr    $0x8,%eax
   15629:	8b 04 85 a0 f3 02 00 	mov    0x2f3a0(,%eax,4),%eax
   15630:	85 c0                	test   %eax,%eax
   15632:	75 07                	jne    1563b <sys_ioctl+0xf4>
		return -ENOTTY;
   15634:	b8 e7 ff ff ff       	mov    $0xffffffe7,%eax
   15639:	eb 24                	jmp    1565f <sys_ioctl+0x118>
	return ioctl_table[MAJOR(dev)](dev, cmd, arg);
   1563b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1563f:	c1 e8 08             	shr    $0x8,%eax
   15642:	8b 04 85 a0 f3 02 00 	mov    0x2f3a0(,%eax,4),%eax
   15649:	8b 4c 24 28          	mov    0x28(%esp),%ecx
   1564d:	8b 54 24 24          	mov    0x24(%esp),%edx
   15651:	83 ec 04             	sub    $0x4,%esp
   15654:	51                   	push   %ecx
   15655:	52                   	push   %edx
   15656:	ff 74 24 10          	pushl  0x10(%esp)
   1565a:	ff d0                	call   *%eax
   1565c:	83 c4 10             	add    $0x10,%esp
}
   1565f:	83 c4 1c             	add    $0x1c,%esp
   15662:	c3                   	ret    

00015663 <free_ind>:
#include <sys/stat.h>           								// 文件状态头文件。含有文件或文件系统状态结构stat{}和常量。

// 释放所有一次间接块。（内部函数）
// 参数dev是文件系统所有设备的设备号；block是逻辑块号。成功则返回1，否则返回0。
static int free_ind(int dev, int block)
{
   15663:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	int block_busy;

	// 首先判断参数的有效性。如果逻辑块号为0,则返回。然后读取一次间接块，并释放其上表明使用的所有逻辑块，然后
	// 释放该一次间接块的缓冲块。函数free_block()用于释放设备上指定逻辑块号的磁盘块（fs/bitmap.c）。
	if (!block)
   15666:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   1566b:	75 0a                	jne    15677 <free_ind+0x14>
		return 1;
   1566d:	b8 01 00 00 00       	mov    $0x1,%eax
   15672:	e9 bf 00 00 00       	jmp    15736 <free_ind+0xd3>
	block_busy = 0;
   15677:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   1567e:	00 
	if (bh = bread(dev, block)) {
   1567f:	83 ec 08             	sub    $0x8,%esp
   15682:	ff 74 24 2c          	pushl  0x2c(%esp)
   15686:	ff 74 24 2c          	pushl  0x2c(%esp)
   1568a:	e8 b7 9f ff ff       	call   f646 <bread>
   1568f:	83 c4 10             	add    $0x10,%esp
   15692:	89 04 24             	mov    %eax,(%esp)
   15695:	83 3c 24 00          	cmpl   $0x0,(%esp)
   15699:	74 7a                	je     15715 <free_ind+0xb2>
		p = (unsigned short *) bh->b_data;              		// 指向缓冲块数据区。
   1569b:	8b 04 24             	mov    (%esp),%eax
   1569e:	8b 00                	mov    (%eax),%eax
   156a0:	89 44 24 0c          	mov    %eax,0xc(%esp)
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可有512个块号。
   156a4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   156ab:	00 
   156ac:	eb 4e                	jmp    156fc <free_ind+0x99>
			if (*p)
   156ae:	8b 44 24 0c          	mov    0xc(%esp),%eax
   156b2:	0f b7 00             	movzwl (%eax),%eax
   156b5:	66 85 c0             	test   %ax,%ax
   156b8:	74 38                	je     156f2 <free_ind+0x8f>
				if (free_block(dev, *p)) {       				// 释放指定的设备逻辑块。
   156ba:	8b 44 24 0c          	mov    0xc(%esp),%eax
   156be:	0f b7 00             	movzwl (%eax),%eax
   156c1:	0f b7 c0             	movzwl %ax,%eax
   156c4:	83 ec 08             	sub    $0x8,%esp
   156c7:	50                   	push   %eax
   156c8:	ff 74 24 2c          	pushl  0x2c(%esp)
   156cc:	e8 83 f5 ff ff       	call   14c54 <free_block>
   156d1:	83 c4 10             	add    $0x10,%esp
   156d4:	85 c0                	test   %eax,%eax
   156d6:	74 12                	je     156ea <free_ind+0x87>
					*p = 0;                 					// 清零。
   156d8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   156dc:	66 c7 00 00 00       	movw   $0x0,(%eax)
					bh->b_dirt = 1;         					// 设置已修改标志。
   156e1:	8b 04 24             	mov    (%esp),%eax
   156e4:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
   156e8:	eb 08                	jmp    156f2 <free_ind+0x8f>
				} else
					block_busy = 1;         					// 设置逻辑块没有释放标志。
   156ea:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
   156f1:	00 
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可有512个块号。
   156f2:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
   156f7:	83 44 24 0c 02       	addl   $0x2,0xc(%esp)
   156fc:	81 7c 24 08 ff 01 00 	cmpl   $0x1ff,0x8(%esp)
   15703:	00 
   15704:	7e a8                	jle    156ae <free_ind+0x4b>
		brelse(bh);                                     		// 然后释放间接块占用的缓冲块。
   15706:	83 ec 0c             	sub    $0xc,%esp
   15709:	ff 74 24 0c          	pushl  0xc(%esp)
   1570d:	e8 de 9e ff ff       	call   f5f0 <brelse>
   15712:	83 c4 10             	add    $0x10,%esp
	}
	// 最后释放设备上的一次间接块。但如果其中有逻辑块没有被释放，则返回0（失败）。
	if (block_busy)
   15715:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1571a:	74 07                	je     15723 <free_ind+0xc0>
		return 0;
   1571c:	b8 00 00 00 00       	mov    $0x0,%eax
   15721:	eb 13                	jmp    15736 <free_ind+0xd3>
	else
		return free_block(dev, block);                   		// 成功则返回1,否则返回0.
   15723:	83 ec 08             	sub    $0x8,%esp
   15726:	ff 74 24 2c          	pushl  0x2c(%esp)
   1572a:	ff 74 24 2c          	pushl  0x2c(%esp)
   1572e:	e8 21 f5 ff ff       	call   14c54 <free_block>
   15733:	83 c4 10             	add    $0x10,%esp
}
   15736:	83 c4 1c             	add    $0x1c,%esp
   15739:	c3                   	ret    

0001573a <free_dind>:

// 释放所有二次间接块。
// 参数dev是文件系统所在设备的设备号；block是逻辑块号。
static int free_dind(int dev, int block)
{
   1573a:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	int block_busy;                                         	// 在逻辑块没有被释放的标志。

	// 首先判断参数的有效性。如果逻辑块号为0,则返回。然后读取二次间接块的一级块，并释放其上表明使用的所有逻辑块，
	// 然后释放该一级块的缓冲块。
	if (!block)
   1573d:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   15742:	75 0a                	jne    1574e <free_dind+0x14>
		return 1;
   15744:	b8 01 00 00 00       	mov    $0x1,%eax
   15749:	e9 bf 00 00 00       	jmp    1580d <free_dind+0xd3>
	block_busy = 0;
   1574e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   15755:	00 
	if (bh = bread(dev, block)) {
   15756:	83 ec 08             	sub    $0x8,%esp
   15759:	ff 74 24 2c          	pushl  0x2c(%esp)
   1575d:	ff 74 24 2c          	pushl  0x2c(%esp)
   15761:	e8 e0 9e ff ff       	call   f646 <bread>
   15766:	83 c4 10             	add    $0x10,%esp
   15769:	89 04 24             	mov    %eax,(%esp)
   1576c:	83 3c 24 00          	cmpl   $0x0,(%esp)
   15770:	74 7a                	je     157ec <free_dind+0xb2>
		p = (unsigned short *) bh->b_data;              		// 指向缓冲块数据区。
   15772:	8b 04 24             	mov    (%esp),%eax
   15775:	8b 00                	mov    (%eax),%eax
   15777:	89 44 24 0c          	mov    %eax,0xc(%esp)
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可连接512个二级块。
   1577b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   15782:	00 
   15783:	eb 4e                	jmp    157d3 <free_dind+0x99>
			if (*p)
   15785:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15789:	0f b7 00             	movzwl (%eax),%eax
   1578c:	66 85 c0             	test   %ax,%ax
   1578f:	74 38                	je     157c9 <free_dind+0x8f>
				if (free_ind(dev, *p)) {         				// 释放所有一次间接块。
   15791:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15795:	0f b7 00             	movzwl (%eax),%eax
   15798:	0f b7 c0             	movzwl %ax,%eax
   1579b:	83 ec 08             	sub    $0x8,%esp
   1579e:	50                   	push   %eax
   1579f:	ff 74 24 2c          	pushl  0x2c(%esp)
   157a3:	e8 bb fe ff ff       	call   15663 <free_ind>
   157a8:	83 c4 10             	add    $0x10,%esp
   157ab:	85 c0                	test   %eax,%eax
   157ad:	74 12                	je     157c1 <free_dind+0x87>
					*p = 0;                 					// 清零。
   157af:	8b 44 24 0c          	mov    0xc(%esp),%eax
   157b3:	66 c7 00 00 00       	movw   $0x0,(%eax)
					bh->b_dirt = 1;         					// 设置已修改标志。
   157b8:	8b 04 24             	mov    (%esp),%eax
   157bb:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
   157bf:	eb 08                	jmp    157c9 <free_dind+0x8f>
				} else
					block_busy = 1;         					// 设置逻辑块没有释放标志。
   157c1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
   157c8:	00 
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可连接512个二级块。
   157c9:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
   157ce:	83 44 24 0c 02       	addl   $0x2,0xc(%esp)
   157d3:	81 7c 24 08 ff 01 00 	cmpl   $0x1ff,0x8(%esp)
   157da:	00 
   157db:	7e a8                	jle    15785 <free_dind+0x4b>
		brelse(bh);                                     		// 释放二次间接块占用的缓冲块。
   157dd:	83 ec 0c             	sub    $0xc,%esp
   157e0:	ff 74 24 0c          	pushl  0xc(%esp)
   157e4:	e8 07 9e ff ff       	call   f5f0 <brelse>
   157e9:	83 c4 10             	add    $0x10,%esp
	}
	// 最后释放设备上的二次间接块。但如果其中有逻辑块没有被释放，则返回0（失败）。
	if (block_busy)
   157ec:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   157f1:	74 07                	je     157fa <free_dind+0xc0>
		return 0;
   157f3:	b8 00 00 00 00       	mov    $0x0,%eax
   157f8:	eb 13                	jmp    1580d <free_dind+0xd3>
	else
		return free_block(dev, block);							// 最后释放存放第一间接块的逻辑块
   157fa:	83 ec 08             	sub    $0x8,%esp
   157fd:	ff 74 24 2c          	pushl  0x2c(%esp)
   15801:	ff 74 24 2c          	pushl  0x2c(%esp)
   15805:	e8 4a f4 ff ff       	call   14c54 <free_block>
   1580a:	83 c4 10             	add    $0x10,%esp
}
   1580d:	83 c4 1c             	add    $0x1c,%esp
   15810:	c3                   	ret    

00015811 <truncate>:

// 截断文件数据函数。
// 将节点对应的文件长度减0,并释放战胜的设备空间。
void truncate(struct m_inode * inode)
{
   15811:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	int block_busy;                 							// 有逻辑块没有被释放的标志。

	// 首先判断指定i节点有效性。如果不是常规文件、目录文件或链接项，则返回。
	if (!(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode) ||
   15814:	8b 44 24 20          	mov    0x20(%esp),%eax
   15818:	0f b7 00             	movzwl (%eax),%eax
   1581b:	0f b7 c0             	movzwl %ax,%eax
   1581e:	25 00 f0 00 00       	and    $0xf000,%eax
   15823:	3d 00 80 00 00       	cmp    $0x8000,%eax
   15828:	74 30                	je     1585a <truncate+0x49>
   1582a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1582e:	0f b7 00             	movzwl (%eax),%eax
   15831:	0f b7 c0             	movzwl %ax,%eax
   15834:	25 00 f0 00 00       	and    $0xf000,%eax
   15839:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1583e:	74 1a                	je     1585a <truncate+0x49>
	     S_ISLNK(inode->i_mode)))
   15840:	8b 44 24 20          	mov    0x20(%esp),%eax
   15844:	0f b7 00             	movzwl (%eax),%eax
   15847:	0f b7 c0             	movzwl %ax,%eax
   1584a:	25 00 f0 00 00       	and    $0xf000,%eax
	if (!(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode) ||
   1584f:	3d 00 a0 00 00       	cmp    $0xa000,%eax
   15854:	0f 85 51 01 00 00    	jne    159ab <truncate+0x19a>
		return;
	// 然后释放i节点的7个直接逻辑块，并将这7个逻辑块项全置零。函数free_block()用于释放设备上指定逻辑块的磁盘块
	// （fs/bitmap.c）。若有逻辑块忙而没有被释放则置块忙标志block_busy。
repeat:
   1585a:	90                   	nop
	block_busy = 0;
   1585b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   15862:	00 
	for (i = 0; i < 7; i++)
   15863:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1586a:	00 
   1586b:	eb 5c                	jmp    158c9 <truncate+0xb8>
		if (inode->i_zone[i]) {                 				// 如果块号不为0，则释放之。
   1586d:	8b 44 24 20          	mov    0x20(%esp),%eax
   15871:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15875:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
   1587a:	66 85 c0             	test   %ax,%ax
   1587d:	74 45                	je     158c4 <truncate+0xb3>
			if (free_block(inode->i_dev, inode->i_zone[i]))
   1587f:	8b 44 24 20          	mov    0x20(%esp),%eax
   15883:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15887:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
   1588c:	0f b7 d0             	movzwl %ax,%edx
   1588f:	8b 44 24 20          	mov    0x20(%esp),%eax
   15893:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   15897:	0f b7 c0             	movzwl %ax,%eax
   1589a:	83 ec 08             	sub    $0x8,%esp
   1589d:	52                   	push   %edx
   1589e:	50                   	push   %eax
   1589f:	e8 b0 f3 ff ff       	call   14c54 <free_block>
   158a4:	83 c4 10             	add    $0x10,%esp
   158a7:	85 c0                	test   %eax,%eax
   158a9:	74 11                	je     158bc <truncate+0xab>
				inode->i_zone[i] = 0;     						// 块指针置0。
   158ab:	8b 44 24 20          	mov    0x20(%esp),%eax
   158af:	8b 54 24 0c          	mov    0xc(%esp),%edx
   158b3:	66 c7 44 50 0e 00 00 	movw   $0x0,0xe(%eax,%edx,2)
   158ba:	eb 08                	jmp    158c4 <truncate+0xb3>
			else
				block_busy = 1;         						// 若没有释放掉则置标志。
   158bc:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   158c3:	00 
	for (i = 0; i < 7; i++)
   158c4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   158c9:	83 7c 24 0c 06       	cmpl   $0x6,0xc(%esp)
   158ce:	7e 9d                	jle    1586d <truncate+0x5c>
		}
	if (free_ind(inode->i_dev, inode->i_zone[7]))    			// 释放所有一次间接块。
   158d0:	8b 44 24 20          	mov    0x20(%esp),%eax
   158d4:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
   158d8:	0f b7 d0             	movzwl %ax,%edx
   158db:	8b 44 24 20          	mov    0x20(%esp),%eax
   158df:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   158e3:	0f b7 c0             	movzwl %ax,%eax
   158e6:	83 ec 08             	sub    $0x8,%esp
   158e9:	52                   	push   %edx
   158ea:	50                   	push   %eax
   158eb:	e8 73 fd ff ff       	call   15663 <free_ind>
   158f0:	83 c4 10             	add    $0x10,%esp
   158f3:	85 c0                	test   %eax,%eax
   158f5:	74 0c                	je     15903 <truncate+0xf2>
		inode->i_zone[7] = 0;                   				// 块指针置0。
   158f7:	8b 44 24 20          	mov    0x20(%esp),%eax
   158fb:	66 c7 40 1c 00 00    	movw   $0x0,0x1c(%eax)
   15901:	eb 08                	jmp    1590b <truncate+0xfa>
	else
		block_busy = 1;                         				// 若没有释放掉则置标志。
   15903:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1590a:	00 
	if (free_dind(inode->i_dev, inode->i_zone[8]))   			// 释放所有二次间接块。
   1590b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1590f:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
   15913:	0f b7 d0             	movzwl %ax,%edx
   15916:	8b 44 24 20          	mov    0x20(%esp),%eax
   1591a:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1591e:	0f b7 c0             	movzwl %ax,%eax
   15921:	83 ec 08             	sub    $0x8,%esp
   15924:	52                   	push   %edx
   15925:	50                   	push   %eax
   15926:	e8 0f fe ff ff       	call   1573a <free_dind>
   1592b:	83 c4 10             	add    $0x10,%esp
   1592e:	85 c0                	test   %eax,%eax
   15930:	74 0c                	je     1593e <truncate+0x12d>
		inode->i_zone[8] = 0;                   				// 块指针置0。
   15932:	8b 44 24 20          	mov    0x20(%esp),%eax
   15936:	66 c7 40 1e 00 00    	movw   $0x0,0x1e(%eax)
   1593c:	eb 08                	jmp    15946 <truncate+0x135>
	else
		block_busy = 1;                         				// 若没有释放掉则置标志。
   1593e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   15945:	00 
	// 此后设置i节点已修改标志，并且如果还有逻辑块由于 “忙”而没有被释放，则把当前进程运行时间片置0,以让当前进程先被
	// 切换去运行其他进程，稍等一会再重新执行释放操作。
	inode->i_dirt = 1;
   15946:	8b 44 24 20          	mov    0x20(%esp),%eax
   1594a:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	if (block_busy) {
   1594e:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   15953:	74 16                	je     1596b <truncate+0x15a>
		current->counter = 0;           						// 当前进程时间片置0。
   15955:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1595a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
		schedule();
   15961:	e8 dd 14 ff ff       	call   6e43 <schedule>
		goto repeat;
   15966:	e9 f0 fe ff ff       	jmp    1585b <truncate+0x4a>
	}
	inode->i_size = 0;                      					// 文件大小置零。
   1596b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1596f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	// 最后重新置文件修改时间和i节点改变时间为当前时间。宏CURRENT_TIME定义在头文件include/linux/sched.h中，定义
	// 为（startup_time+jiffies/HZ）。用于取得从1970:0:0:0开始到现在为止经过的秒数。
	inode->i_mtime = inode->i_ctime = CURRENT_TIME;
   15976:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   1597b:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   15981:	01 d0                	add    %edx,%eax
   15983:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   15988:	f7 e2                	mul    %edx
   1598a:	c1 ea 05             	shr    $0x5,%edx
   1598d:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   15992:	01 c2                	add    %eax,%edx
   15994:	8b 44 24 20          	mov    0x20(%esp),%eax
   15998:	89 50 2c             	mov    %edx,0x2c(%eax)
   1599b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1599f:	8b 50 2c             	mov    0x2c(%eax),%edx
   159a2:	8b 44 24 20          	mov    0x20(%esp),%eax
   159a6:	89 50 08             	mov    %edx,0x8(%eax)
   159a9:	eb 01                	jmp    159ac <truncate+0x19b>
		return;
   159ab:	90                   	nop
}
   159ac:	83 c4 1c             	add    $0x1c,%esp
   159af:	c3                   	ret    

000159b0 <get_fs_long>:
{
   159b0:	83 ec 10             	sub    $0x10,%esp
	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   159b3:	8b 44 24 14          	mov    0x14(%esp),%eax
   159b7:	64 8b 00             	mov    %fs:(%eax),%eax
   159ba:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   159be:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   159c2:	83 c4 10             	add    $0x10,%esp
   159c5:	c3                   	ret    

000159c6 <put_fs_long>:
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   159c6:	8b 44 24 04          	mov    0x4(%esp),%eax
   159ca:	8b 54 24 08          	mov    0x8(%esp),%edx
   159ce:	64 89 02             	mov    %eax,%fs:(%edx)
}
   159d1:	90                   	nop
   159d2:	c3                   	ret    

000159d3 <add_wait>:
} select_table;

// 把未准备好描述符的等待队列指针加入等待表wait_table中。参数*wait_address是与描述符相关的等待队列头指针。例如tty读缓冲队
// 列secondary的等待队列头指针是proc_list。参数p是do_select()中定义的等待表结构指针。
static void add_wait(struct task_struct ** wait_address, select_table * p)
{
   159d3:	83 ec 10             	sub    $0x10,%esp
	int i;

	// 首先判断描述符是否有对应的等待队列，若无则返回。然后在等待表中搜索参数指定的等待队列指针是否已经在等待表中设置过，若设置过也
	// 立刻返回。这个判断主要是针对管道文件描述符。例如若一个管道在等待可以进行读操作，那么其必定可以立刻进行写操作。
	if (!wait_address)
   159d6:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   159db:	74 70                	je     15a4d <add_wait+0x7a>
		return;
	for (i = 0 ; i < p->nr ; i++)
   159dd:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   159e4:	00 
   159e5:	eb 17                	jmp    159fe <add_wait+0x2b>
		if (p->entry[i].wait_address == wait_address)
   159e7:	8b 44 24 18          	mov    0x18(%esp),%eax
   159eb:	8b 54 24 0c          	mov    0xc(%esp),%edx
   159ef:	8b 44 d0 08          	mov    0x8(%eax,%edx,8),%eax
   159f3:	39 44 24 14          	cmp    %eax,0x14(%esp)
   159f7:	74 57                	je     15a50 <add_wait+0x7d>
	for (i = 0 ; i < p->nr ; i++)
   159f9:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   159fe:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a02:	8b 00                	mov    (%eax),%eax
   15a04:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   15a08:	7c dd                	jl     159e7 <add_wait+0x14>
			return;
	// 然后我们把描述符对应等待队列的头指针保存在等待表wait_table中，同时让等待表项的old_task字段指向等待队列头指针指向的任务（若
	// 无则为NULL），在让等待队列头指针指向当前任务。最后把等待表有效项计数值nr增1（其在第179行初始化为0）。
	p->entry[p->nr].wait_address = wait_address;
   15a0a:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a0e:	8b 10                	mov    (%eax),%edx
   15a10:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a14:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   15a18:	89 4c d0 08          	mov    %ecx,0x8(%eax,%edx,8)
	p->entry[p->nr].old_task = * wait_address;
   15a1c:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a20:	8b 10                	mov    (%eax),%edx
   15a22:	8b 44 24 14          	mov    0x14(%esp),%eax
   15a26:	8b 08                	mov    (%eax),%ecx
   15a28:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a2c:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
	*wait_address = current;
   15a30:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   15a36:	8b 44 24 14          	mov    0x14(%esp),%eax
   15a3a:	89 10                	mov    %edx,(%eax)
	p->nr++;
   15a3c:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a40:	8b 00                	mov    (%eax),%eax
   15a42:	8d 50 01             	lea    0x1(%eax),%edx
   15a45:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a49:	89 10                	mov    %edx,(%eax)
   15a4b:	eb 04                	jmp    15a51 <add_wait+0x7e>
		return;
   15a4d:	90                   	nop
   15a4e:	eb 01                	jmp    15a51 <add_wait+0x7e>
			return;
   15a50:	90                   	nop
}
   15a51:	83 c4 10             	add    $0x10,%esp
   15a54:	c3                   	ret    

00015a55 <free_wait>:

// 清空等待表。参数是等待表结构指针。本函数在do_select()函数中睡眠后被唤醒返回时被调用，用于唤醒等待表中处于各个等待队列上的其他
// 任务，它与kernel/sched.c中sleep_on()函数的后半部分代码几乎完全相同，请参考对sleep_on()函数的说明。
static void free_wait(select_table * p)
{
   15a55:	83 ec 1c             	sub    $0x1c,%esp
	struct task_struct ** tpp;

	// 如果等待表中各项（共nr个有效项）记录的等待队列头指针表明还有其他后来添加进的等待任务（例如其他进程调用sleep_on()函数而睡眠在该
	// 等待队列上），则此时等待队列头指针指向的不是当前进程，那么我们就需要先唤醒这些任务。操作方法是将等待队列头所指任务先置为就绪状态
	// （state = 0），并把自己设置为不可中断等待状态，即自己要等待这些后续进队列的任务被唤醒而执行时来唤醒本任务。然后重新执行调度程序。
	for (i = 0; i < p->nr ; i++) {
   15a58:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   15a5f:	00 
   15a60:	e9 8e 00 00 00       	jmp    15af3 <free_wait+0x9e>
		tpp = p->entry[i].wait_address;
   15a65:	8b 44 24 20          	mov    0x20(%esp),%eax
   15a69:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15a6d:	8b 44 d0 08          	mov    0x8(%eax,%edx,8),%eax
   15a71:	89 44 24 08          	mov    %eax,0x8(%esp)
		while (*tpp && *tpp != current) {
   15a75:	eb 1c                	jmp    15a93 <free_wait+0x3e>
			(*tpp)->state = 0;
   15a77:	8b 44 24 08          	mov    0x8(%esp),%eax
   15a7b:	8b 00                	mov    (%eax),%eax
   15a7d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			current->state = TASK_UNINTERRUPTIBLE;
   15a83:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15a88:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
			schedule();
   15a8e:	e8 b0 13 ff ff       	call   6e43 <schedule>
		while (*tpp && *tpp != current) {
   15a93:	8b 44 24 08          	mov    0x8(%esp),%eax
   15a97:	8b 00                	mov    (%eax),%eax
   15a99:	85 c0                	test   %eax,%eax
   15a9b:	74 0f                	je     15aac <free_wait+0x57>
   15a9d:	8b 44 24 08          	mov    0x8(%esp),%eax
   15aa1:	8b 10                	mov    (%eax),%edx
   15aa3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15aa8:	39 c2                	cmp    %eax,%edx
   15aaa:	75 cb                	jne    15a77 <free_wait+0x22>
		}
		// 执行到这里，说明等待表当前处理项中的等待队列头指针字段wait_address指向当前任务，若它为空，则表明调度有问题，于是显示警告信息。
		// 然后我们让等待队列头指针指向在我们前面进入队列的任务（第76行）。若此时该头指针确实指向一个任务而不是NULL，则说明队列中还有任务（
		// *tpp不为空），于是将该任务设置成就绪状态，唤醒之。最后把等待表的有效表项计数字段nr清零。
		if (!*tpp)
   15aac:	8b 44 24 08          	mov    0x8(%esp),%eax
   15ab0:	8b 00                	mov    (%eax),%eax
   15ab2:	85 c0                	test   %eax,%eax
   15ab4:	75 10                	jne    15ac6 <free_wait+0x71>
			printk("free_wait: NULL");
   15ab6:	83 ec 0c             	sub    $0xc,%esp
   15ab9:	68 b0 44 02 00       	push   $0x244b0
   15abe:	e8 7e 31 ff ff       	call   8c41 <printk>
   15ac3:	83 c4 10             	add    $0x10,%esp
		if (*tpp = p->entry[i].old_task)
   15ac6:	8b 44 24 20          	mov    0x20(%esp),%eax
   15aca:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15ace:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   15ad2:	8b 44 24 08          	mov    0x8(%esp),%eax
   15ad6:	89 10                	mov    %edx,(%eax)
   15ad8:	8b 44 24 08          	mov    0x8(%esp),%eax
   15adc:	8b 00                	mov    (%eax),%eax
   15ade:	85 c0                	test   %eax,%eax
   15ae0:	74 0c                	je     15aee <free_wait+0x99>
			(**tpp).state = 0;
   15ae2:	8b 44 24 08          	mov    0x8(%esp),%eax
   15ae6:	8b 00                	mov    (%eax),%eax
   15ae8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for (i = 0; i < p->nr ; i++) {
   15aee:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   15af3:	8b 44 24 20          	mov    0x20(%esp),%eax
   15af7:	8b 00                	mov    (%eax),%eax
   15af9:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   15afd:	0f 8c 62 ff ff ff    	jl     15a65 <free_wait+0x10>
	}
	p->nr = 0;
   15b03:	8b 44 24 20          	mov    0x20(%esp),%eax
   15b07:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   15b0d:	90                   	nop
   15b0e:	83 c4 1c             	add    $0x1c,%esp
   15b11:	c3                   	ret    

00015b12 <get_tty>:

// 根据文件i节点判断文件是不是字符终端设备文件。若是则返回其tty结构指针，否则返回NULL。
static struct tty_struct * get_tty(struct m_inode * inode)
{
   15b12:	83 ec 10             	sub    $0x10,%esp
	int major, minor;

	// 如果不是字符设备文件则返回NULL。如果主设备号不是5（控制终端）或4，则返回NULL。
	if (!S_ISCHR(inode->i_mode))
   15b15:	8b 44 24 14          	mov    0x14(%esp),%eax
   15b19:	0f b7 00             	movzwl (%eax),%eax
   15b1c:	0f b7 c0             	movzwl %ax,%eax
   15b1f:	25 00 f0 00 00       	and    $0xf000,%eax
   15b24:	3d 00 20 00 00       	cmp    $0x2000,%eax
   15b29:	74 0a                	je     15b35 <get_tty+0x23>
		return NULL;
   15b2b:	b8 00 00 00 00       	mov    $0x0,%eax
   15b30:	e9 9c 00 00 00       	jmp    15bd1 <get_tty+0xbf>
	if ((major = MAJOR(inode->i_zone[0])) != 5 && major != 4)
   15b35:	8b 44 24 14          	mov    0x14(%esp),%eax
   15b39:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15b3d:	66 c1 e8 08          	shr    $0x8,%ax
   15b41:	0f b7 c0             	movzwl %ax,%eax
   15b44:	89 44 24 08          	mov    %eax,0x8(%esp)
   15b48:	83 7c 24 08 05       	cmpl   $0x5,0x8(%esp)
   15b4d:	74 0e                	je     15b5d <get_tty+0x4b>
   15b4f:	83 7c 24 08 04       	cmpl   $0x4,0x8(%esp)
   15b54:	74 07                	je     15b5d <get_tty+0x4b>
		return NULL;
   15b56:	b8 00 00 00 00       	mov    $0x0,%eax
   15b5b:	eb 74                	jmp    15bd1 <get_tty+0xbf>
	// 如果主设备号是5，那么其终端设备号等于进程的tty字段值，否则就等于字符设备文件次设备号。如果终端设备号小于0,表示进程没有
	// 控制终端或没有使用终端，于是返回NULL。否则返回对应的tty结构指针。
	if (major == 5)
   15b5d:	83 7c 24 08 05       	cmpl   $0x5,0x8(%esp)
   15b62:	75 11                	jne    15b75 <get_tty+0x63>
		minor = current->tty;
   15b64:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15b69:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   15b6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15b73:	eb 14                	jmp    15b89 <get_tty+0x77>
	else
		minor = MINOR(inode->i_zone[0]);
   15b75:	8b 44 24 14          	mov    0x14(%esp),%eax
   15b79:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15b7d:	0f b7 c0             	movzwl %ax,%eax
   15b80:	25 ff 00 00 00       	and    $0xff,%eax
   15b85:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (minor < 0)
   15b89:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15b8e:	79 07                	jns    15b97 <get_tty+0x85>
		return NULL;
   15b90:	b8 00 00 00 00       	mov    $0x0,%eax
   15b95:	eb 3a                	jmp    15bd1 <get_tty+0xbf>
	return TTY_TABLE(minor);
   15b97:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15b9c:	74 26                	je     15bc4 <get_tty+0xb2>
   15b9e:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
   15ba3:	7f 11                	jg     15bb6 <get_tty+0xa4>
   15ba5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15ba9:	83 e8 01             	sub    $0x1,%eax
   15bac:	c1 e0 06             	shl    $0x6,%eax
   15baf:	05 20 28 04 00       	add    $0x42820,%eax
   15bb4:	eb 1b                	jmp    15bd1 <get_tty+0xbf>
   15bb6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15bba:	c1 e0 06             	shl    $0x6,%eax
   15bbd:	05 20 28 04 00       	add    $0x42820,%eax
   15bc2:	eb 0d                	jmp    15bd1 <get_tty+0xbf>
   15bc4:	a1 80 22 03 00       	mov    0x32280,%eax
   15bc9:	c1 e0 06             	shl    $0x6,%eax
   15bcc:	05 20 28 04 00       	add    $0x42820,%eax
}
   15bd1:	83 c4 10             	add    $0x10,%esp
   15bd4:	c3                   	ret    

00015bd5 <check_in>:
 * check_XX函数用于检查一个文件。我们知道该文件要么是管道文件、要么是字符设备文件，或者要么是一个FIFO（FIFO）还未实现。
 */
// 检查读文件操作是否准备好，即终端读缓冲队列secondary是否有字符可读，或者管道文件是否不空。参数wait是等待表指针；inode
// 是文件i节点指针。若描述符可进行读操作则返回1,否则返回0。
static int check_in(select_table * wait, struct m_inode * inode)
{
   15bd5:	83 ec 10             	sub    $0x10,%esp

	// 首先根据文件i节点调用get_tty()检测文件是不是一个tty终端（字符）设备文件，如果是则检查该终端读缓冲队列secondary中是否有
	// 字符可供读取，若有则返回1，若此时secondary为空则把当前任务添加到secondary的等待队列proc_list上并返回0。如果是管道文件
	// 则判断目前管道中是否有字符可读，若有则返回1，若没有（管道空）则把当前任务添加到管道i节点的等待队列上并返回0。注意，PIPE_-
	// EMPTY()宏使用管道当前头尾指针位置来判断管道是否为空。管道i节点的i_zone[0]和i_zone[1]字段分别存放着管道当前的头尾指针。
	if (tty = get_tty(inode))
   15bd8:	ff 74 24 18          	pushl  0x18(%esp)
   15bdc:	e8 31 ff ff ff       	call   15b12 <get_tty>
   15be1:	83 c4 04             	add    $0x4,%esp
   15be4:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15be8:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15bed:	74 38                	je     15c27 <check_in+0x52>
		if (!EMPTY(tty->secondary))
   15bef:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15bf3:	8b 40 3c             	mov    0x3c(%eax),%eax
   15bf6:	8b 50 04             	mov    0x4(%eax),%edx
   15bf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15bfd:	8b 40 3c             	mov    0x3c(%eax),%eax
   15c00:	8b 40 08             	mov    0x8(%eax),%eax
   15c03:	39 c2                	cmp    %eax,%edx
   15c05:	74 07                	je     15c0e <check_in+0x39>
			return 1;
   15c07:	b8 01 00 00 00       	mov    $0x1,%eax
   15c0c:	eb 5a                	jmp    15c68 <check_in+0x93>
		else
			add_wait(&tty->secondary->proc_list, wait);
   15c0e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c12:	8b 40 3c             	mov    0x3c(%eax),%eax
   15c15:	83 c0 0c             	add    $0xc,%eax
   15c18:	ff 74 24 14          	pushl  0x14(%esp)
   15c1c:	50                   	push   %eax
   15c1d:	e8 b1 fd ff ff       	call   159d3 <add_wait>
   15c22:	83 c4 08             	add    $0x8,%esp
   15c25:	eb 3c                	jmp    15c63 <check_in+0x8e>
	else if (inode->i_pipe)
   15c27:	8b 44 24 18          	mov    0x18(%esp),%eax
   15c2b:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15c2f:	84 c0                	test   %al,%al
   15c31:	74 30                	je     15c63 <check_in+0x8e>
		if (!PIPE_EMPTY(*inode))
   15c33:	8b 44 24 18          	mov    0x18(%esp),%eax
   15c37:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   15c3b:	8b 44 24 18          	mov    0x18(%esp),%eax
   15c3f:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   15c43:	66 39 c2             	cmp    %ax,%dx
   15c46:	74 07                	je     15c4f <check_in+0x7a>
			return 1;
   15c48:	b8 01 00 00 00       	mov    $0x1,%eax
   15c4d:	eb 19                	jmp    15c68 <check_in+0x93>
		else
			add_wait(&inode->i_wait, wait);
   15c4f:	8b 44 24 18          	mov    0x18(%esp),%eax
   15c53:	83 c0 20             	add    $0x20,%eax
   15c56:	ff 74 24 14          	pushl  0x14(%esp)
   15c5a:	50                   	push   %eax
   15c5b:	e8 73 fd ff ff       	call   159d3 <add_wait>
   15c60:	83 c4 08             	add    $0x8,%esp
	return 0;
   15c63:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15c68:	83 c4 10             	add    $0x10,%esp
   15c6b:	c3                   	ret    

00015c6c <check_out>:

// 检查文件写操作是否准备好，即终端写缓冲队列write_q中是否还有空闲位置可写，或者此时管道文件是否不满。参数wait是等待表指针；
// inode是文件i节点指针。若描述符可进行写操作则返回1，否则返回0。
static int check_out(select_table * wait, struct m_inode * inode)
{
   15c6c:	83 ec 10             	sub    $0x10,%esp
	struct tty_struct * tty;

	// 首先根据文件i节点调用get_tty()检测文件是不是一个tty终端（字符）设备文件，如果是则检查该终端写缓冲队列write_q中是否有空间
	// 可写入，若有则返回1,若没有空间则把当前任务添加到write_q等待队列proc_list上并返回0。如果是管道文件则判断目前管道中是否有
	// 空闲空间可写入字符，若有则返回1，若没有（管道满）则把当前任务添加到管道i节点的等待队列上并返回0。
	if (tty = get_tty(inode))
   15c6f:	ff 74 24 18          	pushl  0x18(%esp)
   15c73:	e8 9a fe ff ff       	call   15b12 <get_tty>
   15c78:	83 c4 04             	add    $0x4,%esp
   15c7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15c7f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15c84:	74 44                	je     15cca <check_out+0x5e>
		if (!FULL(tty->write_q))
   15c86:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c8a:	8b 40 38             	mov    0x38(%eax),%eax
   15c8d:	8b 50 08             	mov    0x8(%eax),%edx
   15c90:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c94:	8b 40 38             	mov    0x38(%eax),%eax
   15c97:	8b 40 04             	mov    0x4(%eax),%eax
   15c9a:	29 c2                	sub    %eax,%edx
   15c9c:	89 d0                	mov    %edx,%eax
   15c9e:	83 e8 01             	sub    $0x1,%eax
   15ca1:	25 ff 03 00 00       	and    $0x3ff,%eax
   15ca6:	85 c0                	test   %eax,%eax
   15ca8:	74 07                	je     15cb1 <check_out+0x45>
			return 1;
   15caa:	b8 01 00 00 00       	mov    $0x1,%eax
   15caf:	eb 68                	jmp    15d19 <check_out+0xad>
		else
			add_wait(&tty->write_q->proc_list, wait);
   15cb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15cb5:	8b 40 38             	mov    0x38(%eax),%eax
   15cb8:	83 c0 0c             	add    $0xc,%eax
   15cbb:	ff 74 24 14          	pushl  0x14(%esp)
   15cbf:	50                   	push   %eax
   15cc0:	e8 0e fd ff ff       	call   159d3 <add_wait>
   15cc5:	83 c4 08             	add    $0x8,%esp
   15cc8:	eb 4a                	jmp    15d14 <check_out+0xa8>
	else if (inode->i_pipe)
   15cca:	8b 44 24 18          	mov    0x18(%esp),%eax
   15cce:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15cd2:	84 c0                	test   %al,%al
   15cd4:	74 3e                	je     15d14 <check_out+0xa8>
		if (!PIPE_FULL(*inode))
   15cd6:	8b 44 24 18          	mov    0x18(%esp),%eax
   15cda:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   15cde:	8b 44 24 18          	mov    0x18(%esp),%eax
   15ce2:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   15ce6:	29 c2                	sub    %eax,%edx
   15ce8:	89 d0                	mov    %edx,%eax
   15cea:	0f b7 c0             	movzwl %ax,%eax
   15ced:	25 ff 0f 00 00       	and    $0xfff,%eax
   15cf2:	3d ff 0f 00 00       	cmp    $0xfff,%eax
   15cf7:	74 07                	je     15d00 <check_out+0x94>
			return 1;
   15cf9:	b8 01 00 00 00       	mov    $0x1,%eax
   15cfe:	eb 19                	jmp    15d19 <check_out+0xad>
		else
			add_wait(&inode->i_wait, wait);
   15d00:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d04:	83 c0 20             	add    $0x20,%eax
   15d07:	ff 74 24 14          	pushl  0x14(%esp)
   15d0b:	50                   	push   %eax
   15d0c:	e8 c2 fc ff ff       	call   159d3 <add_wait>
   15d11:	83 c4 08             	add    $0x8,%esp
	return 0;
   15d14:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15d19:	83 c4 10             	add    $0x10,%esp
   15d1c:	c3                   	ret    

00015d1d <check_ex>:

// 检查文件是否处于异常状态。对于终端设备文件，目前内核总是返回0。对于管道文件，如果此时两个管道描述符中有一个或都已被关闭，则
// 返回1，否则就把当前任务添加到管道i节点的等待队列上并返回0。返回0。参数wait等待表指针；inode是文件i节点指针。若出现异常条件
// 则返回1，否则返回0。
static int check_ex(select_table * wait, struct m_inode * inode)
{
   15d1d:	83 ec 10             	sub    $0x10,%esp
	struct tty_struct * tty;

	if (tty = get_tty(inode))
   15d20:	ff 74 24 18          	pushl  0x18(%esp)
   15d24:	e8 e9 fd ff ff       	call   15b12 <get_tty>
   15d29:	83 c4 04             	add    $0x4,%esp
   15d2c:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15d30:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15d35:	74 32                	je     15d69 <check_ex+0x4c>
		if (!FULL(tty->write_q))
   15d37:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15d3b:	8b 40 38             	mov    0x38(%eax),%eax
   15d3e:	8b 50 08             	mov    0x8(%eax),%edx
   15d41:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15d45:	8b 40 38             	mov    0x38(%eax),%eax
   15d48:	8b 40 04             	mov    0x4(%eax),%eax
   15d4b:	29 c2                	sub    %eax,%edx
   15d4d:	89 d0                	mov    %edx,%eax
   15d4f:	83 e8 01             	sub    $0x1,%eax
   15d52:	25 ff 03 00 00       	and    $0x3ff,%eax
   15d57:	85 c0                	test   %eax,%eax
   15d59:	74 07                	je     15d62 <check_ex+0x45>
			return 0;
   15d5b:	b8 00 00 00 00       	mov    $0x0,%eax
   15d60:	eb 41                	jmp    15da3 <check_ex+0x86>
		else
			return 0;
   15d62:	b8 00 00 00 00       	mov    $0x0,%eax
   15d67:	eb 3a                	jmp    15da3 <check_ex+0x86>
	else if (inode->i_pipe)
   15d69:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d6d:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15d71:	84 c0                	test   %al,%al
   15d73:	74 29                	je     15d9e <check_ex+0x81>
		if (inode->i_count < 2)
   15d75:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d79:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   15d7d:	66 83 f8 01          	cmp    $0x1,%ax
   15d81:	77 07                	ja     15d8a <check_ex+0x6d>
			return 1;
   15d83:	b8 01 00 00 00       	mov    $0x1,%eax
   15d88:	eb 19                	jmp    15da3 <check_ex+0x86>
		else
			add_wait(&inode->i_wait, wait);
   15d8a:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d8e:	83 c0 20             	add    $0x20,%eax
   15d91:	ff 74 24 14          	pushl  0x14(%esp)
   15d95:	50                   	push   %eax
   15d96:	e8 38 fc ff ff       	call   159d3 <add_wait>
   15d9b:	83 c4 08             	add    $0x8,%esp
	return 0;
   15d9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15da3:	83 c4 10             	add    $0x10,%esp
   15da6:	c3                   	ret    

00015da7 <do_select>:
// 集描述符检查函数check_XX()对每个描述符进行检查，同时统计描述符集中当前已经准备好的描述符个数。若有任何一个描述符已经准备好，
// 本函数就会立刻返回，否则进程就会在本函数中进入睡眠状态，并在过了超时时间或者由于某个描述符所在等待队列上的进程被唤醒而使本
// 进程继续运行。
int do_select(fd_set in, fd_set out, fd_set ex,
	fd_set *inp, fd_set *outp, fd_set *exp)
{
   15da7:	81 ec fc 01 00 00    	sub    $0x1fc,%esp

	// 首先把3个描述符集进行或操作，在mask中得到描述符集中有效符位屏蔽码。然后循环判断当前进程各个描述符是否有效并且包含在描述符集内。
	// 在循环中，每判断完一个描述符就会把mask右移1位，因此根据mask的最低有效位我们就可以判断相应描述符是否在用户给定的描述符集中。有
	// 效的描述符应该是一个管道文件描述符，或者是一个字符设备文件描述符，或者是一个FIFO描述符，其余类型的都作为无效描述符而返回EBADF
	// 错误。
	mask = in | out | ex;
   15dad:	8b 84 24 00 02 00 00 	mov    0x200(%esp),%eax
   15db4:	0b 84 24 04 02 00 00 	or     0x204(%esp),%eax
   15dbb:	0b 84 24 08 02 00 00 	or     0x208(%esp),%eax
   15dc2:	89 84 24 e4 01 00 00 	mov    %eax,0x1e4(%esp)
	for (i = 0 ; i < NR_OPEN ; i++, mask >>= 1) {
   15dc9:	c7 84 24 e8 01 00 00 	movl   $0x0,0x1e8(%esp)
   15dd0:	00 00 00 00 
   15dd4:	e9 f7 00 00 00       	jmp    15ed0 <do_select+0x129>
		if (!(mask & 1))                                        // 若不在描述符集中则继续判断下一个。
   15dd9:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   15de0:	83 e0 01             	and    $0x1,%eax
   15de3:	85 c0                	test   %eax,%eax
   15de5:	0f 84 cc 00 00 00    	je     15eb7 <do_select+0x110>
			continue;
		if (!current->filp[i])                                  // 若文件未打开，则返回描述符值。
   15deb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15df0:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15df7:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15dfd:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15e01:	85 c0                	test   %eax,%eax
   15e03:	75 0a                	jne    15e0f <do_select+0x68>
			return -EBADF;
   15e05:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15e0a:	e9 e2 02 00 00       	jmp    160f1 <do_select+0x34a>
		if (!current->filp[i]->f_inode)                         // 若文件i节点指针为空，则返回错误号。
   15e0f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15e14:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15e1b:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15e21:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15e25:	8b 40 08             	mov    0x8(%eax),%eax
   15e28:	85 c0                	test   %eax,%eax
   15e2a:	75 0a                	jne    15e36 <do_select+0x8f>
			return -EBADF;
   15e2c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15e31:	e9 bb 02 00 00       	jmp    160f1 <do_select+0x34a>
		if (current->filp[i]->f_inode->i_pipe)                  // 若是管道文件描述符，则有效。
   15e36:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15e3b:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15e42:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15e48:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15e4c:	8b 40 08             	mov    0x8(%eax),%eax
   15e4f:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15e53:	84 c0                	test   %al,%al
   15e55:	75 63                	jne    15eba <do_select+0x113>
			continue;
		if (S_ISCHR(current->filp[i]->f_inode->i_mode))         // 字符设备文件有效。
   15e57:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15e5c:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15e63:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15e69:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15e6d:	8b 40 08             	mov    0x8(%eax),%eax
   15e70:	0f b7 00             	movzwl (%eax),%eax
   15e73:	0f b7 c0             	movzwl %ax,%eax
   15e76:	25 00 f0 00 00       	and    $0xf000,%eax
   15e7b:	3d 00 20 00 00       	cmp    $0x2000,%eax
   15e80:	74 3b                	je     15ebd <do_select+0x116>
			continue;
		if (S_ISFIFO(current->filp[i]->f_inode->i_mode))        // FIFO也有效。
   15e82:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15e87:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15e8e:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15e94:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15e98:	8b 40 08             	mov    0x8(%eax),%eax
   15e9b:	0f b7 00             	movzwl (%eax),%eax
   15e9e:	0f b7 c0             	movzwl %ax,%eax
   15ea1:	25 00 f0 00 00       	and    $0xf000,%eax
   15ea6:	3d 00 10 00 00       	cmp    $0x1000,%eax
   15eab:	74 13                	je     15ec0 <do_select+0x119>
			continue;
		return -EBADF;                  						// 其余都作为无效描述符而返回。
   15ead:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15eb2:	e9 3a 02 00 00       	jmp    160f1 <do_select+0x34a>
			continue;
   15eb7:	90                   	nop
   15eb8:	eb 07                	jmp    15ec1 <do_select+0x11a>
			continue;
   15eba:	90                   	nop
   15ebb:	eb 04                	jmp    15ec1 <do_select+0x11a>
			continue;
   15ebd:	90                   	nop
   15ebe:	eb 01                	jmp    15ec1 <do_select+0x11a>
			continue;
   15ec0:	90                   	nop
	for (i = 0 ; i < NR_OPEN ; i++, mask >>= 1) {
   15ec1:	83 84 24 e8 01 00 00 	addl   $0x1,0x1e8(%esp)
   15ec8:	01 
   15ec9:	d1 ac 24 e4 01 00 00 	shrl   0x1e4(%esp)
   15ed0:	83 bc 24 e8 01 00 00 	cmpl   $0x13,0x1e8(%esp)
   15ed7:	13 
   15ed8:	0f 8e fb fe ff ff    	jle    15dd9 <do_select+0x32>
	}
	// 下面循环检查3个描述符集中的各个描述符是否准备好（可以操作）。此时mask用作当前正在处理描述符的屏蔽码。循环中的3个函数check_in()、
	// check_out()和check_ex()分别用来判断描述符是否已经准备好。若一个描述符已经准备好，则在相关描述符集中设置对应位，并且把已准备
	// 好描述符个数计数值count增1。第186行for循环语句中的mask+= mask行将于mask<<1。
repeat:
   15ede:	90                   	nop
	wait_table.nr = 0;
   15edf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
	*inp = *outp = *exp = 0;
   15ee6:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   15eed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   15ef3:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   15efa:	8b 10                	mov    (%eax),%edx
   15efc:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   15f03:	89 10                	mov    %edx,(%eax)
   15f05:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   15f0c:	8b 10                	mov    (%eax),%edx
   15f0e:	8b 84 24 0c 02 00 00 	mov    0x20c(%esp),%eax
   15f15:	89 10                	mov    %edx,(%eax)
	count = 0;
   15f17:	c7 84 24 ec 01 00 00 	movl   $0x0,0x1ec(%esp)
   15f1e:	00 00 00 00 
	mask = 1;
   15f22:	c7 84 24 e4 01 00 00 	movl   $0x1,0x1e4(%esp)
   15f29:	01 00 00 00 
	for (i = 0 ; i < NR_OPEN ; i++, mask += mask) {
   15f2d:	c7 84 24 e8 01 00 00 	movl   $0x0,0x1e8(%esp)
   15f34:	00 00 00 00 
   15f38:	e9 2f 01 00 00       	jmp    1606c <do_select+0x2c5>
		// 如果此时判断的描述符在读操作描述符集中，并且该描述符已经准备好可以进行读操作，则把该描述符在描述符集in中对应位置为1,同时把已准备
		// 好描述符个数计数值count增1。
		if (mask & in)
   15f3d:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   15f44:	23 84 24 00 02 00 00 	and    0x200(%esp),%eax
   15f4b:	85 c0                	test   %eax,%eax
   15f4d:	74 4e                	je     15f9d <do_select+0x1f6>
			if (check_in(&wait_table, current->filp[i]->f_inode)) {
   15f4f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15f54:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15f5b:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15f61:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15f65:	8b 40 08             	mov    0x8(%eax),%eax
   15f68:	50                   	push   %eax
   15f69:	8d 44 24 04          	lea    0x4(%esp),%eax
   15f6d:	50                   	push   %eax
   15f6e:	e8 62 fc ff ff       	call   15bd5 <check_in>
   15f73:	83 c4 08             	add    $0x8,%esp
   15f76:	85 c0                	test   %eax,%eax
   15f78:	74 23                	je     15f9d <do_select+0x1f6>
				*inp |= mask;   								// 描述符集中设置对应位。
   15f7a:	8b 84 24 0c 02 00 00 	mov    0x20c(%esp),%eax
   15f81:	8b 00                	mov    (%eax),%eax
   15f83:	0b 84 24 e4 01 00 00 	or     0x1e4(%esp),%eax
   15f8a:	89 c2                	mov    %eax,%edx
   15f8c:	8b 84 24 0c 02 00 00 	mov    0x20c(%esp),%eax
   15f93:	89 10                	mov    %edx,(%eax)
				count++;        								// 已准备好描述符个数计数。
   15f95:	83 84 24 ec 01 00 00 	addl   $0x1,0x1ec(%esp)
   15f9c:	01 
			}
		// 如果此时判断的描述符在写操作描述符集中，并且该描述符已经准备好可以进行写操作，则把该描述符在描述符集out中对应位置为1,同时把已准备
		// 好描述符个数计数值count增1。
		if (mask & out)
   15f9d:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   15fa4:	23 84 24 04 02 00 00 	and    0x204(%esp),%eax
   15fab:	85 c0                	test   %eax,%eax
   15fad:	74 4e                	je     15ffd <do_select+0x256>
			if (check_out(&wait_table, current->filp[i]->f_inode)) {
   15faf:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15fb4:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15fbb:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15fc1:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15fc5:	8b 40 08             	mov    0x8(%eax),%eax
   15fc8:	50                   	push   %eax
   15fc9:	8d 44 24 04          	lea    0x4(%esp),%eax
   15fcd:	50                   	push   %eax
   15fce:	e8 99 fc ff ff       	call   15c6c <check_out>
   15fd3:	83 c4 08             	add    $0x8,%esp
   15fd6:	85 c0                	test   %eax,%eax
   15fd8:	74 23                	je     15ffd <do_select+0x256>
				*outp |= mask;
   15fda:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   15fe1:	8b 00                	mov    (%eax),%eax
   15fe3:	0b 84 24 e4 01 00 00 	or     0x1e4(%esp),%eax
   15fea:	89 c2                	mov    %eax,%edx
   15fec:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   15ff3:	89 10                	mov    %edx,(%eax)
				count++;
   15ff5:	83 84 24 ec 01 00 00 	addl   $0x1,0x1ec(%esp)
   15ffc:	01 
			}
		// 如果此时判断的描述符在异常描述符集中，并且该描述符已经有异常出现，则把该描述符在描述符集ex中对应位置为1,同时把已准备好描述符个数计
		// 数值count增1。
		if (mask & ex)
   15ffd:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   16004:	23 84 24 08 02 00 00 	and    0x208(%esp),%eax
   1600b:	85 c0                	test   %eax,%eax
   1600d:	74 4e                	je     1605d <do_select+0x2b6>
			if (check_ex(&wait_table, current->filp[i]->f_inode)) {
   1600f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   16014:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   1601b:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   16021:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   16025:	8b 40 08             	mov    0x8(%eax),%eax
   16028:	50                   	push   %eax
   16029:	8d 44 24 04          	lea    0x4(%esp),%eax
   1602d:	50                   	push   %eax
   1602e:	e8 ea fc ff ff       	call   15d1d <check_ex>
   16033:	83 c4 08             	add    $0x8,%esp
   16036:	85 c0                	test   %eax,%eax
   16038:	74 23                	je     1605d <do_select+0x2b6>
				*exp |= mask;
   1603a:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   16041:	8b 00                	mov    (%eax),%eax
   16043:	0b 84 24 e4 01 00 00 	or     0x1e4(%esp),%eax
   1604a:	89 c2                	mov    %eax,%edx
   1604c:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   16053:	89 10                	mov    %edx,(%eax)
				count++;
   16055:	83 84 24 ec 01 00 00 	addl   $0x1,0x1ec(%esp)
   1605c:	01 
	for (i = 0 ; i < NR_OPEN ; i++, mask += mask) {
   1605d:	83 84 24 e8 01 00 00 	addl   $0x1,0x1e8(%esp)
   16064:	01 
   16065:	d1 a4 24 e4 01 00 00 	shll   0x1e4(%esp)
   1606c:	83 bc 24 e8 01 00 00 	cmpl   $0x13,0x1e8(%esp)
   16073:	13 
   16074:	0f 8e c3 fe ff ff    	jle    15f3d <do_select+0x196>
	}
	// 在对进程所有描述符判断处理后，若没有发现有已准备好的描述符（count==0），并且此时进程没有收到任何非阻塞信号，并且此时有等待着描述符
	// 或者等待时间还没有超时，那么我们就把当前进程状态设置成可中断睡眠状态，然后执行调度函数去执行其他任务。当内核又一次调度执行本任务时就
	// 调用free_wait()唤醒相关等待队列上本任务前后的任务,然后跳转到repeat标号处再次重新检测是否有我们关心的（描述符集中的）描述符已准备
	// 好。
	if (!(current->signal & ~current->blocked) &&
   1607a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1607f:	8b 50 0c             	mov    0xc(%eax),%edx
   16082:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   16087:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   1608d:	f7 d0                	not    %eax
   1608f:	21 d0                	and    %edx,%eax
   16091:	85 c0                	test   %eax,%eax
   16093:	75 45                	jne    160da <do_select+0x333>
	    (wait_table.nr || current->timeout) && !count) {
   16095:	8b 04 24             	mov    (%esp),%eax
	if (!(current->signal & ~current->blocked) &&
   16098:	85 c0                	test   %eax,%eax
   1609a:	75 0f                	jne    160ab <do_select+0x304>
	    (wait_table.nr || current->timeout) && !count) {
   1609c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   160a1:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
   160a7:	85 c0                	test   %eax,%eax
   160a9:	74 2f                	je     160da <do_select+0x333>
   160ab:	83 bc 24 ec 01 00 00 	cmpl   $0x0,0x1ec(%esp)
   160b2:	00 
   160b3:	75 25                	jne    160da <do_select+0x333>
		current->state = TASK_INTERRUPTIBLE;
   160b5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   160ba:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
		schedule();
   160c0:	e8 7e 0d ff ff       	call   6e43 <schedule>
		free_wait(&wait_table);         						// 本任务被唤醒返回后从这里开始执行。
   160c5:	83 ec 0c             	sub    $0xc,%esp
   160c8:	8d 44 24 0c          	lea    0xc(%esp),%eax
   160cc:	50                   	push   %eax
   160cd:	e8 83 f9 ff ff       	call   15a55 <free_wait>
   160d2:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   160d5:	e9 05 fe ff ff       	jmp    15edf <do_select+0x138>
	}
	// 如果此时count不等于0，或者接收到了信号，或者等待时间到并且没有需要等待的描述符，那么我们就调用free_wait()唤醒等待队列上
	// 的任务，然后返回已准备好的描述符个数。
	free_wait(&wait_table);
   160da:	83 ec 0c             	sub    $0xc,%esp
   160dd:	8d 44 24 0c          	lea    0xc(%esp),%eax
   160e1:	50                   	push   %eax
   160e2:	e8 6e f9 ff ff       	call   15a55 <free_wait>
   160e7:	83 c4 10             	add    $0x10,%esp
	return count;
   160ea:	8b 84 24 ec 01 00 00 	mov    0x1ec(%esp),%eax
}
   160f1:	81 c4 fc 01 00 00    	add    $0x1fc,%esp
   160f7:	c3                   	ret    

000160f8 <sys_select>:
// 函数来完成。sys_select()会首先根据参数传递来的缓冲区指针从用户数据空间把select()函数调用的参数分解复制到内核空间，然后
// 设置需要等待的超时时间值timeout，接着调用do_select()执行select功能，返回后就把处理结果再复制回用户空间中。
// 参数buffer指向用户数据区中select()函数的第1个参数处。如果返回值小于0表示执行时出现错误；如果返回值等于0,则表示在规定等
// 待时间内没有描述符准备好操作；如果返回值大于0,则表示已准备好的描述符数量。
int sys_select( unsigned long *buffer )
{
   160f8:	83 ec 4c             	sub    $0x4c,%esp
	/* Perform the select(nd, in, out, ex, tv) system call. */
	/* 执行select(nd, in, out, ex, tv)系统调用 */
	// 首先定义几个局部变量，用于把指针参数传递来的select()函数参数分解开来。
	int i;
	fd_set res_in, in = 0, *inp;            						// 读操作描述符集。
   160fb:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%esp)
   16102:	00 
	fd_set res_out, out = 0, *outp;         						// 写操作描述符集。
   16103:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%esp)
   1610a:	00 
	fd_set res_ex, ex = 0, *exp;            						// 异常条件描述符集。
   1610b:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
   16112:	00 
	unsigned long timeout;

	// 然后从用户数据区把参数分别隔离复制到局部指针变量中，并根据描述符集指针是否有效分别取得3个描述符集in（读）、out（写）和ex
	// （异常）。其中mask也是一个描述符集变量，根据3个描述符集中最大描述符值+1（即第1个参数nd的值），它被设置成用户程序关心的所有
	// 描述符的屏蔽码。例如，若nd = 4,则mask = 0b00001111（共32位）。
	mask = ~((~0) << get_fs_long(buffer++));
   16113:	8b 44 24 50          	mov    0x50(%esp),%eax
   16117:	8d 50 04             	lea    0x4(%eax),%edx
   1611a:	89 54 24 50          	mov    %edx,0x50(%esp)
   1611e:	50                   	push   %eax
   1611f:	e8 8c f8 ff ff       	call   159b0 <get_fs_long>
   16124:	83 c4 04             	add    $0x4,%esp
   16127:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   1612c:	89 c1                	mov    %eax,%ecx
   1612e:	d3 e2                	shl    %cl,%edx
   16130:	89 d0                	mov    %edx,%eax
   16132:	f7 d0                	not    %eax
   16134:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	inp = (fd_set *) get_fs_long(buffer++);
   16138:	8b 44 24 50          	mov    0x50(%esp),%eax
   1613c:	8d 50 04             	lea    0x4(%eax),%edx
   1613f:	89 54 24 50          	mov    %edx,0x50(%esp)
   16143:	50                   	push   %eax
   16144:	e8 67 f8 ff ff       	call   159b0 <get_fs_long>
   16149:	83 c4 04             	add    $0x4,%esp
   1614c:	89 44 24 28          	mov    %eax,0x28(%esp)
	outp = (fd_set *) get_fs_long(buffer++);
   16150:	8b 44 24 50          	mov    0x50(%esp),%eax
   16154:	8d 50 04             	lea    0x4(%eax),%edx
   16157:	89 54 24 50          	mov    %edx,0x50(%esp)
   1615b:	50                   	push   %eax
   1615c:	e8 4f f8 ff ff       	call   159b0 <get_fs_long>
   16161:	83 c4 04             	add    $0x4,%esp
   16164:	89 44 24 24          	mov    %eax,0x24(%esp)
	exp = (fd_set *) get_fs_long(buffer++);
   16168:	8b 44 24 50          	mov    0x50(%esp),%eax
   1616c:	8d 50 04             	lea    0x4(%eax),%edx
   1616f:	89 54 24 50          	mov    %edx,0x50(%esp)
   16173:	50                   	push   %eax
   16174:	e8 37 f8 ff ff       	call   159b0 <get_fs_long>
   16179:	83 c4 04             	add    $0x4,%esp
   1617c:	89 44 24 20          	mov    %eax,0x20(%esp)
	tvp = (struct timeval *) get_fs_long(buffer);
   16180:	ff 74 24 50          	pushl  0x50(%esp)
   16184:	e8 27 f8 ff ff       	call   159b0 <get_fs_long>
   16189:	83 c4 04             	add    $0x4,%esp
   1618c:	89 44 24 1c          	mov    %eax,0x1c(%esp)

	if (inp)                                						// 若指针有效，则取读操作描述符集。
   16190:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   16195:	74 14                	je     161ab <sys_select+0xb3>
		in = mask & get_fs_long(inp);
   16197:	ff 74 24 28          	pushl  0x28(%esp)
   1619b:	e8 10 f8 ff ff       	call   159b0 <get_fs_long>
   161a0:	83 c4 04             	add    $0x4,%esp
   161a3:	23 44 24 2c          	and    0x2c(%esp),%eax
   161a7:	89 44 24 3c          	mov    %eax,0x3c(%esp)
	if (outp)                               						// 若指针有效，则取写操作描述符集。
   161ab:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   161b0:	74 14                	je     161c6 <sys_select+0xce>
		out = mask & get_fs_long(outp);
   161b2:	ff 74 24 24          	pushl  0x24(%esp)
   161b6:	e8 f5 f7 ff ff       	call   159b0 <get_fs_long>
   161bb:	83 c4 04             	add    $0x4,%esp
   161be:	23 44 24 2c          	and    0x2c(%esp),%eax
   161c2:	89 44 24 38          	mov    %eax,0x38(%esp)
	if (exp)                                						// 若指针有效，则取异常描述符集。
   161c6:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   161cb:	74 14                	je     161e1 <sys_select+0xe9>
		ex = mask & get_fs_long(exp);
   161cd:	ff 74 24 20          	pushl  0x20(%esp)
   161d1:	e8 da f7 ff ff       	call   159b0 <get_fs_long>
   161d6:	83 c4 04             	add    $0x4,%esp
   161d9:	23 44 24 2c          	and    0x2c(%esp),%eax
   161dd:	89 44 24 34          	mov    %eax,0x34(%esp)
	// 接下来我们尝试从时间结构中取出等待（睡眠）时间值timeout。首先把timeout初始化成最大（无限）值，然后从用户数据空间取得该时间
	// 结构中设置的时间值，经转换和加上系统当前嘀嗒值jiffies，最后得到需要等待的时间嘀嗒数值timeout。我们用此值来设置当前进程应该
	// 等待的延时。另外，第241行上tv_usec字段是微秒值，把它除以1000000后可得到对应秒数，再乘以系统每秒嘀嗒数HZ，即把tv_usec转换
	// 成嘀嗒值。
	timeout = 0xffffffff;
   161e1:	c7 44 24 30 ff ff ff 	movl   $0xffffffff,0x30(%esp)
   161e8:	ff 
	if (tvp) {
   161e9:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   161ee:	74 3d                	je     1622d <sys_select+0x135>
		timeout = get_fs_long((unsigned long *) & tvp->tv_usec) / (1000000 / HZ);
   161f0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   161f4:	83 c0 04             	add    $0x4,%eax
   161f7:	50                   	push   %eax
   161f8:	e8 b3 f7 ff ff       	call   159b0 <get_fs_long>
   161fd:	83 c4 04             	add    $0x4,%esp
   16200:	ba 59 17 b7 d1       	mov    $0xd1b71759,%edx
   16205:	f7 e2                	mul    %edx
   16207:	89 d0                	mov    %edx,%eax
   16209:	c1 e8 0d             	shr    $0xd,%eax
   1620c:	89 44 24 30          	mov    %eax,0x30(%esp)
		timeout += get_fs_long((unsigned long *) & tvp->tv_sec) * HZ;
   16210:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   16214:	50                   	push   %eax
   16215:	e8 96 f7 ff ff       	call   159b0 <get_fs_long>
   1621a:	83 c4 04             	add    $0x4,%esp
   1621d:	6b c0 64             	imul   $0x64,%eax,%eax
   16220:	01 44 24 30          	add    %eax,0x30(%esp)
		timeout += jiffies;
   16224:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   16229:	01 44 24 30          	add    %eax,0x30(%esp)
	}
	current->timeout = timeout;             						// 设置当前进程应该延时的嘀嗒值。
   1622d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   16232:	8b 54 24 30          	mov    0x30(%esp),%edx
   16236:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
	// select()函数的主要工作在do_select()中完成。在调用该函数之后的代码用于把处理结果复制到用户数据区中，返回给用户。为了避免出现
	// 竞争条件，在调用do_select()前需要禁止中断，并在该函数返回后再开启中断。
	// 如果在do_select()返回之后进程的等待延时字段timeout还大于当前系统计时嘀嗒值jiffies，说明在超时之前已经有描述准备好，于是这里
	// 我们先记下到超时还剩余的时间值，随后我们会把这个值返回给用户。如果进程的等待延时字段timeout已经小于或等于当前系统jiffies，表示
	// do_select()可能是由于超时而返回，因此把剩余时间值设置为0。
	cli();                  										// 禁止响应中断。
   1623c:	fa                   	cli    
	i = do_select(in, out, ex, &res_in, &res_out, &res_ex);
   1623d:	83 ec 08             	sub    $0x8,%esp
   16240:	8d 44 24 14          	lea    0x14(%esp),%eax
   16244:	50                   	push   %eax
   16245:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   16249:	50                   	push   %eax
   1624a:	8d 44 24 24          	lea    0x24(%esp),%eax
   1624e:	50                   	push   %eax
   1624f:	ff 74 24 48          	pushl  0x48(%esp)
   16253:	ff 74 24 50          	pushl  0x50(%esp)
   16257:	ff 74 24 58          	pushl  0x58(%esp)
   1625b:	e8 47 fb ff ff       	call   15da7 <do_select>
   16260:	83 c4 20             	add    $0x20,%esp
   16263:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (current->timeout > jiffies)
   16267:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1626c:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
   16272:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   16277:	39 c2                	cmp    %eax,%edx
   16279:	76 1a                	jbe    16295 <sys_select+0x19d>
		timeout = current->timeout - jiffies;
   1627b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   16280:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
   16286:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   1628b:	29 c2                	sub    %eax,%edx
   1628d:	89 d0                	mov    %edx,%eax
   1628f:	89 44 24 30          	mov    %eax,0x30(%esp)
   16293:	eb 08                	jmp    1629d <sys_select+0x1a5>
	else
		timeout = 0;
   16295:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
   1629c:	00 
	sti();                  										// 开启中断响应。
   1629d:	fb                   	sti    
	// 接下来我们把进程的超时字段清零。如果do_select()返回的已准备好描述符个数小于0，表示执行出错，于是返回这个错误号。然后我们把处理过
	// 的描述符集内容和延迟时间结构内容写回到用户数据缓冲空间。在时间结构内容时还需要先将嘀嗒时间单位表示的剩余延迟时间转换成秒和微秒值。
	current->timeout = 0;
   1629e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   162a3:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
   162aa:	00 00 00 
	if (i < 0)
   162ad:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   162b2:	79 09                	jns    162bd <sys_select+0x1c5>
		return i;
   162b4:	8b 44 24 18          	mov    0x18(%esp),%eax
   162b8:	e9 2c 01 00 00       	jmp    163e9 <sys_select+0x2f1>
	if (inp) {
   162bd:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   162c2:	74 25                	je     162e9 <sys_select+0x1f1>
		verify_area(inp, 4);
   162c4:	83 ec 08             	sub    $0x8,%esp
   162c7:	6a 04                	push   $0x4
   162c9:	ff 74 24 34          	pushl  0x34(%esp)
   162cd:	e8 c9 20 ff ff       	call   839b <verify_area>
   162d2:	83 c4 10             	add    $0x10,%esp
		put_fs_long(res_in, inp);        							// 可读描述符值。
   162d5:	8b 44 24 14          	mov    0x14(%esp),%eax
   162d9:	83 ec 08             	sub    $0x8,%esp
   162dc:	ff 74 24 30          	pushl  0x30(%esp)
   162e0:	50                   	push   %eax
   162e1:	e8 e0 f6 ff ff       	call   159c6 <put_fs_long>
   162e6:	83 c4 10             	add    $0x10,%esp
	}
	if (outp) {
   162e9:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   162ee:	74 25                	je     16315 <sys_select+0x21d>
		verify_area(outp, 4);
   162f0:	83 ec 08             	sub    $0x8,%esp
   162f3:	6a 04                	push   $0x4
   162f5:	ff 74 24 30          	pushl  0x30(%esp)
   162f9:	e8 9d 20 ff ff       	call   839b <verify_area>
   162fe:	83 c4 10             	add    $0x10,%esp
		put_fs_long(res_out, outp);      							// 可写描述符值。
   16301:	8b 44 24 10          	mov    0x10(%esp),%eax
   16305:	83 ec 08             	sub    $0x8,%esp
   16308:	ff 74 24 2c          	pushl  0x2c(%esp)
   1630c:	50                   	push   %eax
   1630d:	e8 b4 f6 ff ff       	call   159c6 <put_fs_long>
   16312:	83 c4 10             	add    $0x10,%esp
	}
	if (exp) {
   16315:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1631a:	74 25                	je     16341 <sys_select+0x249>
		verify_area(exp, 4);
   1631c:	83 ec 08             	sub    $0x8,%esp
   1631f:	6a 04                	push   $0x4
   16321:	ff 74 24 2c          	pushl  0x2c(%esp)
   16325:	e8 71 20 ff ff       	call   839b <verify_area>
   1632a:	83 c4 10             	add    $0x10,%esp
		put_fs_long(res_ex, exp);        							// 出现异常条件描述符集。
   1632d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16331:	83 ec 08             	sub    $0x8,%esp
   16334:	ff 74 24 28          	pushl  0x28(%esp)
   16338:	50                   	push   %eax
   16339:	e8 88 f6 ff ff       	call   159c6 <put_fs_long>
   1633e:	83 c4 10             	add    $0x10,%esp
	}
	if (tvp) {
   16341:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   16346:	74 74                	je     163bc <sys_select+0x2c4>
		verify_area(tvp, sizeof(*tvp));
   16348:	83 ec 08             	sub    $0x8,%esp
   1634b:	6a 08                	push   $0x8
   1634d:	ff 74 24 28          	pushl  0x28(%esp)
   16351:	e8 45 20 ff ff       	call   839b <verify_area>
   16356:	83 c4 10             	add    $0x10,%esp
		put_fs_long(timeout / HZ, (unsigned long *) &tvp->tv_sec);  // 秒。
   16359:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   1635d:	8b 44 24 30          	mov    0x30(%esp),%eax
   16361:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   16366:	f7 e2                	mul    %edx
   16368:	89 d0                	mov    %edx,%eax
   1636a:	c1 e8 05             	shr    $0x5,%eax
   1636d:	83 ec 08             	sub    $0x8,%esp
   16370:	51                   	push   %ecx
   16371:	50                   	push   %eax
   16372:	e8 4f f6 ff ff       	call   159c6 <put_fs_long>
   16377:	83 c4 10             	add    $0x10,%esp
		timeout %= HZ;
   1637a:	8b 4c 24 30          	mov    0x30(%esp),%ecx
   1637e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   16383:	89 c8                	mov    %ecx,%eax
   16385:	f7 e2                	mul    %edx
   16387:	89 d0                	mov    %edx,%eax
   16389:	c1 e8 05             	shr    $0x5,%eax
   1638c:	6b c0 64             	imul   $0x64,%eax,%eax
   1638f:	29 c1                	sub    %eax,%ecx
   16391:	89 c8                	mov    %ecx,%eax
   16393:	89 44 24 30          	mov    %eax,0x30(%esp)
		timeout *= (1000000 / HZ);
   16397:	8b 44 24 30          	mov    0x30(%esp),%eax
   1639b:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
   163a1:	89 44 24 30          	mov    %eax,0x30(%esp)
		put_fs_long(timeout, (unsigned long *) &tvp->tv_usec);      // 微秒。
   163a5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   163a9:	83 c0 04             	add    $0x4,%eax
   163ac:	83 ec 08             	sub    $0x8,%esp
   163af:	50                   	push   %eax
   163b0:	ff 74 24 3c          	pushl  0x3c(%esp)
   163b4:	e8 0d f6 ff ff       	call   159c6 <put_fs_long>
   163b9:	83 c4 10             	add    $0x10,%esp
	}
	// 如果此时并没有已准备好的描述符，并且收到了某个非阻塞信号，则返回被中断错误号。否则返回已准备好的描述符个数值。
	if (!i && (current->signal & ~current->blocked))
   163bc:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   163c1:	75 22                	jne    163e5 <sys_select+0x2ed>
   163c3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   163c8:	8b 50 0c             	mov    0xc(%eax),%edx
   163cb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   163d0:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   163d6:	f7 d0                	not    %eax
   163d8:	21 d0                	and    %edx,%eax
   163da:	85 c0                	test   %eax,%eax
   163dc:	74 07                	je     163e5 <sys_select+0x2ed>
		return -EINTR;
   163de:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
   163e3:	eb 04                	jmp    163e9 <sys_select+0x2f1>
	return i;
   163e5:	8b 44 24 18          	mov    0x18(%esp),%eax
}
   163e9:	83 c4 4c             	add    $0x4c,%esp
   163ec:	c3                   	ret    

000163ed <lock_buffer>:
int * blk_size[NR_BLK_DEV] = { NULL, NULL, };

// 锁定指定缓冲块.
// 如果指定的缓冲块已经被其他任务锁定,则使自己睡眠(不可中断的等待),直到被执行解锁缓冲块的任务明确地唤醒
static inline void lock_buffer(struct buffer_head * bh)
{
   163ed:	83 ec 0c             	sub    $0xc,%esp
	cli();							// 清中断许可.
   163f0:	fa                   	cli    
	while (bh->b_lock)				// 如果缓冲区已被锁定则睡眠,直到缓冲区解锁.
   163f1:	eb 13                	jmp    16406 <lock_buffer+0x19>
		sleep_on(&bh->b_wait);
   163f3:	8b 44 24 10          	mov    0x10(%esp),%eax
   163f7:	83 c0 10             	add    $0x10,%eax
   163fa:	83 ec 0c             	sub    $0xc,%esp
   163fd:	50                   	push   %eax
   163fe:	e8 31 0d ff ff       	call   7134 <sleep_on>
   16403:	83 c4 10             	add    $0x10,%esp
	while (bh->b_lock)				// 如果缓冲区已被锁定则睡眠,直到缓冲区解锁.
   16406:	8b 44 24 10          	mov    0x10(%esp),%eax
   1640a:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1640e:	84 c0                	test   %al,%al
   16410:	75 e1                	jne    163f3 <lock_buffer+0x6>
	bh->b_lock = 1;					// 立刻锁定缓冲区.
   16412:	8b 44 24 10          	mov    0x10(%esp),%eax
   16416:	c6 40 0d 01          	movb   $0x1,0xd(%eax)
	sti();							// 开中断.
   1641a:	fb                   	sti    
}
   1641b:	90                   	nop
   1641c:	83 c4 0c             	add    $0xc,%esp
   1641f:	c3                   	ret    

00016420 <unlock_buffer>:

// 释放(解锁)锁定的缓冲区.
// 该函数与hlk.h文件中的同名函数完全一样.
static inline void unlock_buffer(struct buffer_head * bh)
{
   16420:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)				// 如果该缓冲区没有被锁定,则打印出错信息.
   16423:	8b 44 24 10          	mov    0x10(%esp),%eax
   16427:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1642b:	84 c0                	test   %al,%al
   1642d:	75 10                	jne    1643f <unlock_buffer+0x1f>
		printk("ll_rw_block.c: buffer not locked\n\r");
   1642f:	83 ec 0c             	sub    $0xc,%esp
   16432:	68 c0 44 02 00       	push   $0x244c0
   16437:	e8 05 28 ff ff       	call   8c41 <printk>
   1643c:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;					// 清锁定标志.
   1643f:	8b 44 24 10          	mov    0x10(%esp),%eax
   16443:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);			// 唤醒等待该缓冲区的任务.
   16447:	8b 44 24 10          	mov    0x10(%esp),%eax
   1644b:	83 c0 10             	add    $0x10,%eax
   1644e:	83 ec 0c             	sub    $0xc,%esp
   16451:	50                   	push   %eax
   16452:	e8 f6 0c ff ff       	call   714d <wake_up>
   16457:	83 c4 10             	add    $0x10,%esp
}
   1645a:	90                   	nop
   1645b:	83 c4 0c             	add    $0xc,%esp
   1645e:	c3                   	ret    

0001645f <add_request>:
// 参数dev是指定块设备结构指针,该结构中有处理请求项函数指针和当前正在请求项指针;
// req是已设置好内容的请求项结构指针.
// 本函数把已经设置好的请求项req添加到指定设备的请求项链表中.如果该设备在当前请求项指针为空,则可以设置req为当前请求项并立刻调用设备请求
// 项处理函数.否则就把req请求项插入到该请求项链表中.
static void add_request(struct blk_dev_struct * dev, struct request * req)
{
   1645f:	83 ec 1c             	sub    $0x1c,%esp
	// 首先对参数提供的请求项的指针和标志作初始设置.置空请求项中的下一请求项指针,关中断并清除请求项相关缓冲区脏标志.
	struct request * tmp;

	req->next = NULL;
   16462:	8b 44 24 24          	mov    0x24(%esp),%eax
   16466:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
	cli();								// 关中断
   1646d:	fa                   	cli    
	if (req->bh)
   1646e:	8b 44 24 24          	mov    0x24(%esp),%eax
   16472:	8b 40 1c             	mov    0x1c(%eax),%eax
   16475:	85 c0                	test   %eax,%eax
   16477:	74 0b                	je     16484 <add_request+0x25>
		req->bh->b_dirt = 0;			// 清缓冲区"脏"标志.
   16479:	8b 44 24 24          	mov    0x24(%esp),%eax
   1647d:	8b 40 1c             	mov    0x1c(%eax),%eax
   16480:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
	// 然后查看指定设备是否有当前请求项,即查看设备是否正忙.如果指定设备dev当前请求项(current_equest)字段为空,则表示目前该设备没有请求项,本次是
	// 第1个请求项,也是唯一的一个.因此可将块设备当前请求指针直接指向该请求项,并立刻执行相应设备的请求函数.
	if (!(tmp = dev->current_request)) {
   16484:	8b 44 24 20          	mov    0x20(%esp),%eax
   16488:	8b 40 04             	mov    0x4(%eax),%eax
   1648b:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1648f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   16494:	0f 85 79 01 00 00    	jne    16613 <add_request+0x1b4>
		dev->current_request = req;
   1649a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1649e:	8b 54 24 24          	mov    0x24(%esp),%edx
   164a2:	89 50 04             	mov    %edx,0x4(%eax)
		sti();							// 开中断.
   164a5:	fb                   	sti    
		(dev->request_fn)();			// 执行请求函数,对于硬盘是do_hd_request().
   164a6:	8b 44 24 20          	mov    0x20(%esp),%eax
   164aa:	8b 00                	mov    (%eax),%eax
   164ac:	ff d0                	call   *%eax
		return;
   164ae:	e9 89 01 00 00       	jmp    1663c <add_request+0x1dd>
	// 如果目前该设备已经有当前请求项在处理,则首先利用电梯算法搜索最佳插入位置,然后将当前请求项插入到请求链表中.在搜索过程中,如果判断出欲插入
	// 请求项的缓冲块头指针空,即没有缓冲块,那么就需要找一个项,其已经有可用的缓冲块.因此若当前插入位置(tmp之后)处的空闲项缓冲块头指针不空,就选择这个位置
	// 于是退出循环并把请求项插入此处.最后开中断并退出函数.电梯算法的作用是让磁盘磁头的移动距离最小,从而改善(减少)硬盘访问时间.
	// 下面for循环中if语句用于把req所指请求项与请求队列(链表)中已有的请求项作比较,找出req插入该队列的正确位置顺序.然后中断循环,并把req插入到该队列正确位置处.
	for ( ; tmp->next ; tmp = tmp->next) {
		if (!req->bh)
   164b3:	8b 44 24 24          	mov    0x24(%esp),%eax
   164b7:	8b 40 1c             	mov    0x1c(%eax),%eax
   164ba:	85 c0                	test   %eax,%eax
   164bc:	75 17                	jne    164d5 <add_request+0x76>
			if (tmp->next->bh)
   164be:	8b 44 24 0c          	mov    0xc(%esp),%eax
   164c2:	8b 40 20             	mov    0x20(%eax),%eax
   164c5:	8b 40 1c             	mov    0x1c(%eax),%eax
   164c8:	85 c0                	test   %eax,%eax
   164ca:	0f 84 37 01 00 00    	je     16607 <add_request+0x1a8>
				break;
   164d0:	e9 4d 01 00 00       	jmp    16622 <add_request+0x1c3>
			else
				continue;
		if ((IN_ORDER(tmp, req) ||
   164d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   164d9:	8b 50 04             	mov    0x4(%eax),%edx
   164dc:	8b 44 24 24          	mov    0x24(%esp),%eax
   164e0:	8b 40 04             	mov    0x4(%eax),%eax
   164e3:	39 c2                	cmp    %eax,%edx
   164e5:	0f 8c b5 00 00 00    	jl     165a0 <add_request+0x141>
   164eb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   164ef:	8b 50 04             	mov    0x4(%eax),%edx
   164f2:	8b 44 24 24          	mov    0x24(%esp),%eax
   164f6:	8b 40 04             	mov    0x4(%eax),%eax
   164f9:	39 c2                	cmp    %eax,%edx
   164fb:	75 36                	jne    16533 <add_request+0xd4>
   164fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16501:	8b 10                	mov    (%eax),%edx
   16503:	8b 44 24 24          	mov    0x24(%esp),%eax
   16507:	8b 00                	mov    (%eax),%eax
   16509:	39 c2                	cmp    %eax,%edx
   1650b:	0f 8c 8f 00 00 00    	jl     165a0 <add_request+0x141>
   16511:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16515:	8b 10                	mov    (%eax),%edx
   16517:	8b 44 24 24          	mov    0x24(%esp),%eax
   1651b:	8b 00                	mov    (%eax),%eax
   1651d:	39 c2                	cmp    %eax,%edx
   1651f:	75 12                	jne    16533 <add_request+0xd4>
   16521:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16525:	8b 50 0c             	mov    0xc(%eax),%edx
   16528:	8b 44 24 24          	mov    0x24(%esp),%eax
   1652c:	8b 40 0c             	mov    0xc(%eax),%eax
   1652f:	39 c2                	cmp    %eax,%edx
   16531:	72 6d                	jb     165a0 <add_request+0x141>
		    !IN_ORDER(tmp, tmp->next)) &&
   16533:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16537:	8b 50 04             	mov    0x4(%eax),%edx
   1653a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1653e:	8b 40 20             	mov    0x20(%eax),%eax
   16541:	8b 40 04             	mov    0x4(%eax),%eax
		if ((IN_ORDER(tmp, req) ||
   16544:	39 c2                	cmp    %eax,%edx
   16546:	0f 8c bc 00 00 00    	jl     16608 <add_request+0x1a9>
		    !IN_ORDER(tmp, tmp->next)) &&
   1654c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16550:	8b 50 04             	mov    0x4(%eax),%edx
   16553:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16557:	8b 40 20             	mov    0x20(%eax),%eax
   1655a:	8b 40 04             	mov    0x4(%eax),%eax
   1655d:	39 c2                	cmp    %eax,%edx
   1655f:	75 3f                	jne    165a0 <add_request+0x141>
   16561:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16565:	8b 10                	mov    (%eax),%edx
   16567:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1656b:	8b 40 20             	mov    0x20(%eax),%eax
   1656e:	8b 00                	mov    (%eax),%eax
   16570:	39 c2                	cmp    %eax,%edx
   16572:	0f 8c 90 00 00 00    	jl     16608 <add_request+0x1a9>
   16578:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1657c:	8b 10                	mov    (%eax),%edx
   1657e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16582:	8b 40 20             	mov    0x20(%eax),%eax
   16585:	8b 00                	mov    (%eax),%eax
   16587:	39 c2                	cmp    %eax,%edx
   16589:	75 15                	jne    165a0 <add_request+0x141>
   1658b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1658f:	8b 50 0c             	mov    0xc(%eax),%edx
   16592:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16596:	8b 40 20             	mov    0x20(%eax),%eax
   16599:	8b 40 0c             	mov    0xc(%eax),%eax
   1659c:	39 c2                	cmp    %eax,%edx
   1659e:	72 68                	jb     16608 <add_request+0x1a9>
		    IN_ORDER(req, tmp->next))
   165a0:	8b 44 24 24          	mov    0x24(%esp),%eax
   165a4:	8b 50 04             	mov    0x4(%eax),%edx
   165a7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165ab:	8b 40 20             	mov    0x20(%eax),%eax
   165ae:	8b 40 04             	mov    0x4(%eax),%eax
		    !IN_ORDER(tmp, tmp->next)) &&
   165b1:	39 c2                	cmp    %eax,%edx
   165b3:	7c 6d                	jl     16622 <add_request+0x1c3>
		    IN_ORDER(req, tmp->next))
   165b5:	8b 44 24 24          	mov    0x24(%esp),%eax
   165b9:	8b 50 04             	mov    0x4(%eax),%edx
   165bc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165c0:	8b 40 20             	mov    0x20(%eax),%eax
   165c3:	8b 40 04             	mov    0x4(%eax),%eax
   165c6:	39 c2                	cmp    %eax,%edx
   165c8:	75 3e                	jne    16608 <add_request+0x1a9>
   165ca:	8b 44 24 24          	mov    0x24(%esp),%eax
   165ce:	8b 10                	mov    (%eax),%edx
   165d0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165d4:	8b 40 20             	mov    0x20(%eax),%eax
   165d7:	8b 00                	mov    (%eax),%eax
   165d9:	39 c2                	cmp    %eax,%edx
   165db:	7c 45                	jl     16622 <add_request+0x1c3>
   165dd:	8b 44 24 24          	mov    0x24(%esp),%eax
   165e1:	8b 10                	mov    (%eax),%edx
   165e3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165e7:	8b 40 20             	mov    0x20(%eax),%eax
   165ea:	8b 00                	mov    (%eax),%eax
   165ec:	39 c2                	cmp    %eax,%edx
   165ee:	75 18                	jne    16608 <add_request+0x1a9>
   165f0:	8b 44 24 24          	mov    0x24(%esp),%eax
   165f4:	8b 50 0c             	mov    0xc(%eax),%edx
   165f7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165fb:	8b 40 20             	mov    0x20(%eax),%eax
   165fe:	8b 40 0c             	mov    0xc(%eax),%eax
   16601:	39 c2                	cmp    %eax,%edx
   16603:	72 1d                	jb     16622 <add_request+0x1c3>
   16605:	eb 01                	jmp    16608 <add_request+0x1a9>
				continue;
   16607:	90                   	nop
	for ( ; tmp->next ; tmp = tmp->next) {
   16608:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1660c:	8b 40 20             	mov    0x20(%eax),%eax
   1660f:	89 44 24 0c          	mov    %eax,0xc(%esp)
   16613:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16617:	8b 40 20             	mov    0x20(%eax),%eax
   1661a:	85 c0                	test   %eax,%eax
   1661c:	0f 85 91 fe ff ff    	jne    164b3 <add_request+0x54>
			break;
	}
	req->next = tmp->next;
   16622:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16626:	8b 50 20             	mov    0x20(%eax),%edx
   16629:	8b 44 24 24          	mov    0x24(%esp),%eax
   1662d:	89 50 20             	mov    %edx,0x20(%eax)
	tmp->next = req;
   16630:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16634:	8b 54 24 24          	mov    0x24(%esp),%edx
   16638:	89 50 20             	mov    %edx,0x20(%eax)
	sti();
   1663b:	fb                   	sti    
}
   1663c:	83 c4 1c             	add    $0x1c,%esp
   1663f:	c3                   	ret    

00016640 <make_request>:

// 创建请求项并插入请求队列中.
// 参数major是主设备号;rw是指定命令;bh是存放数据的缓冲区头指针.
static void make_request(int major, int rw, struct buffer_head * bh)
{
   16640:	83 ec 1c             	sub    $0x1c,%esp
	/* WRITEA/READA是一种特殊情况 - 它们并非必要,所以如果缓冲区已经上锁,我们就不用管它,否则它只是一个一般的读操作. */
	// 这里'READ'和'WRITE'后面的'A'字符代表英文单词Ahead,表示预读/写数据块的意思.
	// 该函数首先对命令READA/WRITEA的情况进行一些处理.对于这两个命令,当指定的缓冲区正在使用而已被上锁时,就放弃预读/写请求.否则就作为普通
	// READ/WRITE命令进行操作.另外,如果参数给出的命令既不是READ也不是WRITE,则表示内核程序有错,显示出错信息并停机.注意,在修改命令之前这里
	// 已为参数是否为预读/写命令设置了标志rw_ahead.
	if (rw_ahead = (rw == READA || rw == WRITEA)) {
   16643:	83 7c 24 24 02       	cmpl   $0x2,0x24(%esp)
   16648:	74 07                	je     16651 <make_request+0x11>
   1664a:	83 7c 24 24 03       	cmpl   $0x3,0x24(%esp)
   1664f:	75 07                	jne    16658 <make_request+0x18>
   16651:	b8 01 00 00 00       	mov    $0x1,%eax
   16656:	eb 05                	jmp    1665d <make_request+0x1d>
   16658:	b8 00 00 00 00       	mov    $0x0,%eax
   1665d:	89 44 24 08          	mov    %eax,0x8(%esp)
   16661:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   16666:	74 29                	je     16691 <make_request+0x51>
		if (bh->b_lock)
   16668:	8b 44 24 28          	mov    0x28(%esp),%eax
   1666c:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   16670:	84 c0                	test   %al,%al
   16672:	0f 85 7e 01 00 00    	jne    167f6 <make_request+0x1b6>
			return;
		if (rw == READA)
   16678:	83 7c 24 24 02       	cmpl   $0x2,0x24(%esp)
   1667d:	75 0a                	jne    16689 <make_request+0x49>
			rw = READ;
   1667f:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
   16686:	00 
   16687:	eb 08                	jmp    16691 <make_request+0x51>
		else
			rw = WRITE;
   16689:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%esp)
   16690:	00 
	}
	if (rw != READ && rw != WRITE)
   16691:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   16696:	74 17                	je     166af <make_request+0x6f>
   16698:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
   1669d:	74 10                	je     166af <make_request+0x6f>
		panic("Bad block dev command, must be R/W/RA/WA");
   1669f:	83 ec 0c             	sub    $0xc,%esp
   166a2:	68 e4 44 02 00       	push   $0x244e4
   166a7:	e8 56 25 ff ff       	call   8c02 <panic>
   166ac:	83 c4 10             	add    $0x10,%esp
	lock_buffer(bh);                				// 锁定缓冲块
   166af:	83 ec 0c             	sub    $0xc,%esp
   166b2:	ff 74 24 34          	pushl  0x34(%esp)
   166b6:	e8 32 fd ff ff       	call   163ed <lock_buffer>
   166bb:	83 c4 10             	add    $0x10,%esp
	// 如果是WRITE操作并且缓冲块未修改，或是READ操作并且缓冲块已更新，则直接返回缓冲区块。
	if ((rw == WRITE && !bh->b_dirt) || (rw == READ && bh->b_uptodate)) {
   166be:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
   166c3:	75 0c                	jne    166d1 <make_request+0x91>
   166c5:	8b 44 24 28          	mov    0x28(%esp),%eax
   166c9:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   166cd:	84 c0                	test   %al,%al
   166cf:	74 13                	je     166e4 <make_request+0xa4>
   166d1:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   166d6:	75 20                	jne    166f8 <make_request+0xb8>
   166d8:	8b 44 24 28          	mov    0x28(%esp),%eax
   166dc:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
   166e0:	84 c0                	test   %al,%al
   166e2:	74 14                	je     166f8 <make_request+0xb8>
		unlock_buffer(bh);
   166e4:	83 ec 0c             	sub    $0xc,%esp
   166e7:	ff 74 24 34          	pushl  0x34(%esp)
   166eb:	e8 30 fd ff ff       	call   16420 <unlock_buffer>
   166f0:	83 c4 10             	add    $0x10,%esp
		return;
   166f3:	e9 ff 00 00 00       	jmp    167f7 <make_request+0x1b7>
	}
repeat:
   166f8:	90                   	nop
	 */
	// 好,现在我们必须为本函数生成并添加读/写请求项了.首先我们需要在请求数组中寻找到一个空闲项(糟)来存放新请求项.搜索过程从请求数组末端开始.
	// 根据上述要求,对于读命令请求,我们直接从队列末尾开始搜索,而对于写请求就只能从队列2/3处向队列头处搜索空项填入.于是我们开始从后向前搜索,
	// 当请求结构request的设备字段dev值=-1时,表示该项未被占用(空闲).如果没有一项是空闲的(此时请求项数组指针已经搜索越过头部),则查看此次请求
	// 是否是提前读/写(READA或WRITEA),如果是则放弃此次请求操作.否则让本次请求操作先睡眠(以等待请求队列腾出空项),过一会儿再来搜索请求队列.
	if (rw == READ)
   166f9:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   166fe:	75 0a                	jne    1670a <make_request+0xca>
		req = request + NR_REQUEST;						// 对于读请求,将指针指向队列尾部.
   16700:	c7 44 24 0c 00 28 04 	movl   $0x42800,0xc(%esp)
   16707:	00 
   16708:	eb 14                	jmp    1671e <make_request+0xde>
	else
		req = request + ((NR_REQUEST * 2) / 3);			// 对于写请求,指针指向队列2/3处.
   1670a:	c7 44 24 0c 74 26 04 	movl   $0x42674,0xc(%esp)
   16711:	00 
	/* find an empty request */
	/* 搜索一个空请求项 */
	while (--req >= request)
   16712:	eb 0a                	jmp    1671e <make_request+0xde>
		if (req->dev < 0)
   16714:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16718:	8b 00                	mov    (%eax),%eax
   1671a:	85 c0                	test   %eax,%eax
   1671c:	78 11                	js     1672f <make_request+0xef>
	while (--req >= request)
   1671e:	83 6c 24 0c 24       	subl   $0x24,0xc(%esp)
   16723:	81 7c 24 0c 80 23 04 	cmpl   $0x42380,0xc(%esp)
   1672a:	00 
   1672b:	73 e7                	jae    16714 <make_request+0xd4>
   1672d:	eb 01                	jmp    16730 <make_request+0xf0>
			break;
   1672f:	90                   	nop
	/* if none found, sleep on new requests: check for rw_ahead */
	/* 如果没有找到空闲项,则让该次请求操作睡眠:需检查是否提前读/写 */
	if (req < request) {								// 如果已搜索到头(队列无空项)
   16730:	81 7c 24 0c 80 23 04 	cmpl   $0x42380,0xc(%esp)
   16737:	00 
   16738:	73 2d                	jae    16767 <make_request+0x127>
		if (rw_ahead) {									// 则若是提前读/写请求,则退出.
   1673a:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1673f:	74 14                	je     16755 <make_request+0x115>
			unlock_buffer(bh);
   16741:	83 ec 0c             	sub    $0xc,%esp
   16744:	ff 74 24 34          	pushl  0x34(%esp)
   16748:	e8 d3 fc ff ff       	call   16420 <unlock_buffer>
   1674d:	83 c4 10             	add    $0x10,%esp
			return;
   16750:	e9 a2 00 00 00       	jmp    167f7 <make_request+0x1b7>
		}
		sleep_on(&wait_for_request);					// 否则就睡眠,过会再查看请求队列.
   16755:	83 ec 0c             	sub    $0xc,%esp
   16758:	68 e0 20 03 00       	push   $0x320e0
   1675d:	e8 d2 09 ff ff       	call   7134 <sleep_on>
   16762:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   16765:	eb 92                	jmp    166f9 <make_request+0xb9>
	}
	/* fill up the request-info, and add it to the queue */
	/* 向空闲请求项中填写请求信息,并将其加入队列中 */
	// OK,程序执行到这里表示已找到一个空闲请求项.于是我们在设置好的新请求项后就调用add_request()把它添加到请求队列中,立刻退出.请求结构请参见blk_drv/blk.h.
	// req->sector是读写操作的起始扇区号,req->buffer是请求项存放数据的缓冲区.
	req->dev = bh->b_dev;								// 设备号.
   16767:	8b 44 24 28          	mov    0x28(%esp),%eax
   1676b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1676f:	0f b7 d0             	movzwl %ax,%edx
   16772:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16776:	89 10                	mov    %edx,(%eax)
	req->cmd = rw;										// 命令(READ/WRITE).
   16778:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1677c:	8b 54 24 24          	mov    0x24(%esp),%edx
   16780:	89 50 04             	mov    %edx,0x4(%eax)
	req->errors = 0;									// 操作时产生的错误次数.
   16783:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16787:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	req->sector = bh->b_blocknr << 1;					// 起始扇区.块号转换成扇区号(1块=2扇区).
   1678e:	8b 44 24 28          	mov    0x28(%esp),%eax
   16792:	8b 40 04             	mov    0x4(%eax),%eax
   16795:	8d 14 00             	lea    (%eax,%eax,1),%edx
   16798:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1679c:	89 50 0c             	mov    %edx,0xc(%eax)
	req->nr_sectors = 2;								// 本请求项需要读写的扇区数.
   1679f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   167a3:	c7 40 10 02 00 00 00 	movl   $0x2,0x10(%eax)
	req->buffer = bh->b_data;							// 请求项缓冲区指针指向需读写的数据缓冲区.
   167aa:	8b 44 24 28          	mov    0x28(%esp),%eax
   167ae:	8b 10                	mov    (%eax),%edx
   167b0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   167b4:	89 50 14             	mov    %edx,0x14(%eax)
	req->waiting = NULL;								// 任务等待操作执行完成的地方.
   167b7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   167bb:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	req->bh = bh;										// 缓冲块头指针.
   167c2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   167c6:	8b 54 24 28          	mov    0x28(%esp),%edx
   167ca:	89 50 1c             	mov    %edx,0x1c(%eax)
	req->next = NULL;									// 指向下一请求项.
   167cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   167d1:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
	add_request(major + blk_dev, req);					// 将请求项加入队列中(blk_dev[major],reg).
   167d8:	8b 44 24 20          	mov    0x20(%esp),%eax
   167dc:	c1 e0 03             	shl    $0x3,%eax
   167df:	05 00 21 03 00       	add    $0x32100,%eax
   167e4:	83 ec 08             	sub    $0x8,%esp
   167e7:	ff 74 24 14          	pushl  0x14(%esp)
   167eb:	50                   	push   %eax
   167ec:	e8 6e fc ff ff       	call   1645f <add_request>
   167f1:	83 c4 10             	add    $0x10,%esp
   167f4:	eb 01                	jmp    167f7 <make_request+0x1b7>
			return;
   167f6:	90                   	nop
}
   167f7:	83 c4 1c             	add    $0x1c,%esp
   167fa:	c3                   	ret    

000167fb <ll_rw_page>:

// 低级页面读写函数(Low Level Read Write Pagk).
// 以页面(4K)为单位访问设备数据,即每次读/写8个扇区.参见下面ll_rw_blk()函数.
void ll_rw_page(int rw, int dev, int page, char * buffer)
{
   167fb:	83 ec 1c             	sub    $0x1c,%esp
	struct request * req;
	unsigned int major = MAJOR(dev);
   167fe:	8b 44 24 24          	mov    0x24(%esp),%eax
   16802:	c1 e8 08             	shr    $0x8,%eax
   16805:	89 44 24 08          	mov    %eax,0x8(%esp)

	// 首先对函数参数的合法性进行检测.如果设备主设备号不存在或者该设备的请求操作函数不存在,则显示出错信息,并返回.如果参数给出的命令既不是
	// READ也不是WRITE,则表示内核程序有错,显示出错信息并停机.
	if (major >= NR_BLK_DEV || !(blk_dev[major].request_fn)) {
   16809:	83 7c 24 08 06       	cmpl   $0x6,0x8(%esp)
   1680e:	77 0f                	ja     1681f <ll_rw_page+0x24>
   16810:	8b 44 24 08          	mov    0x8(%esp),%eax
   16814:	8b 04 c5 00 21 03 00 	mov    0x32100(,%eax,8),%eax
   1681b:	85 c0                	test   %eax,%eax
   1681d:	75 15                	jne    16834 <ll_rw_page+0x39>
		printk("Trying to read nonexistent block-device\n\r");
   1681f:	83 ec 0c             	sub    $0xc,%esp
   16822:	68 10 45 02 00       	push   $0x24510
   16827:	e8 15 24 ff ff       	call   8c41 <printk>
   1682c:	83 c4 10             	add    $0x10,%esp
		return;
   1682f:	e9 f8 00 00 00       	jmp    1692c <ll_rw_page+0x131>
	}
	if (rw != READ && rw != WRITE)
   16834:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   16839:	74 19                	je     16854 <ll_rw_page+0x59>
   1683b:	83 7c 24 20 01       	cmpl   $0x1,0x20(%esp)
   16840:	74 12                	je     16854 <ll_rw_page+0x59>
		panic("Bad block dev command, must be R/W");
   16842:	83 ec 0c             	sub    $0xc,%esp
   16845:	68 3c 45 02 00       	push   $0x2453c
   1684a:	e8 b3 23 ff ff       	call   8c02 <panic>
   1684f:	83 c4 10             	add    $0x10,%esp
   16852:	eb 01                	jmp    16855 <ll_rw_page+0x5a>
	// 在参数检测操作完成后,我们现在需要为本次操作建立请求项.首先我们需要在请求数组中寻找到一个空闲项(糟)来存放新请求项.搜索过程从请求数组末端
	// 开始.于是我们开始从后向前搜索,当请求结构request的设备字段值<0时,表示该项未被占用(空闲).如果没有一项是空闲的(此时请求项数组指针已经搜索越过
	// 头部),则让本次请求操作先睡眠(以等待请求队列腾出空项),过一会再来搜索请求队列.
repeat:
   16854:	90                   	nop
	req = request + NR_REQUEST;							// 将指针指向队列尾部.
   16855:	c7 44 24 0c 00 28 04 	movl   $0x42800,0xc(%esp)
   1685c:	00 
	while (--req >= request)
   1685d:	eb 0a                	jmp    16869 <ll_rw_page+0x6e>
		if (req->dev < 0)
   1685f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16863:	8b 00                	mov    (%eax),%eax
   16865:	85 c0                	test   %eax,%eax
   16867:	78 11                	js     1687a <ll_rw_page+0x7f>
	while (--req >= request)
   16869:	83 6c 24 0c 24       	subl   $0x24,0xc(%esp)
   1686e:	81 7c 24 0c 80 23 04 	cmpl   $0x42380,0xc(%esp)
   16875:	00 
   16876:	73 e7                	jae    1685f <ll_rw_page+0x64>
   16878:	eb 01                	jmp    1687b <ll_rw_page+0x80>
			break;
   1687a:	90                   	nop
	if (req < request) {
   1687b:	81 7c 24 0c 80 23 04 	cmpl   $0x42380,0xc(%esp)
   16882:	00 
   16883:	73 12                	jae    16897 <ll_rw_page+0x9c>
		sleep_on(&wait_for_request);					// 睡眠,过会再查看请求队列.
   16885:	83 ec 0c             	sub    $0xc,%esp
   16888:	68 e0 20 03 00       	push   $0x320e0
   1688d:	e8 a2 08 ff ff       	call   7134 <sleep_on>
   16892:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   16895:	eb be                	jmp    16855 <ll_rw_page+0x5a>
	/* 向空闲请求项中填写请求信息,并将其加入队列中 */
	// OK,程序执行到这里表示已找到一个空闲请求项.于是我们设置好新请求项,把当前进程置为不可中断睡眠中断后,就去调用add_request()把它添加到请求队列中,
	// 然后直接调用调度函数让当前进程睡眠等待页面从交换设备中读入.这里不像make_request()函数那样直接退出函数而调用了schedule(),是因为make_request()
	// 函数仅读2个扇区数据.而这里需要对交换设备读/写8个扇区,需要花较长的时间.因此当前进程肯定需要等待而睡眠.因此这里直接就让进程去睡眠了,省得在程序其他地方
	// 还要进行这些判断操作.
	req->dev = dev;										// 设备号
   16897:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1689b:	8b 54 24 24          	mov    0x24(%esp),%edx
   1689f:	89 10                	mov    %edx,(%eax)
	req->cmd = rw;										// 命令(READ/WRITE)start_code
   168a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168a5:	8b 54 24 20          	mov    0x20(%esp),%edx
   168a9:	89 50 04             	mov    %edx,0x4(%eax)
	req->errors = 0;									// 读写操作错误计数
   168ac:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168b0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	req->sector = page << 3;							// 起始读写扇区
   168b7:	8b 44 24 28          	mov    0x28(%esp),%eax
   168bb:	c1 e0 03             	shl    $0x3,%eax
   168be:	89 c2                	mov    %eax,%edx
   168c0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168c4:	89 50 0c             	mov    %edx,0xc(%eax)
	req->nr_sectors = 8;								// 读写扇区数
   168c7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168cb:	c7 40 10 08 00 00 00 	movl   $0x8,0x10(%eax)
	req->buffer = buffer;								// 数据缓冲区
   168d2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168d6:	8b 54 24 2c          	mov    0x2c(%esp),%edx
   168da:	89 50 14             	mov    %edx,0x14(%eax)
	req->waiting = current;								// 当前进程进入该请求等待队列
   168dd:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   168e3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168e7:	89 50 18             	mov    %edx,0x18(%eax)
	req->bh = NULL;										// 无缓冲块头指针(不用高速缓冲)
   168ea:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168ee:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
	req->next = NULL;									// 下一个请求项指针
   168f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168f9:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
	current->state = TASK_UNINTERRUPTIBLE;				// 置为不可中断状态
   16900:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   16905:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	add_request(major + blk_dev, req);					// 将请求项加入队列中.
   1690b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1690f:	c1 e0 03             	shl    $0x3,%eax
   16912:	05 00 21 03 00       	add    $0x32100,%eax
   16917:	83 ec 08             	sub    $0x8,%esp
   1691a:	ff 74 24 14          	pushl  0x14(%esp)
   1691e:	50                   	push   %eax
   1691f:	e8 3b fb ff ff       	call   1645f <add_request>
   16924:	83 c4 10             	add    $0x10,%esp
	// 当前进程需要读取8个扇区的数据因此需要睡眠，因此调用调度程序选择进程运行
	schedule();
   16927:	e8 17 05 ff ff       	call   6e43 <schedule>
}
   1692c:	83 c4 1c             	add    $0x1c,%esp
   1692f:	c3                   	ret    

00016930 <ll_rw_block>:
// 该函数是块设备驱动程序与系统其他部分的接口函数.通常在fs/buffer.c程序中被调用.
// 主要功能是创建块设备读写请求项并插入到指定块设备请求队列.实际的读写操作则是由设备的request_fn()函数完成.对于硬盘操作,该函数是do_hd_request();对于软盘操作
// 该函数是do_fd_request();对于虚拟盘则是do_rd_request().另外,在调用该函数之前,调用者需要首先把读/写块设备的信息保存在缓冲块头结构中,如设备号,块号.
// 参数:rw - READ,READA,WRITE或WRITEA是命令;bh - 数据缓冲块头指针.
void ll_rw_block(int rw, struct buffer_head * bh)
{
   16930:	83 ec 1c             	sub    $0x1c,%esp
	unsigned int major;									// 主设备号(对于硬盘是3)

	// 如果设备主设备号不存在或者该设备的请求操作函数不存在,则显示出错信息,并返回.否则创建请求项并插入请求队列.
	if ((major = MAJOR(bh->b_dev)) >= NR_BLK_DEV ||
   16933:	8b 44 24 24          	mov    0x24(%esp),%eax
   16937:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1693b:	66 c1 e8 08          	shr    $0x8,%ax
   1693f:	0f b7 c0             	movzwl %ax,%eax
   16942:	89 44 24 0c          	mov    %eax,0xc(%esp)
   16946:	83 7c 24 0c 06       	cmpl   $0x6,0xc(%esp)
   1694b:	77 0f                	ja     1695c <ll_rw_block+0x2c>
	!(blk_dev[major].request_fn)) {
   1694d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16951:	8b 04 c5 00 21 03 00 	mov    0x32100(,%eax,8),%eax
	if ((major = MAJOR(bh->b_dev)) >= NR_BLK_DEV ||
   16958:	85 c0                	test   %eax,%eax
   1695a:	75 12                	jne    1696e <ll_rw_block+0x3e>
		printk("Trying to read nonexistent block-device\n\r");
   1695c:	83 ec 0c             	sub    $0xc,%esp
   1695f:	68 10 45 02 00       	push   $0x24510
   16964:	e8 d8 22 ff ff       	call   8c41 <printk>
   16969:	83 c4 10             	add    $0x10,%esp
		return;
   1696c:	eb 18                	jmp    16986 <ll_rw_block+0x56>
	}
	make_request(major, rw, bh);
   1696e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16972:	83 ec 04             	sub    $0x4,%esp
   16975:	ff 74 24 28          	pushl  0x28(%esp)
   16979:	ff 74 24 28          	pushl  0x28(%esp)
   1697d:	50                   	push   %eax
   1697e:	e8 bd fc ff ff       	call   16640 <make_request>
   16983:	83 c4 10             	add    $0x10,%esp
}
   16986:	83 c4 1c             	add    $0x1c,%esp
   16989:	c3                   	ret    

0001698a <blk_dev_init>:

// 块设备初始化函数,由初始化程序main.c调用.
// 初始化请求数组,将所有请求项置为空闲项(dev = -1).有32项(NR_REQUEST = 32).
void blk_dev_init(void)
{
   1698a:	83 ec 10             	sub    $0x10,%esp
	int i;

	for (i = 0; i < NR_REQUEST; i++) {
   1698d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   16994:	00 
   16995:	eb 37                	jmp    169ce <blk_dev_init+0x44>
		request[i].dev = -1;
   16997:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1699b:	89 d0                	mov    %edx,%eax
   1699d:	c1 e0 03             	shl    $0x3,%eax
   169a0:	01 d0                	add    %edx,%eax
   169a2:	c1 e0 02             	shl    $0x2,%eax
   169a5:	05 80 23 04 00       	add    $0x42380,%eax
   169aa:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
		request[i].next = NULL;
   169b0:	8b 54 24 0c          	mov    0xc(%esp),%edx
   169b4:	89 d0                	mov    %edx,%eax
   169b6:	c1 e0 03             	shl    $0x3,%eax
   169b9:	01 d0                	add    %edx,%eax
   169bb:	c1 e0 02             	shl    $0x2,%eax
   169be:	05 a0 23 04 00       	add    $0x423a0,%eax
   169c3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for (i = 0; i < NR_REQUEST; i++) {
   169c9:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   169ce:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
   169d3:	7e c2                	jle    16997 <blk_dev_init+0xd>
	}
}
   169d5:	90                   	nop
   169d6:	83 c4 10             	add    $0x10,%esp
   169d9:	c3                   	ret    

000169da <unlock_buffer>:
static void (DEVICE_REQUEST)(void);

// 解锁指定的缓冲块.
// 如果指定缓冲块bh并没有被上锁,则显示警告信息.否则将该缓冲块解锁,并唤醒等待该缓冲块的进程.此为内嵌函数.参数是缓冲块头指针.
static inline void unlock_buffer(struct buffer_head * bh)
{
   169da:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)
   169dd:	8b 44 24 10          	mov    0x10(%esp),%eax
   169e1:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   169e5:	84 c0                	test   %al,%al
   169e7:	75 10                	jne    169f9 <unlock_buffer+0x1f>
		printk(DEVICE_NAME ": free buffer being unlocked\n");
   169e9:	83 ec 0c             	sub    $0xc,%esp
   169ec:	68 60 45 02 00       	push   $0x24560
   169f1:	e8 4b 22 ff ff       	call   8c41 <printk>
   169f6:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;
   169f9:	8b 44 24 10          	mov    0x10(%esp),%eax
   169fd:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);
   16a01:	8b 44 24 10          	mov    0x10(%esp),%eax
   16a05:	83 c0 10             	add    $0x10,%eax
   16a08:	83 ec 0c             	sub    $0xc,%esp
   16a0b:	50                   	push   %eax
   16a0c:	e8 3c 07 ff ff       	call   714d <wake_up>
   16a11:	83 c4 10             	add    $0x10,%esp
}
   16a14:	90                   	nop
   16a15:	83 c4 0c             	add    $0xc,%esp
   16a18:	c3                   	ret    

00016a19 <end_request>:
// 参数uptodate是更新标志.
// 首先关闭指定块设备,然后检查此次读写缓冲区是否有效.如果有效则根据参数值设置缓冲区数据更新标志,并解锁该缓冲区.如果更新标志参数值是0,
// 表示此次请求项的操作失败,因此显示相关块设备IO错误信息.最后,唤醒等待该请求项的进程以及等待空闲请求项出现的进程,释放并从请求链表
// 中删除本请求项,并把当前请求项指针指向下一请求项.
static inline void end_request(int uptodate)
{
   16a19:	83 ec 0c             	sub    $0xc,%esp
	DEVICE_OFF(CURRENT->dev);							// 关闭设备
   16a1c:	a1 14 21 03 00       	mov    0x32114,%eax
   16a21:	8b 00                	mov    (%eax),%eax
   16a23:	83 e0 03             	and    $0x3,%eax
   16a26:	83 ec 0c             	sub    $0xc,%esp
   16a29:	50                   	push   %eax
   16a2a:	e8 8d 08 ff ff       	call   72bc <floppy_off>
   16a2f:	83 c4 10             	add    $0x10,%esp
	if (CURRENT->bh) {									// CURRENT为当前请求结构项指针
   16a32:	a1 14 21 03 00       	mov    0x32114,%eax
   16a37:	8b 40 1c             	mov    0x1c(%eax),%eax
   16a3a:	85 c0                	test   %eax,%eax
   16a3c:	74 23                	je     16a61 <end_request+0x48>
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
   16a3e:	a1 14 21 03 00       	mov    0x32114,%eax
   16a43:	8b 40 1c             	mov    0x1c(%eax),%eax
   16a46:	8b 54 24 10          	mov    0x10(%esp),%edx
   16a4a:	88 50 0a             	mov    %dl,0xa(%eax)
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
   16a4d:	a1 14 21 03 00       	mov    0x32114,%eax
   16a52:	8b 40 1c             	mov    0x1c(%eax),%eax
   16a55:	83 ec 0c             	sub    $0xc,%esp
   16a58:	50                   	push   %eax
   16a59:	e8 7c ff ff ff       	call   169da <unlock_buffer>
   16a5e:	83 c4 10             	add    $0x10,%esp
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
   16a61:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   16a66:	75 34                	jne    16a9c <end_request+0x83>
		printk(DEVICE_NAME " I/O error\n\r");
   16a68:	83 ec 0c             	sub    $0xc,%esp
   16a6b:	68 84 45 02 00       	push   $0x24584
   16a70:	e8 cc 21 ff ff       	call   8c41 <printk>
   16a75:	83 c4 10             	add    $0x10,%esp
		printk("dev %04x, block %d\n\r",CURRENT->dev,
			CURRENT->bh->b_blocknr);
   16a78:	a1 14 21 03 00       	mov    0x32114,%eax
   16a7d:	8b 40 1c             	mov    0x1c(%eax),%eax
		printk("dev %04x, block %d\n\r",CURRENT->dev,
   16a80:	8b 50 04             	mov    0x4(%eax),%edx
   16a83:	a1 14 21 03 00       	mov    0x32114,%eax
   16a88:	8b 00                	mov    (%eax),%eax
   16a8a:	83 ec 04             	sub    $0x4,%esp
   16a8d:	52                   	push   %edx
   16a8e:	50                   	push   %eax
   16a8f:	68 97 45 02 00       	push   $0x24597
   16a94:	e8 a8 21 ff ff       	call   8c41 <printk>
   16a99:	83 c4 10             	add    $0x10,%esp
	}
	wake_up(&CURRENT->waiting);							// 唤醒等待该请求项的进程.
   16a9c:	a1 14 21 03 00       	mov    0x32114,%eax
   16aa1:	83 c0 18             	add    $0x18,%eax
   16aa4:	83 ec 0c             	sub    $0xc,%esp
   16aa7:	50                   	push   %eax
   16aa8:	e8 a0 06 ff ff       	call   714d <wake_up>
   16aad:	83 c4 10             	add    $0x10,%esp
	wake_up(&wait_for_request);							// 唤醒等待空闲请求项的进程.
   16ab0:	83 ec 0c             	sub    $0xc,%esp
   16ab3:	68 e0 20 03 00       	push   $0x320e0
   16ab8:	e8 90 06 ff ff       	call   714d <wake_up>
   16abd:	83 c4 10             	add    $0x10,%esp
	CURRENT->dev = -1;									// 释放该请求项.
   16ac0:	a1 14 21 03 00       	mov    0x32114,%eax
   16ac5:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	CURRENT = CURRENT->next;							// 指向下一请求项.
   16acb:	a1 14 21 03 00       	mov    0x32114,%eax
   16ad0:	8b 40 20             	mov    0x20(%eax),%eax
   16ad3:	a3 14 21 03 00       	mov    %eax,0x32114
}
   16ad8:	90                   	nop
   16ad9:	83 c4 0c             	add    $0xc,%esp
   16adc:	c3                   	ret    

00016add <floppy_deselect>:

// 取消选定软驱.
// 如果函数参数指定的软驱nr当前并没有被选定,则显示警告信息.然后复位软驱已选定标志selected,并唤醒等待选择该软驱的任务.数字输出
// 寄存器(DOR)的低2位用于指定选择的软驱(0-3对应A-D).
void floppy_deselect(unsigned int nr)
{
   16add:	83 ec 0c             	sub    $0xc,%esp
	if (nr != (current_DOR & 3))
   16ae0:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   16ae7:	0f b6 c0             	movzbl %al,%eax
   16aea:	83 e0 03             	and    $0x3,%eax
   16aed:	39 44 24 10          	cmp    %eax,0x10(%esp)
   16af1:	74 10                	je     16b03 <floppy_deselect+0x26>
		printk("floppy_deselect: drive not selected\n\r");
   16af3:	83 ec 0c             	sub    $0xc,%esp
   16af6:	68 ac 45 02 00       	push   $0x245ac
   16afb:	e8 41 21 ff ff       	call   8c41 <printk>
   16b00:	83 c4 10             	add    $0x10,%esp
	selected = 0;											// 复位软驱已选定标志.
   16b03:	c6 05 58 21 03 00 00 	movb   $0x0,0x32158
	wake_up(&wait_on_floppy_select);						// 唤醒等待的任务.
   16b0a:	83 ec 0c             	sub    $0xc,%esp
   16b0d:	68 5c 21 03 00       	push   $0x3215c
   16b12:	e8 36 06 ff ff       	call   714d <wake_up>
   16b17:	83 c4 10             	add    $0x10,%esp
}
   16b1a:	90                   	nop
   16b1b:	83 c4 0c             	add    $0xc,%esp
   16b1e:	c3                   	ret    

00016b1f <floppy_change>:
// 检测指定软驱中软盘更换情况.
// 参数nr是软驱号.如果软盘更换了则返回1,否则返回0.
// 该函数首先选定参数指定的软驱nr,然后测试软盘控制器的数字输入寄存器DIR的值,以判断驱动器中的软盘是否被更换过.该函数由程序
// fs/buffer.c中的check_disk_change()函数调用.
int floppy_change(unsigned int nr)
{
   16b1f:	83 ec 1c             	sub    $0x1c,%esp
	// 首先要让软驱中软盘旋转起来并达到正常工作转速.这需要花费一定时间.采用的方法是利用kernel/sched.c中软盘定时函数do_floppy_timer()
	// 进行一定的延时处理.floppy_on()函数则用于判断延时是否到(mon_timer[nr]==0?),若没有到则让当前进程继续睡眠等待.若延时到则
	// do_floppy_timer()会唤醒当前进程.
repeat:
	floppy_on(nr);										// 启动并等待指定软驱nr(kernel/sched.c)
   16b22:	83 ec 0c             	sub    $0xc,%esp
   16b25:	ff 74 24 2c          	pushl  0x2c(%esp)
   16b29:	e8 57 07 ff ff       	call   7285 <floppy_on>
   16b2e:	83 c4 10             	add    $0x10,%esp
	// 在软盘启动(旋转)之后,我们来查看一下当前选择的软驱是不是函数参数指定的软驱nr.
	// 如果当前选择的软驱不是指定的软驱nr,并且已经选定了其他软驱,则让当前任务进入可中断等待状态,以等待其他软驱被取消选定.参见上面
	// floppy_deselect().如果当前没有选择其他软驱或者其他软驱被取消选定而使当前任务被唤醒时,当前软驱仍然不是指定的软驱nr,则跳转到
	// 函数开始处重新循环等待.
	while ((current_DOR & 3) != nr && selected)
   16b31:	eb 10                	jmp    16b43 <floppy_change+0x24>
		sleep_on(&wait_on_floppy_select);
   16b33:	83 ec 0c             	sub    $0xc,%esp
   16b36:	68 5c 21 03 00       	push   $0x3215c
   16b3b:	e8 f4 05 ff ff       	call   7134 <sleep_on>
   16b40:	83 c4 10             	add    $0x10,%esp
	while ((current_DOR & 3) != nr && selected)
   16b43:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   16b4a:	0f b6 c0             	movzbl %al,%eax
   16b4d:	83 e0 03             	and    $0x3,%eax
   16b50:	39 44 24 20          	cmp    %eax,0x20(%esp)
   16b54:	74 0b                	je     16b61 <floppy_change+0x42>
   16b56:	0f b6 05 58 21 03 00 	movzbl 0x32158,%eax
   16b5d:	84 c0                	test   %al,%al
   16b5f:	75 d2                	jne    16b33 <floppy_change+0x14>
	if ((current_DOR & 3) != nr)
   16b61:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   16b68:	0f b6 c0             	movzbl %al,%eax
   16b6b:	83 e0 03             	and    $0x3,%eax
   16b6e:	39 44 24 20          	cmp    %eax,0x20(%esp)
   16b72:	74 02                	je     16b76 <floppy_change+0x57>
		goto repeat;
   16b74:	eb ac                	jmp    16b22 <floppy_change+0x3>
	// 现在软盘控制器已经选定我们指定的软驱nr.于是取数字输入寄存器DIR的值,如果其最高位(位7)置位,则表示软盘已更换,此时即可关闭马达并
	// 返回1退出.否则关闭马达返回0退出.表示磁盘没有被更换.
	if (inb(FD_DIR) & 0x80) {
   16b76:	b8 f7 03 00 00       	mov    $0x3f7,%eax
   16b7b:	89 c2                	mov    %eax,%edx
   16b7d:	ec                   	in     (%dx),%al
   16b7e:	88 44 24 0f          	mov    %al,0xf(%esp)
   16b82:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   16b87:	84 c0                	test   %al,%al
   16b89:	79 16                	jns    16ba1 <floppy_change+0x82>
		floppy_off(nr);
   16b8b:	83 ec 0c             	sub    $0xc,%esp
   16b8e:	ff 74 24 2c          	pushl  0x2c(%esp)
   16b92:	e8 25 07 ff ff       	call   72bc <floppy_off>
   16b97:	83 c4 10             	add    $0x10,%esp
		return 1;
   16b9a:	b8 01 00 00 00       	mov    $0x1,%eax
   16b9f:	eb 14                	jmp    16bb5 <floppy_change+0x96>
	}
	floppy_off(nr);
   16ba1:	83 ec 0c             	sub    $0xc,%esp
   16ba4:	ff 74 24 2c          	pushl  0x2c(%esp)
   16ba8:	e8 0f 07 ff ff       	call   72bc <floppy_off>
   16bad:	83 c4 10             	add    $0x10,%esp
	return 0;
   16bb0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16bb5:	83 c4 1c             	add    $0x1c,%esp
   16bb8:	c3                   	ret    

00016bb9 <setup_DMA>:
	:)

// 设置(初始化)软盘DMA通道.
// 软盘中数据读写操作是使用DMA进行的.因此在每次进行数据传输之前需要设置DMA芯片专门上用于软驱的通道2.
static void setup_DMA(void)
{
   16bb9:	57                   	push   %edi
   16bba:	56                   	push   %esi
   16bbb:	53                   	push   %ebx
   16bbc:	83 ec 10             	sub    $0x10,%esp
	long addr = (long) CURRENT->buffer;				// 当前请求项缓冲区所处内存地址.
   16bbf:	a1 14 21 03 00       	mov    0x32114,%eax
   16bc4:	8b 40 14             	mov    0x14(%eax),%eax
   16bc7:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 首先检测请求项的缓冲区所在位置.如果缓冲区处于内存1MB以上的某个地方,则需要将DMA缓冲区设在临时缓冲区域(tmp_floppy_area)处.因为
	// 8237A芯片只能在1MB地址范围内寻址.如果是写盘命令,则还需要把数据从请求项缓冲区复制到该临时区域.
	cli();
   16bcb:	fa                   	cli    
	if (addr >= 0x100000) {
   16bcc:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
   16bd3:	00 
   16bd4:	7e 30                	jle    16c06 <setup_DMA+0x4d>
		addr = (long) tmp_floppy_area;
   16bd6:	c7 44 24 0c 00 50 00 	movl   $0x5000,0xc(%esp)
   16bdd:	00 
		if (command == FD_WRITE)
   16bde:	0f b6 05 78 21 03 00 	movzbl 0x32178,%eax
   16be5:	3c c5                	cmp    $0xc5,%al
   16be7:	75 1d                	jne    16c06 <setup_DMA+0x4d>
			copy_buffer(CURRENT->buffer,tmp_floppy_area);
   16be9:	a1 14 21 03 00       	mov    0x32114,%eax
   16bee:	8b 40 14             	mov    0x14(%eax),%eax
   16bf1:	89 c2                	mov    %eax,%edx
   16bf3:	bb 00 50 00 00       	mov    $0x5000,%ebx
   16bf8:	b8 00 01 00 00       	mov    $0x100,%eax
   16bfd:	89 c1                	mov    %eax,%ecx
   16bff:	89 d6                	mov    %edx,%esi
   16c01:	89 df                	mov    %ebx,%edi
   16c03:	fc                   	cld    
   16c04:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	}
	// 接下来我们开始设置DMA通道2.在开始设置之前需要先屏蔽该通道.单通道屏蔽寄存器端口为0x0A.位0-1指定DMA通道(0--3),位2:1表示屏蔽,0
	// 表示允许请求.然后向DMA控制器端口D12和11写入方式字(读盘是0x46,写盘是0x4A).再写入传输使用缓冲区地址addr和需要传输的字节数0x3ff
	// (0--1023).最后复位对DMA通道2的屏蔽,开放DMA2请求DREQ信号.
	/* mask DMA 2 */	/* 屏蔽DMA通道2 */
	immoutb_p(4 | 2,10);
   16c06:	b8 06 00 00 00       	mov    $0x6,%eax
   16c0b:	e6 0a                	out    %al,$0xa
   16c0d:	eb 00                	jmp    16c0f <setup_DMA+0x56>
   16c0f:	eb 00                	jmp    16c11 <setup_DMA+0x58>
	// 由于各通道的地址和计数寄存器都是16位的,因此在设置他们时都需要分2次进行操作.一次访问低字节,另一次访问高字节.而实际在写哪个字节则
	// 由先后触发器的状态一.当触发器为0时,则访问低字节;当字节触发器为1时,则访问高字节.每访问一次,该触发器的状态就变化一次.而写端口12就可
	// 以将触发顺置成0状态,从而对16位寄存器的设置从低字节开始.
 	__asm__("outb %%al,$12\n\tjmp 1f\n1:\tjmp 1f\n1:\t"
	"outb %%al,$11\n\tjmp 1f\n1:\tjmp 1f\n1:"::
	"a" ((char) ((command == FD_READ)?DMA_READ:DMA_WRITE)));
   16c11:	0f b6 05 78 21 03 00 	movzbl 0x32178,%eax
   16c18:	3c e6                	cmp    $0xe6,%al
   16c1a:	75 07                	jne    16c23 <setup_DMA+0x6a>
   16c1c:	b8 46 00 00 00       	mov    $0x46,%eax
   16c21:	eb 05                	jmp    16c28 <setup_DMA+0x6f>
   16c23:	b8 4a 00 00 00       	mov    $0x4a,%eax
 	__asm__("outb %%al,$12\n\tjmp 1f\n1:\tjmp 1f\n1:\t"
   16c28:	e6 0c                	out    %al,$0xc
   16c2a:	eb 00                	jmp    16c2c <setup_DMA+0x73>
   16c2c:	eb 00                	jmp    16c2e <setup_DMA+0x75>
   16c2e:	e6 0b                	out    %al,$0xb
   16c30:	eb 00                	jmp    16c32 <setup_DMA+0x79>
   16c32:	eb 00                	jmp    16c34 <setup_DMA+0x7b>
	/* 8 low bits of addr */	/* 地址氏0-7位 */
	// 向DMA通道2写入基/当前地址寄存器(端口4).
	immoutb_p(addr, 4);
   16c34:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16c38:	e6 04                	out    %al,$0x4
   16c3a:	eb 00                	jmp    16c3c <setup_DMA+0x83>
   16c3c:	eb 00                	jmp    16c3e <setup_DMA+0x85>
	addr >>= 8;
   16c3e:	c1 7c 24 0c 08       	sarl   $0x8,0xc(%esp)
	/* bits 8-15 of addr */		/* 地址高8-15位 */
	immoutb_p(addr, 4);
   16c43:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16c47:	e6 04                	out    %al,$0x4
   16c49:	eb 00                	jmp    16c4b <setup_DMA+0x92>
   16c4b:	eb 00                	jmp    16c4d <setup_DMA+0x94>
	addr >>= 8;
   16c4d:	c1 7c 24 0c 08       	sarl   $0x8,0xc(%esp)
	/* bits 16-19 of addr */	/* 地址16-19位 */
	// DMA只可以在1MB内存空间内寻址,基高16-19位地址需放入页面寄存器(端口0x81).
	immoutb_p(addr, 0x81);
   16c52:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16c56:	e6 81                	out    %al,$0x81
   16c58:	eb 00                	jmp    16c5a <setup_DMA+0xa1>
   16c5a:	eb 00                	jmp    16c5c <setup_DMA+0xa3>
	/* low 8 bits of count-1 (1024-1=0x3ff) */	/* 计数器低8位(1024-1 = 0x3ff) */
	// 向DMA通道2写入基/当前字节计数值(端口5).
	immoutb_p(0xff, 5);
   16c5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16c61:	e6 05                	out    %al,$0x5
   16c63:	eb 00                	jmp    16c65 <setup_DMA+0xac>
   16c65:	eb 00                	jmp    16c67 <setup_DMA+0xae>
	/* high 8 bits of count-1 */	/* 计数器高8位 */
	// 一次共传输1024字节(两个扇区).
	immoutb_p(3, 5);
   16c67:	b8 03 00 00 00       	mov    $0x3,%eax
   16c6c:	e6 05                	out    %al,$0x5
   16c6e:	eb 00                	jmp    16c70 <setup_DMA+0xb7>
   16c70:	eb 00                	jmp    16c72 <setup_DMA+0xb9>
	/* activate DMA 2 */	/* 开启DMA通道2的请求 */
	immoutb_p(0 | 2, 10);
   16c72:	b8 02 00 00 00       	mov    $0x2,%eax
   16c77:	e6 0a                	out    %al,$0xa
   16c79:	eb 00                	jmp    16c7b <setup_DMA+0xc2>
   16c7b:	eb 00                	jmp    16c7d <setup_DMA+0xc4>
	sti();
   16c7d:	fb                   	sti    
}
   16c7e:	90                   	nop
   16c7f:	83 c4 10             	add    $0x10,%esp
   16c82:	5b                   	pop    %ebx
   16c83:	5e                   	pop    %esi
   16c84:	5f                   	pop    %edi
   16c85:	c3                   	ret    

00016c86 <output_byte>:

// 向软驱控制器输出一个字节命令或参数.
// 在向控制器发送一个字节之前,控制器需要处于准备好状态,并且数据传输方向必须设置成从CPU到FDC,因此函数需要首先读取控制器状态信息.
// 这里使用了循环查询方式,以作适当延时.若出错,则会设置复位标志reset.
static void output_byte(char byte)
{
   16c86:	83 ec 2c             	sub    $0x2c,%esp
   16c89:	8b 44 24 30          	mov    0x30(%esp),%eax
   16c8d:	88 44 24 0c          	mov    %al,0xc(%esp)
	int counter;
	unsigned char status;

	// 循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果所读状态是STATUS_READY并且方向位STATUS_DIR = 0(CPU ->FDC),则向数据端口输出
	// 指定字节.
	if (reset)
   16c91:	a1 64 21 03 00       	mov    0x32164,%eax
   16c96:	85 c0                	test   %eax,%eax
   16c98:	75 65                	jne    16cff <output_byte+0x79>
		return;
	for(counter = 0 ; counter < 10000 ; counter++) {
   16c9a:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   16ca1:	00 
   16ca2:	eb 35                	jmp    16cd9 <output_byte+0x53>
		status = inb_p(FD_STATUS) & (STATUS_READY | STATUS_DIR);
   16ca4:	b8 f4 03 00 00       	mov    $0x3f4,%eax
   16ca9:	89 c2                	mov    %eax,%edx
   16cab:	ec                   	in     (%dx),%al
   16cac:	eb 00                	jmp    16cae <output_byte+0x28>
   16cae:	eb 00                	jmp    16cb0 <output_byte+0x2a>
   16cb0:	88 44 24 1b          	mov    %al,0x1b(%esp)
   16cb4:	0f b6 44 24 1b       	movzbl 0x1b(%esp),%eax
   16cb9:	83 e0 c0             	and    $0xffffffc0,%eax
   16cbc:	88 44 24 1a          	mov    %al,0x1a(%esp)
		if (status == STATUS_READY) {
   16cc0:	80 7c 24 1a 80       	cmpb   $0x80,0x1a(%esp)
   16cc5:	75 0d                	jne    16cd4 <output_byte+0x4e>
			outb(byte,FD_DATA);
   16cc7:	0f b6 44 24 0c       	movzbl 0xc(%esp),%eax
   16ccc:	ba f5 03 00 00       	mov    $0x3f5,%edx
   16cd1:	ee                   	out    %al,(%dx)
			return;
   16cd2:	eb 2c                	jmp    16d00 <output_byte+0x7a>
	for(counter = 0 ; counter < 10000 ; counter++) {
   16cd4:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   16cd9:	81 7c 24 1c 0f 27 00 	cmpl   $0x270f,0x1c(%esp)
   16ce0:	00 
   16ce1:	7e c1                	jle    16ca4 <output_byte+0x1e>
		}
	}
	// 如果到循环1万次结束还不能发送,则置复位标志,并打印出错信息.
	reset = 1;
   16ce3:	c7 05 64 21 03 00 01 	movl   $0x1,0x32164
   16cea:	00 00 00 
	printk("Unable to send byte to FDC\n\r");
   16ced:	83 ec 0c             	sub    $0xc,%esp
   16cf0:	68 d2 45 02 00       	push   $0x245d2
   16cf5:	e8 47 1f ff ff       	call   8c41 <printk>
   16cfa:	83 c4 10             	add    $0x10,%esp
   16cfd:	eb 01                	jmp    16d00 <output_byte+0x7a>
		return;
   16cff:	90                   	nop
}
   16d00:	83 c4 2c             	add    $0x2c,%esp
   16d03:	c3                   	ret    

00016d04 <result>:

// 读取FDC执行的结果信息.
// 结果信息最多7个字节,存放在数组reply_buffer[]中.返回读入的结果字节数,若返回值=-1,则表示出错.程序处理方式与上面函数类似.
static int result(void)
{
   16d04:	83 ec 2c             	sub    $0x2c,%esp
	int i = 0, counter, status;
   16d07:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   16d0e:	00 

	// 若复位标志已置位,则立刻退出.去执行后续程序中的复位操作.否则循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果读取的控制器状态
	// 是READY,表示已经没有数据可取,则返回已读取的字节数i.如果控制器状态是方向标志置位(CPU <-FDC),已准备好,忙,表示有数据可读取.
	// 于是把控制器中的结果数据读入到应答结果数组中.最多读取MAX_REPLIES(7)个字节.
	if (reset)
   16d0f:	a1 64 21 03 00       	mov    0x32164,%eax
   16d14:	85 c0                	test   %eax,%eax
   16d16:	74 0a                	je     16d22 <result+0x1e>
		return -1;
   16d18:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16d1d:	e9 a3 00 00 00       	jmp    16dc5 <result+0xc1>
	for (counter = 0 ; counter < 10000 ; counter++) {
   16d22:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   16d29:	00 
   16d2a:	eb 6d                	jmp    16d99 <result+0x95>
		status = inb_p(FD_STATUS)&(STATUS_DIR|STATUS_READY|STATUS_BUSY);
   16d2c:	b8 f4 03 00 00       	mov    $0x3f4,%eax
   16d31:	89 c2                	mov    %eax,%edx
   16d33:	ec                   	in     (%dx),%al
   16d34:	eb 00                	jmp    16d36 <result+0x32>
   16d36:	eb 00                	jmp    16d38 <result+0x34>
   16d38:	88 44 24 17          	mov    %al,0x17(%esp)
   16d3c:	0f b6 44 24 17       	movzbl 0x17(%esp),%eax
   16d41:	0f b6 c0             	movzbl %al,%eax
   16d44:	25 d0 00 00 00       	and    $0xd0,%eax
   16d49:	89 44 24 10          	mov    %eax,0x10(%esp)
		if (status == STATUS_READY)
   16d4d:	81 7c 24 10 80 00 00 	cmpl   $0x80,0x10(%esp)
   16d54:	00 
   16d55:	75 06                	jne    16d5d <result+0x59>
			return i;
   16d57:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   16d5b:	eb 68                	jmp    16dc5 <result+0xc1>
		if (status == (STATUS_DIR|STATUS_READY|STATUS_BUSY)) {
   16d5d:	81 7c 24 10 d0 00 00 	cmpl   $0xd0,0x10(%esp)
   16d64:	00 
   16d65:	75 2d                	jne    16d94 <result+0x90>
			if (i >= MAX_REPLIES)
   16d67:	83 7c 24 1c 06       	cmpl   $0x6,0x1c(%esp)
   16d6c:	7f 37                	jg     16da5 <result+0xa1>
				break;
			reply_buffer[i++] = inb_p(FD_DATA);
   16d6e:	b8 f5 03 00 00       	mov    $0x3f5,%eax
   16d73:	89 c2                	mov    %eax,%edx
   16d75:	ec                   	in     (%dx),%al
   16d76:	eb 00                	jmp    16d78 <result+0x74>
   16d78:	eb 00                	jmp    16d7a <result+0x76>
   16d7a:	88 44 24 0f          	mov    %al,0xf(%esp)
   16d7e:	0f b6 54 24 0f       	movzbl 0xf(%esp),%edx
   16d83:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   16d87:	8d 48 01             	lea    0x1(%eax),%ecx
   16d8a:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
   16d8e:	88 90 6c 21 03 00    	mov    %dl,0x3216c(%eax)
	for (counter = 0 ; counter < 10000 ; counter++) {
   16d94:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   16d99:	81 7c 24 18 0f 27 00 	cmpl   $0x270f,0x18(%esp)
   16da0:	00 
   16da1:	7e 89                	jle    16d2c <result+0x28>
   16da3:	eb 01                	jmp    16da6 <result+0xa2>
				break;
   16da5:	90                   	nop
		}
	}
	// 如果到循环1万次结束还不能发送,则置复位标志,并打印出错信息.
	reset = 1;
   16da6:	c7 05 64 21 03 00 01 	movl   $0x1,0x32164
   16dad:	00 00 00 
	printk("Getstatus times out\n\r");
   16db0:	83 ec 0c             	sub    $0xc,%esp
   16db3:	68 ef 45 02 00       	push   $0x245ef
   16db8:	e8 84 1e ff ff       	call   8c41 <printk>
   16dbd:	83 c4 10             	add    $0x10,%esp
	return -1;
   16dc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16dc5:	83 c4 2c             	add    $0x2c,%esp
   16dc8:	c3                   	ret    

00016dc9 <bad_flp_intr>:
// 该函数根据软盘读写出错次数来确定需要采取的进一步行动.如果当前处理的请求项出错次数大于规定的最大出错次数MAX_ERRORS(8次),则
// 不再对当前请求项作进一步的操作尝试.如果读/写出错次数已经超过MAX_ERRORS/2,则需要对软驱作复位处理,于是设置复位标志reset.否则
// 若出错次数还不到最大值的一半,则只需重新校正一下磁头位置,于是设置重新校正标志recalibrate.真正的复位和重新校正处理会在后续的
// 程序中进行.
static void bad_flp_intr(void)
{
   16dc9:	83 ec 0c             	sub    $0xc,%esp
	// 首先把当前请求项出错次数增1.如果当前请求项出错次数大于最大允许出错次数,则取消选定当前软驱,并结束该请求项(缓冲区内容没有被更新).
	CURRENT->errors++;
   16dcc:	a1 14 21 03 00       	mov    0x32114,%eax
   16dd1:	8b 50 08             	mov    0x8(%eax),%edx
   16dd4:	83 c2 01             	add    $0x1,%edx
   16dd7:	89 50 08             	mov    %edx,0x8(%eax)
	if (CURRENT->errors > MAX_ERRORS) {
   16dda:	a1 14 21 03 00       	mov    0x32114,%eax
   16ddf:	8b 40 08             	mov    0x8(%eax),%eax
   16de2:	83 f8 08             	cmp    $0x8,%eax
   16de5:	7e 23                	jle    16e0a <bad_flp_intr+0x41>
		floppy_deselect(current_drive);
   16de7:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   16dee:	0f b6 c0             	movzbl %al,%eax
   16df1:	83 ec 0c             	sub    $0xc,%esp
   16df4:	50                   	push   %eax
   16df5:	e8 e3 fc ff ff       	call   16add <floppy_deselect>
   16dfa:	83 c4 10             	add    $0x10,%esp
		end_request(0);
   16dfd:	83 ec 0c             	sub    $0xc,%esp
   16e00:	6a 00                	push   $0x0
   16e02:	e8 12 fc ff ff       	call   16a19 <end_request>
   16e07:	83 c4 10             	add    $0x10,%esp
	}
	// 如果当前请求项出错次数大于在允许出错次数的一半,则置复位标志,需对软驱进行复位操作,然后再试.否则软驱需重新校正一下再试.
	if (CURRENT->errors > MAX_ERRORS / 2)
   16e0a:	a1 14 21 03 00       	mov    0x32114,%eax
   16e0f:	8b 40 08             	mov    0x8(%eax),%eax
   16e12:	83 f8 04             	cmp    $0x4,%eax
   16e15:	7e 0c                	jle    16e23 <bad_flp_intr+0x5a>
		reset = 1;
   16e17:	c7 05 64 21 03 00 01 	movl   $0x1,0x32164
   16e1e:	00 00 00 
	else
		recalibrate = 1;
}
   16e21:	eb 0a                	jmp    16e2d <bad_flp_intr+0x64>
		recalibrate = 1;
   16e23:	c7 05 60 21 03 00 01 	movl   $0x1,0x32160
   16e2a:	00 00 00 
}
   16e2d:	90                   	nop
   16e2e:	83 c4 0c             	add    $0xc,%esp
   16e31:	c3                   	ret    

00016e32 <rw_interrupt>:
 */
// 软盘读写中断调用函数.
// 该函数在软驱控制器操作结束后引发的中断处理过程中被调用.函数首先读取操作结果状态信息,据此判断操作是否出现问题并作相应处理.如果
// 读/写操作成功,那么若请求项是读操作并且其缓冲区在内存1MB以上位置,则需要把数据从软盘临时缓冲区复制到请求项的缓冲区.
static void rw_interrupt(void)
{
   16e32:	57                   	push   %edi
   16e33:	56                   	push   %esi
   16e34:	53                   	push   %ebx
	// 读取FDC执行的结果信息.如果返回字节数不等于7,或者状态字节0,1或2中存在出错标志,那么若是写保护就显示出错信息,释放当前驱动器,并
	// 结束当前请求项.否则就执行出错计数处理.然后继续执行软盘请求项操作.以下状态的含义参见fdreg.h文件.
	if (result() != 7 || (ST0 & 0xd8) || (ST1 & 0xbf) || (ST2 & 0x73)) {    // 把0xf8修改0xd8
   16e35:	e8 ca fe ff ff       	call   16d04 <result>
   16e3a:	83 f8 07             	cmp    $0x7,%eax
   16e3d:	75 37                	jne    16e76 <rw_interrupt+0x44>
   16e3f:	0f b6 05 6c 21 03 00 	movzbl 0x3216c,%eax
   16e46:	0f b6 c0             	movzbl %al,%eax
   16e49:	25 d8 00 00 00       	and    $0xd8,%eax
   16e4e:	85 c0                	test   %eax,%eax
   16e50:	75 24                	jne    16e76 <rw_interrupt+0x44>
   16e52:	0f b6 05 6d 21 03 00 	movzbl 0x3216d,%eax
   16e59:	0f b6 c0             	movzbl %al,%eax
   16e5c:	25 bf 00 00 00       	and    $0xbf,%eax
   16e61:	85 c0                	test   %eax,%eax
   16e63:	75 11                	jne    16e76 <rw_interrupt+0x44>
   16e65:	0f b6 05 6e 21 03 00 	movzbl 0x3216e,%eax
   16e6c:	0f b6 c0             	movzbl %al,%eax
   16e6f:	83 e0 73             	and    $0x73,%eax
   16e72:	85 c0                	test   %eax,%eax
   16e74:	74 5d                	je     16ed3 <rw_interrupt+0xa1>
		if (ST1 & 0x02) {
   16e76:	0f b6 05 6d 21 03 00 	movzbl 0x3216d,%eax
   16e7d:	0f b6 c0             	movzbl %al,%eax
   16e80:	83 e0 02             	and    $0x2,%eax
   16e83:	85 c0                	test   %eax,%eax
   16e85:	74 40                	je     16ec7 <rw_interrupt+0x95>
			printk("Drive %d is write protected\n\r",current_drive);
   16e87:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   16e8e:	0f b6 c0             	movzbl %al,%eax
   16e91:	83 ec 08             	sub    $0x8,%esp
   16e94:	50                   	push   %eax
   16e95:	68 05 46 02 00       	push   $0x24605
   16e9a:	e8 a2 1d ff ff       	call   8c41 <printk>
   16e9f:	83 c4 10             	add    $0x10,%esp
			floppy_deselect(current_drive);
   16ea2:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   16ea9:	0f b6 c0             	movzbl %al,%eax
   16eac:	83 ec 0c             	sub    $0xc,%esp
   16eaf:	50                   	push   %eax
   16eb0:	e8 28 fc ff ff       	call   16add <floppy_deselect>
   16eb5:	83 c4 10             	add    $0x10,%esp
			end_request(0);
   16eb8:	83 ec 0c             	sub    $0xc,%esp
   16ebb:	6a 00                	push   $0x0
   16ebd:	e8 57 fb ff ff       	call   16a19 <end_request>
   16ec2:	83 c4 10             	add    $0x10,%esp
   16ec5:	eb 05                	jmp    16ecc <rw_interrupt+0x9a>
		} else
			bad_flp_intr();
   16ec7:	e8 fd fe ff ff       	call   16dc9 <bad_flp_intr>
		do_fd_request();
   16ecc:	e8 50 05 00 00       	call   17421 <do_fd_request>
		return;
   16ed1:	eb 5f                	jmp    16f32 <rw_interrupt+0x100>
	}
	// 如果当前请求项的缓冲区位于1MB地址以上,则说明此次软盘读操作的内容还放在临时缓冲区内,需要复制到当前请求项的缓冲区中(因为DMA只能在
	// 1MB地址范围寻址).最后释放当前软驱(取消选定),执行当前请求项结束处理:唤醒等待该请求项的进程,唤醒等待空闲请求项的进程(若有的话),从软驱
	// 设备请求项链表中删除本请求项.再继续执行其他软盘请求项操作.
	if (command == FD_READ && (unsigned long)(CURRENT->buffer) >= 0x100000)
   16ed3:	0f b6 05 78 21 03 00 	movzbl 0x32178,%eax
   16eda:	3c e6                	cmp    $0xe6,%al
   16edc:	75 2c                	jne    16f0a <rw_interrupt+0xd8>
   16ede:	a1 14 21 03 00       	mov    0x32114,%eax
   16ee3:	8b 40 14             	mov    0x14(%eax),%eax
   16ee6:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
   16eeb:	76 1d                	jbe    16f0a <rw_interrupt+0xd8>
		copy_buffer(tmp_floppy_area,CURRENT->buffer);
   16eed:	ba 00 50 00 00       	mov    $0x5000,%edx
   16ef2:	a1 14 21 03 00       	mov    0x32114,%eax
   16ef7:	8b 40 14             	mov    0x14(%eax),%eax
   16efa:	89 c3                	mov    %eax,%ebx
   16efc:	b8 00 01 00 00       	mov    $0x100,%eax
   16f01:	89 c1                	mov    %eax,%ecx
   16f03:	89 d6                	mov    %edx,%esi
   16f05:	89 df                	mov    %ebx,%edi
   16f07:	fc                   	cld    
   16f08:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	floppy_deselect(current_drive);
   16f0a:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   16f11:	0f b6 c0             	movzbl %al,%eax
   16f14:	83 ec 0c             	sub    $0xc,%esp
   16f17:	50                   	push   %eax
   16f18:	e8 c0 fb ff ff       	call   16add <floppy_deselect>
   16f1d:	83 c4 10             	add    $0x10,%esp
	end_request(1);
   16f20:	83 ec 0c             	sub    $0xc,%esp
   16f23:	6a 01                	push   $0x1
   16f25:	e8 ef fa ff ff       	call   16a19 <end_request>
   16f2a:	83 c4 10             	add    $0x10,%esp
	do_fd_request();
   16f2d:	e8 ef 04 00 00       	call   17421 <do_fd_request>
}
   16f32:	5b                   	pop    %ebx
   16f33:	5e                   	pop    %esi
   16f34:	5f                   	pop    %edi
   16f35:	c3                   	ret    

00016f36 <setup_rw_floppy>:

// 设置DMA通道2并向软盘控制器输出命令和参数(输出1字节命令+0~7字节参数).
// 若reset标志没有置位,那么在该函数退出并且软盘控制器执行完相应读/写操作后就会产生一个软盘中断请求,并开始执行软盘中断处理程序.
void setup_rw_floppy(void)
{
   16f36:	83 ec 0c             	sub    $0xc,%esp
	setup_DMA();										// 初始化软盘DMA通道.
   16f39:	e8 7b fc ff ff       	call   16bb9 <setup_DMA>
	do_floppy = rw_interrupt;							// 置软盘中断调用函数指针.
   16f3e:	c7 05 54 21 03 00 32 	movl   $0x16e32,0x32154
   16f45:	6e 01 00 
	output_byte(command);								// 发送命令字节.
   16f48:	0f b6 05 78 21 03 00 	movzbl 0x32178,%eax
   16f4f:	0f be c0             	movsbl %al,%eax
   16f52:	83 ec 0c             	sub    $0xc,%esp
   16f55:	50                   	push   %eax
   16f56:	e8 2b fd ff ff       	call   16c86 <output_byte>
   16f5b:	83 c4 10             	add    $0x10,%esp
	output_byte(head<<2 | current_drive);				// 参数:磁头号 + 驱动器号.
   16f5e:	0f b6 05 75 21 03 00 	movzbl 0x32175,%eax
   16f65:	0f b6 c0             	movzbl %al,%eax
   16f68:	c1 e0 02             	shl    $0x2,%eax
   16f6b:	89 c2                	mov    %eax,%edx
   16f6d:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   16f74:	09 d0                	or     %edx,%eax
   16f76:	0f be c0             	movsbl %al,%eax
   16f79:	83 ec 0c             	sub    $0xc,%esp
   16f7c:	50                   	push   %eax
   16f7d:	e8 04 fd ff ff       	call   16c86 <output_byte>
   16f82:	83 c4 10             	add    $0x10,%esp
	output_byte(track);									// 参数:磁道号.
   16f85:	0f b6 05 76 21 03 00 	movzbl 0x32176,%eax
   16f8c:	0f be c0             	movsbl %al,%eax
   16f8f:	83 ec 0c             	sub    $0xc,%esp
   16f92:	50                   	push   %eax
   16f93:	e8 ee fc ff ff       	call   16c86 <output_byte>
   16f98:	83 c4 10             	add    $0x10,%esp
	output_byte(head);									// 参数:磁头号.
   16f9b:	0f b6 05 75 21 03 00 	movzbl 0x32175,%eax
   16fa2:	0f be c0             	movsbl %al,%eax
   16fa5:	83 ec 0c             	sub    $0xc,%esp
   16fa8:	50                   	push   %eax
   16fa9:	e8 d8 fc ff ff       	call   16c86 <output_byte>
   16fae:	83 c4 10             	add    $0x10,%esp
	output_byte(sector);								// 参数:起始扇区号.
   16fb1:	0f b6 05 74 21 03 00 	movzbl 0x32174,%eax
   16fb8:	0f be c0             	movsbl %al,%eax
   16fbb:	83 ec 0c             	sub    $0xc,%esp
   16fbe:	50                   	push   %eax
   16fbf:	e8 c2 fc ff ff       	call   16c86 <output_byte>
   16fc4:	83 c4 10             	add    $0x10,%esp
	output_byte(2);										/* sector size = 512 */	// 参数:(N=2)512字节.
   16fc7:	83 ec 0c             	sub    $0xc,%esp
   16fca:	6a 02                	push   $0x2
   16fcc:	e8 b5 fc ff ff       	call   16c86 <output_byte>
   16fd1:	83 c4 10             	add    $0x10,%esp
	output_byte(floppy->sect);							// 参数:每磁道扇区数.
   16fd4:	a1 88 f4 02 00       	mov    0x2f488,%eax
   16fd9:	8b 40 04             	mov    0x4(%eax),%eax
   16fdc:	0f be c0             	movsbl %al,%eax
   16fdf:	83 ec 0c             	sub    $0xc,%esp
   16fe2:	50                   	push   %eax
   16fe3:	e8 9e fc ff ff       	call   16c86 <output_byte>
   16fe8:	83 c4 10             	add    $0x10,%esp
	output_byte(floppy->gap);							// 参数:扇区间隔长度.
   16feb:	a1 88 f4 02 00       	mov    0x2f488,%eax
   16ff0:	0f b6 40 14          	movzbl 0x14(%eax),%eax
   16ff4:	0f be c0             	movsbl %al,%eax
   16ff7:	83 ec 0c             	sub    $0xc,%esp
   16ffa:	50                   	push   %eax
   16ffb:	e8 86 fc ff ff       	call   16c86 <output_byte>
   17000:	83 c4 10             	add    $0x10,%esp
	output_byte(0xFF);									/* sector size (0xff when n!=0 ?) */ // 参数:当N=0时,扇区定义的字节长度,这里无用.
   17003:	83 ec 0c             	sub    $0xc,%esp
   17006:	6a ff                	push   $0xffffffff
   17008:	e8 79 fc ff ff       	call   16c86 <output_byte>
   1700d:	83 c4 10             	add    $0x10,%esp
	// 若上述任何一个output_byte()操作出错,则会设置复位标志reset.此时即会立刻去执行do_fd_request()中的复位处理代码.
	if (reset)
   17010:	a1 64 21 03 00       	mov    0x32164,%eax
   17015:	85 c0                	test   %eax,%eax
   17017:	74 05                	je     1701e <setup_rw_floppy+0xe8>
		do_fd_request();
   17019:	e8 03 04 00 00       	call   17421 <do_fd_request>
}
   1701e:	90                   	nop
   1701f:	83 c4 0c             	add    $0xc,%esp
   17022:	c3                   	ret    

00017023 <seek_interrupt>:
 */
// 寻道处理结束后中断过程中调用的C函数.
// 首先发送检测中断状态命令,获得状态信息ST0和磁头所在磁道信息.若出错则执行错误计数检测处理或取消本次软盘操作请求项.否则根据
// 状态信息设置当前磁道变量,然后调用函数setup_rw_floppy()设置DMA并输出软盘读写命令和参数.
static void seek_interrupt(void)
{
   17023:	83 ec 0c             	sub    $0xc,%esp
	// 首先发送检测中断状态命令,以获取寻道操作执行的结果.该命令不带参数.返回结果信息是两个字节:ST0和磁头当前磁道号.一读取FDC执行的
	// 结果信息.如果返回结果字节数不等于2,或者ST0不为寻道结束,或者磁头所在磁道(ST1)不等于设定磁道,则说明发生了错误.于是执行检测错误
	// 计数处理,然后继续执行软盘请求项或执行复位处理.
	/* sense drive status */	/* 检测驱动器状态 */
	output_byte(FD_SENSEI);
   17026:	83 ec 0c             	sub    $0xc,%esp
   17029:	6a 08                	push   $0x8
   1702b:	e8 56 fc ff ff       	call   16c86 <output_byte>
   17030:	83 c4 10             	add    $0x10,%esp
	if (result() != 2 || (ST0 & 0xF8) != 0x20 || ST1 != seek_track) {
   17033:	e8 cc fc ff ff       	call   16d04 <result>
   17038:	83 f8 02             	cmp    $0x2,%eax
   1703b:	75 26                	jne    17063 <seek_interrupt+0x40>
   1703d:	0f b6 05 6c 21 03 00 	movzbl 0x3216c,%eax
   17044:	0f b6 c0             	movzbl %al,%eax
   17047:	25 f8 00 00 00       	and    $0xf8,%eax
   1704c:	83 f8 20             	cmp    $0x20,%eax
   1704f:	75 12                	jne    17063 <seek_interrupt+0x40>
   17051:	0f b6 15 6d 21 03 00 	movzbl 0x3216d,%edx
   17058:	0f b6 05 77 21 03 00 	movzbl 0x32177,%eax
   1705f:	38 c2                	cmp    %al,%dl
   17061:	74 0c                	je     1706f <seek_interrupt+0x4c>
		bad_flp_intr();
   17063:	e8 61 fd ff ff       	call   16dc9 <bad_flp_intr>
		do_fd_request();
   17068:	e8 b4 03 00 00       	call   17421 <do_fd_request>
		return;
   1706d:	eb 11                	jmp    17080 <seek_interrupt+0x5d>
	}
	// 若寻道操作成功,则继续执行当前请求项的软盘操作,即向软盘控制器发送命令和参数.
	current_track = ST1;							// 设置当前磁道.
   1706f:	0f b6 05 6d 21 03 00 	movzbl 0x3216d,%eax
   17076:	a2 8c f4 02 00       	mov    %al,0x2f48c
	setup_rw_floppy();								// 设置DMA并输出软盘操作命令和参数.
   1707b:	e8 b6 fe ff ff       	call   16f36 <setup_rw_floppy>
}
   17080:	83 c4 0c             	add    $0xc,%esp
   17083:	c3                   	ret    

00017084 <transfer>:
/*
 * 该函数是在传输操作的所有信息都正确设置好后被调用的(即软驱马达已开启并且已选择了正确的软盘(软驱).
 */
// 读写数据传输函数.
static void transfer(void)
{
   17084:	83 ec 0c             	sub    $0xc,%esp
	// 首先检查当前驱动器参数是否就是指定驱动器的参数.若不是就发送设置驱动器参数命令及相应参数(参数1:高4位步进速率,低4位磁头卸载时间;
	// 参数2:磁头加载时间).然后判断当前数据传输速率是否与指定驱动器的一致,若不是就发送指定软驱的速率值到数据传输速率控制寄存器(FD_DCR).
	if (cur_spec1 != floppy->spec1) {				// 检测当前参数.
   17087:	a1 88 f4 02 00       	mov    0x2f488,%eax
   1708c:	0f b6 40 16          	movzbl 0x16(%eax),%eax
   17090:	0f b6 d0             	movzbl %al,%edx
   17093:	a1 80 f4 02 00       	mov    0x2f480,%eax
   17098:	39 c2                	cmp    %eax,%edx
   1709a:	74 3f                	je     170db <transfer+0x57>
		cur_spec1 = floppy->spec1;
   1709c:	a1 88 f4 02 00       	mov    0x2f488,%eax
   170a1:	0f b6 40 16          	movzbl 0x16(%eax),%eax
   170a5:	0f b6 c0             	movzbl %al,%eax
   170a8:	a3 80 f4 02 00       	mov    %eax,0x2f480
		output_byte(FD_SPECIFY);					// 发送设置磁盘参数命令.
   170ad:	83 ec 0c             	sub    $0xc,%esp
   170b0:	6a 03                	push   $0x3
   170b2:	e8 cf fb ff ff       	call   16c86 <output_byte>
   170b7:	83 c4 10             	add    $0x10,%esp
		output_byte(cur_spec1);						/* hut etc */	// 发送参数.
   170ba:	a1 80 f4 02 00       	mov    0x2f480,%eax
   170bf:	0f be c0             	movsbl %al,%eax
   170c2:	83 ec 0c             	sub    $0xc,%esp
   170c5:	50                   	push   %eax
   170c6:	e8 bb fb ff ff       	call   16c86 <output_byte>
   170cb:	83 c4 10             	add    $0x10,%esp
		output_byte(6);								/* Head load time =6ms, DMA */
   170ce:	83 ec 0c             	sub    $0xc,%esp
   170d1:	6a 06                	push   $0x6
   170d3:	e8 ae fb ff ff       	call   16c86 <output_byte>
   170d8:	83 c4 10             	add    $0x10,%esp
	}
	if (cur_rate != floppy->rate)					// 检测当前速率.
   170db:	a1 88 f4 02 00       	mov    0x2f488,%eax
   170e0:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   170e4:	0f b6 d0             	movzbl %al,%edx
   170e7:	a1 84 f4 02 00       	mov    0x2f484,%eax
   170ec:	39 c2                	cmp    %eax,%edx
   170ee:	74 20                	je     17110 <transfer+0x8c>
		outb_p(cur_rate = floppy->rate,FD_DCR);
   170f0:	a1 88 f4 02 00       	mov    0x2f488,%eax
   170f5:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   170f9:	0f b6 c0             	movzbl %al,%eax
   170fc:	a3 84 f4 02 00       	mov    %eax,0x2f484
   17101:	a1 84 f4 02 00       	mov    0x2f484,%eax
   17106:	ba f7 03 00 00       	mov    $0x3f7,%edx
   1710b:	ee                   	out    %al,(%dx)
   1710c:	eb 00                	jmp    1710e <transfer+0x8a>
   1710e:	eb 00                	jmp    17110 <transfer+0x8c>
	// 若上面任何一个output_byte()操作执行出错,则复位标志reset就会被置位.因此这里我们需要检测一下reset标志.若reset真的被置位了,就立刻
	// 去执行do_fd_requst()中的复位处理代码.
	if (reset) {
   17110:	a1 64 21 03 00       	mov    0x32164,%eax
   17115:	85 c0                	test   %eax,%eax
   17117:	74 0a                	je     17123 <transfer+0x9f>
		do_fd_request();
   17119:	e8 03 03 00 00       	call   17421 <do_fd_request>
		return;
   1711e:	e9 b6 00 00 00       	jmp    171d9 <transfer+0x155>
	}
	// 如果此时寻道标志为零(即不需要寻道),则设置DMA并向软盘控制器发送相应操作命令和参数后返回.否则就执行寻道处理,于是首先置软盘中断处理
	// 调用函数为寻道中断函数.如果起始磁道号不等于零则发送磁头寻道命令和参数.所使用的参数即是第112-121行上设置的全局变量值.如果起始磁道
	// 号seek_track为0,则执行重新校正命令让磁头归零位.
	if (!seek) {
   17123:	a1 68 21 03 00       	mov    0x32168,%eax
   17128:	85 c0                	test   %eax,%eax
   1712a:	75 0a                	jne    17136 <transfer+0xb2>
		setup_rw_floppy();							// 发送命令参数块.
   1712c:	e8 05 fe ff ff       	call   16f36 <setup_rw_floppy>
		return;
   17131:	e9 a3 00 00 00       	jmp    171d9 <transfer+0x155>
	}
	do_floppy = seek_interrupt;						// 寻道中断调用的C函数.
   17136:	c7 05 54 21 03 00 23 	movl   $0x17023,0x32154
   1713d:	70 01 00 
	if (seek_track) {								// 起始磁道号.
   17140:	0f b6 05 77 21 03 00 	movzbl 0x32177,%eax
   17147:	84 c0                	test   %al,%al
   17149:	74 4c                	je     17197 <transfer+0x113>
		output_byte(FD_SEEK);						// 发送磁头寻道命令.
   1714b:	83 ec 0c             	sub    $0xc,%esp
   1714e:	6a 0f                	push   $0xf
   17150:	e8 31 fb ff ff       	call   16c86 <output_byte>
   17155:	83 c4 10             	add    $0x10,%esp
		output_byte(head<<2 | current_drive);		// 发送参数:磁头号+当前软驱号.
   17158:	0f b6 05 75 21 03 00 	movzbl 0x32175,%eax
   1715f:	0f b6 c0             	movzbl %al,%eax
   17162:	c1 e0 02             	shl    $0x2,%eax
   17165:	89 c2                	mov    %eax,%edx
   17167:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   1716e:	09 d0                	or     %edx,%eax
   17170:	0f be c0             	movsbl %al,%eax
   17173:	83 ec 0c             	sub    $0xc,%esp
   17176:	50                   	push   %eax
   17177:	e8 0a fb ff ff       	call   16c86 <output_byte>
   1717c:	83 c4 10             	add    $0x10,%esp
		output_byte(seek_track);					// 发送参数:磁道号.
   1717f:	0f b6 05 77 21 03 00 	movzbl 0x32177,%eax
   17186:	0f be c0             	movsbl %al,%eax
   17189:	83 ec 0c             	sub    $0xc,%esp
   1718c:	50                   	push   %eax
   1718d:	e8 f4 fa ff ff       	call   16c86 <output_byte>
   17192:	83 c4 10             	add    $0x10,%esp
   17195:	eb 34                	jmp    171cb <transfer+0x147>
	} else {
		output_byte(FD_RECALIBRATE);				// 发送重新校正命令(磁头归零).
   17197:	83 ec 0c             	sub    $0xc,%esp
   1719a:	6a 07                	push   $0x7
   1719c:	e8 e5 fa ff ff       	call   16c86 <output_byte>
   171a1:	83 c4 10             	add    $0x10,%esp
		output_byte(head<<2 | current_drive);		// 发送参数:磁头号+当前软驱号.
   171a4:	0f b6 05 75 21 03 00 	movzbl 0x32175,%eax
   171ab:	0f b6 c0             	movzbl %al,%eax
   171ae:	c1 e0 02             	shl    $0x2,%eax
   171b1:	89 c2                	mov    %eax,%edx
   171b3:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   171ba:	09 d0                	or     %edx,%eax
   171bc:	0f be c0             	movsbl %al,%eax
   171bf:	83 ec 0c             	sub    $0xc,%esp
   171c2:	50                   	push   %eax
   171c3:	e8 be fa ff ff       	call   16c86 <output_byte>
   171c8:	83 c4 10             	add    $0x10,%esp
	}
	// 同样地,若上面任何一个output_byte()操作执行出错,则复位标志reset就会被置位.若reset真的被置位了,就立刻去执行do_fd_requet()中复位
	// 处理代码.
	if (reset)
   171cb:	a1 64 21 03 00       	mov    0x32164,%eax
   171d0:	85 c0                	test   %eax,%eax
   171d2:	74 05                	je     171d9 <transfer+0x155>
		do_fd_request();
   171d4:	e8 48 02 00 00       	call   17421 <do_fd_request>
}
   171d9:	83 c4 0c             	add    $0xc,%esp
   171dc:	c3                   	ret    

000171dd <recal_interrupt>:
 */
// 软驱重新校正中断调用函数.
// 首先发送检测中断状态命令(无参数),如果返回结果表明出错,则置复位标志.否则重新校正标志清零.然后再次执行软盘请求项处理函数
// 作相应操作.
static void recal_interrupt(void)
{
   171dd:	83 ec 0c             	sub    $0xc,%esp
	output_byte(FD_SENSEI);							// 发送检测中断状态命令.
   171e0:	83 ec 0c             	sub    $0xc,%esp
   171e3:	6a 08                	push   $0x8
   171e5:	e8 9c fa ff ff       	call   16c86 <output_byte>
   171ea:	83 c4 10             	add    $0x10,%esp
	if (result() != 2 || (ST0 & 0xE0) == 0x60)		// 如果返回结果字节数不等于2或命令异常结束,则置复位标志.
   171ed:	e8 12 fb ff ff       	call   16d04 <result>
   171f2:	83 f8 02             	cmp    $0x2,%eax
   171f5:	75 14                	jne    1720b <recal_interrupt+0x2e>
   171f7:	0f b6 05 6c 21 03 00 	movzbl 0x3216c,%eax
   171fe:	0f b6 c0             	movzbl %al,%eax
   17201:	25 e0 00 00 00       	and    $0xe0,%eax
   17206:	83 f8 60             	cmp    $0x60,%eax
   17209:	75 0c                	jne    17217 <recal_interrupt+0x3a>
		reset = 1;
   1720b:	c7 05 64 21 03 00 01 	movl   $0x1,0x32164
   17212:	00 00 00 
   17215:	eb 0a                	jmp    17221 <recal_interrupt+0x44>
	else
		recalibrate = 0;							// 否则复位重新校正标志
   17217:	c7 05 60 21 03 00 00 	movl   $0x0,0x32160
   1721e:	00 00 00 
	do_fd_request();								// 作相应处理.
   17221:	e8 fb 01 00 00       	call   17421 <do_fd_request>
}
   17226:	90                   	nop
   17227:	83 c4 0c             	add    $0xc,%esp
   1722a:	c3                   	ret    

0001722b <unexpected_floppy_interrupt>:

// 意外软盘中断请求引发的软盘中断处理程序中调用的函数.
// 首先发送检测中断状态命令(无参数),如果返回结果表明出错,则置复位标志,否则置重校正标志.
void unexpected_floppy_interrupt(void)
{
   1722b:	83 ec 0c             	sub    $0xc,%esp
	output_byte(FD_SENSEI);							// 发送检测中断状态命令.
   1722e:	83 ec 0c             	sub    $0xc,%esp
   17231:	6a 08                	push   $0x8
   17233:	e8 4e fa ff ff       	call   16c86 <output_byte>
   17238:	83 c4 10             	add    $0x10,%esp
	if (result()!=2 || (ST0 & 0xE0) == 0x60)		// 如果返回结果字节数不等于2或命令异常结束,则置复位标志.
   1723b:	e8 c4 fa ff ff       	call   16d04 <result>
   17240:	83 f8 02             	cmp    $0x2,%eax
   17243:	75 14                	jne    17259 <unexpected_floppy_interrupt+0x2e>
   17245:	0f b6 05 6c 21 03 00 	movzbl 0x3216c,%eax
   1724c:	0f b6 c0             	movzbl %al,%eax
   1724f:	25 e0 00 00 00       	and    $0xe0,%eax
   17254:	83 f8 60             	cmp    $0x60,%eax
   17257:	75 0c                	jne    17265 <unexpected_floppy_interrupt+0x3a>
		reset = 1;
   17259:	c7 05 64 21 03 00 01 	movl   $0x1,0x32164
   17260:	00 00 00 
   17263:	eb 0a                	jmp    1726f <unexpected_floppy_interrupt+0x44>
	else
		recalibrate = 1;							// 否则置重新校正标志.
   17265:	c7 05 60 21 03 00 01 	movl   $0x1,0x32160
   1726c:	00 00 00 
}
   1726f:	90                   	nop
   17270:	83 c4 0c             	add    $0xc,%esp
   17273:	c3                   	ret    

00017274 <recalibrate_floppy>:

// 软盘重新校正处理函数.
// 向软盘控制器FDC发送重新校正命令和参数,并复位重新校正标志.当软盘控制器执行完重新校正命令就会再次引发的软盘中断调用
// recal_interrupt()函数.
static void recalibrate_floppy(void)
{
   17274:	83 ec 0c             	sub    $0xc,%esp
	recalibrate = 0;								// 复位重新校正标志.
   17277:	c7 05 60 21 03 00 00 	movl   $0x0,0x32160
   1727e:	00 00 00 
	current_track = 0;								// 当前磁道号归零.
   17281:	c6 05 8c f4 02 00 00 	movb   $0x0,0x2f48c
	do_floppy = recal_interrupt;					// 指向重新校正中断调用的C函数.
   17288:	c7 05 54 21 03 00 dd 	movl   $0x171dd,0x32154
   1728f:	71 01 00 
	output_byte(FD_RECALIBRATE);					// 命令:重新校正.
   17292:	83 ec 0c             	sub    $0xc,%esp
   17295:	6a 07                	push   $0x7
   17297:	e8 ea f9 ff ff       	call   16c86 <output_byte>
   1729c:	83 c4 10             	add    $0x10,%esp
	output_byte(head<<2 | current_drive);			// 参数:磁头号 + 当前驱动器号.
   1729f:	0f b6 05 75 21 03 00 	movzbl 0x32175,%eax
   172a6:	0f b6 c0             	movzbl %al,%eax
   172a9:	c1 e0 02             	shl    $0x2,%eax
   172ac:	89 c2                	mov    %eax,%edx
   172ae:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   172b5:	09 d0                	or     %edx,%eax
   172b7:	0f be c0             	movsbl %al,%eax
   172ba:	83 ec 0c             	sub    $0xc,%esp
   172bd:	50                   	push   %eax
   172be:	e8 c3 f9 ff ff       	call   16c86 <output_byte>
   172c3:	83 c4 10             	add    $0x10,%esp
	// 若上任何一个output_byte()操作执行出错,则复位标志reset就会被置位.因此这里我们需要检测一下reset标志.若reset真的被
	// 置位了,就立刻去执行do_fd_requeset()中的复位处理代码.
	if (reset)
   172c6:	a1 64 21 03 00       	mov    0x32164,%eax
   172cb:	85 c0                	test   %eax,%eax
   172cd:	74 05                	je     172d4 <recalibrate_floppy+0x60>
		do_fd_request();
   172cf:	e8 4d 01 00 00       	call   17421 <do_fd_request>
}
   172d4:	90                   	nop
   172d5:	83 c4 0c             	add    $0xc,%esp
   172d8:	c3                   	ret    

000172d9 <reset_interrupt>:
// 软盘控制器FDC复位中断调用函数.
// 该函数会在向控制器发送了复位操作命令后引发的软盘中断处理程序中被调用.
// 首先发送检测中断状态命令(无参数),然后读出返回的结果字节.接着发送设定软驱参数命令和相关参数,最后再次调用请求项处理函数
// do_fd_request()去执行重新校正工作.但由于执行output_byte()操作函数出错时复位标志又会被置位,因此也可能再次去执行复位处理.
static void reset_interrupt(void)
{
   172d9:	83 ec 0c             	sub    $0xc,%esp
	output_byte(FD_SENSEI);							// 发送检测中断状态命令.
   172dc:	83 ec 0c             	sub    $0xc,%esp
   172df:	6a 08                	push   $0x8
   172e1:	e8 a0 f9 ff ff       	call   16c86 <output_byte>
   172e6:	83 c4 10             	add    $0x10,%esp
	(void) result();								// 读取命令执行结果字节.
   172e9:	e8 16 fa ff ff       	call   16d04 <result>
	output_byte(FD_SPECIFY);						// 发送设定软驱参数命令.
   172ee:	83 ec 0c             	sub    $0xc,%esp
   172f1:	6a 03                	push   $0x3
   172f3:	e8 8e f9 ff ff       	call   16c86 <output_byte>
   172f8:	83 c4 10             	add    $0x10,%esp
	output_byte(cur_spec1);							/* hut etc */	// 发送参数
   172fb:	a1 80 f4 02 00       	mov    0x2f480,%eax
   17300:	0f be c0             	movsbl %al,%eax
   17303:	83 ec 0c             	sub    $0xc,%esp
   17306:	50                   	push   %eax
   17307:	e8 7a f9 ff ff       	call   16c86 <output_byte>
   1730c:	83 c4 10             	add    $0x10,%esp
	output_byte(6);									/* Head load time =6ms, DMA */
   1730f:	83 ec 0c             	sub    $0xc,%esp
   17312:	6a 06                	push   $0x6
   17314:	e8 6d f9 ff ff       	call   16c86 <output_byte>
   17319:	83 c4 10             	add    $0x10,%esp
	do_fd_request();                				// 调用执行软盘请求.
   1731c:	e8 00 01 00 00       	call   17421 <do_fd_request>
}
   17321:	90                   	nop
   17322:	83 c4 0c             	add    $0xc,%esp
   17325:	c3                   	ret    

00017326 <reset_floppy>:
// 复位软盘控制器.
// 该函数首先设置参数和标志,把复位标志清0,然后把软驱变量cur_spec1和cur_rate置为无效.因为复位操作后,这两个参数就需要重新设置.接着
// 需要重新校正标志,并设置FDC执行复位操作后引发的软盘中断中调用的C函数reset_interrupt().最后把DOR寄存器位2置0一会儿以对软驱执行
// 复位操作.当前数字输出寄存器DOR的位2是启动/复位软驱位.
static void reset_floppy(void)
{
   17326:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	reset = 0;										// 复位标志置0.
   17329:	c7 05 64 21 03 00 00 	movl   $0x0,0x32164
   17330:	00 00 00 
	cur_spec1 = -1;									// 使无效.
   17333:	c7 05 80 f4 02 00 ff 	movl   $0xffffffff,0x2f480
   1733a:	ff ff ff 
	cur_rate = -1;
   1733d:	c7 05 84 f4 02 00 ff 	movl   $0xffffffff,0x2f484
   17344:	ff ff ff 
	recalibrate = 1;								// 重新校正标志置位.
   17347:	c7 05 60 21 03 00 01 	movl   $0x1,0x32160
   1734e:	00 00 00 
	printk("Reset-floppy called\n\r");				// 显示执行软盘复位操作信息.
   17351:	83 ec 0c             	sub    $0xc,%esp
   17354:	68 23 46 02 00       	push   $0x24623
   17359:	e8 e3 18 ff ff       	call   8c41 <printk>
   1735e:	83 c4 10             	add    $0x10,%esp
	cli();											// 关中断.
   17361:	fa                   	cli    
	do_floppy = reset_interrupt;					// 设置在中断处理程序中调用的函数.
   17362:	c7 05 54 21 03 00 d9 	movl   $0x172d9,0x32154
   17369:	72 01 00 
	outb_p(current_DOR & ~0x04,FD_DOR);				// 对软盘控制器FDC执行复位操作.
   1736c:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   17373:	0f b6 c0             	movzbl %al,%eax
   17376:	83 e0 fb             	and    $0xfffffffb,%eax
   17379:	ba f2 03 00 00       	mov    $0x3f2,%edx
   1737e:	ee                   	out    %al,(%dx)
   1737f:	eb 00                	jmp    17381 <reset_floppy+0x5b>
   17381:	eb 00                	jmp    17383 <reset_floppy+0x5d>
	for (i = 0 ; i < 100 ; i++)						// 空操作,延迟.
   17383:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1738a:	00 
   1738b:	eb 06                	jmp    17393 <reset_floppy+0x6d>
		__asm__("nop");
   1738d:	90                   	nop
	for (i = 0 ; i < 100 ; i++)						// 空操作,延迟.
   1738e:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   17393:	83 7c 24 0c 63       	cmpl   $0x63,0xc(%esp)
   17398:	7e f3                	jle    1738d <reset_floppy+0x67>
	outb(current_DOR,FD_DOR);						// 再启动软盘控制器.
   1739a:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   173a1:	ba f2 03 00 00       	mov    $0x3f2,%edx
   173a6:	ee                   	out    %al,(%dx)
	sti();											// 开中断.
   173a7:	fb                   	sti    
}
   173a8:	90                   	nop
   173a9:	83 c4 1c             	add    $0x1c,%esp
   173ac:	c3                   	ret    

000173ad <floppy_on_interrupt>:

// 软驱启动定时中断调用函数.
// 在执行一个请求项要求的操作之前,为了等待指定软驱马达旋转起来到达正常的工作转速,do_fd_request()函数为准备好的当前请求项添加了一个延时
// 定时器.本函数即是该定时器到期时调用的函数.它首先检查数字输出寄存器(DOR),使其选择当前指定的驱动.然后调用执行软盘读写传输函数transfer().
static void floppy_on_interrupt(void)
{
   173ad:	83 ec 0c             	sub    $0xc,%esp
	/* We cannot do a floppy-select, as that might sleep. We just force it */
	/* 我们不能任意设置选择的软驱,因为这可能会引起进程睡眠.我们只能迫使它自己选择 */
	// 如果当前驱动器号与数字输出寄存器DOR中的不同,则需要重新设置DOR为当前驱动器.在向数字输出寄存器输出当前DOR以后,使用定时器延迟2个滴答
	// 时间,以让命令得到执行.然后调用软盘读写传输函数transfer().若当前驱动器与DOR中的相符,那么就可以直接调用软盘读写传输函数.
	selected = 1;									// 置已选定当前驱动器标志.
   173b0:	c6 05 58 21 03 00 01 	movb   $0x1,0x32158
	if (current_drive != (current_DOR & 3)) {
   173b7:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   173be:	0f b6 c0             	movzbl %al,%eax
   173c1:	0f b6 15 c8 f2 02 00 	movzbl 0x2f2c8,%edx
   173c8:	0f b6 d2             	movzbl %dl,%edx
   173cb:	83 e2 03             	and    $0x3,%edx
   173ce:	39 d0                	cmp    %edx,%eax
   173d0:	74 45                	je     17417 <floppy_on_interrupt+0x6a>
		current_DOR &= 0xFC;
   173d2:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   173d9:	83 e0 fc             	and    $0xfffffffc,%eax
   173dc:	a2 c8 f2 02 00       	mov    %al,0x2f2c8
		current_DOR |= current_drive;
   173e1:	0f b6 15 c8 f2 02 00 	movzbl 0x2f2c8,%edx
   173e8:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   173ef:	09 d0                	or     %edx,%eax
   173f1:	a2 c8 f2 02 00       	mov    %al,0x2f2c8
		outb(current_DOR,FD_DOR);					// 向数字输出寄存器输出当前DOR.
   173f6:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   173fd:	ba f2 03 00 00       	mov    $0x3f2,%edx
   17402:	ee                   	out    %al,(%dx)
		add_timer(2,&transfer);						// 添加定时器并执行传输函数.
   17403:	83 ec 08             	sub    $0x8,%esp
   17406:	68 84 70 01 00       	push   $0x17084
   1740b:	6a 02                	push   $0x2
   1740d:	e8 9c ff fe ff       	call   73ae <add_timer>
   17412:	83 c4 10             	add    $0x10,%esp
	} else
		transfer();									// 执行软盘读写传输函数.
}
   17415:	eb 05                	jmp    1741c <floppy_on_interrupt+0x6f>
		transfer();									// 执行软盘读写传输函数.
   17417:	e8 68 fc ff ff       	call   17084 <transfer>
}
   1741c:	90                   	nop
   1741d:	83 c4 0c             	add    $0xc,%esp
   17420:	c3                   	ret    

00017421 <do_fd_request>:

// 软盘读写请求项处理函数
// 该函数是软盘驱动程序中最主要的函数.主要作用是:1处理有复位标志或重新校正标志置位情况;2利用请求项中的设备号计算取得请求项指定软驱的
// 参数块;3利用内核定时器启动软盘读/写操作.
void do_fd_request(void)
{
   17421:	83 ec 1c             	sub    $0x1c,%esp
	unsigned int block;

	// 首先检查是否有复位标志或重校正标志置位,若有则本函数仅执行相关标志的处理功能后就返回.如果复位标志已置位,则执行软盘复位操作并返回.
	// 如果重新校正标志已置位,则执行软盘重新校正操作并返回.
	seek = 0;										// 清寻道标志.
   17424:	c7 05 68 21 03 00 00 	movl   $0x0,0x32168
   1742b:	00 00 00 
	if (reset) {									// 复位标志已置位.
   1742e:	a1 64 21 03 00       	mov    0x32164,%eax
   17433:	85 c0                	test   %eax,%eax
   17435:	74 0a                	je     17441 <do_fd_request+0x20>
		reset_floppy();
   17437:	e8 ea fe ff ff       	call   17326 <reset_floppy>
		return;
   1743c:	e9 07 02 00 00       	jmp    17648 <do_fd_request+0x227>
	}
	if (recalibrate) {								// 重新校正标志已置位.
   17441:	a1 60 21 03 00       	mov    0x32160,%eax
   17446:	85 c0                	test   %eax,%eax
   17448:	74 0a                	je     17454 <do_fd_request+0x33>
		recalibrate_floppy();
   1744a:	e8 25 fe ff ff       	call   17274 <recalibrate_floppy>
		return;
   1744f:	e9 f4 01 00 00       	jmp    17648 <do_fd_request+0x227>
	}
	// 本函数的真正功能从这里开始.首先利用blk.h文件中的INIT_REQUEST宏来检测请求项的合法性,如果已没有请求项则退出.然后利用请求项中的设备
	// 号取得请求项指定软驱的参数块.这个参数块将在下面用于设置软盘操作使用的全局变量参数块.请求项设备号中的软盘类型(MINOR(CURRENT->dev)>>2)
	// 被用作磁盘类型数组floppy_type[]的索引值来取得指定软驱的参数块.
	INIT_REQUEST;
   17454:	90                   	nop
   17455:	a1 14 21 03 00       	mov    0x32114,%eax
   1745a:	85 c0                	test   %eax,%eax
   1745c:	75 0f                	jne    1746d <do_fd_request+0x4c>
   1745e:	c7 05 54 21 03 00 00 	movl   $0x0,0x32154
   17465:	00 00 00 
   17468:	e9 db 01 00 00       	jmp    17648 <do_fd_request+0x227>
   1746d:	a1 14 21 03 00       	mov    0x32114,%eax
   17472:	8b 00                	mov    (%eax),%eax
   17474:	c1 e8 08             	shr    $0x8,%eax
   17477:	83 f8 02             	cmp    $0x2,%eax
   1747a:	74 10                	je     1748c <do_fd_request+0x6b>
   1747c:	83 ec 0c             	sub    $0xc,%esp
   1747f:	68 3c 46 02 00       	push   $0x2463c
   17484:	e8 79 17 ff ff       	call   8c02 <panic>
   17489:	83 c4 10             	add    $0x10,%esp
   1748c:	a1 14 21 03 00       	mov    0x32114,%eax
   17491:	8b 40 1c             	mov    0x1c(%eax),%eax
   17494:	85 c0                	test   %eax,%eax
   17496:	74 20                	je     174b8 <do_fd_request+0x97>
   17498:	a1 14 21 03 00       	mov    0x32114,%eax
   1749d:	8b 40 1c             	mov    0x1c(%eax),%eax
   174a0:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   174a4:	84 c0                	test   %al,%al
   174a6:	75 10                	jne    174b8 <do_fd_request+0x97>
   174a8:	83 ec 0c             	sub    $0xc,%esp
   174ab:	68 5b 46 02 00       	push   $0x2465b
   174b0:	e8 4d 17 ff ff       	call   8c02 <panic>
   174b5:	83 c4 10             	add    $0x10,%esp
	floppy = (MINOR(CURRENT->dev) >> 2) + floppy_type;
   174b8:	a1 14 21 03 00       	mov    0x32114,%eax
   174bd:	8b 00                	mov    (%eax),%eax
   174bf:	c1 f8 02             	sar    $0x2,%eax
   174c2:	83 e0 3f             	and    $0x3f,%eax
   174c5:	89 c2                	mov    %eax,%edx
   174c7:	89 d0                	mov    %edx,%eax
   174c9:	01 c0                	add    %eax,%eax
   174cb:	01 d0                	add    %edx,%eax
   174cd:	c1 e0 03             	shl    $0x3,%eax
   174d0:	05 c0 f3 02 00       	add    $0x2f3c0,%eax
   174d5:	a3 88 f4 02 00       	mov    %eax,0x2f488
	// 下面开始设置全局变量值.如果当前驱动器号current_drive不是请求项中指定的驱动器号,则置标志seek,表示在执行读/写操作之前需要先让驱动
	// 器执行寻道处理.然后把当前驱动器号设置为请求项中指定的驱动器号.
	if (current_drive != CURRENT_DEV)				// CURRENT_DEV是请求项中指定的软驱号.
   174da:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   174e1:	0f b6 d0             	movzbl %al,%edx
   174e4:	a1 14 21 03 00       	mov    0x32114,%eax
   174e9:	8b 00                	mov    (%eax),%eax
   174eb:	83 e0 03             	and    $0x3,%eax
   174ee:	39 c2                	cmp    %eax,%edx
   174f0:	74 0a                	je     174fc <do_fd_request+0xdb>
		seek = 1;
   174f2:	c7 05 68 21 03 00 01 	movl   $0x1,0x32168
   174f9:	00 00 00 
	current_drive = CURRENT_DEV;
   174fc:	a1 14 21 03 00       	mov    0x32114,%eax
   17501:	8b 00                	mov    (%eax),%eax
   17503:	83 e0 03             	and    $0x3,%eax
   17506:	a2 73 21 03 00       	mov    %al,0x32173
	// 设置读写起始扇区block.因为每次读写是以块为单位(1块为2个扇区),所以起始扇区需要起码比磁盘总扇区数小2个扇区.否则说明这个请求 参数无效,
	// 结束该次软盘请求项去执行下一个请求项.
	block = CURRENT->sector;						// 取当前软盘请求项中起始扇区号.
   1750b:	a1 14 21 03 00       	mov    0x32114,%eax
   17510:	8b 40 0c             	mov    0xc(%eax),%eax
   17513:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (block + 2 > floppy->size) {					// 如果block + 2大于磁盘扇区总数,则结束本人软盘请求项.
   17517:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1751b:	8d 50 02             	lea    0x2(%eax),%edx
   1751e:	a1 88 f4 02 00       	mov    0x2f488,%eax
   17523:	8b 00                	mov    (%eax),%eax
   17525:	39 c2                	cmp    %eax,%edx
   17527:	76 12                	jbe    1753b <do_fd_request+0x11a>
		end_request(0);
   17529:	83 ec 0c             	sub    $0xc,%esp
   1752c:	6a 00                	push   $0x0
   1752e:	e8 e6 f4 ff ff       	call   16a19 <end_request>
   17533:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   17536:	e9 1a ff ff ff       	jmp    17455 <do_fd_request+0x34>
	}
	// 再求对应在磁道上的扇区号,磁头号,磁道号,搜寻磁道号(对于软驱读不同格式的盘).
	sector = block % floppy->sect;					// 起始扇区对每磁道扇区数取模,得磁道上扇区号.
   1753b:	a1 88 f4 02 00       	mov    0x2f488,%eax
   17540:	8b 48 04             	mov    0x4(%eax),%ecx
   17543:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17547:	ba 00 00 00 00       	mov    $0x0,%edx
   1754c:	f7 f1                	div    %ecx
   1754e:	89 d0                	mov    %edx,%eax
   17550:	a2 74 21 03 00       	mov    %al,0x32174
	block /= floppy->sect;							// 起始扇区对每磁道扇区数取整,得起始磁道数.
   17555:	a1 88 f4 02 00       	mov    0x2f488,%eax
   1755a:	8b 48 04             	mov    0x4(%eax),%ecx
   1755d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17561:	ba 00 00 00 00       	mov    $0x0,%edx
   17566:	f7 f1                	div    %ecx
   17568:	89 44 24 0c          	mov    %eax,0xc(%esp)
	head = block % floppy->head;					// 起始磁道数对磁头数取模,得操作的磁头号.
   1756c:	a1 88 f4 02 00       	mov    0x2f488,%eax
   17571:	8b 48 08             	mov    0x8(%eax),%ecx
   17574:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17578:	ba 00 00 00 00       	mov    $0x0,%edx
   1757d:	f7 f1                	div    %ecx
   1757f:	89 d0                	mov    %edx,%eax
   17581:	a2 75 21 03 00       	mov    %al,0x32175
	track = block / floppy->head;					// 起始磁道数对磁头数取整,得操作的磁道号.
   17586:	a1 88 f4 02 00       	mov    0x2f488,%eax
   1758b:	8b 48 08             	mov    0x8(%eax),%ecx
   1758e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17592:	ba 00 00 00 00       	mov    $0x0,%edx
   17597:	f7 f1                	div    %ecx
   17599:	a2 76 21 03 00       	mov    %al,0x32176
	seek_track = track << floppy->stretch;			// 相应于软驱中盘类型进行调整,得寻道号.
   1759e:	0f b6 05 76 21 03 00 	movzbl 0x32176,%eax
   175a5:	0f b6 d0             	movzbl %al,%edx
   175a8:	a1 88 f4 02 00       	mov    0x2f488,%eax
   175ad:	8b 40 10             	mov    0x10(%eax),%eax
   175b0:	89 c1                	mov    %eax,%ecx
   175b2:	d3 e2                	shl    %cl,%edx
   175b4:	89 d0                	mov    %edx,%eax
   175b6:	a2 77 21 03 00       	mov    %al,0x32177
	// 再看看是否还需要首先执行寻道操作.如果寻道号与当前磁头所在磁道号不同,则需要进行寻道操作,于是置需要寻道标志seek.最后我们设置执行的软盘
	// 命令command.
	if (seek_track != current_track)
   175bb:	0f b6 15 77 21 03 00 	movzbl 0x32177,%edx
   175c2:	0f b6 05 8c f4 02 00 	movzbl 0x2f48c,%eax
   175c9:	38 c2                	cmp    %al,%dl
   175cb:	74 0a                	je     175d7 <do_fd_request+0x1b6>
		seek = 1;
   175cd:	c7 05 68 21 03 00 01 	movl   $0x1,0x32168
   175d4:	00 00 00 
	sector++;										// 磁盘上实际扇区计数是从1算起.
   175d7:	0f b6 05 74 21 03 00 	movzbl 0x32174,%eax
   175de:	83 c0 01             	add    $0x1,%eax
   175e1:	a2 74 21 03 00       	mov    %al,0x32174
	if (CURRENT->cmd == READ)						// 如果请求项是读操作,则置读命令码.
   175e6:	a1 14 21 03 00       	mov    0x32114,%eax
   175eb:	8b 40 04             	mov    0x4(%eax),%eax
   175ee:	85 c0                	test   %eax,%eax
   175f0:	75 09                	jne    175fb <do_fd_request+0x1da>
		command = FD_READ;
   175f2:	c6 05 78 21 03 00 e6 	movb   $0xe6,0x32178
   175f9:	eb 26                	jmp    17621 <do_fd_request+0x200>
	else if (CURRENT->cmd == WRITE)					// 如果请求项是写操作,则置写命令码.
   175fb:	a1 14 21 03 00       	mov    0x32114,%eax
   17600:	8b 40 04             	mov    0x4(%eax),%eax
   17603:	83 f8 01             	cmp    $0x1,%eax
   17606:	75 09                	jne    17611 <do_fd_request+0x1f0>
		command = FD_WRITE;
   17608:	c6 05 78 21 03 00 c5 	movb   $0xc5,0x32178
   1760f:	eb 10                	jmp    17621 <do_fd_request+0x200>
	else
		panic("do_fd_request: unknown command");
   17611:	83 ec 0c             	sub    $0xc,%esp
   17614:	68 74 46 02 00       	push   $0x24674
   17619:	e8 e4 15 ff ff       	call   8c02 <panic>
   1761e:	83 c4 10             	add    $0x10,%esp
	// 在上面设置好所有全局变量值之后,我们可以开始执行请求项操作了.该操作利用定时器来启动.因为为了能对软驱进行读写操作,需要首先启动驱动器马达
	// 并达到正常运转速度.而这需要一定的时间.因此这里利用ticks_to_floppy_on()来计算启动延时时间,然后使用该延时设定一个定时器.当时间到时就调用
	// 函数floppy_on_interrupt().
	add_timer(ticks_to_floppy_on(current_drive), &floppy_on_interrupt);
   17621:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   17628:	0f b6 c0             	movzbl %al,%eax
   1762b:	83 ec 0c             	sub    $0xc,%esp
   1762e:	50                   	push   %eax
   1762f:	e8 78 fb fe ff       	call   71ac <ticks_to_floppy_on>
   17634:	83 c4 10             	add    $0x10,%esp
   17637:	83 ec 08             	sub    $0x8,%esp
   1763a:	68 ad 73 01 00       	push   $0x173ad
   1763f:	50                   	push   %eax
   17640:	e8 69 fd fe ff       	call   73ae <add_timer>
   17645:	83 c4 10             	add    $0x10,%esp
}
   17648:	83 c4 1c             	add    $0x1c,%esp
   1764b:	c3                   	ret    

0001764c <floppy_init>:

// 软盘系统初始化.
// 设置软盘块设备请求项的处理函数do_fd_request(),并设置软盘中断门(int 0x26,对应硬件中断请求信号IRQ6).然后取消对该中断信号的屏蔽,以
// 允许软盘控制器FDC发送中断请求信号.中断描述符表IDT中陷阱门描述符设置宏set_trap_gate()定义在头文件include/asm/system.h中.
void floppy_init(void)
{
   1764c:	53                   	push   %ebx
   1764d:	83 ec 10             	sub    $0x10,%esp
	// 设置软盘中断门描述符。floppy_interrup(kernel/sys_call.s)是其中断处理过程。
	blk_size[MAJOR_NR] = floppy_sizes;
   17650:	c7 05 40 21 03 00 a0 	movl   $0x2f4a0,0x32140
   17657:	f4 02 00 
	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;  						// = do_fd_request()。
   1765a:	c7 05 10 21 03 00 21 	movl   $0x17421,0x32110
   17661:	74 01 00 
	set_trap_gate(0x26, &floppy_interrupt);          						// 设置陷阱门描述符。
   17664:	b9 e8 55 00 00       	mov    $0x55e8,%ecx
   17669:	bb ec 55 00 00       	mov    $0x55ec,%ebx
   1766e:	ba be 7a 00 00       	mov    $0x7abe,%edx
   17673:	b8 00 00 08 00       	mov    $0x80000,%eax
   17678:	66 89 d0             	mov    %dx,%ax
   1767b:	66 ba 00 8f          	mov    $0x8f00,%dx
   1767f:	89 01                	mov    %eax,(%ecx)
   17681:	89 13                	mov    %edx,(%ebx)
	outb(inb_p(0x21) & ~0x40, 0x21);                   						// 复位软盘中断请求屏蔽位。
   17683:	b8 21 00 00 00       	mov    $0x21,%eax
   17688:	89 c2                	mov    %eax,%edx
   1768a:	ec                   	in     (%dx),%al
   1768b:	eb 00                	jmp    1768d <floppy_init+0x41>
   1768d:	eb 00                	jmp    1768f <floppy_init+0x43>
   1768f:	88 44 24 0f          	mov    %al,0xf(%esp)
   17693:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   17698:	0f b6 c0             	movzbl %al,%eax
   1769b:	83 e0 bf             	and    $0xffffffbf,%eax
   1769e:	ba 21 00 00 00       	mov    $0x21,%edx
   176a3:	ee                   	out    %al,(%dx)
}
   176a4:	90                   	nop
   176a5:	83 c4 10             	add    $0x10,%esp
   176a8:	5b                   	pop    %ebx
   176a9:	c3                   	ret    

000176aa <unlock_buffer>:
{
   176aa:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)
   176ad:	8b 44 24 10          	mov    0x10(%esp),%eax
   176b1:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   176b5:	84 c0                	test   %al,%al
   176b7:	75 10                	jne    176c9 <unlock_buffer+0x1f>
		printk(DEVICE_NAME ": free buffer being unlocked\n");
   176b9:	83 ec 0c             	sub    $0xc,%esp
   176bc:	68 94 46 02 00       	push   $0x24694
   176c1:	e8 7b 15 ff ff       	call   8c41 <printk>
   176c6:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;
   176c9:	8b 44 24 10          	mov    0x10(%esp),%eax
   176cd:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);
   176d1:	8b 44 24 10          	mov    0x10(%esp),%eax
   176d5:	83 c0 10             	add    $0x10,%eax
   176d8:	83 ec 0c             	sub    $0xc,%esp
   176db:	50                   	push   %eax
   176dc:	e8 6c fa fe ff       	call   714d <wake_up>
   176e1:	83 c4 10             	add    $0x10,%esp
}
   176e4:	90                   	nop
   176e5:	83 c4 0c             	add    $0xc,%esp
   176e8:	c3                   	ret    

000176e9 <end_request>:
{
   176e9:	83 ec 0c             	sub    $0xc,%esp
	if (CURRENT->bh) {									// CURRENT为当前请求结构项指针
   176ec:	a1 1c 21 03 00       	mov    0x3211c,%eax
   176f1:	8b 40 1c             	mov    0x1c(%eax),%eax
   176f4:	85 c0                	test   %eax,%eax
   176f6:	74 23                	je     1771b <end_request+0x32>
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
   176f8:	a1 1c 21 03 00       	mov    0x3211c,%eax
   176fd:	8b 40 1c             	mov    0x1c(%eax),%eax
   17700:	8b 54 24 10          	mov    0x10(%esp),%edx
   17704:	88 50 0a             	mov    %dl,0xa(%eax)
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
   17707:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1770c:	8b 40 1c             	mov    0x1c(%eax),%eax
   1770f:	83 ec 0c             	sub    $0xc,%esp
   17712:	50                   	push   %eax
   17713:	e8 92 ff ff ff       	call   176aa <unlock_buffer>
   17718:	83 c4 10             	add    $0x10,%esp
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
   1771b:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   17720:	75 34                	jne    17756 <end_request+0x6d>
		printk(DEVICE_NAME " I/O error\n\r");
   17722:	83 ec 0c             	sub    $0xc,%esp
   17725:	68 ba 46 02 00       	push   $0x246ba
   1772a:	e8 12 15 ff ff       	call   8c41 <printk>
   1772f:	83 c4 10             	add    $0x10,%esp
			CURRENT->bh->b_blocknr);
   17732:	a1 1c 21 03 00       	mov    0x3211c,%eax
   17737:	8b 40 1c             	mov    0x1c(%eax),%eax
		printk("dev %04x, block %d\n\r",CURRENT->dev,
   1773a:	8b 50 04             	mov    0x4(%eax),%edx
   1773d:	a1 1c 21 03 00       	mov    0x3211c,%eax
   17742:	8b 00                	mov    (%eax),%eax
   17744:	83 ec 04             	sub    $0x4,%esp
   17747:	52                   	push   %edx
   17748:	50                   	push   %eax
   17749:	68 cf 46 02 00       	push   $0x246cf
   1774e:	e8 ee 14 ff ff       	call   8c41 <printk>
   17753:	83 c4 10             	add    $0x10,%esp
	wake_up(&CURRENT->waiting);							// 唤醒等待该请求项的进程.
   17756:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1775b:	83 c0 18             	add    $0x18,%eax
   1775e:	83 ec 0c             	sub    $0xc,%esp
   17761:	50                   	push   %eax
   17762:	e8 e6 f9 fe ff       	call   714d <wake_up>
   17767:	83 c4 10             	add    $0x10,%esp
	wake_up(&wait_for_request);							// 唤醒等待空闲请求项的进程.
   1776a:	83 ec 0c             	sub    $0xc,%esp
   1776d:	68 e0 20 03 00       	push   $0x320e0
   17772:	e8 d6 f9 fe ff       	call   714d <wake_up>
   17777:	83 c4 10             	add    $0x10,%esp
	CURRENT->dev = -1;									// 释放该请求项.
   1777a:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1777f:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	CURRENT = CURRENT->next;							// 指向下一请求项.
   17785:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1778a:	8b 40 20             	mov    0x20(%eax),%eax
   1778d:	a3 1c 21 03 00       	mov    %eax,0x3211c
}
   17792:	90                   	nop
   17793:	83 c4 0c             	add    $0xc,%esp
   17796:	c3                   	ret    

00017797 <sys_setup>:
// 系统设备函数.
// 函数参数BIOS是由初始化程序init/main.c中init子程序设置为指向硬盘参数表结构的指针.
// 该硬盘参数表结构包含2个硬盘参数表的(共32字节),是从内存0x90080处复制而来.0x90080处的硬盘参数表是由setup.s程序利用ROM BIOS
// 功能取得.本函数主要功能是读取CMOS和硬盘参数表信息,用于设置硬盘分区结构hd,并尝试加载RAM虚拟盘和根文件系统.
int sys_setup(void * BIOS)
{
   17797:	56                   	push   %esi
   17798:	53                   	push   %ebx
   17799:	83 ec 24             	sub    $0x24,%esp
	struct buffer_head * bh;

	// 首先设置callable标志,使得本函数只能被调用1次.然后设置硬盘信息数据组hd_info[].如果在include/linux/config.h文件已定义了符号
	// 常数HD_TYPE,那么hd_info[]数组已经在前面第49行上设置好了.否则就需要读取boot/setup.s程序存放在内存0x90080处开始的硬盘参数表.
	// setup.s程序在内存此处连续存放着一到两个硬盘参数表.
	if (!callable)
   1779c:	a1 20 f5 02 00       	mov    0x2f520,%eax
   177a1:	85 c0                	test   %eax,%eax
   177a3:	75 0a                	jne    177af <sys_setup+0x18>
		return -1;
   177a5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   177aa:	e9 ab 04 00 00       	jmp    17c5a <sys_setup+0x4c3>
	callable = 0;
   177af:	c7 05 20 f5 02 00 00 	movl   $0x0,0x2f520
   177b6:	00 00 00 
#ifndef HD_TYPE																	// 如果没有定义HD_TYPE,则读取.
	for (drive = 0 ; drive < 2 ; drive++) {
   177b9:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   177c0:	00 
   177c1:	e9 cd 00 00 00       	jmp    17893 <sys_setup+0xfc>
		hd_info[drive].cyl = *(unsigned short *) BIOS;							// 柱面数
   177c6:	8b 44 24 30          	mov    0x30(%esp),%eax
   177ca:	0f b7 00             	movzwl (%eax),%eax
   177cd:	0f b7 c8             	movzwl %ax,%ecx
   177d0:	8b 54 24 18          	mov    0x18(%esp),%edx
   177d4:	89 d0                	mov    %edx,%eax
   177d6:	01 c0                	add    %eax,%eax
   177d8:	01 d0                	add    %edx,%eax
   177da:	c1 e0 03             	shl    $0x3,%eax
   177dd:	05 a8 21 03 00       	add    $0x321a8,%eax
   177e2:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].head = *(unsigned char *) (2 + BIOS);					// 磁头数
   177e4:	8b 44 24 30          	mov    0x30(%esp),%eax
   177e8:	83 c0 02             	add    $0x2,%eax
   177eb:	0f b6 00             	movzbl (%eax),%eax
   177ee:	0f b6 c8             	movzbl %al,%ecx
   177f1:	8b 54 24 18          	mov    0x18(%esp),%edx
   177f5:	89 d0                	mov    %edx,%eax
   177f7:	01 c0                	add    %eax,%eax
   177f9:	01 d0                	add    %edx,%eax
   177fb:	c1 e0 03             	shl    $0x3,%eax
   177fe:	05 a0 21 03 00       	add    $0x321a0,%eax
   17803:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].wpcom = *(unsigned short *) (5 + BIOS);					// 写前预补偿柱面号
   17805:	8b 44 24 30          	mov    0x30(%esp),%eax
   17809:	83 c0 05             	add    $0x5,%eax
   1780c:	0f b7 00             	movzwl (%eax),%eax
   1780f:	0f b7 c8             	movzwl %ax,%ecx
   17812:	8b 54 24 18          	mov    0x18(%esp),%edx
   17816:	89 d0                	mov    %edx,%eax
   17818:	01 c0                	add    %eax,%eax
   1781a:	01 d0                	add    %edx,%eax
   1781c:	c1 e0 03             	shl    $0x3,%eax
   1781f:	05 ac 21 03 00       	add    $0x321ac,%eax
   17824:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].ctl = *(unsigned char *) (8 + BIOS);						// 控制字节
   17826:	8b 44 24 30          	mov    0x30(%esp),%eax
   1782a:	83 c0 08             	add    $0x8,%eax
   1782d:	0f b6 00             	movzbl (%eax),%eax
   17830:	0f b6 c8             	movzbl %al,%ecx
   17833:	8b 54 24 18          	mov    0x18(%esp),%edx
   17837:	89 d0                	mov    %edx,%eax
   17839:	01 c0                	add    %eax,%eax
   1783b:	01 d0                	add    %edx,%eax
   1783d:	c1 e0 03             	shl    $0x3,%eax
   17840:	05 b4 21 03 00       	add    $0x321b4,%eax
   17845:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].lzone = *(unsigned short *) (12 + BIOS);					// 磁头着陆区柱面号
   17847:	8b 44 24 30          	mov    0x30(%esp),%eax
   1784b:	83 c0 0c             	add    $0xc,%eax
   1784e:	0f b7 00             	movzwl (%eax),%eax
   17851:	0f b7 c8             	movzwl %ax,%ecx
   17854:	8b 54 24 18          	mov    0x18(%esp),%edx
   17858:	89 d0                	mov    %edx,%eax
   1785a:	01 c0                	add    %eax,%eax
   1785c:	01 d0                	add    %edx,%eax
   1785e:	c1 e0 03             	shl    $0x3,%eax
   17861:	05 b0 21 03 00       	add    $0x321b0,%eax
   17866:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].sect = *(unsigned char *) (14 + BIOS);					// 每磁道扇区数
   17868:	8b 44 24 30          	mov    0x30(%esp),%eax
   1786c:	83 c0 0e             	add    $0xe,%eax
   1786f:	0f b6 00             	movzbl (%eax),%eax
   17872:	0f b6 c8             	movzbl %al,%ecx
   17875:	8b 54 24 18          	mov    0x18(%esp),%edx
   17879:	89 d0                	mov    %edx,%eax
   1787b:	01 c0                	add    %eax,%eax
   1787d:	01 d0                	add    %edx,%eax
   1787f:	c1 e0 03             	shl    $0x3,%eax
   17882:	05 a4 21 03 00       	add    $0x321a4,%eax
   17887:	89 08                	mov    %ecx,(%eax)
		BIOS += 16;																// 每个硬盘参数表长16字节,这里BIOS指向下一表.
   17889:	83 44 24 30 10       	addl   $0x10,0x30(%esp)
	for (drive = 0 ; drive < 2 ; drive++) {
   1788e:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   17893:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   17898:	0f 8e 28 ff ff ff    	jle    177c6 <sys_setup+0x2f>
	}
	// setup.s程序在取BIOS硬盘参数表信息时,如果系统中只有1个硬盘,就会将对应第2硬盘的16字节全部清零.因此这里只要判断第2个硬盘柱面数是否为0
	// 就可以知道是否有第2个硬盘了.
	if (hd_info[1].cyl)
   1789e:	a1 c0 21 03 00       	mov    0x321c0,%eax
   178a3:	85 c0                	test   %eax,%eax
   178a5:	74 0c                	je     178b3 <sys_setup+0x11c>
		NR_HD = 2;																// 硬盘数置为2.
   178a7:	c7 05 d8 21 03 00 02 	movl   $0x2,0x321d8
   178ae:	00 00 00 
   178b1:	eb 0a                	jmp    178bd <sys_setup+0x126>
	else
		NR_HD = 1;
   178b3:	c7 05 d8 21 03 00 01 	movl   $0x1,0x321d8
   178ba:	00 00 00 
#endif
	// 到这里,硬盘信息数组hd_info[]已经设置好,并且确定了系统含有的硬盘数NR_HD.现在开始设置硬盘 结构数组hd[].该数组的项0和项5分别表示两个
	// 硬盘的整体参数,而项1-4和6-9分别表示两个硬盘的4个分区参数.因此这里仅设置硬盘整体信息的两项(项0和5).
	for (i = 0 ; i < NR_HD ; i++) {
   178bd:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   178c4:	00 
   178c5:	eb 73                	jmp    1793a <sys_setup+0x1a3>
		hd[i * 5].start_sect = 0;												// 硬盘起始扇区号
   178c7:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   178cb:	89 d0                	mov    %edx,%eax
   178cd:	c1 e0 02             	shl    $0x2,%eax
   178d0:	01 d0                	add    %edx,%eax
   178d2:	c7 04 c5 e0 21 03 00 	movl   $0x0,0x321e0(,%eax,8)
   178d9:	00 00 00 00 
		hd[i * 5].nr_sects = hd_info[i].head * hd_info[i].sect * hd_info[i].cyl;// 硬盘总扇区数
   178dd:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   178e1:	89 d0                	mov    %edx,%eax
   178e3:	01 c0                	add    %eax,%eax
   178e5:	01 d0                	add    %edx,%eax
   178e7:	c1 e0 03             	shl    $0x3,%eax
   178ea:	05 a0 21 03 00       	add    $0x321a0,%eax
   178ef:	8b 08                	mov    (%eax),%ecx
   178f1:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   178f5:	89 d0                	mov    %edx,%eax
   178f7:	01 c0                	add    %eax,%eax
   178f9:	01 d0                	add    %edx,%eax
   178fb:	c1 e0 03             	shl    $0x3,%eax
   178fe:	05 a4 21 03 00       	add    $0x321a4,%eax
   17903:	8b 00                	mov    (%eax),%eax
   17905:	89 cb                	mov    %ecx,%ebx
   17907:	0f af d8             	imul   %eax,%ebx
   1790a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1790e:	89 d0                	mov    %edx,%eax
   17910:	01 c0                	add    %eax,%eax
   17912:	01 d0                	add    %edx,%eax
   17914:	c1 e0 03             	shl    $0x3,%eax
   17917:	05 a8 21 03 00       	add    $0x321a8,%eax
   1791c:	8b 08                	mov    (%eax),%ecx
   1791e:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17922:	89 d0                	mov    %edx,%eax
   17924:	c1 e0 02             	shl    $0x2,%eax
   17927:	01 c2                	add    %eax,%edx
   17929:	89 d8                	mov    %ebx,%eax
   1792b:	0f af c1             	imul   %ecx,%eax
   1792e:	89 04 d5 e4 21 03 00 	mov    %eax,0x321e4(,%edx,8)
	for (i = 0 ; i < NR_HD ; i++) {
   17935:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1793a:	a1 d8 21 03 00       	mov    0x321d8,%eax
   1793f:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
   17943:	7c 82                	jl     178c7 <sys_setup+0x130>
		总之,一个非零值意味着硬盘是一个AT控制器兼容硬盘.
	*/

	// 根据上述原理,下面代码用来检测硬盘到底是不是AT控制器兼容的.这里从CMOS偏移地址0x12处读出硬盘类型字节.如果低半字节值(存放着第2个硬盘类型
	// 值)不为0,则表示系统有两硬盘,否则表示系统只有1个硬盘.如果0x12处读出的值为0,则表示系统中没有AT兼容硬盘.
	if ((cmos_disks = CMOS_READ(0x12)) & 0xf0)
   17945:	b8 92 00 00 00       	mov    $0x92,%eax
   1794a:	ba 70 00 00 00       	mov    $0x70,%edx
   1794f:	ee                   	out    %al,(%dx)
   17950:	eb 00                	jmp    17952 <sys_setup+0x1bb>
   17952:	eb 00                	jmp    17954 <sys_setup+0x1bd>
   17954:	b8 71 00 00 00       	mov    $0x71,%eax
   17959:	89 c2                	mov    %eax,%edx
   1795b:	ec                   	in     (%dx),%al
   1795c:	eb 00                	jmp    1795e <sys_setup+0x1c7>
   1795e:	eb 00                	jmp    17960 <sys_setup+0x1c9>
   17960:	88 44 24 13          	mov    %al,0x13(%esp)
   17964:	0f b6 44 24 13       	movzbl 0x13(%esp),%eax
   17969:	88 44 24 12          	mov    %al,0x12(%esp)
   1796d:	0f b6 44 24 12       	movzbl 0x12(%esp),%eax
   17972:	25 f0 00 00 00       	and    $0xf0,%eax
   17977:	85 c0                	test   %eax,%eax
   17979:	74 24                	je     1799f <sys_setup+0x208>
		if (cmos_disks & 0x0f)
   1797b:	0f b6 44 24 12       	movzbl 0x12(%esp),%eax
   17980:	83 e0 0f             	and    $0xf,%eax
   17983:	85 c0                	test   %eax,%eax
   17985:	74 0c                	je     17993 <sys_setup+0x1fc>
			NR_HD = 2;
   17987:	c7 05 d8 21 03 00 02 	movl   $0x2,0x321d8
   1798e:	00 00 00 
   17991:	eb 16                	jmp    179a9 <sys_setup+0x212>
		else
			NR_HD = 1;
   17993:	c7 05 d8 21 03 00 01 	movl   $0x1,0x321d8
   1799a:	00 00 00 
   1799d:	eb 0a                	jmp    179a9 <sys_setup+0x212>
	else
		NR_HD = 0;
   1799f:	c7 05 d8 21 03 00 00 	movl   $0x0,0x321d8
   179a6:	00 00 00 
	// 若NR_HD = 0,则两个硬盘都不是AT控制器兼容的,两个硬盘数据结构全清零.若NR_HD = 1,则将第2个硬盘的参数清零.
	for (i = NR_HD ; i < 2 ; i++) {
   179a9:	a1 d8 21 03 00       	mov    0x321d8,%eax
   179ae:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   179b2:	eb 31                	jmp    179e5 <sys_setup+0x24e>
		hd[i * 5].start_sect = 0;
   179b4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   179b8:	89 d0                	mov    %edx,%eax
   179ba:	c1 e0 02             	shl    $0x2,%eax
   179bd:	01 d0                	add    %edx,%eax
   179bf:	c7 04 c5 e0 21 03 00 	movl   $0x0,0x321e0(,%eax,8)
   179c6:	00 00 00 00 
		hd[i * 5].nr_sects = 0;
   179ca:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   179ce:	89 d0                	mov    %edx,%eax
   179d0:	c1 e0 02             	shl    $0x2,%eax
   179d3:	01 d0                	add    %edx,%eax
   179d5:	c7 04 c5 e4 21 03 00 	movl   $0x0,0x321e4(,%eax,8)
   179dc:	00 00 00 00 
	for (i = NR_HD ; i < 2 ; i++) {
   179e0:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   179e5:	83 7c 24 1c 01       	cmpl   $0x1,0x1c(%esp)
   179ea:	7e c8                	jle    179b4 <sys_setup+0x21d>
	// 好,到此为止我们已经真正确定了系统中所含的硬盘个数NR_HD.现在我们来读取每个硬盘上第1个扇区中的分区表信息,用来设置分区结构数组hd[]中硬盘
	// 各分区的信息.首先利用读函数bread()读硬盘第1个数据块(fs/buffer.c),第1个参数(0x300,0x305)分别是两个硬盘的设备号,第2个参数(0)是所
	// 需读取的块号.若读操作成功,则数据会被存放在缓冲块bh的数据区中.若缓冲块头指针bh为0,则说明读操作失败,则显示出错信息并停机.否则我们根据硬盘第
	// 1个扇区最后两个字节应该是0xAA55来判断扇区中数据的有效性,从而可以知道扇区中位于偏移0x1BE开始处的分区表是否有效.若有效则将硬盘分区表信息
	// 放入硬盘分区结构数组hd[]中.最后释放bh缓冲区.
	for (drive = 0 ; drive < NR_HD ; drive++) {
   179ec:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   179f3:	00 
   179f4:	e9 15 01 00 00       	jmp    17b0e <sys_setup+0x377>
		if (!(bh = bread(0x300 + drive * 5, 0))) {								// 0x300,0x305是设备号.
   179f9:	8b 54 24 18          	mov    0x18(%esp),%edx
   179fd:	89 d0                	mov    %edx,%eax
   179ff:	c1 e0 02             	shl    $0x2,%eax
   17a02:	01 d0                	add    %edx,%eax
   17a04:	05 00 03 00 00       	add    $0x300,%eax
   17a09:	83 ec 08             	sub    $0x8,%esp
   17a0c:	6a 00                	push   $0x0
   17a0e:	50                   	push   %eax
   17a0f:	e8 32 7c ff ff       	call   f646 <bread>
   17a14:	83 c4 10             	add    $0x10,%esp
   17a17:	89 44 24 0c          	mov    %eax,0xc(%esp)
   17a1b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   17a20:	75 24                	jne    17a46 <sys_setup+0x2af>
			printk("Unable to read partition table of drive %d\n\r",
   17a22:	83 ec 08             	sub    $0x8,%esp
   17a25:	ff 74 24 20          	pushl  0x20(%esp)
   17a29:	68 e4 46 02 00       	push   $0x246e4
   17a2e:	e8 0e 12 ff ff       	call   8c41 <printk>
   17a33:	83 c4 10             	add    $0x10,%esp
				drive);
			panic("");
   17a36:	83 ec 0c             	sub    $0xc,%esp
   17a39:	68 11 47 02 00       	push   $0x24711
   17a3e:	e8 bf 11 ff ff       	call   8c02 <panic>
   17a43:	83 c4 10             	add    $0x10,%esp
		}
		if (bh->b_data[510] != 0x55 || (unsigned char)
   17a46:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17a4a:	8b 00                	mov    (%eax),%eax
   17a4c:	05 fe 01 00 00       	add    $0x1fe,%eax
   17a51:	0f b6 00             	movzbl (%eax),%eax
   17a54:	3c 55                	cmp    $0x55,%al
   17a56:	75 12                	jne    17a6a <sys_setup+0x2d3>
		    bh->b_data[511] != 0xAA) {											// 判断硬盘标志0xAA55.
   17a58:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17a5c:	8b 00                	mov    (%eax),%eax
   17a5e:	05 ff 01 00 00       	add    $0x1ff,%eax
   17a63:	0f b6 00             	movzbl (%eax),%eax
		if (bh->b_data[510] != 0x55 || (unsigned char)
   17a66:	3c aa                	cmp    $0xaa,%al
   17a68:	74 24                	je     17a8e <sys_setup+0x2f7>
			printk("Bad partition table on drive %d\n\r",drive);
   17a6a:	83 ec 08             	sub    $0x8,%esp
   17a6d:	ff 74 24 20          	pushl  0x20(%esp)
   17a71:	68 14 47 02 00       	push   $0x24714
   17a76:	e8 c6 11 ff ff       	call   8c41 <printk>
   17a7b:	83 c4 10             	add    $0x10,%esp
			panic("");
   17a7e:	83 ec 0c             	sub    $0xc,%esp
   17a81:	68 11 47 02 00       	push   $0x24711
   17a86:	e8 77 11 ff ff       	call   8c02 <panic>
   17a8b:	83 c4 10             	add    $0x10,%esp
		}
		p = 0x1BE + (void *)bh->b_data;	 										// 分区表位于第1扇区0x1BE处.
   17a8e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17a92:	8b 00                	mov    (%eax),%eax
   17a94:	05 be 01 00 00       	add    $0x1be,%eax
   17a99:	89 44 24 14          	mov    %eax,0x14(%esp)
		for (i = 1; i < 5; i++, p++) {
   17a9d:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%esp)
   17aa4:	00 
   17aa5:	eb 4c                	jmp    17af3 <sys_setup+0x35c>
			hd[i + 5 * drive].start_sect = p->start_sect;
   17aa7:	8b 44 24 14          	mov    0x14(%esp),%eax
   17aab:	8b 48 08             	mov    0x8(%eax),%ecx
   17aae:	8b 54 24 18          	mov    0x18(%esp),%edx
   17ab2:	89 d0                	mov    %edx,%eax
   17ab4:	c1 e0 02             	shl    $0x2,%eax
   17ab7:	01 c2                	add    %eax,%edx
   17ab9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17abd:	01 d0                	add    %edx,%eax
   17abf:	89 ca                	mov    %ecx,%edx
   17ac1:	89 14 c5 e0 21 03 00 	mov    %edx,0x321e0(,%eax,8)
			hd[i + 5 * drive].nr_sects = p->nr_sects;
   17ac8:	8b 44 24 14          	mov    0x14(%esp),%eax
   17acc:	8b 48 0c             	mov    0xc(%eax),%ecx
   17acf:	8b 54 24 18          	mov    0x18(%esp),%edx
   17ad3:	89 d0                	mov    %edx,%eax
   17ad5:	c1 e0 02             	shl    $0x2,%eax
   17ad8:	01 c2                	add    %eax,%edx
   17ada:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17ade:	01 d0                	add    %edx,%eax
   17ae0:	89 ca                	mov    %ecx,%edx
   17ae2:	89 14 c5 e4 21 03 00 	mov    %edx,0x321e4(,%eax,8)
		for (i = 1; i < 5; i++, p++) {
   17ae9:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17aee:	83 44 24 14 10       	addl   $0x10,0x14(%esp)
   17af3:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
   17af8:	7e ad                	jle    17aa7 <sys_setup+0x310>
		}
		brelse(bh);																// 释放为存放硬盘数据块而申请的缓冲区.
   17afa:	83 ec 0c             	sub    $0xc,%esp
   17afd:	ff 74 24 18          	pushl  0x18(%esp)
   17b01:	e8 ea 7a ff ff       	call   f5f0 <brelse>
   17b06:	83 c4 10             	add    $0x10,%esp
	for (drive = 0 ; drive < NR_HD ; drive++) {
   17b09:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   17b0e:	a1 d8 21 03 00       	mov    0x321d8,%eax
   17b13:	39 44 24 18          	cmp    %eax,0x18(%esp)
   17b17:	0f 8c dc fe ff ff    	jl     179f9 <sys_setup+0x262>
    }
	// 现在再对每个分区中的数据块总数进行统计,并保存在硬盘分区总数据数组hd_sizes[]中.然后让设备数据块总数指针数组的本设备项指向该数组.
	for (i = 0 ; i < 5 * MAX_HD ; i++) {
   17b1d:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   17b24:	00 
   17b25:	eb 5c                	jmp    17b83 <sys_setup+0x3ec>
		if (hd[i].nr_sects != 0)
   17b27:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b2b:	8b 04 c5 e4 21 03 00 	mov    0x321e4(,%eax,8),%eax
   17b32:	85 c0                	test   %eax,%eax
   17b34:	74 2e                	je     17b64 <sys_setup+0x3cd>
			Log(LOG_INFO_TYPE, "<<<<< HD Partition%d Info : start_sect = %d, nr_sects = %d >>>>>\n", i, hd[i].start_sect, hd[i].nr_sects);
   17b36:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b3a:	8b 14 c5 e4 21 03 00 	mov    0x321e4(,%eax,8),%edx
   17b41:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b45:	8b 04 c5 e0 21 03 00 	mov    0x321e0(,%eax,8),%eax
   17b4c:	83 ec 0c             	sub    $0xc,%esp
   17b4f:	52                   	push   %edx
   17b50:	50                   	push   %eax
   17b51:	ff 74 24 30          	pushl  0x30(%esp)
   17b55:	68 38 47 02 00       	push   $0x24738
   17b5a:	6a 00                	push   $0x0
   17b5c:	e8 87 ad 00 00       	call   228e8 <Log>
   17b61:	83 c4 20             	add    $0x20,%esp
		hd_sizes[i] = hd[i].nr_sects >> 1 ;
   17b64:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b68:	8b 04 c5 e4 21 03 00 	mov    0x321e4(,%eax,8),%eax
   17b6f:	d1 f8                	sar    %eax
   17b71:	89 c2                	mov    %eax,%edx
   17b73:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b77:	89 14 85 40 22 03 00 	mov    %edx,0x32240(,%eax,4)
	for (i = 0 ; i < 5 * MAX_HD ; i++) {
   17b7e:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17b83:	83 7c 24 1c 09       	cmpl   $0x9,0x1c(%esp)
   17b88:	7e 9d                	jle    17b27 <sys_setup+0x390>
	}
	blk_size[MAJOR_NR] = hd_sizes;
   17b8a:	c7 05 44 21 03 00 40 	movl   $0x32240,0x32144
   17b91:	22 03 00 
	// 现在总算完成设置硬盘分区结构数组hd[]的任务.如果确实有硬盘存在并且读入其分区表,则显示"分区表正常"信息.然后尝试在系统内存虚拟盘中加载启动盘中包含的
	// 根文件系统映像(blk_drv/ramdisk.c).即在系统设置有虚拟盘的情况下判断启动盘上是否还含有根文件系统的映像数据.如果有(此时该启动盘称为集成盘)则尝试
	// 把该映像加载并存放到虚拟盘中,然后把此时的根文件系统设备号ROOT_DEV修改成虚拟盘的设备号.接着再对交换设备进行初始化.最后安装根文件系统.
	if (NR_HD)
   17b94:	a1 d8 21 03 00       	mov    0x321d8,%eax
   17b99:	85 c0                	test   %eax,%eax
   17b9b:	74 29                	je     17bc6 <sys_setup+0x42f>
		Log(LOG_INFO_TYPE, "<<<<< Partition table%s ok. >>>>>\n\r",(NR_HD > 1) ? "s":"");
   17b9d:	a1 d8 21 03 00       	mov    0x321d8,%eax
   17ba2:	83 f8 01             	cmp    $0x1,%eax
   17ba5:	7e 07                	jle    17bae <sys_setup+0x417>
   17ba7:	b8 7a 47 02 00       	mov    $0x2477a,%eax
   17bac:	eb 05                	jmp    17bb3 <sys_setup+0x41c>
   17bae:	b8 11 47 02 00       	mov    $0x24711,%eax
   17bb3:	83 ec 04             	sub    $0x4,%esp
   17bb6:	50                   	push   %eax
   17bb7:	68 7c 47 02 00       	push   $0x2477c
   17bbc:	6a 00                	push   $0x0
   17bbe:	e8 25 ad 00 00       	call   228e8 <Log>
   17bc3:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NR_HD; i++)
   17bc6:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   17bcd:	00 
   17bce:	eb 6b                	jmp    17c3b <sys_setup+0x4a4>
		Log(LOG_INFO_TYPE, "<<<<< HD%d Info: cyl = %d, head = %d, sect = %d, ctl = %x >>>>>\n", hd_info[i].cyl, hd_info[i].head, hd_info[i].sect, hd_info[i].ctl);
   17bd0:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17bd4:	89 d0                	mov    %edx,%eax
   17bd6:	01 c0                	add    %eax,%eax
   17bd8:	01 d0                	add    %edx,%eax
   17bda:	c1 e0 03             	shl    $0x3,%eax
   17bdd:	05 b4 21 03 00       	add    $0x321b4,%eax
   17be2:	8b 30                	mov    (%eax),%esi
   17be4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17be8:	89 d0                	mov    %edx,%eax
   17bea:	01 c0                	add    %eax,%eax
   17bec:	01 d0                	add    %edx,%eax
   17bee:	c1 e0 03             	shl    $0x3,%eax
   17bf1:	05 a4 21 03 00       	add    $0x321a4,%eax
   17bf6:	8b 18                	mov    (%eax),%ebx
   17bf8:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17bfc:	89 d0                	mov    %edx,%eax
   17bfe:	01 c0                	add    %eax,%eax
   17c00:	01 d0                	add    %edx,%eax
   17c02:	c1 e0 03             	shl    $0x3,%eax
   17c05:	05 a0 21 03 00       	add    $0x321a0,%eax
   17c0a:	8b 08                	mov    (%eax),%ecx
   17c0c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17c10:	89 d0                	mov    %edx,%eax
   17c12:	01 c0                	add    %eax,%eax
   17c14:	01 d0                	add    %edx,%eax
   17c16:	c1 e0 03             	shl    $0x3,%eax
   17c19:	05 a8 21 03 00       	add    $0x321a8,%eax
   17c1e:	8b 00                	mov    (%eax),%eax
   17c20:	83 ec 08             	sub    $0x8,%esp
   17c23:	56                   	push   %esi
   17c24:	53                   	push   %ebx
   17c25:	51                   	push   %ecx
   17c26:	50                   	push   %eax
   17c27:	68 a0 47 02 00       	push   $0x247a0
   17c2c:	6a 00                	push   $0x0
   17c2e:	e8 b5 ac 00 00       	call   228e8 <Log>
   17c33:	83 c4 20             	add    $0x20,%esp
	for (i = 0; i < NR_HD; i++)
   17c36:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17c3b:	a1 d8 21 03 00       	mov    0x321d8,%eax
   17c40:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
   17c44:	7c 8a                	jl     17bd0 <sys_setup+0x439>
	rd_load();																	// blk_drv/ramdisk.c
   17c46:	e8 72 0b 00 00       	call   187bd <rd_load>
	init_swapping();															// mm/swap.c
   17c4b:	e8 0f 54 ff ff       	call   d05f <init_swapping>
	mount_root();																// fs/super.c
   17c50:	e8 4f 86 ff ff       	call   102a4 <mount_root>
	return (0);
   17c55:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17c5a:	83 c4 24             	add    $0x24,%esp
   17c5d:	5b                   	pop    %ebx
   17c5e:	5e                   	pop    %esi
   17c5f:	c3                   	ret    

00017c60 <controller_ready>:
// 则表示等待控制器空闲的时间已经超时而发生错误,若返回值不为0则说明在等待(循环)时间期限内控制器回到空闲状态.OK!
// 实际上,我们仅需检测状态寄存器忙位(位7)是否为1来判断控制器是否处于忙状态,驱动器是否就绪(即位6是否为1)与控制器的状态无关.因此我们可能把第172行
// 语句改写成:"while(--retries && (inb_p(HD_STATUS)&0x80));"另外,由于现在的PC速度都很快,因此我们可以把等待的循环次数再加大一些,例如
// 再增加10倍.
static int controller_ready(void)
{
   17c60:	83 ec 10             	sub    $0x10,%esp
	int retries = 100000;
   17c63:	c7 44 24 0c a0 86 01 	movl   $0x186a0,0xc(%esp)
   17c6a:	00 

	//while (--retries && (inb_p(HD_STATUS)&0xc0)!=0x40);
	while(--retries && (inb_p(HD_STATUS) & 0X80)) ;
   17c6b:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
   17c70:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   17c75:	74 19                	je     17c90 <controller_ready+0x30>
   17c77:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   17c7c:	89 c2                	mov    %eax,%edx
   17c7e:	ec                   	in     (%dx),%al
   17c7f:	eb 00                	jmp    17c81 <controller_ready+0x21>
   17c81:	eb 00                	jmp    17c83 <controller_ready+0x23>
   17c83:	88 44 24 0b          	mov    %al,0xb(%esp)
   17c87:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   17c8c:	84 c0                	test   %al,%al
   17c8e:	78 db                	js     17c6b <controller_ready+0xb>
	return (retries);									// 返回等待循环次数.
   17c90:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   17c94:	83 c4 10             	add    $0x10,%esp
   17c97:	c3                   	ret    

00017c98 <win_result>:

// 检测硬盘执行命令后的状态.(win表示温切斯特硬盘的缩写)
// 读取状态寄存器中的命令执行结果状态.返回0表示正常;1表示出错.如果执行命令错,则需要再读错误寄存器HD_ERROR(0x1f1).
static int win_result(void)
{
   17c98:	83 ec 10             	sub    $0x10,%esp
	int i = inb_p(HD_STATUS);							// 取状态信息.
   17c9b:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   17ca0:	89 c2                	mov    %eax,%edx
   17ca2:	ec                   	in     (%dx),%al
   17ca3:	eb 00                	jmp    17ca5 <win_result+0xd>
   17ca5:	eb 00                	jmp    17ca7 <win_result+0xf>
   17ca7:	88 44 24 0f          	mov    %al,0xf(%esp)
   17cab:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   17cb0:	0f b6 c0             	movzbl %al,%eax
   17cb3:	89 44 24 08          	mov    %eax,0x8(%esp)

	if ((i & (BUSY_STAT | READY_STAT | WRERR_STAT | SEEK_STAT | ERR_STAT))
   17cb7:	8b 44 24 08          	mov    0x8(%esp),%eax
   17cbb:	25 f1 00 00 00       	and    $0xf1,%eax
   17cc0:	83 f8 50             	cmp    $0x50,%eax
   17cc3:	75 07                	jne    17ccc <win_result+0x34>
		== (READY_STAT | SEEK_STAT))
		return(0); 										/* ok */
   17cc5:	b8 00 00 00 00       	mov    $0x0,%eax
   17cca:	eb 28                	jmp    17cf4 <win_result+0x5c>
	if (i & 1) i = inb(HD_ERROR);						// 若ERR_STAT置位,则读取错误寄存器.
   17ccc:	8b 44 24 08          	mov    0x8(%esp),%eax
   17cd0:	83 e0 01             	and    $0x1,%eax
   17cd3:	85 c0                	test   %eax,%eax
   17cd5:	74 18                	je     17cef <win_result+0x57>
   17cd7:	b8 f1 01 00 00       	mov    $0x1f1,%eax
   17cdc:	89 c2                	mov    %eax,%edx
   17cde:	ec                   	in     (%dx),%al
   17cdf:	88 44 24 07          	mov    %al,0x7(%esp)
   17ce3:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
   17ce8:	0f b6 c0             	movzbl %al,%eax
   17ceb:	89 44 24 08          	mov    %eax,0x8(%esp)
	return (1);
   17cef:	b8 01 00 00 00       	mov    $0x1,%eax
}
   17cf4:	83 c4 10             	add    $0x10,%esp
   17cf7:	c3                   	ret    

00017cf8 <hd_out>:
// 第191行定义1个寄存器变量__res.该变量将被保存在1个寄存器中,以便于快速访问.
// 如果想指定寄存器(如eax),则我们可以把该句写成"register char __res asm("ax");"
static void hd_out(unsigned int drive, unsigned int nsect, unsigned int sect,
		unsigned int head, unsigned int cyl, unsigned int cmd,
		void (*intr_addr)(void))
{
   17cf8:	53                   	push   %ebx
   17cf9:	83 ec 08             	sub    $0x8,%esp
	register int port;

	// 首先对参数进行有效性检查.如果驱动器号大于1(只能是0,1)或者磁头号大于15,则程序不支持,停机.否则就判断并循环等待驱动器就绪.如果等待一段时间
	// 后仍未就绪则表示硬盘控制器出错,也停机.
	if (drive > 1 || head > 15)
   17cfc:	83 7c 24 10 01       	cmpl   $0x1,0x10(%esp)
   17d01:	77 07                	ja     17d0a <hd_out+0x12>
   17d03:	83 7c 24 1c 0f       	cmpl   $0xf,0x1c(%esp)
   17d08:	76 10                	jbe    17d1a <hd_out+0x22>
		panic("Trying to write bad sector");
   17d0a:	83 ec 0c             	sub    $0xc,%esp
   17d0d:	68 e1 47 02 00       	push   $0x247e1
   17d12:	e8 eb 0e ff ff       	call   8c02 <panic>
   17d17:	83 c4 10             	add    $0x10,%esp
	if (!controller_ready())
   17d1a:	e8 41 ff ff ff       	call   17c60 <controller_ready>
   17d1f:	85 c0                	test   %eax,%eax
   17d21:	75 10                	jne    17d33 <hd_out+0x3b>
		panic("HD controller not ready");
   17d23:	83 ec 0c             	sub    $0xc,%esp
   17d26:	68 fc 47 02 00       	push   $0x247fc
   17d2b:	e8 d2 0e ff ff       	call   8c02 <panic>
   17d30:	83 c4 10             	add    $0x10,%esp
	// 接着我们设置硬盘中断发生时将调用的C函数指针do_hd(该函数指针定义在blk.h文件).然后在向硬盘控制器发送参数和命令之前,规定要先向控制器命令端口
	// (0x3f6)发送一指定硬盘的控制字节,以建立相应的硬盘控制方式.该控制字节即是硬盘信息结构数组中的ctl字节.然后向控制器端口0x1f1-0x1f7发送7字节
	// 的参数命令块.
	SET_INTR(intr_addr);								// do_hd = intr_addr在中断中被调用.
   17d33:	8b 44 24 28          	mov    0x28(%esp),%eax
   17d37:	a3 80 21 03 00       	mov    %eax,0x32180
   17d3c:	c7 05 84 21 03 00 c8 	movl   $0xc8,0x32184
   17d43:	00 00 00 
	outb_p(hd_info[drive].ctl, HD_CMD);					// 向控制寄存器输出控制字节
   17d46:	8b 54 24 10          	mov    0x10(%esp),%edx
   17d4a:	89 d0                	mov    %edx,%eax
   17d4c:	01 c0                	add    %eax,%eax
   17d4e:	01 d0                	add    %edx,%eax
   17d50:	c1 e0 03             	shl    $0x3,%eax
   17d53:	05 b4 21 03 00       	add    $0x321b4,%eax
   17d58:	8b 00                	mov    (%eax),%eax
   17d5a:	ba f6 03 00 00       	mov    $0x3f6,%edx
   17d5f:	ee                   	out    %al,(%dx)
   17d60:	eb 00                	jmp    17d62 <hd_out+0x6a>
   17d62:	eb 00                	jmp    17d64 <hd_out+0x6c>
	port = HD_DATA;										// 置dx为数据寄存器端口(0x1f0)
   17d64:	bb f0 01 00 00       	mov    $0x1f0,%ebx
	outb_p(hd_info[drive].wpcom >> 2, ++port);			// 参数:写预补偿柱面号(需除4)
   17d69:	8b 54 24 10          	mov    0x10(%esp),%edx
   17d6d:	89 d0                	mov    %edx,%eax
   17d6f:	01 c0                	add    %eax,%eax
   17d71:	01 d0                	add    %edx,%eax
   17d73:	c1 e0 03             	shl    $0x3,%eax
   17d76:	05 ac 21 03 00       	add    $0x321ac,%eax
   17d7b:	8b 00                	mov    (%eax),%eax
   17d7d:	c1 f8 02             	sar    $0x2,%eax
   17d80:	83 c3 01             	add    $0x1,%ebx
   17d83:	89 da                	mov    %ebx,%edx
   17d85:	ee                   	out    %al,(%dx)
   17d86:	eb 00                	jmp    17d88 <hd_out+0x90>
   17d88:	eb 00                	jmp    17d8a <hd_out+0x92>
	outb_p(nsect, ++port);								// 参数:读/写扇区总数.
   17d8a:	83 c3 01             	add    $0x1,%ebx
   17d8d:	8b 44 24 14          	mov    0x14(%esp),%eax
   17d91:	89 da                	mov    %ebx,%edx
   17d93:	ee                   	out    %al,(%dx)
   17d94:	eb 00                	jmp    17d96 <hd_out+0x9e>
   17d96:	eb 00                	jmp    17d98 <hd_out+0xa0>
	outb_p(sect, ++port);								// 参数:起始扇区.
   17d98:	83 c3 01             	add    $0x1,%ebx
   17d9b:	8b 44 24 18          	mov    0x18(%esp),%eax
   17d9f:	89 da                	mov    %ebx,%edx
   17da1:	ee                   	out    %al,(%dx)
   17da2:	eb 00                	jmp    17da4 <hd_out+0xac>
   17da4:	eb 00                	jmp    17da6 <hd_out+0xae>
	outb_p(cyl, ++port);								// 参数:柱面号低8位.
   17da6:	83 c3 01             	add    $0x1,%ebx
   17da9:	8b 44 24 20          	mov    0x20(%esp),%eax
   17dad:	89 da                	mov    %ebx,%edx
   17daf:	ee                   	out    %al,(%dx)
   17db0:	eb 00                	jmp    17db2 <hd_out+0xba>
   17db2:	eb 00                	jmp    17db4 <hd_out+0xbc>
	outb_p(cyl >> 8, ++port);							// 参数:柱面号高8位.
   17db4:	8b 44 24 20          	mov    0x20(%esp),%eax
   17db8:	c1 e8 08             	shr    $0x8,%eax
   17dbb:	83 c3 01             	add    $0x1,%ebx
   17dbe:	89 da                	mov    %ebx,%edx
   17dc0:	ee                   	out    %al,(%dx)
   17dc1:	eb 00                	jmp    17dc3 <hd_out+0xcb>
   17dc3:	eb 00                	jmp    17dc5 <hd_out+0xcd>
	outb_p(0xA0 | (drive << 4) | head, ++port);			// 参数:驱动器号+磁头号.
   17dc5:	8b 44 24 10          	mov    0x10(%esp),%eax
   17dc9:	c1 e0 04             	shl    $0x4,%eax
   17dcc:	0b 44 24 1c          	or     0x1c(%esp),%eax
   17dd0:	0c a0                	or     $0xa0,%al
   17dd2:	83 c3 01             	add    $0x1,%ebx
   17dd5:	89 da                	mov    %ebx,%edx
   17dd7:	ee                   	out    %al,(%dx)
   17dd8:	eb 00                	jmp    17dda <hd_out+0xe2>
   17dda:	eb 00                	jmp    17ddc <hd_out+0xe4>
	outb(cmd, ++port);									// 命令:硬盘控制命令.
   17ddc:	83 c3 01             	add    $0x1,%ebx
   17ddf:	8b 44 24 24          	mov    0x24(%esp),%eax
   17de3:	89 da                	mov    %ebx,%edx
   17de5:	ee                   	out    %al,(%dx)
}
   17de6:	90                   	nop
   17de7:	83 c4 08             	add    $0x8,%esp
   17dea:	5b                   	pop    %ebx
   17deb:	c3                   	ret    

00017dec <drive_busy>:

// 等待硬盘就绪.
// 该函数循环等待主状态控制器忙标志复位.若仅有就绪或寻道结束标志置位,则表示就绪,成功返回0.若经过一段时间仍为忙,则返回1.
static int drive_busy(void)
{
   17dec:	83 ec 1c             	sub    $0x1c,%esp
	unsigned int i;
	unsigned char c;

	// 循环读取控制器的主状态寄存器HD_STATUS,等待就绪标志位置位并且忙位复位.然后检测其中忙位,就绪位和寻道结束位.若仅有就绪或寻道结束标志置位,则表示硬盘
	// 就绪,返回0.否则表示等待超时.于是警告显示信息.并返回1.
	for (i = 0; i < 50000; i++) {
   17def:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   17df6:	00 
   17df7:	eb 31                	jmp    17e2a <drive_busy+0x3e>
		c = inb_p(HD_STATUS);							// 取主控制器状态字节.
   17df9:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   17dfe:	89 c2                	mov    %eax,%edx
   17e00:	ec                   	in     (%dx),%al
   17e01:	eb 00                	jmp    17e03 <drive_busy+0x17>
   17e03:	eb 00                	jmp    17e05 <drive_busy+0x19>
   17e05:	88 44 24 0b          	mov    %al,0xb(%esp)
   17e09:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   17e0e:	88 44 24 0a          	mov    %al,0xa(%esp)
		c &= (BUSY_STAT | READY_STAT | SEEK_STAT);
   17e12:	80 64 24 0a d0       	andb   $0xd0,0xa(%esp)
		if (c == (READY_STAT | SEEK_STAT))
   17e17:	80 7c 24 0a 50       	cmpb   $0x50,0xa(%esp)
   17e1c:	75 07                	jne    17e25 <drive_busy+0x39>
			return 0;
   17e1e:	b8 00 00 00 00       	mov    $0x0,%eax
   17e23:	eb 24                	jmp    17e49 <drive_busy+0x5d>
	for (i = 0; i < 50000; i++) {
   17e25:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   17e2a:	81 7c 24 0c 4f c3 00 	cmpl   $0xc34f,0xc(%esp)
   17e31:	00 
   17e32:	76 c5                	jbe    17df9 <drive_busy+0xd>
	}
	printk("HD controller times out\n\r");				// 等待超时,显示信息.并返回1.
   17e34:	83 ec 0c             	sub    $0xc,%esp
   17e37:	68 14 48 02 00       	push   $0x24814
   17e3c:	e8 00 0e ff ff       	call   8c41 <printk>
   17e41:	83 c4 10             	add    $0x10,%esp
	return(1);
   17e44:	b8 01 00 00 00       	mov    $0x1,%eax
}
   17e49:	83 c4 1c             	add    $0x1c,%esp
   17e4c:	c3                   	ret    

00017e4d <reset_controller>:

// 诊断复位(重新校正)硬盘控制器.
// 首先向控制器寄存器端口(0x3f6)发送允许复位(4)控制字节.然后循环 操作等待一段时间让控制器执行复位操作.接着再向该端口发送正常的控制字节(不禁止重试,重读)
// 并等待硬盘就绪.若等待硬盘就绪超时,则显示警告信息.然后读取错误寄存器内容,若其不等于1(表示无错误)则显示硬盘控制器复位失败信息.
static void reset_controller(void)
{
   17e4d:	83 ec 1c             	sub    $0x1c,%esp
	int	i;

	outb(4, HD_CMD);									// 向控制寄存器端口发送复位控制字节.
   17e50:	b8 04 00 00 00       	mov    $0x4,%eax
   17e55:	ba f6 03 00 00       	mov    $0x3f6,%edx
   17e5a:	ee                   	out    %al,(%dx)
	for(i = 0; i < 1000; i++) nop();					// 等待一段时间.
   17e5b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   17e62:	00 
   17e63:	eb 06                	jmp    17e6b <reset_controller+0x1e>
   17e65:	90                   	nop
   17e66:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   17e6b:	81 7c 24 0c e7 03 00 	cmpl   $0x3e7,0xc(%esp)
   17e72:	00 
   17e73:	7e f0                	jle    17e65 <reset_controller+0x18>
	outb(hd_info[0].ctl & 0x0f, HD_CMD);				// 发送正常控制字节(不禁止重试,重读).
   17e75:	a1 b4 21 03 00       	mov    0x321b4,%eax
   17e7a:	83 e0 0f             	and    $0xf,%eax
   17e7d:	ba f6 03 00 00       	mov    $0x3f6,%edx
   17e82:	ee                   	out    %al,(%dx)
	if (drive_busy())
   17e83:	e8 64 ff ff ff       	call   17dec <drive_busy>
   17e88:	85 c0                	test   %eax,%eax
   17e8a:	74 10                	je     17e9c <reset_controller+0x4f>
		printk("HD-controller still busy\n\r");
   17e8c:	83 ec 0c             	sub    $0xc,%esp
   17e8f:	68 2e 48 02 00       	push   $0x2482e
   17e94:	e8 a8 0d ff ff       	call   8c41 <printk>
   17e99:	83 c4 10             	add    $0x10,%esp
	if ((i = inb(HD_ERROR)) != 1)
   17e9c:	b8 f1 01 00 00       	mov    $0x1f1,%eax
   17ea1:	89 c2                	mov    %eax,%edx
   17ea3:	ec                   	in     (%dx),%al
   17ea4:	88 44 24 0b          	mov    %al,0xb(%esp)
   17ea8:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   17ead:	0f b6 c0             	movzbl %al,%eax
   17eb0:	89 44 24 0c          	mov    %eax,0xc(%esp)
   17eb4:	83 7c 24 0c 01       	cmpl   $0x1,0xc(%esp)
   17eb9:	74 14                	je     17ecf <reset_controller+0x82>
		printk("HD-controller reset failed: %02x\n\r",i);
   17ebb:	83 ec 08             	sub    $0x8,%esp
   17ebe:	ff 74 24 14          	pushl  0x14(%esp)
   17ec2:	68 4c 48 02 00       	push   $0x2484c
   17ec7:	e8 75 0d ff ff       	call   8c41 <printk>
   17ecc:	83 c4 10             	add    $0x10,%esp
}
   17ecf:	90                   	nop
   17ed0:	83 c4 1c             	add    $0x1c,%esp
   17ed3:	c3                   	ret    

00017ed4 <reset_hd>:

// 硬盘复位操作.
// 首先复位(重新校正)硬盘控制器.然后发送硬盘控制器命令"建立驱动器参数".在本命令引起的硬盘中断处理程序中又会调用本函数.此时该函数会根据执行该命令的结果判断是
// 否要进行出错处理或是继续执行请求项处理操作.
static void reset_hd(void)
{
   17ed4:	56                   	push   %esi
   17ed5:	53                   	push   %ebx
   17ed6:	83 ec 04             	sub    $0x4,%esp
	// 如果复位标志reset是置位的,则把复位标志清零后,执行复位硬盘控制在操作.然后针对第i个硬盘向控制器发送"建立驱动器参数"命令.当控制器执行了该命令后,又会发出硬盘
	// 中断信号.此时本函数会被中断过程调用而再次执行.由于reset已经标志复位,因此会首先去执行246行开始的语句,判断命令执行是否正常.若还是发生错误就会调用bad_rw_intr()
	// 函数以统计出错次数并根据次数确定是否在设置reset标志如果又设置了reset标志则跳转到repeat重新执行本函数.若复位操作正常,则针对下一个硬盘发送"建立驱动器参数"
	// 命令,并作上述处理.如果系统中NR_HD个硬盘都已经正常执行了发送的命令,则再次do_hd_request()函数开始对请求项进行处理.
repeat:
	if (reset) {
   17ed9:	a1 d4 21 03 00       	mov    0x321d4,%eax
   17ede:	85 c0                	test   %eax,%eax
   17ee0:	74 1b                	je     17efd <reset_hd+0x29>
		reset = 0;
   17ee2:	c7 05 d4 21 03 00 00 	movl   $0x0,0x321d4
   17ee9:	00 00 00 
		i = -1;											// 初始化当前硬盘号(静态变量).
   17eec:	c7 05 68 22 03 00 ff 	movl   $0xffffffff,0x32268
   17ef3:	ff ff ff 
		reset_controller();
   17ef6:	e8 52 ff ff ff       	call   17e4d <reset_controller>
   17efb:	eb 19                	jmp    17f16 <reset_hd+0x42>
	} else if (win_result()) {
   17efd:	e8 96 fd ff ff       	call   17c98 <win_result>
   17f02:	85 c0                	test   %eax,%eax
   17f04:	74 10                	je     17f16 <reset_hd+0x42>
		bad_rw_intr();
   17f06:	e8 e2 00 00 00       	call   17fed <bad_rw_intr>
		if (reset)
   17f0b:	a1 d4 21 03 00       	mov    0x321d4,%eax
   17f10:	85 c0                	test   %eax,%eax
   17f12:	74 02                	je     17f16 <reset_hd+0x42>
			goto repeat;
   17f14:	eb c3                	jmp    17ed9 <reset_hd+0x5>
	}
	i++;												// 处理下一个硬盘(第1个是0).
   17f16:	a1 68 22 03 00       	mov    0x32268,%eax
   17f1b:	83 c0 01             	add    $0x1,%eax
   17f1e:	a3 68 22 03 00       	mov    %eax,0x32268
	if (i < NR_HD) {
   17f23:	8b 15 68 22 03 00    	mov    0x32268,%edx
   17f29:	a1 d8 21 03 00       	mov    0x321d8,%eax
   17f2e:	39 c2                	cmp    %eax,%edx
   17f30:	0f 8d 84 00 00 00    	jge    17fba <reset_hd+0xe6>
		hd_out(i, hd_info[i].sect, hd_info[i].sect,hd_info[i].head - 1,
			hd_info[i].cyl, WIN_SPECIFY, &reset_hd);
   17f36:	8b 15 68 22 03 00    	mov    0x32268,%edx
   17f3c:	89 d0                	mov    %edx,%eax
   17f3e:	01 c0                	add    %eax,%eax
   17f40:	01 d0                	add    %edx,%eax
   17f42:	c1 e0 03             	shl    $0x3,%eax
   17f45:	05 a8 21 03 00       	add    $0x321a8,%eax
   17f4a:	8b 00                	mov    (%eax),%eax
		hd_out(i, hd_info[i].sect, hd_info[i].sect,hd_info[i].head - 1,
   17f4c:	89 c6                	mov    %eax,%esi
   17f4e:	8b 15 68 22 03 00    	mov    0x32268,%edx
   17f54:	89 d0                	mov    %edx,%eax
   17f56:	01 c0                	add    %eax,%eax
   17f58:	01 d0                	add    %edx,%eax
   17f5a:	c1 e0 03             	shl    $0x3,%eax
   17f5d:	05 a0 21 03 00       	add    $0x321a0,%eax
   17f62:	8b 00                	mov    (%eax),%eax
   17f64:	83 e8 01             	sub    $0x1,%eax
   17f67:	89 c3                	mov    %eax,%ebx
   17f69:	8b 15 68 22 03 00    	mov    0x32268,%edx
   17f6f:	89 d0                	mov    %edx,%eax
   17f71:	01 c0                	add    %eax,%eax
   17f73:	01 d0                	add    %edx,%eax
   17f75:	c1 e0 03             	shl    $0x3,%eax
   17f78:	05 a4 21 03 00       	add    $0x321a4,%eax
   17f7d:	8b 00                	mov    (%eax),%eax
   17f7f:	89 c1                	mov    %eax,%ecx
   17f81:	8b 15 68 22 03 00    	mov    0x32268,%edx
   17f87:	89 d0                	mov    %edx,%eax
   17f89:	01 c0                	add    %eax,%eax
   17f8b:	01 d0                	add    %edx,%eax
   17f8d:	c1 e0 03             	shl    $0x3,%eax
   17f90:	05 a4 21 03 00       	add    $0x321a4,%eax
   17f95:	8b 00                	mov    (%eax),%eax
   17f97:	89 c2                	mov    %eax,%edx
   17f99:	a1 68 22 03 00       	mov    0x32268,%eax
   17f9e:	83 ec 04             	sub    $0x4,%esp
   17fa1:	68 d4 7e 01 00       	push   $0x17ed4
   17fa6:	68 91 00 00 00       	push   $0x91
   17fab:	56                   	push   %esi
   17fac:	53                   	push   %ebx
   17fad:	51                   	push   %ecx
   17fae:	52                   	push   %edx
   17faf:	50                   	push   %eax
   17fb0:	e8 43 fd ff ff       	call   17cf8 <hd_out>
   17fb5:	83 c4 20             	add    $0x20,%esp
	} else
		do_hd_request();								// 执行请求项处理.
}
   17fb8:	eb 05                	jmp    17fbf <reset_hd+0xeb>
		do_hd_request();								// 执行请求项处理.
   17fba:	e8 31 02 00 00       	call   181f0 <do_hd_request>
}
   17fbf:	90                   	nop
   17fc0:	83 c4 04             	add    $0x4,%esp
   17fc3:	5b                   	pop    %ebx
   17fc4:	5e                   	pop    %esi
   17fc5:	c3                   	ret    

00017fc6 <unexpected_hd_interrupt>:

// 意外硬盘中断调用函数
// 发生意外硬盘中断时,硬盘中断处理程序中调用的默认C处理函数.在被调用函数指针为NULL时调用该函数.该函数在显示警告信息后设置复位标志reset,然后继续调用请求项函数
// do_hd_request()并在其中执行复位处理操作.
void unexpected_hd_interrupt(void)
{
   17fc6:	83 ec 0c             	sub    $0xc,%esp
	printk("Unexpected HD interrupt\n\r");
   17fc9:	83 ec 0c             	sub    $0xc,%esp
   17fcc:	68 6f 48 02 00       	push   $0x2486f
   17fd1:	e8 6b 0c ff ff       	call   8c41 <printk>
   17fd6:	83 c4 10             	add    $0x10,%esp
	reset = 1;
   17fd9:	c7 05 d4 21 03 00 01 	movl   $0x1,0x321d4
   17fe0:	00 00 00 
	do_hd_request();
   17fe3:	e8 08 02 00 00       	call   181f0 <do_hd_request>
}
   17fe8:	90                   	nop
   17fe9:	83 c4 0c             	add    $0xc,%esp
   17fec:	c3                   	ret    

00017fed <bad_rw_intr>:

// 读写硬盘失败处理调用函数
// 如果读扇区时的出错次数大于或等于7次时,则结束当前请求项并唤醒等待该请求的进程,而且对应缓冲区更新标志复位,表示数据没有更新.如果读写一扇区时的出错次数已经大于
// 3次,则要求执行复位硬盘控制器操作(设置复位标志).
static void bad_rw_intr(void)
{
   17fed:	83 ec 0c             	sub    $0xc,%esp
	if (++CURRENT->errors >= MAX_ERRORS)
   17ff0:	a1 1c 21 03 00       	mov    0x3211c,%eax
   17ff5:	8b 50 08             	mov    0x8(%eax),%edx
   17ff8:	83 c2 01             	add    $0x1,%edx
   17ffb:	89 50 08             	mov    %edx,0x8(%eax)
   17ffe:	8b 40 08             	mov    0x8(%eax),%eax
   18001:	83 f8 06             	cmp    $0x6,%eax
   18004:	7e 0d                	jle    18013 <bad_rw_intr+0x26>
		end_request(0);
   18006:	83 ec 0c             	sub    $0xc,%esp
   18009:	6a 00                	push   $0x0
   1800b:	e8 d9 f6 ff ff       	call   176e9 <end_request>
   18010:	83 c4 10             	add    $0x10,%esp
	if (CURRENT->errors > MAX_ERRORS / 2)
   18013:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18018:	8b 40 08             	mov    0x8(%eax),%eax
   1801b:	83 f8 03             	cmp    $0x3,%eax
   1801e:	7e 0a                	jle    1802a <bad_rw_intr+0x3d>
		reset = 1;
   18020:	c7 05 d4 21 03 00 01 	movl   $0x1,0x321d4
   18027:	00 00 00 
}
   1802a:	90                   	nop
   1802b:	83 c4 0c             	add    $0xc,%esp
   1802e:	c3                   	ret    

0001802f <read_intr>:
// 读操作中断调用函数.
// 该函数将在硬盘读命令结束时引发的硬盘中断过程中调用.
// 在读命令执行后会产生硬盘中断信号,并执行硬盘中断处理程序,此时在硬盘中断处理程序调用的C函数指针do_hd已经指向read_intr(),因此会在一次读扇区操作完成(或出错)
// 后就会执行该函数.
static void read_intr(void)
{
   1802f:	57                   	push   %edi
   18030:	83 ec 08             	sub    $0x8,%esp
	// 该函数首先判断此次读命令操作是否出错.若命令结束后控制器还处于忙状态,或者命令执行错误,则处理硬盘操作失败的问题,接着再次请求硬盘作复位处理并执行其他请求项.然后
	// 返回.每次读操作出错都会对当前请求项作出错次数累计,若出错次数不到最大允许出错次数一半,则会先执行硬盘复位操作,然后再执行本次请求项处理.若出错次数已经大于等于
	// 最大允许出错次数MAX_ERRORS(7次),则结束本次请求项的处理而去处理队列中下一个请求项.
	if (win_result()) {									// 若控制器忙,读写错或命令执行错,则进行读写硬盘失败处理.
   18033:	e8 60 fc ff ff       	call   17c98 <win_result>
   18038:	85 c0                	test   %eax,%eax
   1803a:	74 0f                	je     1804b <read_intr+0x1c>
		bad_rw_intr();
   1803c:	e8 ac ff ff ff       	call   17fed <bad_rw_intr>
		do_hd_request();								// 再次请求硬盘作相应(复位)处理.
   18041:	e8 aa 01 00 00       	call   181f0 <do_hd_request>
		return;
   18046:	e9 85 00 00 00       	jmp    180d0 <read_intr+0xa1>
	}
	// 如果读命令没有出错,则从数据寄存器端口把1扇区的数据读到请求项的缓冲区中,并且递减请求项所需读取的扇区数值.若递减后不等于0,表示本项请求还有数据没取完,于是再次置中断
	// 调用C函数指针do_hd为read_intr()并直接返回,等待硬盘在读出另1个扇区数据后发出中断并再次调用本函数.
	// 注意:281行语句中的256是指内存字,即512字节.
	// 注意:262行再次置do_hd指针指向read_intr()是因为硬盘中断处理程序每次调用do_hd时都会将该函数指针置空.
	port_read(HD_DATA, CURRENT->buffer, 256);			// 读数据到请求结构缓冲区.
   1804b:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18050:	8b 40 14             	mov    0x14(%eax),%eax
   18053:	ba f0 01 00 00       	mov    $0x1f0,%edx
   18058:	b9 00 01 00 00       	mov    $0x100,%ecx
   1805d:	89 c7                	mov    %eax,%edi
   1805f:	fc                   	cld    
   18060:	f3 66 6d             	rep insw (%dx),%es:(%edi)
	CURRENT->errors = 0;								// 清出错次数
   18063:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18068:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	CURRENT->buffer += 512;								// 高速缓冲区指针,指向新的空区.
   1806f:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18074:	8b 50 14             	mov    0x14(%eax),%edx
   18077:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1807c:	81 c2 00 02 00 00    	add    $0x200,%edx
   18082:	89 50 14             	mov    %edx,0x14(%eax)
	CURRENT->sector++;									// 起始扇区号加1.
   18085:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1808a:	8b 50 0c             	mov    0xc(%eax),%edx
   1808d:	83 c2 01             	add    $0x1,%edx
   18090:	89 50 0c             	mov    %edx,0xc(%eax)
	if (--CURRENT->nr_sectors) {						// 如果所需读出的扇区数还没读完,则再置硬盘调用C函数指针为read_intr().
   18093:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18098:	8b 50 10             	mov    0x10(%eax),%edx
   1809b:	83 ea 01             	sub    $0x1,%edx
   1809e:	89 50 10             	mov    %edx,0x10(%eax)
   180a1:	8b 40 10             	mov    0x10(%eax),%eax
   180a4:	85 c0                	test   %eax,%eax
   180a6:	74 16                	je     180be <read_intr+0x8f>
		SET_INTR(&read_intr);
   180a8:	c7 05 80 21 03 00 2f 	movl   $0x1802f,0x32180
   180af:	80 01 00 
   180b2:	c7 05 84 21 03 00 c8 	movl   $0xc8,0x32184
   180b9:	00 00 00 
		return;
   180bc:	eb 12                	jmp    180d0 <read_intr+0xa1>
	}
	// 执行到此,说明本次请求项的全部扇区数据已经读完,则调用end_request()函数去处理请求项结束事宜.最后再次调用do_hd_request(),去处理其他硬盘请求项.执行其他硬盘
	// 请求操作.
	end_request(1);										// 数据已更新标志置位(1).
   180be:	83 ec 0c             	sub    $0xc,%esp
   180c1:	6a 01                	push   $0x1
   180c3:	e8 21 f6 ff ff       	call   176e9 <end_request>
   180c8:	83 c4 10             	add    $0x10,%esp
	do_hd_request();
   180cb:	e8 20 01 00 00       	call   181f0 <do_hd_request>
}
   180d0:	83 c4 08             	add    $0x8,%esp
   180d3:	5f                   	pop    %edi
   180d4:	c3                   	ret    

000180d5 <write_intr>:

// 写扇区中断调用函数
// 该函数将在硬盘写命令结束引发的硬盘中断过程中被调用.函数功能与read_intr()类似.在写命令执行后会产生硬盘中断信号,并执行硬盘中断处理程序,此时在硬盘中断处理程序中
// 调用的C函数指针do_hd已经指向write_intr(),因此会在一次写扇区操作完成(或出错)后就会执行该函数.
static void write_intr(void)
{
   180d5:	56                   	push   %esi
   180d6:	83 ec 08             	sub    $0x8,%esp
	// 该函数首先判断此次写命令操作是否出错.若命令结束后控制器还处于忙状态,或者命令执行错误,则处理硬盘操作失败问题,接着再次请求硬盘作复位处理并执行其他请求项.然后返回.
	// 在bad_rw_intr()函数中,每次操作出错都会对当前请求项作出错次数累计,若出错次数不到最大允许出错次数的一半,则会先执行硬盘复位操作,然后再执行本次请求项处理.若出错
	// 次数已经大于等于最大允许出错次数MAX_ERRORS(7次),则结束本次请求项的处理而去处理队列中下一个请求项.do_hd_request()中会根据当时具体的标志状态来判别是否需要先执
	// 行复位,重新校正等操作,然后再继续或处理下一个请求项.
	if (win_result()) {									// 如果硬盘控制器返回错误信息,则首先进行硬盘读写失败处理,再次请求硬盘作相应(复位)处理.
   180d9:	e8 ba fb ff ff       	call   17c98 <win_result>
   180de:	85 c0                	test   %eax,%eax
   180e0:	74 0c                	je     180ee <write_intr+0x19>
		bad_rw_intr();
   180e2:	e8 06 ff ff ff       	call   17fed <bad_rw_intr>
		do_hd_request();
   180e7:	e8 04 01 00 00       	call   181f0 <do_hd_request>
		return;
   180ec:	eb 79                	jmp    18167 <write_intr+0x92>
	}
	// 此时说明本次写一扇区操作成功,因为将欲写扇区数减1.若其不为0,则说明还有扇区要写,于是把当前请求起始扇区号+1,并调整请求项数据缓冲区指针指向下一块欲写的数据.然后再重置
	// 硬盘中断处理程序中调用的C函数指针do_hd(指向本函数).接着向控制器数据端口写入512字节数据,然后函数返回去等待控制器把些数据写入硬盘后产生的中断.
	if (--CURRENT->nr_sectors) {						// 若还有扇区要写,则
   180ee:	a1 1c 21 03 00       	mov    0x3211c,%eax
   180f3:	8b 50 10             	mov    0x10(%eax),%edx
   180f6:	83 ea 01             	sub    $0x1,%edx
   180f9:	89 50 10             	mov    %edx,0x10(%eax)
   180fc:	8b 40 10             	mov    0x10(%eax),%eax
   180ff:	85 c0                	test   %eax,%eax
   18101:	74 52                	je     18155 <write_intr+0x80>
		CURRENT->sector++;								// 当前请求起始扇区号+1,
   18103:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18108:	8b 50 0c             	mov    0xc(%eax),%edx
   1810b:	83 c2 01             	add    $0x1,%edx
   1810e:	89 50 0c             	mov    %edx,0xc(%eax)
		CURRENT->buffer += 512;							// 调整请求缓冲区指针,
   18111:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18116:	8b 50 14             	mov    0x14(%eax),%edx
   18119:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1811e:	81 c2 00 02 00 00    	add    $0x200,%edx
   18124:	89 50 14             	mov    %edx,0x14(%eax)
		SET_INTR(&write_intr);							// do_hd置函数指针为write_intr().
   18127:	c7 05 80 21 03 00 d5 	movl   $0x180d5,0x32180
   1812e:	80 01 00 
   18131:	c7 05 84 21 03 00 c8 	movl   $0xc8,0x32184
   18138:	00 00 00 
		port_write(HD_DATA, CURRENT->buffer, 256);		// 向数据端口写256字.
   1813b:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18140:	8b 40 14             	mov    0x14(%eax),%eax
   18143:	ba f0 01 00 00       	mov    $0x1f0,%edx
   18148:	b9 00 01 00 00       	mov    $0x100,%ecx
   1814d:	89 c6                	mov    %eax,%esi
   1814f:	fc                   	cld    
   18150:	f3 66 6f             	rep outsw %ds:(%esi),(%dx)
		return;
   18153:	eb 12                	jmp    18167 <write_intr+0x92>
	}
	// 若本次请求项的全部扇区数据已经写完,则调用end_request()函数去处理请求项结束事宜.最后再次调用do_hd_requrest(),去处理其他硬盘请求项.执行其他硬盘请求操作.
	end_request(1);										// 处理请求结束事宜(已设置更新标志).
   18155:	83 ec 0c             	sub    $0xc,%esp
   18158:	6a 01                	push   $0x1
   1815a:	e8 8a f5 ff ff       	call   176e9 <end_request>
   1815f:	83 c4 10             	add    $0x10,%esp
	do_hd_request();									// 执行其他硬盘请求操作.
   18162:	e8 89 00 00 00       	call   181f0 <do_hd_request>
}
   18167:	83 c4 08             	add    $0x8,%esp
   1816a:	5e                   	pop    %esi
   1816b:	c3                   	ret    

0001816c <recal_intr>:
// 该函数会在硬盘执行重新校正操作而引发的硬盘中断中被调用.
// 如果硬盘控制器返回错误信息,则函数首先进行硬盘读写失败处理,然后请求硬盘作相应(复位)处理.在bad_rw_intr()函数中,每次操作出错都会对当前请求项作出错次数累计,若出错次数
// 不到最大允许出错次数一半,则会先执行硬盘复位操作,然后再执行本次请求项处理.若出错次数已经大于等于最大允许出错次数MAX_ERRORS(7次),则结束本次请求项的处理而去处理队列中
// 下一个请求项.do_hd_request()中根据当时具体的标志状态来判别是否需要先执行复位,重新校正等操作,然后再继续或处理下一请求项.
static void recal_intr(void)
{
   1816c:	83 ec 0c             	sub    $0xc,%esp
	if (win_result())									// 若返回出错,则调用bad_rw_intr().
   1816f:	e8 24 fb ff ff       	call   17c98 <win_result>
   18174:	85 c0                	test   %eax,%eax
   18176:	74 05                	je     1817d <recal_intr+0x11>
		bad_rw_intr();
   18178:	e8 70 fe ff ff       	call   17fed <bad_rw_intr>
	do_hd_request();
   1817d:	e8 6e 00 00 00       	call   181f0 <do_hd_request>
}
   18182:	90                   	nop
   18183:	83 c4 0c             	add    $0xc,%esp
   18186:	c3                   	ret    

00018187 <hd_times_out>:
// 硬盘操作超时处理
// 本函数会在do_timer()中(kernel/sched.c)被调用.在向硬盘控制器发送了一个命令后,若在经过了hd_timeout个系统滴答后控制器还没有发出一个硬盘中断信号,则说明控制器(或
// 硬盘)操作超时.此时do_timer()就会调用本函数设置复位标志reset并调用do_hd_request()执行复位处理.若在预定时间内(200滴答)硬盘控制器发出了硬盘中断并开始执行硬盘中断
// 处理程序,那么hd_timeout值就会在中断处理程序中被置0.此时do_timer()就会跳过本函数.
void hd_times_out(void)
{
   18187:	83 ec 0c             	sub    $0xc,%esp
	// 如果当前并没有请求项要处理(设备请求项指针为NULL),则无超时可言,直接返回.否则先显示警告信息,然后判断当前请求项执行过程中发生的出错次数是否已经大于设定值MAX_ERRORS(7).
	// 如果是则以失败形式结束本次请求项的处理(不设置数据更新标志).然后把中断过程中调用的C函数指针do_hd置空,并设置复位标志reset,继而在请求项处理函数do_hd_request()中去
	// 执行复位操作.
	if (!CURRENT)
   1818a:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1818f:	85 c0                	test   %eax,%eax
   18191:	74 58                	je     181eb <hd_times_out+0x64>
		return;
	printk("HD timeout");
   18193:	83 ec 0c             	sub    $0xc,%esp
   18196:	68 89 48 02 00       	push   $0x24889
   1819b:	e8 a1 0a ff ff       	call   8c41 <printk>
   181a0:	83 c4 10             	add    $0x10,%esp
	if (++CURRENT->errors >= MAX_ERRORS)
   181a3:	a1 1c 21 03 00       	mov    0x3211c,%eax
   181a8:	8b 50 08             	mov    0x8(%eax),%edx
   181ab:	83 c2 01             	add    $0x1,%edx
   181ae:	89 50 08             	mov    %edx,0x8(%eax)
   181b1:	8b 40 08             	mov    0x8(%eax),%eax
   181b4:	83 f8 06             	cmp    $0x6,%eax
   181b7:	7e 0d                	jle    181c6 <hd_times_out+0x3f>
		end_request(0);
   181b9:	83 ec 0c             	sub    $0xc,%esp
   181bc:	6a 00                	push   $0x0
   181be:	e8 26 f5 ff ff       	call   176e9 <end_request>
   181c3:	83 c4 10             	add    $0x10,%esp
	SET_INTR(NULL);										// 令do_hd = NULL,time_out=200
   181c6:	c7 05 80 21 03 00 00 	movl   $0x0,0x32180
   181cd:	00 00 00 
   181d0:	c7 05 84 21 03 00 c8 	movl   $0xc8,0x32184
   181d7:	00 00 00 
	reset = 1;											// 设置复位标志.
   181da:	c7 05 d4 21 03 00 01 	movl   $0x1,0x321d4
   181e1:	00 00 00 
	do_hd_request();
   181e4:	e8 07 00 00 00       	call   181f0 <do_hd_request>
   181e9:	eb 01                	jmp    181ec <hd_times_out+0x65>
		return;
   181eb:	90                   	nop
}
   181ec:	83 c4 0c             	add    $0xc,%esp
   181ef:	c3                   	ret    

000181f0 <do_hd_request>:
// 该函数根据设备当前请求项中的设备号和起始扇区号信息首先计算到对应硬盘上的柱面号,当前磁道中扇区号,磁头号数据,然后再根据请求项中的命令(READ/WRITE)对硬盘发送相应读/写命令
// 若控制器复位标志或硬盘重新校正已被置位,那么首先会执行复位或重新校正操作.
// 若请求项此时是块设备的第1个(原来设备空闲),则块设备当前请求项指针会直接指向该请求项(参见ll_rw_blk.c),并会立刻调用本函数执行读写操作.否则在一个读写操作完成而引发的硬盘
// 中断过程,若还有请求项需要处理,则也会在硬盘中断过程中调用本函数
void do_hd_request(void)
{
   181f0:	56                   	push   %esi
   181f1:	83 ec 38             	sub    $0x38,%esp

	// 函数首先检测请求项的合法性.若请求队列中已没有请求项则退出(参见blk.h)
	// 然后取设备号中的子设备号以及设备当前请求项中的起始扇区号.子设备号即对应硬盘上各分区.如果子设备号不存在或者起始扇区大于该分区扇区数-2,则结束该请求项,并跳转到标号repeat处(定义
	// 在INIT_REQUEST开始处).因为次要求读写一块数据(2个扇区,即1024字节),所以请求的扇区号不能大于分区中最后倒数第二个扇区号.然后通过加上子设备号对应分区的起始扇区号,就把需要读写的
	// 块对应到整个硬盘的绝对扇区号block上.而子设备号被5整除即可得到对应的硬盘号.
	INIT_REQUEST;
   181f4:	a1 1c 21 03 00       	mov    0x3211c,%eax
   181f9:	85 c0                	test   %eax,%eax
   181fb:	75 19                	jne    18216 <do_hd_request+0x26>
   181fd:	c7 05 80 21 03 00 00 	movl   $0x0,0x32180
   18204:	00 00 00 
   18207:	c7 05 84 21 03 00 00 	movl   $0x0,0x32184
   1820e:	00 00 00 
   18211:	e9 87 02 00 00       	jmp    1849d <do_hd_request+0x2ad>
   18216:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1821b:	8b 00                	mov    (%eax),%eax
   1821d:	c1 e8 08             	shr    $0x8,%eax
   18220:	83 f8 03             	cmp    $0x3,%eax
   18223:	74 10                	je     18235 <do_hd_request+0x45>
   18225:	83 ec 0c             	sub    $0xc,%esp
   18228:	68 94 48 02 00       	push   $0x24894
   1822d:	e8 d0 09 ff ff       	call   8c02 <panic>
   18232:	83 c4 10             	add    $0x10,%esp
   18235:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1823a:	8b 40 1c             	mov    0x1c(%eax),%eax
   1823d:	85 c0                	test   %eax,%eax
   1823f:	74 20                	je     18261 <do_hd_request+0x71>
   18241:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18246:	8b 40 1c             	mov    0x1c(%eax),%eax
   18249:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1824d:	84 c0                	test   %al,%al
   1824f:	75 10                	jne    18261 <do_hd_request+0x71>
   18251:	83 ec 0c             	sub    $0xc,%esp
   18254:	68 b5 48 02 00       	push   $0x248b5
   18259:	e8 a4 09 ff ff       	call   8c02 <panic>
   1825e:	83 c4 10             	add    $0x10,%esp
 	dev = MINOR(CURRENT->dev);
   18261:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18266:	8b 00                	mov    (%eax),%eax
   18268:	25 ff 00 00 00       	and    $0xff,%eax
   1826d:	89 44 24 24          	mov    %eax,0x24(%esp)
	block = CURRENT->sector;						// 请求的起始扇区.
   18271:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18276:	8b 40 0c             	mov    0xc(%eax),%eax
   18279:	89 44 24 20          	mov    %eax,0x20(%esp)
	if (dev >= 5 * NR_HD || block + 2 > hd[dev].nr_sects) {
   1827d:	8b 15 d8 21 03 00    	mov    0x321d8,%edx
   18283:	89 d0                	mov    %edx,%eax
   18285:	c1 e0 02             	shl    $0x2,%eax
   18288:	01 d0                	add    %edx,%eax
   1828a:	39 44 24 24          	cmp    %eax,0x24(%esp)
   1828e:	73 16                	jae    182a6 <do_hd_request+0xb6>
   18290:	8b 44 24 20          	mov    0x20(%esp),%eax
   18294:	8d 50 02             	lea    0x2(%eax),%edx
   18297:	8b 44 24 24          	mov    0x24(%esp),%eax
   1829b:	8b 04 c5 e4 21 03 00 	mov    0x321e4(,%eax,8),%eax
   182a2:	39 c2                	cmp    %eax,%edx
   182a4:	76 12                	jbe    182b8 <do_hd_request+0xc8>
		end_request(0);
   182a6:	83 ec 0c             	sub    $0xc,%esp
   182a9:	6a 00                	push   $0x0
   182ab:	e8 39 f4 ff ff       	call   176e9 <end_request>
   182b0:	83 c4 10             	add    $0x10,%esp
		goto repeat;								// 该标号在blk.h最后面.
   182b3:	e9 3c ff ff ff       	jmp    181f4 <do_hd_request+0x4>
	}
	block += hd[dev].start_sect;
   182b8:	8b 44 24 24          	mov    0x24(%esp),%eax
   182bc:	8b 04 c5 e0 21 03 00 	mov    0x321e0(,%eax,8),%eax
   182c3:	01 44 24 20          	add    %eax,0x20(%esp)
	dev /= 5;										// 此时dev代表硬盘号(硬盘0还是硬盘1)
   182c7:	8b 44 24 24          	mov    0x24(%esp),%eax
   182cb:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   182d0:	f7 e2                	mul    %edx
   182d2:	89 d0                	mov    %edx,%eax
   182d4:	c1 e8 02             	shr    $0x2,%eax
   182d7:	89 44 24 24          	mov    %eax,0x24(%esp)
	// 数和硬盘磁头数来计算这些数据.计算方法为:初始时eax是扇区号block,edx中置0.divl指令把edx:eax组成的扇区号除以每磁道扇区数(hd_info[dev].sect),所得整数商值在eax中,余数在edx
	// 中.其中eax中是到指定位置的对应总磁道数(所有磁头面),edx中是当前磁道上的扇区号.348-349行代码初始时eax是计算出的对应总磁道数,edx中置0.divl指令把edx:eax的对应总磁道数除以硬盘
	// 总磁头数(hd_info[dev].head),在eax中得到的整除值是柱面号(cyl),edx得到的余数就是对应得当前磁头号(head).
	// 对应总磁道数 * 每磁道扇区数 + 当前磁道上的扇区号 = 绝对扇区号
	__asm__("divl %4":"=a" (block), "=d" (sec):"0" (block), "1" (0),
		"r" (hd_info[dev].sect));
   182db:	8b 54 24 24          	mov    0x24(%esp),%edx
   182df:	89 d0                	mov    %edx,%eax
   182e1:	01 c0                	add    %eax,%eax
   182e3:	01 d0                	add    %edx,%eax
   182e5:	c1 e0 03             	shl    $0x3,%eax
   182e8:	05 a4 21 03 00       	add    $0x321a4,%eax
   182ed:	8b 08                	mov    (%eax),%ecx
	__asm__("divl %4":"=a" (block), "=d" (sec):"0" (block), "1" (0),
   182ef:	8b 44 24 20          	mov    0x20(%esp),%eax
   182f3:	ba 00 00 00 00       	mov    $0x0,%edx
   182f8:	f7 f1                	div    %ecx
   182fa:	89 44 24 20          	mov    %eax,0x20(%esp)
   182fe:	89 54 24 1c          	mov    %edx,0x1c(%esp)
	// 总磁头数 * 柱面号 + 磁头号 = 对应总磁道数
	__asm__("divl %4":"=a" (cyl), "=d" (head):"0" (block), "1" (0),
		"r" (hd_info[dev].head));
   18302:	8b 54 24 24          	mov    0x24(%esp),%edx
   18306:	89 d0                	mov    %edx,%eax
   18308:	01 c0                	add    %eax,%eax
   1830a:	01 d0                	add    %edx,%eax
   1830c:	c1 e0 03             	shl    $0x3,%eax
   1830f:	05 a0 21 03 00       	add    $0x321a0,%eax
   18314:	8b 08                	mov    (%eax),%ecx
	__asm__("divl %4":"=a" (cyl), "=d" (head):"0" (block), "1" (0),
   18316:	8b 44 24 20          	mov    0x20(%esp),%eax
   1831a:	ba 00 00 00 00       	mov    $0x0,%edx
   1831f:	f7 f1                	div    %ecx
   18321:	89 44 24 18          	mov    %eax,0x18(%esp)
   18325:	89 54 24 14          	mov    %edx,0x14(%esp)
	sec++;											// 对计算所得当前磁道扇区号进行调整.
   18329:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
	nsect = CURRENT->nr_sectors;					// 预读/写的扇区数.
   1832e:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18333:	8b 40 10             	mov    0x10(%eax),%eax
   18336:	89 44 24 10          	mov    %eax,0x10(%esp)
	// 此时我们得到了欲读写的硬盘起始扇区block所对应的硬盘上柱面号(cyl),在当前磁道上的扇区号(sec),磁头号(head)以及欲读写的总扇区数(nsect).接着我们可以根据这些信息向硬盘控制器发送I/O
	// 操作信息了.但在发送之前我们还需要先看看是否有复位控制器状态和重新校正硬盘的标志.通常在复位操作之后都需要重新校正硬盘磁头位置.若这些标志已被置位,则说明前面的硬盘操作可能出现了一些问题
	// 或者现在是系统第一次硬盘读写操作等情况.于是我们就需要重新复位硬盘或控制器并重新校正硬盘.
	// 如果此时复位标志reset是置位的,则需要执行复位操作.复位硬盘和控制器,并置硬盘需要重新校正标志,返回.reset_hd()将首先向硬盘控制器发送复位(重新校正)命令,然后发送硬盘控制命令"
	// 建立驱动器参数".
	if (reset) {
   1833a:	a1 d4 21 03 00       	mov    0x321d4,%eax
   1833f:	85 c0                	test   %eax,%eax
   18341:	74 14                	je     18357 <do_hd_request+0x167>
		recalibrate = 1;							// 置需重新校正标志.
   18343:	c7 05 d0 21 03 00 01 	movl   $0x1,0x321d0
   1834a:	00 00 00 
		reset_hd();
   1834d:	e8 82 fb ff ff       	call   17ed4 <reset_hd>
		return;
   18352:	e9 46 01 00 00       	jmp    1849d <do_hd_request+0x2ad>
	}
	// 如果此时重新校正标志(recalibrate)是置位的,则首先复位该标志,然后向硬盘控制器发送重新校正命令.该命令会执行寻道操作,让处于任何地方的磁头移动到0柱面.
	if (recalibrate) {
   18357:	a1 d0 21 03 00       	mov    0x321d0,%eax
   1835c:	85 c0                	test   %eax,%eax
   1835e:	74 58                	je     183b8 <do_hd_request+0x1c8>
		recalibrate = 0;
   18360:	c7 05 d0 21 03 00 00 	movl   $0x0,0x321d0
   18367:	00 00 00 
		hd_out(dev, hd_info[CURRENT_DEV].sect, 0, 0, 0,
   1836a:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1836f:	8b 00                	mov    (%eax),%eax
   18371:	0f b6 c8             	movzbl %al,%ecx
   18374:	ba 67 66 66 66       	mov    $0x66666667,%edx
   18379:	89 c8                	mov    %ecx,%eax
   1837b:	f7 ea                	imul   %edx
   1837d:	d1 fa                	sar    %edx
   1837f:	89 c8                	mov    %ecx,%eax
   18381:	c1 f8 1f             	sar    $0x1f,%eax
   18384:	29 c2                	sub    %eax,%edx
   18386:	89 d0                	mov    %edx,%eax
   18388:	01 c0                	add    %eax,%eax
   1838a:	01 d0                	add    %edx,%eax
   1838c:	c1 e0 03             	shl    $0x3,%eax
   1838f:	05 a4 21 03 00       	add    $0x321a4,%eax
   18394:	8b 00                	mov    (%eax),%eax
   18396:	83 ec 04             	sub    $0x4,%esp
   18399:	68 6c 81 01 00       	push   $0x1816c
   1839e:	6a 10                	push   $0x10
   183a0:	6a 00                	push   $0x0
   183a2:	6a 00                	push   $0x0
   183a4:	6a 00                	push   $0x0
   183a6:	50                   	push   %eax
   183a7:	ff 74 24 40          	pushl  0x40(%esp)
   183ab:	e8 48 f9 ff ff       	call   17cf8 <hd_out>
   183b0:	83 c4 20             	add    $0x20,%esp
			WIN_RESTORE, &recal_intr);
		return;
   183b3:	e9 e5 00 00 00       	jmp    1849d <do_hd_request+0x2ad>
	}
	// 如果以上两个标志都没有置位,那么我们就可以开始向硬盘控制器发送真正的数据读/写操作命令了.如果当前请求是写扇区操作,则发送命令,循环读取状态寄存器信息并判断请求服务标志DRQ_STAT是否
	// 置位.DRQ_STAT是硬盘状态寄存器的请求服务位表示驱动器已经准备好在主机和数据端口之间传输一个字或一个字节的数据.如果请求服务DRQ置位则退出循环.若等到循环结束也没有置位,则表示发送的
	// 要求写硬盘命令失败,于是跳转去处理出现在问题或继续执行下一个硬盘请求.否则我们可以向硬盘控制器数据寄存器端口HD_DATA写入1个扇区的数据.
	if (CURRENT->cmd == WRITE) {
   183b8:	a1 1c 21 03 00       	mov    0x3211c,%eax
   183bd:	8b 40 04             	mov    0x4(%eax),%eax
   183c0:	83 f8 01             	cmp    $0x1,%eax
   183c3:	0f 85 90 00 00 00    	jne    18459 <do_hd_request+0x269>
		hd_out(dev, nsect, sec, head, cyl, WIN_WRITE, &write_intr);
   183c9:	83 ec 04             	sub    $0x4,%esp
   183cc:	68 d5 80 01 00       	push   $0x180d5
   183d1:	6a 30                	push   $0x30
   183d3:	ff 74 24 24          	pushl  0x24(%esp)
   183d7:	ff 74 24 24          	pushl  0x24(%esp)
   183db:	ff 74 24 30          	pushl  0x30(%esp)
   183df:	ff 74 24 28          	pushl  0x28(%esp)
   183e3:	ff 74 24 40          	pushl  0x40(%esp)
   183e7:	e8 0c f9 ff ff       	call   17cf8 <hd_out>
   183ec:	83 c4 20             	add    $0x20,%esp
		for(i = 0 ; i < 10000 && !(r = inb_p(HD_STATUS) & DRQ_STAT) ; i++)
   183ef:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   183f6:	00 
   183f7:	eb 05                	jmp    183fe <do_hd_request+0x20e>
   183f9:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   183fe:	81 7c 24 2c 0f 27 00 	cmpl   $0x270f,0x2c(%esp)
   18405:	00 
   18406:	7f 26                	jg     1842e <do_hd_request+0x23e>
   18408:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   1840d:	89 c2                	mov    %eax,%edx
   1840f:	ec                   	in     (%dx),%al
   18410:	eb 00                	jmp    18412 <do_hd_request+0x222>
   18412:	eb 00                	jmp    18414 <do_hd_request+0x224>
   18414:	88 44 24 0f          	mov    %al,0xf(%esp)
   18418:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1841d:	0f b6 c0             	movzbl %al,%eax
   18420:	83 e0 08             	and    $0x8,%eax
   18423:	89 44 24 28          	mov    %eax,0x28(%esp)
   18427:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1842c:	74 cb                	je     183f9 <do_hd_request+0x209>
			/* nothing */ ;
		if (!r) {
   1842e:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   18433:	75 0a                	jne    1843f <do_hd_request+0x24f>
			bad_rw_intr();
   18435:	e8 b3 fb ff ff       	call   17fed <bad_rw_intr>
			goto repeat;							// 该标号在blk.h文件最后面.
   1843a:	e9 b5 fd ff ff       	jmp    181f4 <do_hd_request+0x4>
		}
		port_write(HD_DATA, CURRENT->buffer, 256);
   1843f:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18444:	8b 40 14             	mov    0x14(%eax),%eax
   18447:	ba f0 01 00 00       	mov    $0x1f0,%edx
   1844c:	b9 00 01 00 00       	mov    $0x100,%ecx
   18451:	89 c6                	mov    %eax,%esi
   18453:	fc                   	cld    
   18454:	f3 66 6f             	rep outsw %ds:(%esi),(%dx)
   18457:	eb 44                	jmp    1849d <do_hd_request+0x2ad>
	// 如果当前请求是读硬盘数据,则向硬盘控制器发送读扇区命令.若命令无效则停机.
	} else if (CURRENT->cmd == READ) {
   18459:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1845e:	8b 40 04             	mov    0x4(%eax),%eax
   18461:	85 c0                	test   %eax,%eax
   18463:	75 28                	jne    1848d <do_hd_request+0x29d>
		hd_out(dev, nsect, sec, head, cyl, WIN_READ, &read_intr);
   18465:	83 ec 04             	sub    $0x4,%esp
   18468:	68 2f 80 01 00       	push   $0x1802f
   1846d:	6a 20                	push   $0x20
   1846f:	ff 74 24 24          	pushl  0x24(%esp)
   18473:	ff 74 24 24          	pushl  0x24(%esp)
   18477:	ff 74 24 30          	pushl  0x30(%esp)
   1847b:	ff 74 24 28          	pushl  0x28(%esp)
   1847f:	ff 74 24 40          	pushl  0x40(%esp)
   18483:	e8 70 f8 ff ff       	call   17cf8 <hd_out>
   18488:	83 c4 20             	add    $0x20,%esp
   1848b:	eb 10                	jmp    1849d <do_hd_request+0x2ad>
	} else
		panic("unknown hd-command");
   1848d:	83 ec 0c             	sub    $0xc,%esp
   18490:	68 d0 48 02 00       	push   $0x248d0
   18495:	e8 68 07 ff ff       	call   8c02 <panic>
   1849a:	83 c4 10             	add    $0x10,%esp
}
   1849d:	83 c4 38             	add    $0x38,%esp
   184a0:	5e                   	pop    %esi
   184a1:	c3                   	ret    

000184a2 <hd_init>:
// 设置硬盘中断描述符,并允许硬盘控制器发送中断请求信号.
// 该函数设置硬盘设备的请求项处理函数指针为do_hd_request(),然后设置硬盘中断门描述符.hd_interrup(kernel/sys_call.s)是其中断处理过程地址.硬盘中断号为int 0x2E(46),对应8259A
// 芯片的中断请求信号IRQ13.接着复位接联的主8259A int 2屏蔽位,允许从片发出中断请求信号.再复位硬盘的中断请求屏蔽位(在从片上),允许硬盘控制器发送中断请求信号.中断描述符表IDT内中断门
// 描述符设置宏set_intr_gate()在include/asm/system.h中实现.
void hd_init(void)
{
   184a2:	53                   	push   %ebx
   184a3:	83 ec 10             	sub    $0x10,%esp
	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;				// do_hd_request().
   184a6:	c7 05 18 21 03 00 f0 	movl   $0x181f0,0x32118
   184ad:	81 01 00 
	set_intr_gate(0x2E, &hd_interrupt);							// 设置中断门中处理函数指针
   184b0:	b9 28 56 00 00       	mov    $0x5628,%ecx
   184b5:	bb 2c 56 00 00       	mov    $0x562c,%ebx
   184ba:	ba 7c 7a 00 00       	mov    $0x7a7c,%edx
   184bf:	b8 00 00 08 00       	mov    $0x80000,%eax
   184c4:	66 89 d0             	mov    %dx,%ax
   184c7:	66 ba 00 8e          	mov    $0x8e00,%dx
   184cb:	89 01                	mov    %eax,(%ecx)
   184cd:	89 13                	mov    %edx,(%ebx)
	outb_p(inb_p(0x21) & 0xfb, 0x21);							// 复位接联的主8259A int 2的屏蔽位
   184cf:	b8 21 00 00 00       	mov    $0x21,%eax
   184d4:	89 c2                	mov    %eax,%edx
   184d6:	ec                   	in     (%dx),%al
   184d7:	eb 00                	jmp    184d9 <hd_init+0x37>
   184d9:	eb 00                	jmp    184db <hd_init+0x39>
   184db:	88 44 24 0f          	mov    %al,0xf(%esp)
   184df:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   184e4:	0f b6 c0             	movzbl %al,%eax
   184e7:	25 fb 00 00 00       	and    $0xfb,%eax
   184ec:	ba 21 00 00 00       	mov    $0x21,%edx
   184f1:	ee                   	out    %al,(%dx)
   184f2:	eb 00                	jmp    184f4 <hd_init+0x52>
   184f4:	eb 00                	jmp    184f6 <hd_init+0x54>
	outb(inb_p(0xA1) & 0xbf, 0xA1);								// 复位硬盘中断请求屏蔽位(在从片上).
   184f6:	b8 a1 00 00 00       	mov    $0xa1,%eax
   184fb:	89 c2                	mov    %eax,%edx
   184fd:	ec                   	in     (%dx),%al
   184fe:	eb 00                	jmp    18500 <hd_init+0x5e>
   18500:	eb 00                	jmp    18502 <hd_init+0x60>
   18502:	88 44 24 0e          	mov    %al,0xe(%esp)
   18506:	0f b6 44 24 0e       	movzbl 0xe(%esp),%eax
   1850b:	0f b6 c0             	movzbl %al,%eax
   1850e:	25 bf 00 00 00       	and    $0xbf,%eax
   18513:	ba a1 00 00 00       	mov    $0xa1,%edx
   18518:	ee                   	out    %al,(%dx)
}
   18519:	90                   	nop
   1851a:	83 c4 10             	add    $0x10,%esp
   1851d:	5b                   	pop    %ebx
   1851e:	c3                   	ret    

0001851f <memcpy>:
}

// 内存块复制.从源地址src处开始复制n个字节到目的地址dest处.
// 参数:dest - 复制的目的地址,src - 复制的源地址,n - 复制字节数.
static inline void * memcpy(void * dest, const void * src, int n)
{
   1851f:	57                   	push   %edi
   18520:	56                   	push   %esi
   18521:	53                   	push   %ebx
__asm__(
   18522:	8b 44 24 18          	mov    0x18(%esp),%eax
   18526:	8b 54 24 14          	mov    0x14(%esp),%edx
   1852a:	8b 5c 24 10          	mov    0x10(%esp),%ebx
   1852e:	89 c1                	mov    %eax,%ecx
   18530:	89 d6                	mov    %edx,%esi
   18532:	89 df                	mov    %ebx,%edi
   18534:	fc                   	cld    
   18535:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
	"cld\n\t"												// 清方向位
	"rep\n\t"												// 重复执行复制ecx个字节.
	"movsb"													// 从ds:[esi]到es:[edi],esi++,edi++.
	::"c" (n), "S" (src), "D" (dest)
	:);
return dest;												// 返回目的地址.
   18537:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   1853b:	5b                   	pop    %ebx
   1853c:	5e                   	pop    %esi
   1853d:	5f                   	pop    %edi
   1853e:	c3                   	ret    

0001853f <unlock_buffer>:
{
   1853f:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)
   18542:	8b 44 24 10          	mov    0x10(%esp),%eax
   18546:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1854a:	84 c0                	test   %al,%al
   1854c:	75 10                	jne    1855e <unlock_buffer+0x1f>
		printk(DEVICE_NAME ": free buffer being unlocked\n");
   1854e:	83 ec 0c             	sub    $0xc,%esp
   18551:	68 e4 48 02 00       	push   $0x248e4
   18556:	e8 e6 06 ff ff       	call   8c41 <printk>
   1855b:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;
   1855e:	8b 44 24 10          	mov    0x10(%esp),%eax
   18562:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);
   18566:	8b 44 24 10          	mov    0x10(%esp),%eax
   1856a:	83 c0 10             	add    $0x10,%eax
   1856d:	83 ec 0c             	sub    $0xc,%esp
   18570:	50                   	push   %eax
   18571:	e8 d7 eb fe ff       	call   714d <wake_up>
   18576:	83 c4 10             	add    $0x10,%esp
}
   18579:	90                   	nop
   1857a:	83 c4 0c             	add    $0xc,%esp
   1857d:	c3                   	ret    

0001857e <end_request>:
{
   1857e:	83 ec 0c             	sub    $0xc,%esp
	if (CURRENT->bh) {									// CURRENT为当前请求结构项指针
   18581:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18586:	8b 40 1c             	mov    0x1c(%eax),%eax
   18589:	85 c0                	test   %eax,%eax
   1858b:	74 23                	je     185b0 <end_request+0x32>
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
   1858d:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18592:	8b 40 1c             	mov    0x1c(%eax),%eax
   18595:	8b 54 24 10          	mov    0x10(%esp),%edx
   18599:	88 50 0a             	mov    %dl,0xa(%eax)
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
   1859c:	a1 0c 21 03 00       	mov    0x3210c,%eax
   185a1:	8b 40 1c             	mov    0x1c(%eax),%eax
   185a4:	83 ec 0c             	sub    $0xc,%esp
   185a7:	50                   	push   %eax
   185a8:	e8 92 ff ff ff       	call   1853f <unlock_buffer>
   185ad:	83 c4 10             	add    $0x10,%esp
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
   185b0:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   185b5:	75 34                	jne    185eb <end_request+0x6d>
		printk(DEVICE_NAME " I/O error\n\r");
   185b7:	83 ec 0c             	sub    $0xc,%esp
   185ba:	68 09 49 02 00       	push   $0x24909
   185bf:	e8 7d 06 ff ff       	call   8c41 <printk>
   185c4:	83 c4 10             	add    $0x10,%esp
			CURRENT->bh->b_blocknr);
   185c7:	a1 0c 21 03 00       	mov    0x3210c,%eax
   185cc:	8b 40 1c             	mov    0x1c(%eax),%eax
		printk("dev %04x, block %d\n\r",CURRENT->dev,
   185cf:	8b 50 04             	mov    0x4(%eax),%edx
   185d2:	a1 0c 21 03 00       	mov    0x3210c,%eax
   185d7:	8b 00                	mov    (%eax),%eax
   185d9:	83 ec 04             	sub    $0x4,%esp
   185dc:	52                   	push   %edx
   185dd:	50                   	push   %eax
   185de:	68 1d 49 02 00       	push   $0x2491d
   185e3:	e8 59 06 ff ff       	call   8c41 <printk>
   185e8:	83 c4 10             	add    $0x10,%esp
	wake_up(&CURRENT->waiting);							// 唤醒等待该请求项的进程.
   185eb:	a1 0c 21 03 00       	mov    0x3210c,%eax
   185f0:	83 c0 18             	add    $0x18,%eax
   185f3:	83 ec 0c             	sub    $0xc,%esp
   185f6:	50                   	push   %eax
   185f7:	e8 51 eb fe ff       	call   714d <wake_up>
   185fc:	83 c4 10             	add    $0x10,%esp
	wake_up(&wait_for_request);							// 唤醒等待空闲请求项的进程.
   185ff:	83 ec 0c             	sub    $0xc,%esp
   18602:	68 e0 20 03 00       	push   $0x320e0
   18607:	e8 41 eb fe ff       	call   714d <wake_up>
   1860c:	83 c4 10             	add    $0x10,%esp
	CURRENT->dev = -1;									// 释放该请求项.
   1860f:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18614:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	CURRENT = CURRENT->next;							// 指向下一请求项.
   1861a:	a1 0c 21 03 00       	mov    0x3210c,%eax
   1861f:	8b 40 20             	mov    0x20(%eax),%eax
   18622:	a3 0c 21 03 00       	mov    %eax,0x3210c
}
   18627:	90                   	nop
   18628:	83 c4 0c             	add    $0xc,%esp
   1862b:	c3                   	ret    

0001862c <do_rd_request>:
// 添加到rd的链表中之后,就会调用该函数对rd当前请求项进行处理.该函数首先计算当前请求项中指定起始扇区对应虚拟盘所处内存
// 的起始位置addr和要求的扇区数对应的字节长度值len,然后根据请求项中的命令进行操作.若是写命令WRITE,就把请求项所指缓
// 冲区中的数据直接复制到内存位置addr处。若是读操作作反之。数据复制完成后即可直接调用end_request()对本次请求项作结束
// 处理。然后跳转到函数开始处再去处理下一个请求项。若已没有请求项则退出。
void do_rd_request(void)
{
   1862c:	83 ec 1c             	sub    $0x1c,%esp
	char	*addr;

	// 首先检测请求项的合法性,若已没有请求项则退出(参见blk.h).然后计算请求项处理的虚拟盘中起始扇区在物理内存中对应的地址
	// addr和占用的内存字节长度值len.下句用于取得请求项中的起始扇区对应的内存起始位置和内存长度.其中sector<<9表示
	// sector * 512,换算成字节值.CURRENT被定义为(blk_dev[MAJOR_NR].current_request).
	INIT_REQUEST;
   1862f:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18634:	85 c0                	test   %eax,%eax
   18636:	0f 84 25 01 00 00    	je     18761 <do_rd_request+0x135>
   1863c:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18641:	8b 00                	mov    (%eax),%eax
   18643:	c1 e8 08             	shr    $0x8,%eax
   18646:	83 f8 01             	cmp    $0x1,%eax
   18649:	74 10                	je     1865b <do_rd_request+0x2f>
   1864b:	83 ec 0c             	sub    $0xc,%esp
   1864e:	68 34 49 02 00       	push   $0x24934
   18653:	e8 aa 05 ff ff       	call   8c02 <panic>
   18658:	83 c4 10             	add    $0x10,%esp
   1865b:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18660:	8b 40 1c             	mov    0x1c(%eax),%eax
   18663:	85 c0                	test   %eax,%eax
   18665:	74 20                	je     18687 <do_rd_request+0x5b>
   18667:	a1 0c 21 03 00       	mov    0x3210c,%eax
   1866c:	8b 40 1c             	mov    0x1c(%eax),%eax
   1866f:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   18673:	84 c0                	test   %al,%al
   18675:	75 10                	jne    18687 <do_rd_request+0x5b>
   18677:	83 ec 0c             	sub    $0xc,%esp
   1867a:	68 54 49 02 00       	push   $0x24954
   1867f:	e8 7e 05 ff ff       	call   8c02 <panic>
   18684:	83 c4 10             	add    $0x10,%esp
	addr = rd_start + (CURRENT->sector << 9);
   18687:	8b 15 00 28 04 00    	mov    0x42800,%edx
   1868d:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18692:	8b 40 0c             	mov    0xc(%eax),%eax
   18695:	c1 e0 09             	shl    $0x9,%eax
   18698:	01 d0                	add    %edx,%eax
   1869a:	89 44 24 0c          	mov    %eax,0xc(%esp)
	len = CURRENT->nr_sectors << 9;
   1869e:	a1 0c 21 03 00       	mov    0x3210c,%eax
   186a3:	8b 40 10             	mov    0x10(%eax),%eax
   186a6:	c1 e0 09             	shl    $0x9,%eax
   186a9:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 如果当前请求项中子设备号不为1或者对应内存起始位置大于虚拟盘末尾，则结束该请求项，并跳转到repeat处去处理下一个虚拟
	// 盘请求项。标号repeat定义在宏INIT_REQUEST内，位于宏的开始处，参见blk.h文件。
	if ((MINOR(CURRENT->dev) != 1) || (addr + len > rd_start + rd_length)) {
   186ad:	a1 0c 21 03 00       	mov    0x3210c,%eax
   186b2:	8b 00                	mov    (%eax),%eax
   186b4:	0f b6 c0             	movzbl %al,%eax
   186b7:	83 f8 01             	cmp    $0x1,%eax
   186ba:	75 1c                	jne    186d8 <do_rd_request+0xac>
   186bc:	8b 54 24 08          	mov    0x8(%esp),%edx
   186c0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   186c4:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   186c7:	a1 00 28 04 00       	mov    0x42800,%eax
   186cc:	8b 15 6c 22 03 00    	mov    0x3226c,%edx
   186d2:	01 d0                	add    %edx,%eax
   186d4:	39 c1                	cmp    %eax,%ecx
   186d6:	76 12                	jbe    186ea <do_rd_request+0xbe>
		end_request(0);
   186d8:	83 ec 0c             	sub    $0xc,%esp
   186db:	6a 00                	push   $0x0
   186dd:	e8 9c fe ff ff       	call   1857e <end_request>
   186e2:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   186e5:	e9 45 ff ff ff       	jmp    1862f <do_rd_request+0x3>
	}
	// 然后进行实际的读写操作。如果是写命令(WRITE)，则将请求项中缓冲区的内容复制到地址addr处，长度为len字节。如果是读命
	// 令(READ)，则将addr开始的内存内容复制到请求项缓冲区中，长度为len字节。否则显示命令不存在，死机。
	if (CURRENT-> cmd == WRITE) {
   186ea:	a1 0c 21 03 00       	mov    0x3210c,%eax
   186ef:	8b 40 04             	mov    0x4(%eax),%eax
   186f2:	83 f8 01             	cmp    $0x1,%eax
   186f5:	75 1e                	jne    18715 <do_rd_request+0xe9>
		(void ) memcpy(addr,
			      CURRENT->buffer,
   186f7:	a1 0c 21 03 00       	mov    0x3210c,%eax
   186fc:	8b 40 14             	mov    0x14(%eax),%eax
		(void ) memcpy(addr,
   186ff:	83 ec 04             	sub    $0x4,%esp
   18702:	ff 74 24 0c          	pushl  0xc(%esp)
   18706:	50                   	push   %eax
   18707:	ff 74 24 18          	pushl  0x18(%esp)
   1870b:	e8 0f fe ff ff       	call   1851f <memcpy>
   18710:	83 c4 10             	add    $0x10,%esp
   18713:	eb 3a                	jmp    1874f <do_rd_request+0x123>
			      len);
	} else if (CURRENT->cmd == READ) {
   18715:	a1 0c 21 03 00       	mov    0x3210c,%eax
   1871a:	8b 40 04             	mov    0x4(%eax),%eax
   1871d:	85 c0                	test   %eax,%eax
   1871f:	75 1e                	jne    1873f <do_rd_request+0x113>
		(void) memcpy(CURRENT->buffer,
   18721:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18726:	8b 40 14             	mov    0x14(%eax),%eax
   18729:	83 ec 04             	sub    $0x4,%esp
   1872c:	ff 74 24 0c          	pushl  0xc(%esp)
   18730:	ff 74 24 14          	pushl  0x14(%esp)
   18734:	50                   	push   %eax
   18735:	e8 e5 fd ff ff       	call   1851f <memcpy>
   1873a:	83 c4 10             	add    $0x10,%esp
   1873d:	eb 10                	jmp    1874f <do_rd_request+0x123>
			      addr,
			      len);
	} else
		panic("unknown ramdisk-command");
   1873f:	83 ec 0c             	sub    $0xc,%esp
   18742:	68 6e 49 02 00       	push   $0x2496e
   18747:	e8 b6 04 ff ff       	call   8c02 <panic>
   1874c:	83 c4 10             	add    $0x10,%esp
	// 然后在请求项成功后处理，置更新标志。并继续处理本设备的下一请求项。
	end_request(1);
   1874f:	83 ec 0c             	sub    $0xc,%esp
   18752:	6a 01                	push   $0x1
   18754:	e8 25 fe ff ff       	call   1857e <end_request>
   18759:	83 c4 10             	add    $0x10,%esp
	goto repeat;
   1875c:	e9 ce fe ff ff       	jmp    1862f <do_rd_request+0x3>
	INIT_REQUEST;
   18761:	90                   	nop
}
   18762:	83 c4 1c             	add    $0x1c,%esp
   18765:	c3                   	ret    

00018766 <rd_init>:
// 该函数首先设置虚拟盘设备的请求项处理函数指针指向do_rd_request(),然后确定虚拟盘在物理内存中的起始地址,占用字节长度
// 值.并对整个虚拟盘区清零.最后返回盘区长度.当linux/Makefile文件中设置过RAMDISK值不为零时,表示系统中会创建RAM虚拟盘
// 设备.在这种情况下的内核初始化过程中,本函数就会被调用(init/main.c).该函数在第2个参数length会被赋值成RAMDISK*1024
// 单位为字节.
long rd_init(long mem_start, int length)
{
   18766:	83 ec 10             	sub    $0x10,%esp
	int	i;
	char	*cp;

	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;
   18769:	c7 05 08 21 03 00 2c 	movl   $0x1862c,0x32108
   18770:	86 01 00 
	rd_start = (char *) mem_start;
   18773:	8b 44 24 14          	mov    0x14(%esp),%eax
   18777:	a3 00 28 04 00       	mov    %eax,0x42800
	rd_length = length;
   1877c:	8b 44 24 18          	mov    0x18(%esp),%eax
   18780:	a3 6c 22 03 00       	mov    %eax,0x3226c
	cp = rd_start;
   18785:	a1 00 28 04 00       	mov    0x42800,%eax
   1878a:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 将内存空间清零
	for (i = 0; i < length; i++)
   1878e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   18795:	00 
   18796:	eb 13                	jmp    187ab <rd_init+0x45>
		*cp++ = '\0';
   18798:	8b 44 24 08          	mov    0x8(%esp),%eax
   1879c:	8d 50 01             	lea    0x1(%eax),%edx
   1879f:	89 54 24 08          	mov    %edx,0x8(%esp)
   187a3:	c6 00 00             	movb   $0x0,(%eax)
	for (i = 0; i < length; i++)
   187a6:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   187ab:	8b 44 24 0c          	mov    0xc(%esp),%eax
   187af:	3b 44 24 18          	cmp    0x18(%esp),%eax
   187b3:	7c e3                	jl     18798 <rd_init+0x32>
	return(length);
   187b5:	8b 44 24 18          	mov    0x18(%esp),%eax
}
   187b9:	83 c4 10             	add    $0x10,%esp
   187bc:	c3                   	ret    

000187bd <rd_load>:
 */
// 尝试根文件系统加载到虚拟盘中.
// 该函数将在内核设置函数setup()(hd.c)中被调用.另外,1磁盘块 = 1024字节.变量block=256表示根文件系统映像被存储于boot盘第
// 256磁盘块开始处.
void rd_load(void)
{
   187bd:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
	struct buffer_head *bh;								// 调整缓冲块头指针.
	struct super_block	s;								// 文件超级块结构.
	int		block = 256;								/* Start at block 256 */	/* 开始于256盘块 */
   187c3:	c7 44 24 78 00 01 00 	movl   $0x100,0x78(%esp)
   187ca:	00 
	int		i = 1;
   187cb:	c7 44 24 74 01 00 00 	movl   $0x1,0x74(%esp)
   187d2:	00 
	int		nblocks;									// 文件系统盘块总数.
	char		*cp;									/* Move pointer */

	// 首先检查虚拟盘的有效性和完整性.如果ramdisk的长度为零,则退出.否则显示ramdisk的大小以及内存起始位置.如果此时根文件设备不是软盘
	// 设备,则也退出.
	if (!rd_length)
   187d3:	a1 6c 22 03 00       	mov    0x3226c,%eax
   187d8:	85 c0                	test   %eax,%eax
   187da:	0f 84 00 02 00 00    	je     189e0 <rd_load+0x223>
		return;
	printk("Ram disk: %d bytes, starting at 0x%x, dev = 0x%x \n", rd_length, (int) rd_start, ROOT_DEV);
   187e0:	8b 15 cc 20 03 00    	mov    0x320cc,%edx
   187e6:	a1 00 28 04 00       	mov    0x42800,%eax
   187eb:	89 c1                	mov    %eax,%ecx
   187ed:	a1 6c 22 03 00       	mov    0x3226c,%eax
   187f2:	52                   	push   %edx
   187f3:	51                   	push   %ecx
   187f4:	50                   	push   %eax
   187f5:	68 88 49 02 00       	push   $0x24988
   187fa:	e8 42 04 ff ff       	call   8c41 <printk>
   187ff:	83 c4 10             	add    $0x10,%esp
	if (MAJOR(ROOT_DEV) != 2)
   18802:	a1 cc 20 03 00       	mov    0x320cc,%eax
   18807:	c1 e8 08             	shr    $0x8,%eax
   1880a:	83 f8 02             	cmp    $0x2,%eax
   1880d:	0f 85 d0 01 00 00    	jne    189e3 <rd_load+0x226>
		return;
	// 然后读根文件系统的基本参数.即读软盘块256+1,256和256+2.这里block+1是指磁盘上的超级块.breada()用于读取指定的数据块,并标出还需要读的块,
	// 然后返回含有数据块的缓冲区指针.如果返回NULL,则表示数据块不可读(fs/buffer.c).然后把缓冲区中的磁盘超级块(d_super_block是磁盘超级
	// 块结构)复制到s变量中,并释放缓冲区.接着我们开始对超级块的有效性进行判断.超级块中文件系统魔数不对,则说明加载的数据块不是MINIX文件
	// 系统,于是退出.
	bh = breada(ROOT_DEV, block + 1, block, block + 2, -1);
   18813:	8b 44 24 78          	mov    0x78(%esp),%eax
   18817:	8d 48 02             	lea    0x2(%eax),%ecx
   1881a:	8b 44 24 78          	mov    0x78(%esp),%eax
   1881e:	8d 50 01             	lea    0x1(%eax),%edx
   18821:	a1 cc 20 03 00       	mov    0x320cc,%eax
   18826:	83 ec 0c             	sub    $0xc,%esp
   18829:	6a ff                	push   $0xffffffff
   1882b:	51                   	push   %ecx
   1882c:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
   18833:	52                   	push   %edx
   18834:	50                   	push   %eax
   18835:	e8 cc 6f ff ff       	call   f806 <breada>
   1883a:	83 c4 20             	add    $0x20,%esp
   1883d:	89 44 24 7c          	mov    %eax,0x7c(%esp)
	if (!bh) {
   18841:	83 7c 24 7c 00       	cmpl   $0x0,0x7c(%esp)
   18846:	75 15                	jne    1885d <rd_load+0xa0>
		printk("Disk error while looking for ramdisk!\n");
   18848:	83 ec 0c             	sub    $0xc,%esp
   1884b:	68 bc 49 02 00       	push   $0x249bc
   18850:	e8 ec 03 ff ff       	call   8c41 <printk>
   18855:	83 c4 10             	add    $0x10,%esp
		return;
   18858:	e9 8a 01 00 00       	jmp    189e7 <rd_load+0x22a>
	}
	*((struct d_super_block *) &s) = *((struct d_super_block *) bh->b_data);
   1885d:	8b 44 24 7c          	mov    0x7c(%esp),%eax
   18861:	8b 10                	mov    (%eax),%edx
   18863:	89 e0                	mov    %esp,%eax
   18865:	8b 0a                	mov    (%edx),%ecx
   18867:	89 08                	mov    %ecx,(%eax)
   18869:	8b 4a 04             	mov    0x4(%edx),%ecx
   1886c:	89 48 04             	mov    %ecx,0x4(%eax)
   1886f:	8b 4a 08             	mov    0x8(%edx),%ecx
   18872:	89 48 08             	mov    %ecx,0x8(%eax)
   18875:	8b 4a 0c             	mov    0xc(%edx),%ecx
   18878:	89 48 0c             	mov    %ecx,0xc(%eax)
   1887b:	8b 52 10             	mov    0x10(%edx),%edx
   1887e:	89 50 10             	mov    %edx,0x10(%eax)
	brelse(bh);
   18881:	83 ec 0c             	sub    $0xc,%esp
   18884:	ff b4 24 88 00 00 00 	pushl  0x88(%esp)
   1888b:	e8 60 6d ff ff       	call   f5f0 <brelse>
   18890:	83 c4 10             	add    $0x10,%esp
	if (s.s_magic != SUPER_MAGIC)
   18893:	0f b7 44 24 10       	movzwl 0x10(%esp),%eax
   18898:	66 3d 7f 13          	cmp    $0x137f,%ax
   1889c:	0f 85 44 01 00 00    	jne    189e6 <rd_load+0x229>
		return;
	// 然后我们试图把整个根文件系统读入在内存虚拟盘区中.对于一个文件系统来说,其超级块结构的s_nzones字段中保存着总逻辑块数(或称为区段数).一个
	// 逻辑块中含有的数据块数则由字段s_log_zone_size指定.因此文件系统中的数据块总数nblocks就等于(逻辑块数 *2^(每区段块数的次方)),即
	// nblocks=(s_nzones * 2^s_log_zone_size).如果遇到文件系统中数据块总数大于内存虚拟盘所能容纳的块数的情况,则不能执行加载操作,而只能显示
	// 出错信息并返回.
	nblocks = s.s_nzones << s.s_log_zone_size;
   188a2:	0f b7 44 24 02       	movzwl 0x2(%esp),%eax
   188a7:	0f b7 d0             	movzwl %ax,%edx
   188aa:	0f b7 44 24 0a       	movzwl 0xa(%esp),%eax
   188af:	0f b7 c0             	movzwl %ax,%eax
   188b2:	89 c1                	mov    %eax,%ecx
   188b4:	d3 e2                	shl    %cl,%edx
   188b6:	89 d0                	mov    %edx,%eax
   188b8:	89 44 24 70          	mov    %eax,0x70(%esp)
	if (nblocks > (rd_length >> BLOCK_SIZE_BITS)) {
   188bc:	a1 6c 22 03 00       	mov    0x3226c,%eax
   188c1:	c1 f8 0a             	sar    $0xa,%eax
   188c4:	39 44 24 70          	cmp    %eax,0x70(%esp)
   188c8:	7e 22                	jle    188ec <rd_load+0x12f>
		printk("Ram disk image too big!  (%d blocks, %d avail)\n",
   188ca:	a1 6c 22 03 00       	mov    0x3226c,%eax
   188cf:	c1 f8 0a             	sar    $0xa,%eax
   188d2:	83 ec 04             	sub    $0x4,%esp
   188d5:	50                   	push   %eax
   188d6:	ff 74 24 78          	pushl  0x78(%esp)
   188da:	68 e4 49 02 00       	push   $0x249e4
   188df:	e8 5d 03 ff ff       	call   8c41 <printk>
   188e4:	83 c4 10             	add    $0x10,%esp
			nblocks, rd_length >> BLOCK_SIZE_BITS);
		return;
   188e7:	e9 fb 00 00 00       	jmp    189e7 <rd_load+0x22a>
	}
	// 若虚拟盘能容纳得下文件系统总数据块数,则我们显示加载数据信息,并让cp指向内存虚拟盘起始处,然后开始执行循环操作将磁盘上根文件系统映像加载到
	// 虚拟盘上.在操作过程中,如果一次需要加载的盘块数大于2块,我们就是用超前预读函数breada(),否则就使用bread()函数进行单块读取.若在读盘过程
	// 中出现I/O操作错误,就只能放弃加载过程返回.所读取的磁盘块会使用memcpy()函数从高速缓冲区中复制到内存虚拟盘相应位置处,同时显示已加载的块数.
	// 显示字符串中的八进制数'\010'表示显示一个制表符.
	printk("Loading %d bytes into ram disk... (0k)",
   188ec:	8b 44 24 70          	mov    0x70(%esp),%eax
   188f0:	c1 e0 0a             	shl    $0xa,%eax
   188f3:	83 ec 08             	sub    $0x8,%esp
   188f6:	50                   	push   %eax
   188f7:	68 14 4a 02 00       	push   $0x24a14
   188fc:	e8 40 03 ff ff       	call   8c41 <printk>
   18901:	83 c4 10             	add    $0x10,%esp
		nblocks << BLOCK_SIZE_BITS);
	cp = rd_start;
   18904:	a1 00 28 04 00       	mov    0x42800,%eax
   18909:	89 44 24 6c          	mov    %eax,0x6c(%esp)
	while (nblocks) {
   1890d:	e9 b7 00 00 00       	jmp    189c9 <rd_load+0x20c>
		if (nblocks > 2)  								// 若读取块数多于2块则采用超前预读.
   18912:	83 7c 24 70 02       	cmpl   $0x2,0x70(%esp)
   18917:	7e 30                	jle    18949 <rd_load+0x18c>
			bh = breada(ROOT_DEV, block, block + 1, block + 2, -1);
   18919:	8b 44 24 78          	mov    0x78(%esp),%eax
   1891d:	8d 48 02             	lea    0x2(%eax),%ecx
   18920:	8b 44 24 78          	mov    0x78(%esp),%eax
   18924:	8d 50 01             	lea    0x1(%eax),%edx
   18927:	a1 cc 20 03 00       	mov    0x320cc,%eax
   1892c:	83 ec 0c             	sub    $0xc,%esp
   1892f:	6a ff                	push   $0xffffffff
   18931:	51                   	push   %ecx
   18932:	52                   	push   %edx
   18933:	ff b4 24 90 00 00 00 	pushl  0x90(%esp)
   1893a:	50                   	push   %eax
   1893b:	e8 c6 6e ff ff       	call   f806 <breada>
   18940:	83 c4 20             	add    $0x20,%esp
   18943:	89 44 24 7c          	mov    %eax,0x7c(%esp)
   18947:	eb 1c                	jmp    18965 <rd_load+0x1a8>
		else											// 否则就单块读取.
			bh = bread(ROOT_DEV, block);
   18949:	a1 cc 20 03 00       	mov    0x320cc,%eax
   1894e:	83 ec 08             	sub    $0x8,%esp
   18951:	ff b4 24 80 00 00 00 	pushl  0x80(%esp)
   18958:	50                   	push   %eax
   18959:	e8 e8 6c ff ff       	call   f646 <bread>
   1895e:	83 c4 10             	add    $0x10,%esp
   18961:	89 44 24 7c          	mov    %eax,0x7c(%esp)
		if (!bh) {
   18965:	83 7c 24 7c 00       	cmpl   $0x0,0x7c(%esp)
   1896a:	75 19                	jne    18985 <rd_load+0x1c8>
			printk("I/O error on block %d, aborting load\n",
   1896c:	83 ec 08             	sub    $0x8,%esp
   1896f:	ff b4 24 80 00 00 00 	pushl  0x80(%esp)
   18976:	68 3c 4a 02 00       	push   $0x24a3c
   1897b:	e8 c1 02 ff ff       	call   8c41 <printk>
   18980:	83 c4 10             	add    $0x10,%esp
				block);
			return;
   18983:	eb 62                	jmp    189e7 <rd_load+0x22a>
		}
		(void) memcpy(cp, bh->b_data, BLOCK_SIZE);		// 复制到cp处.
   18985:	8b 44 24 7c          	mov    0x7c(%esp),%eax
   18989:	8b 00                	mov    (%eax),%eax
   1898b:	83 ec 04             	sub    $0x4,%esp
   1898e:	68 00 04 00 00       	push   $0x400
   18993:	50                   	push   %eax
   18994:	ff 74 24 78          	pushl  0x78(%esp)
   18998:	e8 82 fb ff ff       	call   1851f <memcpy>
   1899d:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   189a0:	83 ec 0c             	sub    $0xc,%esp
   189a3:	ff b4 24 88 00 00 00 	pushl  0x88(%esp)
   189aa:	e8 41 6c ff ff       	call   f5f0 <brelse>
   189af:	83 c4 10             	add    $0x10,%esp
		cp += BLOCK_SIZE;								// 虚拟盘指针前移.
   189b2:	81 44 24 6c 00 04 00 	addl   $0x400,0x6c(%esp)
   189b9:	00 
		block++;
   189ba:	83 44 24 78 01       	addl   $0x1,0x78(%esp)
		nblocks--;
   189bf:	83 6c 24 70 01       	subl   $0x1,0x70(%esp)
		i++;
   189c4:	83 44 24 74 01       	addl   $0x1,0x74(%esp)
	while (nblocks) {
   189c9:	83 7c 24 70 00       	cmpl   $0x0,0x70(%esp)
   189ce:	0f 85 3e ff ff ff    	jne    18912 <rd_load+0x155>
	}
	// 当boot盘中从256盘块开始的整个文件系统加载完毕后,我们显示"done",并把目前根文件设备号修改成虚拟盘的设备号0x0101, 返回.
	ROOT_DEV = 0x0101;
   189d4:	c7 05 cc 20 03 00 01 	movl   $0x101,0x320cc
   189db:	01 00 00 
   189de:	eb 07                	jmp    189e7 <rd_load+0x22a>
		return;
   189e0:	90                   	nop
   189e1:	eb 04                	jmp    189e7 <rd_load+0x22a>
		return;
   189e3:	90                   	nop
   189e4:	eb 01                	jmp    189e7 <rd_load+0x22a>
		return;
   189e6:	90                   	nop
}
   189e7:	81 c4 8c 00 00 00    	add    $0x8c,%esp
   189ed:	c3                   	ret    

000189ee <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   189ee:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   189ef:	8b 44 24 08          	mov    0x8(%esp),%eax
   189f3:	64 8a 00             	mov    %fs:(%eax),%al
   189f6:	89 c3                	mov    %eax,%ebx
	return _v;
   189f8:	89 d8                	mov    %ebx,%eax
}
   189fa:	5b                   	pop    %ebx
   189fb:	c3                   	ret    

000189fc <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   189fc:	83 ec 04             	sub    $0x4,%esp
   189ff:	8b 44 24 08          	mov    0x8(%esp),%eax
   18a03:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   18a06:	0f b6 04 24          	movzbl (%esp),%eax
   18a0a:	8b 54 24 0c          	mov    0xc(%esp),%edx
   18a0e:	64 88 02             	mov    %al,%fs:(%edx)
}
   18a11:	90                   	nop
   18a12:	83 c4 04             	add    $0x4,%esp
   18a15:	c3                   	ret    

00018a16 <change_console>:

// 改变前台控制台.
// 将前台控制台设定为指定的虚拟控制台
// 参数:new_console - 指定的新控制台号
void change_console(unsigned int new_console)
{
   18a16:	83 ec 0c             	sub    $0xc,%esp
	// 如果参数指定的控制台已经在前台或者参数无效,则退出.否则设置当前前台控制台号,同时更新table_list[]中的前台控制台读/写队列结构地址.
	// 最后更新当前前台控制台屏幕.
	if (new_console == fg_console || new_console >= NR_CONSOLES)
   18a19:	a1 80 22 03 00       	mov    0x32280,%eax
   18a1e:	39 44 24 10          	cmp    %eax,0x10(%esp)
   18a22:	74 4a                	je     18a6e <change_console+0x58>
   18a24:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   18a29:	39 44 24 10          	cmp    %eax,0x10(%esp)
   18a2d:	73 3f                	jae    18a6e <change_console+0x58>
		return;
	fg_console = new_console;
   18a2f:	8b 44 24 10          	mov    0x10(%esp),%eax
   18a33:	a3 80 22 03 00       	mov    %eax,0x32280
	table_list[0] = con_queues + 0 + fg_console * 3;
   18a38:	a1 80 22 03 00       	mov    0x32280,%eax
   18a3d:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   18a43:	05 a0 22 03 00       	add    $0x322a0,%eax
   18a48:	a3 24 f5 02 00       	mov    %eax,0x2f524
	table_list[1] = con_queues + 1 + fg_console * 3;
   18a4d:	a1 80 22 03 00       	mov    0x32280,%eax
   18a52:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   18a58:	05 10 04 00 00       	add    $0x410,%eax
   18a5d:	05 a0 22 03 00       	add    $0x322a0,%eax
   18a62:	a3 28 f5 02 00       	mov    %eax,0x2f528
	update_screen();
   18a67:	e8 66 48 00 00       	call   1d2d2 <update_screen>
   18a6c:	eb 01                	jmp    18a6f <change_console+0x59>
		return;
   18a6e:	90                   	nop
}
   18a6f:	83 c4 0c             	add    $0xc,%esp
   18a72:	c3                   	ret    

00018a73 <sleep_if_empty>:
// 如果队列缓冲区空则让进程进入可中断睡眠状态.
// 参数:queue - 指定队列的指针.
// 进程在取队列缓冲区中字符之前需要调用此函数加以验证.如果当前进程没有信号要处理,并且指定的队列缓冲区空,则让进程进入可中断睡眠状态,并
// 让队列的进程等待指针指向该进程.
static void sleep_if_empty(struct tty_queue * queue)
{
   18a73:	83 ec 0c             	sub    $0xc,%esp
	cli();
   18a76:	fa                   	cli    
	while (!(current->signal & ~current->blocked) && EMPTY(queue))
   18a77:	eb 13                	jmp    18a8c <sleep_if_empty+0x19>
		interruptible_sleep_on(&queue->proc_list);
   18a79:	8b 44 24 10          	mov    0x10(%esp),%eax
   18a7d:	83 c0 0c             	add    $0xc,%eax
   18a80:	83 ec 0c             	sub    $0xc,%esp
   18a83:	50                   	push   %eax
   18a84:	e8 92 e6 fe ff       	call   711b <interruptible_sleep_on>
   18a89:	83 c4 10             	add    $0x10,%esp
	while (!(current->signal & ~current->blocked) && EMPTY(queue))
   18a8c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   18a91:	8b 50 0c             	mov    0xc(%eax),%edx
   18a94:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   18a99:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   18a9f:	f7 d0                	not    %eax
   18aa1:	21 d0                	and    %edx,%eax
   18aa3:	85 c0                	test   %eax,%eax
   18aa5:	75 12                	jne    18ab9 <sleep_if_empty+0x46>
   18aa7:	8b 44 24 10          	mov    0x10(%esp),%eax
   18aab:	8b 50 04             	mov    0x4(%eax),%edx
   18aae:	8b 44 24 10          	mov    0x10(%esp),%eax
   18ab2:	8b 40 08             	mov    0x8(%eax),%eax
   18ab5:	39 c2                	cmp    %eax,%edx
   18ab7:	74 c0                	je     18a79 <sleep_if_empty+0x6>
	sti();
   18ab9:	fb                   	sti    
}
   18aba:	90                   	nop
   18abb:	83 c4 0c             	add    $0xc,%esp
   18abe:	c3                   	ret    

00018abf <sleep_if_full>:

// 若队列缓冲区满则让进程进入可中断的睡眠状态.
// 参数:queue - 指定队列的指针.
// 进程在往队列缓冲区中写入字符之前需要调用此函数判断队列的情况.
static void sleep_if_full(struct tty_queue * queue)
{
   18abf:	83 ec 0c             	sub    $0xc,%esp
	// 如果队列缓冲区不满则返回退出.否则若进程没有信号需要处理,并且队列缓冲区中空闲剩余区长度<128,则让进程进入可中断息状态,并让该队列的进程
	// 等待指针指向该进程.
	if (!FULL(queue))
   18ac2:	8b 44 24 10          	mov    0x10(%esp),%eax
   18ac6:	8b 50 08             	mov    0x8(%eax),%edx
   18ac9:	8b 44 24 10          	mov    0x10(%esp),%eax
   18acd:	8b 40 04             	mov    0x4(%eax),%eax
   18ad0:	29 c2                	sub    %eax,%edx
   18ad2:	89 d0                	mov    %edx,%eax
   18ad4:	83 e8 01             	sub    $0x1,%eax
   18ad7:	25 ff 03 00 00       	and    $0x3ff,%eax
   18adc:	85 c0                	test   %eax,%eax
   18ade:	75 52                	jne    18b32 <sleep_if_full+0x73>
		return;
	cli();
   18ae0:	fa                   	cli    
	while (!(current->signal & ~current->blocked) && LEFT(queue) < 128)
   18ae1:	eb 13                	jmp    18af6 <sleep_if_full+0x37>
		interruptible_sleep_on(&queue->proc_list);
   18ae3:	8b 44 24 10          	mov    0x10(%esp),%eax
   18ae7:	83 c0 0c             	add    $0xc,%eax
   18aea:	83 ec 0c             	sub    $0xc,%esp
   18aed:	50                   	push   %eax
   18aee:	e8 28 e6 fe ff       	call   711b <interruptible_sleep_on>
   18af3:	83 c4 10             	add    $0x10,%esp
	while (!(current->signal & ~current->blocked) && LEFT(queue) < 128)
   18af6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   18afb:	8b 50 0c             	mov    0xc(%eax),%edx
   18afe:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   18b03:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   18b09:	f7 d0                	not    %eax
   18b0b:	21 d0                	and    %edx,%eax
   18b0d:	85 c0                	test   %eax,%eax
   18b0f:	75 1e                	jne    18b2f <sleep_if_full+0x70>
   18b11:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b15:	8b 50 08             	mov    0x8(%eax),%edx
   18b18:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b1c:	8b 40 04             	mov    0x4(%eax),%eax
   18b1f:	29 c2                	sub    %eax,%edx
   18b21:	89 d0                	mov    %edx,%eax
   18b23:	83 e8 01             	sub    $0x1,%eax
   18b26:	25 80 03 00 00       	and    $0x380,%eax
   18b2b:	85 c0                	test   %eax,%eax
   18b2d:	74 b4                	je     18ae3 <sleep_if_full+0x24>
	sti();
   18b2f:	fb                   	sti    
   18b30:	eb 01                	jmp    18b33 <sleep_if_full+0x74>
		return;
   18b32:	90                   	nop
}
   18b33:	83 c4 0c             	add    $0xc,%esp
   18b36:	c3                   	ret    

00018b37 <wait_for_keypress>:

// 等待按键.
// 如果前台控制台读队列缓冲区空,则让进程进入可中断睡眠状态.
void wait_for_keypress(void)
{
   18b37:	83 ec 0c             	sub    $0xc,%esp
	sleep_if_empty(tty_table[fg_console].secondary);
   18b3a:	a1 80 22 03 00       	mov    0x32280,%eax
   18b3f:	c1 e0 06             	shl    $0x6,%eax
   18b42:	05 5c 28 04 00       	add    $0x4285c,%eax
   18b47:	8b 00                	mov    (%eax),%eax
   18b49:	83 ec 0c             	sub    $0xc,%esp
   18b4c:	50                   	push   %eax
   18b4d:	e8 21 ff ff ff       	call   18a73 <sleep_if_empty>
   18b52:	83 c4 10             	add    $0x10,%esp
}
   18b55:	90                   	nop
   18b56:	83 c4 0c             	add    $0xc,%esp
   18b59:	c3                   	ret    

00018b5a <copy_to_cooked>:

// 复制成规范模式字符序列
// 根据终端termios结构中设置的各种标志,将指定tty同读队列缓冲区中的字符复制转换成规范模式(熟模式)字符并存放在辅助队列(规范模式队列)中.
// 参数:tty - 指定终端的tty结构指针.
void copy_to_cooked(struct tty_struct * tty)
{
   18b5a:	83 ec 1c             	sub    $0x1c,%esp
	signed char c;

	// 首先检查当前终端tty结构中缓冲队列指针是否有效.如果三个队列指针都是NULL,则说明内核tty初始化函数有问题.
	if (!(tty->read_q || tty->write_q || tty->secondary)) {
   18b5d:	8b 44 24 20          	mov    0x20(%esp),%eax
   18b61:	8b 40 34             	mov    0x34(%eax),%eax
   18b64:	85 c0                	test   %eax,%eax
   18b66:	75 2b                	jne    18b93 <copy_to_cooked+0x39>
   18b68:	8b 44 24 20          	mov    0x20(%esp),%eax
   18b6c:	8b 40 38             	mov    0x38(%eax),%eax
   18b6f:	85 c0                	test   %eax,%eax
   18b71:	75 20                	jne    18b93 <copy_to_cooked+0x39>
   18b73:	8b 44 24 20          	mov    0x20(%esp),%eax
   18b77:	8b 40 3c             	mov    0x3c(%eax),%eax
   18b7a:	85 c0                	test   %eax,%eax
   18b7c:	75 15                	jne    18b93 <copy_to_cooked+0x39>
		printk("copy_to_cooked: missing queues\n\r");
   18b7e:	83 ec 0c             	sub    $0xc,%esp
   18b81:	68 80 4a 02 00       	push   $0x24a80
   18b86:	e8 b6 00 ff ff       	call   8c41 <printk>
   18b8b:	83 c4 10             	add    $0x10,%esp
		return;
   18b8e:	e9 36 07 00 00       	jmp    192c9 <copy_to_cooked+0x76f>
	// 循环体中,如果此时读队列缓冲区已经取空或都辅助队列缓冲区已经放满字符,就退出循环体.否则程序就从读队列缓冲区尾指针处取一字符,并把尾指针前移
	// 一个字符位置.然后根据该字符代码值进行处理.
	// 另外,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,表示禁止使用相应特殊控制字符的功能.
	while (1) {
		// 如果tty对应的读队列为空则直接立刻中断循环
		if (EMPTY(tty->read_q))
   18b93:	8b 44 24 20          	mov    0x20(%esp),%eax
   18b97:	8b 40 34             	mov    0x34(%eax),%eax
   18b9a:	8b 50 04             	mov    0x4(%eax),%edx
   18b9d:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ba1:	8b 40 34             	mov    0x34(%eax),%eax
   18ba4:	8b 40 08             	mov    0x8(%eax),%eax
   18ba7:	39 c2                	cmp    %eax,%edx
   18ba9:	0f 84 00 07 00 00    	je     192af <copy_to_cooked+0x755>
			break;
		// 如果tty对应的第三个队列为空则直接立刻中断循环
		if (FULL(tty->secondary))
   18baf:	8b 44 24 20          	mov    0x20(%esp),%eax
   18bb3:	8b 40 3c             	mov    0x3c(%eax),%eax
   18bb6:	8b 50 08             	mov    0x8(%eax),%edx
   18bb9:	8b 44 24 20          	mov    0x20(%esp),%eax
   18bbd:	8b 40 3c             	mov    0x3c(%eax),%eax
   18bc0:	8b 40 04             	mov    0x4(%eax),%eax
   18bc3:	29 c2                	sub    %eax,%edx
   18bc5:	89 d0                	mov    %edx,%eax
   18bc7:	83 e8 01             	sub    $0x1,%eax
   18bca:	25 ff 03 00 00       	and    $0x3ff,%eax
   18bcf:	85 c0                	test   %eax,%eax
   18bd1:	0f 84 db 06 00 00    	je     192b2 <copy_to_cooked+0x758>
			break;
		GETCH(tty->read_q, c);								// 取一字符到c,并前移尾指针
   18bd7:	8b 44 24 20          	mov    0x20(%esp),%eax
   18bdb:	8b 50 34             	mov    0x34(%eax),%edx
   18bde:	8b 44 24 20          	mov    0x20(%esp),%eax
   18be2:	8b 40 34             	mov    0x34(%eax),%eax
   18be5:	8b 40 08             	mov    0x8(%eax),%eax
   18be8:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   18bed:	88 44 24 0f          	mov    %al,0xf(%esp)
   18bf1:	8b 44 24 20          	mov    0x20(%esp),%eax
   18bf5:	8b 40 34             	mov    0x34(%eax),%eax
   18bf8:	8b 40 08             	mov    0x8(%eax),%eax
   18bfb:	8d 50 01             	lea    0x1(%eax),%edx
   18bfe:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c02:	8b 40 34             	mov    0x34(%eax),%eax
   18c05:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18c0b:	89 50 08             	mov    %edx,0x8(%eax)
		// 如果该字符是回车符CR(13),那么若回车换行转换行CRNL置位,则将字符转换为换行符NL(10).否则如果忽略回车标志NOCR置位,则忽略该字符,继续处理其他字符
		if (c == 13) {
   18c0e:	80 7c 24 0f 0d       	cmpb   $0xd,0xf(%esp)
   18c13:	75 2a                	jne    18c3f <copy_to_cooked+0xe5>
			if (I_CRNL(tty))
   18c15:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c19:	8b 00                	mov    (%eax),%eax
   18c1b:	25 00 01 00 00       	and    $0x100,%eax
   18c20:	85 c0                	test   %eax,%eax
   18c22:	74 07                	je     18c2b <copy_to_cooked+0xd1>
				c = 10;
   18c24:	c6 44 24 0f 0a       	movb   $0xa,0xf(%esp)
   18c29:	eb 2d                	jmp    18c58 <copy_to_cooked+0xfe>
			else if (I_NOCR(tty))
   18c2b:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c2f:	8b 00                	mov    (%eax),%eax
   18c31:	25 80 00 00 00       	and    $0x80,%eax
   18c36:	85 c0                	test   %eax,%eax
   18c38:	74 1e                	je     18c58 <copy_to_cooked+0xfe>
				continue;
   18c3a:	e9 6b 06 00 00       	jmp    192aa <copy_to_cooked+0x750>
		// 如果字符是换行符NL(10),换行转回车标志NLCR置位,则将其转换为回车符CR(13).
		} else if (c == 10 && I_NLCR(tty))
   18c3f:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   18c44:	75 12                	jne    18c58 <copy_to_cooked+0xfe>
   18c46:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c4a:	8b 00                	mov    (%eax),%eax
   18c4c:	83 e0 40             	and    $0x40,%eax
   18c4f:	85 c0                	test   %eax,%eax
   18c51:	74 05                	je     18c58 <copy_to_cooked+0xfe>
			c = 13;
   18c53:	c6 44 24 0f 0d       	movb   $0xd,0xf(%esp)
		// 如果大写转小写输入标志UCLC置位,则将该字符转换为小写字符.
		if (I_UCLC(tty))
   18c58:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c5c:	8b 00                	mov    (%eax),%eax
   18c5e:	25 00 02 00 00       	and    $0x200,%eax
   18c63:	85 c0                	test   %eax,%eax
   18c65:	74 40                	je     18ca7 <copy_to_cooked+0x14d>
			c = tolower(c);
   18c67:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   18c6c:	a2 20 68 04 00       	mov    %al,0x46820
   18c71:	0f b6 05 20 68 04 00 	movzbl 0x46820,%eax
   18c78:	0f be c0             	movsbl %al,%eax
   18c7b:	83 c0 01             	add    $0x1,%eax
   18c7e:	05 a0 f5 02 00       	add    $0x2f5a0,%eax
   18c83:	0f b6 00             	movzbl (%eax),%eax
   18c86:	0f b6 c0             	movzbl %al,%eax
   18c89:	83 e0 01             	and    $0x1,%eax
   18c8c:	85 c0                	test   %eax,%eax
   18c8e:	74 0c                	je     18c9c <copy_to_cooked+0x142>
   18c90:	0f b6 05 20 68 04 00 	movzbl 0x46820,%eax
   18c97:	83 c0 20             	add    $0x20,%eax
   18c9a:	eb 07                	jmp    18ca3 <copy_to_cooked+0x149>
   18c9c:	0f b6 05 20 68 04 00 	movzbl 0x46820,%eax
   18ca3:	88 44 24 0f          	mov    %al,0xf(%esp)
		// 字符(^D),则循环执行下列代码:
		// 如果本了回显标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty写队列放入擦除控制字符ERASE(^H).然后再放入一个擦除字符ERASE,并且调用
		// 该tty写函数,把写队列中的所有字符输出到终端屏幕上.另外,因为控制字符在放入写队列时需要用2个字节表示(例如^V),因此要求特别对控制字符多放入
		// 一个ERASE.最后将tty辅助队列头指针后退1字节.另外,如果了_POSIZ_VDISABLE(\0),那么在对字符修理过程中,若字符代码值等于_POSIX_VDISABLE
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_CANON(tty)) {
   18ca7:	8b 44 24 20          	mov    0x20(%esp),%eax
   18cab:	8b 40 0c             	mov    0xc(%eax),%eax
   18cae:	83 e0 02             	and    $0x2,%eax
   18cb1:	85 c0                	test   %eax,%eax
   18cb3:	0f 84 9d 02 00 00    	je     18f56 <copy_to_cooked+0x3fc>
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
   18cb9:	8b 44 24 20          	mov    0x20(%esp),%eax
   18cbd:	0f b6 40 14          	movzbl 0x14(%eax),%eax
   18cc1:	84 c0                	test   %al,%al
   18cc3:	0f 84 43 01 00 00    	je     18e0c <copy_to_cooked+0x2b2>
			    (c == KILL_CHAR(tty))) {
   18cc9:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18cce:	8b 44 24 20          	mov    0x20(%esp),%eax
   18cd2:	0f b6 40 14          	movzbl 0x14(%eax),%eax
   18cd6:	0f b6 c0             	movzbl %al,%eax
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
   18cd9:	39 c2                	cmp    %eax,%edx
   18cdb:	0f 85 2b 01 00 00    	jne    18e0c <copy_to_cooked+0x2b2>
				/* deal with killing the input line */
				while(!(EMPTY(tty->secondary) ||
   18ce1:	e9 af 00 00 00       	jmp    18d95 <copy_to_cooked+0x23b>
				        (c = LAST(tty->secondary)) == 10 ||
				        ((EOF_CHAR(tty) != _POSIX_VDISABLE) && (c == EOF_CHAR(tty))))) {
					if (L_ECHO(tty)) {						// 若本地回显标志置位
   18ce6:	8b 44 24 20          	mov    0x20(%esp),%eax
   18cea:	8b 40 0c             	mov    0xc(%eax),%eax
   18ced:	83 e0 08             	and    $0x8,%eax
   18cf0:	85 c0                	test   %eax,%eax
   18cf2:	0f 84 80 00 00 00    	je     18d78 <copy_to_cooked+0x21e>
						if (c < 32)							// 控制字符要删2字节
   18cf8:	80 7c 24 0f 1f       	cmpb   $0x1f,0xf(%esp)
   18cfd:	7f 33                	jg     18d32 <copy_to_cooked+0x1d8>
							PUTCH(127, tty->write_q);
   18cff:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d03:	8b 50 38             	mov    0x38(%eax),%edx
   18d06:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d0a:	8b 40 38             	mov    0x38(%eax),%eax
   18d0d:	8b 40 04             	mov    0x4(%eax),%eax
   18d10:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18d15:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d19:	8b 40 38             	mov    0x38(%eax),%eax
   18d1c:	8b 40 04             	mov    0x4(%eax),%eax
   18d1f:	8d 50 01             	lea    0x1(%eax),%edx
   18d22:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d26:	8b 40 38             	mov    0x38(%eax),%eax
   18d29:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18d2f:	89 50 04             	mov    %edx,0x4(%eax)
						PUTCH(127, tty->write_q);
   18d32:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d36:	8b 50 38             	mov    0x38(%eax),%edx
   18d39:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d3d:	8b 40 38             	mov    0x38(%eax),%eax
   18d40:	8b 40 04             	mov    0x4(%eax),%eax
   18d43:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18d48:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d4c:	8b 40 38             	mov    0x38(%eax),%eax
   18d4f:	8b 40 04             	mov    0x4(%eax),%eax
   18d52:	8d 50 01             	lea    0x1(%eax),%edx
   18d55:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d59:	8b 40 38             	mov    0x38(%eax),%eax
   18d5c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18d62:	89 50 04             	mov    %edx,0x4(%eax)
						tty->write(tty);
   18d65:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d69:	8b 40 30             	mov    0x30(%eax),%eax
   18d6c:	83 ec 0c             	sub    $0xc,%esp
   18d6f:	ff 74 24 2c          	pushl  0x2c(%esp)
   18d73:	ff d0                	call   *%eax
   18d75:	83 c4 10             	add    $0x10,%esp
					}
					DEC(tty->secondary->head);
   18d78:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d7c:	8b 40 3c             	mov    0x3c(%eax),%eax
   18d7f:	8b 40 04             	mov    0x4(%eax),%eax
   18d82:	8d 50 ff             	lea    -0x1(%eax),%edx
   18d85:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d89:	8b 40 3c             	mov    0x3c(%eax),%eax
   18d8c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18d92:	89 50 04             	mov    %edx,0x4(%eax)
				while(!(EMPTY(tty->secondary) ||
   18d95:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d99:	8b 40 3c             	mov    0x3c(%eax),%eax
   18d9c:	8b 50 04             	mov    0x4(%eax),%edx
   18d9f:	8b 44 24 20          	mov    0x20(%esp),%eax
   18da3:	8b 40 3c             	mov    0x3c(%eax),%eax
   18da6:	8b 40 08             	mov    0x8(%eax),%eax
   18da9:	39 c2                	cmp    %eax,%edx
   18dab:	0f 84 ec 04 00 00    	je     1929d <copy_to_cooked+0x743>
				        (c = LAST(tty->secondary)) == 10 ||
   18db1:	8b 44 24 20          	mov    0x20(%esp),%eax
   18db5:	8b 40 3c             	mov    0x3c(%eax),%eax
   18db8:	8b 54 24 20          	mov    0x20(%esp),%edx
   18dbc:	8b 52 3c             	mov    0x3c(%edx),%edx
   18dbf:	8b 52 04             	mov    0x4(%edx),%edx
   18dc2:	83 ea 01             	sub    $0x1,%edx
   18dc5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18dcb:	0f b6 44 10 10       	movzbl 0x10(%eax,%edx,1),%eax
   18dd0:	88 44 24 0f          	mov    %al,0xf(%esp)
				while(!(EMPTY(tty->secondary) ||
   18dd4:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   18dd9:	0f 84 be 04 00 00    	je     1929d <copy_to_cooked+0x743>
				        ((EOF_CHAR(tty) != _POSIX_VDISABLE) && (c == EOF_CHAR(tty))))) {
   18ddf:	8b 44 24 20          	mov    0x20(%esp),%eax
   18de3:	0f b6 40 15          	movzbl 0x15(%eax),%eax
				while(!(EMPTY(tty->secondary) ||
   18de7:	84 c0                	test   %al,%al
   18de9:	0f 84 f7 fe ff ff    	je     18ce6 <copy_to_cooked+0x18c>
				        ((EOF_CHAR(tty) != _POSIX_VDISABLE) && (c == EOF_CHAR(tty))))) {
   18def:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18df4:	8b 44 24 20          	mov    0x20(%esp),%eax
   18df8:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   18dfc:	0f b6 c0             	movzbl %al,%eax
   18dff:	39 c2                	cmp    %eax,%edx
   18e01:	0f 85 df fe ff ff    	jne    18ce6 <copy_to_cooked+0x18c>
				}
				continue;									// 继续读取读队列中字符进行处理.
   18e07:	e9 91 04 00 00       	jmp    1929d <copy_to_cooked+0x743>
			}
			// 如果该字符是删除控制字符ERASE(^H),那么:如果tty的辅助队列为空,或者其最后一个字符是换行符NL(10),或者是文件结束符,则继续处理其他字符.如果本地回显
			// 标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty的写队列中放入擦除字符ERASE.再放入一个擦除字符ERASE,并且调用该tty的写函数.最后将tty辅助
			// 队列头指针后退1字节,继续处理其他字符.同样地,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,
			// 表示禁止使用相应特殊控制字符的功能.
			if ((ERASE_CHAR(tty) != _POSIX_VDISABLE) && (c == ERASE_CHAR(tty))) {
   18e0c:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e10:	0f b6 40 13          	movzbl 0x13(%eax),%eax
   18e14:	84 c0                	test   %al,%al
   18e16:	0f 84 3a 01 00 00    	je     18f56 <copy_to_cooked+0x3fc>
   18e1c:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18e21:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e25:	0f b6 40 13          	movzbl 0x13(%eax),%eax
   18e29:	0f b6 c0             	movzbl %al,%eax
   18e2c:	39 c2                	cmp    %eax,%edx
   18e2e:	0f 85 22 01 00 00    	jne    18f56 <copy_to_cooked+0x3fc>
				if (EMPTY(tty->secondary) ||
   18e34:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e38:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e3b:	8b 50 04             	mov    0x4(%eax),%edx
   18e3e:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e42:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e45:	8b 40 08             	mov    0x8(%eax),%eax
   18e48:	39 c2                	cmp    %eax,%edx
   18e4a:	0f 84 53 04 00 00    	je     192a3 <copy_to_cooked+0x749>
				   (c = LAST(tty->secondary)) == 10 ||
   18e50:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e54:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e57:	8b 54 24 20          	mov    0x20(%esp),%edx
   18e5b:	8b 52 3c             	mov    0x3c(%edx),%edx
   18e5e:	8b 52 04             	mov    0x4(%edx),%edx
   18e61:	83 ea 01             	sub    $0x1,%edx
   18e64:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18e6a:	0f b6 44 10 10       	movzbl 0x10(%eax,%edx,1),%eax
   18e6f:	88 44 24 0f          	mov    %al,0xf(%esp)
				if (EMPTY(tty->secondary) ||
   18e73:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   18e78:	0f 84 25 04 00 00    	je     192a3 <copy_to_cooked+0x749>
				   ((EOF_CHAR(tty) != _POSIX_VDISABLE) &&
   18e7e:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e82:	0f b6 40 15          	movzbl 0x15(%eax),%eax
				   (c = LAST(tty->secondary)) == 10 ||
   18e86:	84 c0                	test   %al,%al
   18e88:	74 18                	je     18ea2 <copy_to_cooked+0x348>
				    (c == EOF_CHAR(tty))))
   18e8a:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18e8f:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e93:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   18e97:	0f b6 c0             	movzbl %al,%eax
				   ((EOF_CHAR(tty) != _POSIX_VDISABLE) &&
   18e9a:	39 c2                	cmp    %eax,%edx
   18e9c:	0f 84 01 04 00 00    	je     192a3 <copy_to_cooked+0x749>
					continue;
				if (L_ECHO(tty)) {							// 若本地回显标志置位.
   18ea2:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ea6:	8b 40 0c             	mov    0xc(%eax),%eax
   18ea9:	83 e0 08             	and    $0x8,%eax
   18eac:	85 c0                	test   %eax,%eax
   18eae:	0f 84 80 00 00 00    	je     18f34 <copy_to_cooked+0x3da>
					if (c < 32)
   18eb4:	80 7c 24 0f 1f       	cmpb   $0x1f,0xf(%esp)
   18eb9:	7f 33                	jg     18eee <copy_to_cooked+0x394>
						PUTCH(127, tty->write_q);
   18ebb:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ebf:	8b 50 38             	mov    0x38(%eax),%edx
   18ec2:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ec6:	8b 40 38             	mov    0x38(%eax),%eax
   18ec9:	8b 40 04             	mov    0x4(%eax),%eax
   18ecc:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18ed1:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ed5:	8b 40 38             	mov    0x38(%eax),%eax
   18ed8:	8b 40 04             	mov    0x4(%eax),%eax
   18edb:	8d 50 01             	lea    0x1(%eax),%edx
   18ede:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ee2:	8b 40 38             	mov    0x38(%eax),%eax
   18ee5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18eeb:	89 50 04             	mov    %edx,0x4(%eax)
					PUTCH(127, tty->write_q);
   18eee:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ef2:	8b 50 38             	mov    0x38(%eax),%edx
   18ef5:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ef9:	8b 40 38             	mov    0x38(%eax),%eax
   18efc:	8b 40 04             	mov    0x4(%eax),%eax
   18eff:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18f04:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f08:	8b 40 38             	mov    0x38(%eax),%eax
   18f0b:	8b 40 04             	mov    0x4(%eax),%eax
   18f0e:	8d 50 01             	lea    0x1(%eax),%edx
   18f11:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f15:	8b 40 38             	mov    0x38(%eax),%eax
   18f18:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18f1e:	89 50 04             	mov    %edx,0x4(%eax)
					tty->write(tty);
   18f21:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f25:	8b 40 30             	mov    0x30(%eax),%eax
   18f28:	83 ec 0c             	sub    $0xc,%esp
   18f2b:	ff 74 24 2c          	pushl  0x2c(%esp)
   18f2f:	ff d0                	call   *%eax
   18f31:	83 c4 10             	add    $0x10,%esp
				}
				DEC(tty->secondary->head);
   18f34:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f38:	8b 40 3c             	mov    0x3c(%eax),%eax
   18f3b:	8b 40 04             	mov    0x4(%eax),%eax
   18f3e:	8d 50 ff             	lea    -0x1(%eax),%edx
   18f41:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f45:	8b 40 3c             	mov    0x3c(%eax),%eax
   18f48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18f4e:	89 50 04             	mov    %edx,0x4(%eax)
				continue;
   18f51:	e9 54 03 00 00       	jmp    192aa <copy_to_cooked+0x750>
		// 如果设置了IXON标志,则使终端停止/开始输出控制字符起作用.如果没有设置此标志,那么停止和开始字符将被作为一般字符供进程读取.在这段代码中,如果读取的字符是停止
		// 字符STOP(^S),则置tty停止标志,让tty暂停输出.同时丢弃该特殊控制字符(不放入辅助队列中),并继续处理其他字符.如果字符是开始字符START(^Q),则复位tty停止
		// 标志,恢复tty输出.同时丢弃该控制字符,并继续处理其他字符.对于控制台来说,这里的tty->write()是console.c中的con_write()函数.因此对于伪终端也是由于设置
		// 了终端stopped标志而会暂停写操作(chr_drv/console.c).对于伪终端也是由于设置了终端stopped标志而会暂停写操作(chr_drv/pty.c).
		// 对于串行终端,也应该在发送终端过程中根据终端stopped标志暂停发送,但本版未实现.
		if (I_IXON(tty)) {
   18f56:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f5a:	8b 00                	mov    (%eax),%eax
   18f5c:	25 00 04 00 00       	and    $0x400,%eax
   18f61:	85 c0                	test   %eax,%eax
   18f63:	0f 84 86 00 00 00    	je     18fef <copy_to_cooked+0x495>
			if ((STOP_CHAR(tty) != _POSIX_VDISABLE) && (c==STOP_CHAR(tty))) {
   18f69:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f6d:	0f b6 40 1a          	movzbl 0x1a(%eax),%eax
   18f71:	84 c0                	test   %al,%al
   18f73:	74 37                	je     18fac <copy_to_cooked+0x452>
   18f75:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18f7a:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f7e:	0f b6 40 1a          	movzbl 0x1a(%eax),%eax
   18f82:	0f b6 c0             	movzbl %al,%eax
   18f85:	39 c2                	cmp    %eax,%edx
   18f87:	75 23                	jne    18fac <copy_to_cooked+0x452>
				tty->stopped = 1;
   18f89:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f8d:	c7 40 2c 01 00 00 00 	movl   $0x1,0x2c(%eax)
				tty->write(tty);
   18f94:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f98:	8b 40 30             	mov    0x30(%eax),%eax
   18f9b:	83 ec 0c             	sub    $0xc,%esp
   18f9e:	ff 74 24 2c          	pushl  0x2c(%esp)
   18fa2:	ff d0                	call   *%eax
   18fa4:	83 c4 10             	add    $0x10,%esp
				continue;
   18fa7:	e9 fe 02 00 00       	jmp    192aa <copy_to_cooked+0x750>
			}
			if ((START_CHAR(tty) != _POSIX_VDISABLE) && (c==START_CHAR(tty))) {
   18fac:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fb0:	0f b6 40 19          	movzbl 0x19(%eax),%eax
   18fb4:	84 c0                	test   %al,%al
   18fb6:	74 37                	je     18fef <copy_to_cooked+0x495>
   18fb8:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18fbd:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fc1:	0f b6 40 19          	movzbl 0x19(%eax),%eax
   18fc5:	0f b6 c0             	movzbl %al,%eax
   18fc8:	39 c2                	cmp    %eax,%edx
   18fca:	75 23                	jne    18fef <copy_to_cooked+0x495>
				tty->stopped = 0;
   18fcc:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fd0:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
				tty->write(tty);
   18fd7:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fdb:	8b 40 30             	mov    0x30(%eax),%eax
   18fde:	83 ec 0c             	sub    $0xc,%esp
   18fe1:	ff 74 24 2c          	pushl  0x2c(%esp)
   18fe5:	ff d0                	call   *%eax
   18fe7:	83 c4 10             	add    $0x10,%esp
				continue;
   18fea:	e9 bb 02 00 00       	jmp    192aa <copy_to_cooked+0x750>
        }
		// 若输入模式标志集中ISIG标志置位,表示终端键盘可以产生信号,则在收到控制字符INTR,QUIT,SUSP或DSUSP时,需要为进程产生相应的信号.如果该字符是键盘中断符(^C),则向
		// 当前进程之进程组中所有进程发送键盘中断信号SIGINT,并继续处理下一字符.如果该字符是退出符(^\),则向当前进程之进程组中所有进程发送键盘退出信号SIGQUIT,并继续处理
		// 下一字符.如果字符是暂停符(^Z),则向当前进程发送暂停信息SIGTSTP.同样,若定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_ISIG(tty)) {
   18fef:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ff3:	8b 40 0c             	mov    0xc(%eax),%eax
   18ff6:	83 e0 01             	and    $0x1,%eax
   18ff9:	85 c0                	test   %eax,%eax
   18ffb:	0f 84 cf 00 00 00    	je     190d0 <copy_to_cooked+0x576>
			if ((INTR_CHAR(tty) != _POSIX_VDISABLE) && (c==INTR_CHAR(tty))) {
   19001:	8b 44 24 20          	mov    0x20(%esp),%eax
   19005:	0f b6 40 11          	movzbl 0x11(%eax),%eax
   19009:	84 c0                	test   %al,%al
   1900b:	74 30                	je     1903d <copy_to_cooked+0x4e3>
   1900d:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   19012:	8b 44 24 20          	mov    0x20(%esp),%eax
   19016:	0f b6 40 11          	movzbl 0x11(%eax),%eax
   1901a:	0f b6 c0             	movzbl %al,%eax
   1901d:	39 c2                	cmp    %eax,%edx
   1901f:	75 1c                	jne    1903d <copy_to_cooked+0x4e3>
				kill_pg(tty->pgrp, SIGINT, 1);
   19021:	8b 44 24 20          	mov    0x20(%esp),%eax
   19025:	8b 40 24             	mov    0x24(%eax),%eax
   19028:	83 ec 04             	sub    $0x4,%esp
   1902b:	6a 01                	push   $0x1
   1902d:	6a 02                	push   $0x2
   1902f:	50                   	push   %eax
   19030:	e8 73 1a ff ff       	call   aaa8 <kill_pg>
   19035:	83 c4 10             	add    $0x10,%esp
				continue;
   19038:	e9 6d 02 00 00       	jmp    192aa <copy_to_cooked+0x750>
			}
			if ((QUIT_CHAR(tty) != _POSIX_VDISABLE) && (c==QUIT_CHAR(tty))) {
   1903d:	8b 44 24 20          	mov    0x20(%esp),%eax
   19041:	0f b6 40 12          	movzbl 0x12(%eax),%eax
   19045:	84 c0                	test   %al,%al
   19047:	74 30                	je     19079 <copy_to_cooked+0x51f>
   19049:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   1904e:	8b 44 24 20          	mov    0x20(%esp),%eax
   19052:	0f b6 40 12          	movzbl 0x12(%eax),%eax
   19056:	0f b6 c0             	movzbl %al,%eax
   19059:	39 c2                	cmp    %eax,%edx
   1905b:	75 1c                	jne    19079 <copy_to_cooked+0x51f>
				kill_pg(tty->pgrp, SIGQUIT, 1);
   1905d:	8b 44 24 20          	mov    0x20(%esp),%eax
   19061:	8b 40 24             	mov    0x24(%eax),%eax
   19064:	83 ec 04             	sub    $0x4,%esp
   19067:	6a 01                	push   $0x1
   19069:	6a 03                	push   $0x3
   1906b:	50                   	push   %eax
   1906c:	e8 37 1a ff ff       	call   aaa8 <kill_pg>
   19071:	83 c4 10             	add    $0x10,%esp
				continue;
   19074:	e9 31 02 00 00       	jmp    192aa <copy_to_cooked+0x750>
			}
			if ((SUSPEND_CHAR(tty) != _POSIX_VDISABLE) && (c == SUSPEND_CHAR(tty))) {
   19079:	8b 44 24 20          	mov    0x20(%esp),%eax
   1907d:	0f b6 40 1b          	movzbl 0x1b(%eax),%eax
   19081:	84 c0                	test   %al,%al
   19083:	74 4b                	je     190d0 <copy_to_cooked+0x576>
   19085:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   1908a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1908e:	0f b6 40 1b          	movzbl 0x1b(%eax),%eax
   19092:	0f b6 c0             	movzbl %al,%eax
   19095:	39 c2                	cmp    %eax,%edx
   19097:	75 37                	jne    190d0 <copy_to_cooked+0x576>
				if (!is_orphaned_pgrp(tty->pgrp))				// 判断一个进程组是否孤儿进程
   19099:	8b 44 24 20          	mov    0x20(%esp),%eax
   1909d:	8b 40 24             	mov    0x24(%eax),%eax
   190a0:	83 ec 0c             	sub    $0xc,%esp
   190a3:	50                   	push   %eax
   190a4:	e8 c7 1b ff ff       	call   ac70 <is_orphaned_pgrp>
   190a9:	83 c4 10             	add    $0x10,%esp
   190ac:	85 c0                	test   %eax,%eax
   190ae:	0f 85 f5 01 00 00    	jne    192a9 <copy_to_cooked+0x74f>
					kill_pg(tty->pgrp, SIGTSTP, 1);
   190b4:	8b 44 24 20          	mov    0x20(%esp),%eax
   190b8:	8b 40 24             	mov    0x24(%eax),%eax
   190bb:	83 ec 04             	sub    $0x4,%esp
   190be:	6a 01                	push   $0x1
   190c0:	6a 14                	push   $0x14
   190c2:	50                   	push   %eax
   190c3:	e8 e0 19 ff ff       	call   aaa8 <kill_pg>
   190c8:	83 c4 10             	add    $0x10,%esp
				continue;
   190cb:	e9 d9 01 00 00       	jmp    192a9 <copy_to_cooked+0x74f>
			}
		}
		// 如果该字符是换行符NL(10),或者是文件结束符EOF(4,^D),表示一行字符已处理完,则把辅助缓冲队列中当前含有字符行数值secondar.data增1.如果在函数tty_read()中取走一行
		// 字符,该值即会减1.
		if (c == 10 || (EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)))
   190d0:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   190d5:	74 20                	je     190f7 <copy_to_cooked+0x59d>
   190d7:	8b 44 24 20          	mov    0x20(%esp),%eax
   190db:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   190df:	84 c0                	test   %al,%al
   190e1:	74 22                	je     19105 <copy_to_cooked+0x5ab>
   190e3:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   190e8:	8b 44 24 20          	mov    0x20(%esp),%eax
   190ec:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   190f0:	0f b6 c0             	movzbl %al,%eax
   190f3:	39 c2                	cmp    %eax,%edx
   190f5:	75 0e                	jne    19105 <copy_to_cooked+0x5ab>
			tty->secondary->data++;
   190f7:	8b 44 24 20          	mov    0x20(%esp),%eax
   190fb:	8b 40 3c             	mov    0x3c(%eax),%eax
   190fe:	8b 10                	mov    (%eax),%edx
   19100:	83 c2 01             	add    $0x1,%edx
   19103:	89 10                	mov    %edx,(%eax)
		// 如果本地模式标志中回显标志ECHO在置位状态,那么,如果字符是换行符NL(10),则将换行符NL(10)和回车符(13)放入tty写队列缓冲区中;如果字符是控制字符(值<32)并且回显控制
		// 字符标志ECHOCTL置位,则将字符'^'和字符c+64放入tty写队列中(也即会显示^C,^H等);否则将该字符直接放入tty写缓冲队列中.最后调用该tty写操作函数.
		if (L_ECHO(tty)) {
   19105:	8b 44 24 20          	mov    0x20(%esp),%eax
   19109:	8b 40 0c             	mov    0xc(%eax),%eax
   1910c:	83 e0 08             	and    $0x8,%eax
   1910f:	85 c0                	test   %eax,%eax
   19111:	0f 84 4a 01 00 00    	je     19261 <copy_to_cooked+0x707>
			if (c == 10) {
   19117:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   1911c:	75 6b                	jne    19189 <copy_to_cooked+0x62f>
				PUTCH(10, tty->write_q);
   1911e:	8b 44 24 20          	mov    0x20(%esp),%eax
   19122:	8b 50 38             	mov    0x38(%eax),%edx
   19125:	8b 44 24 20          	mov    0x20(%esp),%eax
   19129:	8b 40 38             	mov    0x38(%eax),%eax
   1912c:	8b 40 04             	mov    0x4(%eax),%eax
   1912f:	c6 44 02 10 0a       	movb   $0xa,0x10(%edx,%eax,1)
   19134:	8b 44 24 20          	mov    0x20(%esp),%eax
   19138:	8b 40 38             	mov    0x38(%eax),%eax
   1913b:	8b 40 04             	mov    0x4(%eax),%eax
   1913e:	8d 50 01             	lea    0x1(%eax),%edx
   19141:	8b 44 24 20          	mov    0x20(%esp),%eax
   19145:	8b 40 38             	mov    0x38(%eax),%eax
   19148:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1914e:	89 50 04             	mov    %edx,0x4(%eax)
				PUTCH(13, tty->write_q);
   19151:	8b 44 24 20          	mov    0x20(%esp),%eax
   19155:	8b 50 38             	mov    0x38(%eax),%edx
   19158:	8b 44 24 20          	mov    0x20(%esp),%eax
   1915c:	8b 40 38             	mov    0x38(%eax),%eax
   1915f:	8b 40 04             	mov    0x4(%eax),%eax
   19162:	c6 44 02 10 0d       	movb   $0xd,0x10(%edx,%eax,1)
   19167:	8b 44 24 20          	mov    0x20(%esp),%eax
   1916b:	8b 40 38             	mov    0x38(%eax),%eax
   1916e:	8b 40 04             	mov    0x4(%eax),%eax
   19171:	8d 50 01             	lea    0x1(%eax),%edx
   19174:	8b 44 24 20          	mov    0x20(%esp),%eax
   19178:	8b 40 38             	mov    0x38(%eax),%eax
   1917b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19181:	89 50 04             	mov    %edx,0x4(%eax)
   19184:	e9 c5 00 00 00       	jmp    1924e <copy_to_cooked+0x6f4>
			} else if (c < 32) {
   19189:	80 7c 24 0f 1f       	cmpb   $0x1f,0xf(%esp)
   1918e:	0f 8f 83 00 00 00    	jg     19217 <copy_to_cooked+0x6bd>
				if (L_ECHOCTL(tty)) {
   19194:	8b 44 24 20          	mov    0x20(%esp),%eax
   19198:	8b 40 0c             	mov    0xc(%eax),%eax
   1919b:	25 00 02 00 00       	and    $0x200,%eax
   191a0:	85 c0                	test   %eax,%eax
   191a2:	0f 84 a6 00 00 00    	je     1924e <copy_to_cooked+0x6f4>
					PUTCH('^', tty->write_q);
   191a8:	8b 44 24 20          	mov    0x20(%esp),%eax
   191ac:	8b 50 38             	mov    0x38(%eax),%edx
   191af:	8b 44 24 20          	mov    0x20(%esp),%eax
   191b3:	8b 40 38             	mov    0x38(%eax),%eax
   191b6:	8b 40 04             	mov    0x4(%eax),%eax
   191b9:	c6 44 02 10 5e       	movb   $0x5e,0x10(%edx,%eax,1)
   191be:	8b 44 24 20          	mov    0x20(%esp),%eax
   191c2:	8b 40 38             	mov    0x38(%eax),%eax
   191c5:	8b 40 04             	mov    0x4(%eax),%eax
   191c8:	8d 50 01             	lea    0x1(%eax),%edx
   191cb:	8b 44 24 20          	mov    0x20(%esp),%eax
   191cf:	8b 40 38             	mov    0x38(%eax),%eax
   191d2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   191d8:	89 50 04             	mov    %edx,0x4(%eax)
					PUTCH(c + 64, tty->write_q);
   191db:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   191e0:	8d 48 40             	lea    0x40(%eax),%ecx
   191e3:	8b 44 24 20          	mov    0x20(%esp),%eax
   191e7:	8b 50 38             	mov    0x38(%eax),%edx
   191ea:	8b 44 24 20          	mov    0x20(%esp),%eax
   191ee:	8b 40 38             	mov    0x38(%eax),%eax
   191f1:	8b 40 04             	mov    0x4(%eax),%eax
   191f4:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   191f8:	8b 44 24 20          	mov    0x20(%esp),%eax
   191fc:	8b 40 38             	mov    0x38(%eax),%eax
   191ff:	8b 40 04             	mov    0x4(%eax),%eax
   19202:	8d 50 01             	lea    0x1(%eax),%edx
   19205:	8b 44 24 20          	mov    0x20(%esp),%eax
   19209:	8b 40 38             	mov    0x38(%eax),%eax
   1920c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19212:	89 50 04             	mov    %edx,0x4(%eax)
   19215:	eb 37                	jmp    1924e <copy_to_cooked+0x6f4>
				}
			} else
				PUTCH(c, tty->write_q);
   19217:	8b 44 24 20          	mov    0x20(%esp),%eax
   1921b:	8b 50 38             	mov    0x38(%eax),%edx
   1921e:	8b 44 24 20          	mov    0x20(%esp),%eax
   19222:	8b 40 38             	mov    0x38(%eax),%eax
   19225:	8b 40 04             	mov    0x4(%eax),%eax
   19228:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   1922d:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   19231:	8b 44 24 20          	mov    0x20(%esp),%eax
   19235:	8b 40 38             	mov    0x38(%eax),%eax
   19238:	8b 40 04             	mov    0x4(%eax),%eax
   1923b:	8d 50 01             	lea    0x1(%eax),%edx
   1923e:	8b 44 24 20          	mov    0x20(%esp),%eax
   19242:	8b 40 38             	mov    0x38(%eax),%eax
   19245:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1924b:	89 50 04             	mov    %edx,0x4(%eax)
			tty->write(tty);
   1924e:	8b 44 24 20          	mov    0x20(%esp),%eax
   19252:	8b 40 30             	mov    0x30(%eax),%eax
   19255:	83 ec 0c             	sub    $0xc,%esp
   19258:	ff 74 24 2c          	pushl  0x2c(%esp)
   1925c:	ff d0                	call   *%eax
   1925e:	83 c4 10             	add    $0x10,%esp
		}
		// 每一次循环末将处理过的字符放入辅助队列中
		PUTCH(c, tty->secondary);
   19261:	8b 44 24 20          	mov    0x20(%esp),%eax
   19265:	8b 50 3c             	mov    0x3c(%eax),%edx
   19268:	8b 44 24 20          	mov    0x20(%esp),%eax
   1926c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1926f:	8b 40 04             	mov    0x4(%eax),%eax
   19272:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   19277:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1927b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1927f:	8b 40 3c             	mov    0x3c(%eax),%eax
   19282:	8b 40 04             	mov    0x4(%eax),%eax
   19285:	8d 50 01             	lea    0x1(%eax),%edx
   19288:	8b 44 24 20          	mov    0x20(%esp),%eax
   1928c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1928f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19295:	89 50 04             	mov    %edx,0x4(%eax)
   19298:	e9 f6 f8 ff ff       	jmp    18b93 <copy_to_cooked+0x39>
				continue;									// 继续读取读队列中字符进行处理.
   1929d:	90                   	nop
   1929e:	e9 f0 f8 ff ff       	jmp    18b93 <copy_to_cooked+0x39>
					continue;
   192a3:	90                   	nop
   192a4:	e9 ea f8 ff ff       	jmp    18b93 <copy_to_cooked+0x39>
				continue;
   192a9:	90                   	nop
		if (EMPTY(tty->read_q))
   192aa:	e9 e4 f8 ff ff       	jmp    18b93 <copy_to_cooked+0x39>
			break;
   192af:	90                   	nop
   192b0:	eb 01                	jmp    192b3 <copy_to_cooked+0x759>
			break;
   192b2:	90                   	nop
    }
	// 在退出循环体后唤醒等待该辅助缓冲队列的进程(如果有的话).
	wake_up(&tty->secondary->proc_list);
   192b3:	8b 44 24 20          	mov    0x20(%esp),%eax
   192b7:	8b 40 3c             	mov    0x3c(%eax),%eax
   192ba:	83 c0 0c             	add    $0xc,%eax
   192bd:	83 ec 0c             	sub    $0xc,%esp
   192c0:	50                   	push   %eax
   192c1:	e8 87 de fe ff       	call   714d <wake_up>
   192c6:	83 c4 10             	add    $0x10,%esp
}
   192c9:	83 c4 1c             	add    $0x1c,%esp
   192cc:	c3                   	ret    

000192cd <tty_signal>:
 */
// 向使用终端的进程组中所有进程发送信号。
// 在后台进程组中的一个进程访问控制终端时，该函数用于向后台进程组中的所有进程发送SIGTTIN或SIGTTOU信号。无论后台进程组
// 中的进程是否已经阻塞或忽略掉了这两个信号，当前进程都将立刻退出读写操作而返回。
int tty_signal(int sig, struct tty_struct *tty)
{
   192cd:	53                   	push   %ebx
   192ce:	83 ec 08             	sub    $0x8,%esp
	// 我们不希望停止一个孤儿进程组的进程（参见文件kernel/exit.c的说明）。
	// 因此如果当前进程组是孤儿进程组，就出错返回。否则就向当前进程组所有进程发送指定信号。
	if (is_orphaned_pgrp(current->pgrp))
   192d1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   192d6:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   192dc:	83 ec 0c             	sub    $0xc,%esp
   192df:	50                   	push   %eax
   192e0:	e8 8b 19 ff ff       	call   ac70 <is_orphaned_pgrp>
   192e5:	83 c4 10             	add    $0x10,%esp
   192e8:	85 c0                	test   %eax,%eax
   192ea:	74 0a                	je     192f6 <tty_signal+0x29>
		return -EIO;									/* don't stop an orphaned pgrp */
   192ec:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   192f1:	e9 88 00 00 00       	jmp    1937e <tty_signal+0xb1>
	(void) kill_pg(current->pgrp, sig, 1);            	// 发送信号sig。
   192f6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   192fb:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   19301:	83 ec 04             	sub    $0x4,%esp
   19304:	6a 01                	push   $0x1
   19306:	ff 74 24 18          	pushl  0x18(%esp)
   1930a:	50                   	push   %eax
   1930b:	e8 98 17 ff ff       	call   aaa8 <kill_pg>
   19310:	83 c4 10             	add    $0x10,%esp
	// 如果这个信号被当前进程阻塞（屏蔽），或者被当前进程忽略掉，则出错返回。否则，如果当前进程的对信号sig设置了新的处理句柄
	// 那么就返回我们可被中断的信息。否则就返回在系统调用重新启动后可以继续执行的信息。
	if ((current->blocked & (1 << (sig - 1))) ||
   19313:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19318:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   1931e:	8b 54 24 10          	mov    0x10(%esp),%edx
   19322:	83 ea 01             	sub    $0x1,%edx
   19325:	bb 01 00 00 00       	mov    $0x1,%ebx
   1932a:	89 d1                	mov    %edx,%ecx
   1932c:	d3 e3                	shl    %cl,%ebx
   1932e:	89 da                	mov    %ebx,%edx
   19330:	21 d0                	and    %edx,%eax
   19332:	85 c0                	test   %eax,%eax
   19334:	75 1b                	jne    19351 <tty_signal+0x84>
	    ((int) current->sigaction[sig - 1].sa_handler == 1))
   19336:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1933b:	8b 54 24 10          	mov    0x10(%esp),%edx
   1933f:	83 ea 01             	sub    $0x1,%edx
   19342:	83 c2 01             	add    $0x1,%edx
   19345:	c1 e2 04             	shl    $0x4,%edx
   19348:	01 d0                	add    %edx,%eax
   1934a:	8b 00                	mov    (%eax),%eax
	if ((current->blocked & (1 << (sig - 1))) ||
   1934c:	83 f8 01             	cmp    $0x1,%eax
   1934f:	75 07                	jne    19358 <tty_signal+0x8b>
		return -EIO;		/* Our signal will be ignored */
   19351:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   19356:	eb 26                	jmp    1937e <tty_signal+0xb1>
	else if (current->sigaction[sig-1].sa_handler)
   19358:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1935d:	8b 54 24 10          	mov    0x10(%esp),%edx
   19361:	83 ea 01             	sub    $0x1,%edx
   19364:	83 c2 01             	add    $0x1,%edx
   19367:	c1 e2 04             	shl    $0x4,%edx
   1936a:	01 d0                	add    %edx,%eax
   1936c:	8b 00                	mov    (%eax),%eax
   1936e:	85 c0                	test   %eax,%eax
   19370:	74 07                	je     19379 <tty_signal+0xac>
		return -EINTR;		/* We _will_ be interrupted :-) */
   19372:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
   19377:	eb 05                	jmp    1937e <tty_signal+0xb1>
	else
		return -ERESTARTSYS;	/* We _will_ be interrupted :-) */
   19379:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
					/* (but restart after we continue) */
}
   1937e:	83 c4 08             	add    $0x8,%esp
   19381:	5b                   	pop    %ebx
   19382:	c3                   	ret    

00019383 <tty_read>:

// tty读函数。
// 从终端辅助缓冲队列读取指定数量的字符，放到用户指定的缓冲区中。
// 参数：channel - 子设备号；buf - 用户缓冲区指针；nr - 欲读字节数。
int tty_read(unsigned channel, char * buf, int nr)
{
   19383:	83 ec 2c             	sub    $0x2c,%esp
	struct tty_struct * tty;
	struct tty_struct * other_tty = NULL;
   19386:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1938d:	00 
	char c, *b = buf;
   1938e:	8b 44 24 34          	mov    0x34(%esp),%eax
   19392:	89 44 24 18          	mov    %eax,0x18(%esp)
	int minimum, time;

	// 首先判断参数有效性并取终端的tty结构指针。如果tty终端的三个缓冲队列指针都是NULL，则返回EIO出错信息。如果tty
	// 终端是一个伪终端，则再取得另一个对应伪终端的tty结构other_tty。
	if (channel > 255)
   19396:	81 7c 24 30 ff 00 00 	cmpl   $0xff,0x30(%esp)
   1939d:	00 
   1939e:	76 0a                	jbe    193aa <tty_read+0x27>
		return -EIO;
   193a0:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   193a5:	e9 06 04 00 00       	jmp    197b0 <tty_read+0x42d>
	tty = TTY_TABLE(channel);
   193aa:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
   193af:	74 28                	je     193d9 <tty_read+0x56>
   193b1:	83 7c 24 30 3f       	cmpl   $0x3f,0x30(%esp)
   193b6:	77 13                	ja     193cb <tty_read+0x48>
   193b8:	8b 44 24 30          	mov    0x30(%esp),%eax
   193bc:	05 ff ff ff 03       	add    $0x3ffffff,%eax
   193c1:	c1 e0 06             	shl    $0x6,%eax
   193c4:	05 20 28 04 00       	add    $0x42820,%eax
   193c9:	eb 1b                	jmp    193e6 <tty_read+0x63>
   193cb:	8b 44 24 30          	mov    0x30(%esp),%eax
   193cf:	c1 e0 06             	shl    $0x6,%eax
   193d2:	05 20 28 04 00       	add    $0x42820,%eax
   193d7:	eb 0d                	jmp    193e6 <tty_read+0x63>
   193d9:	a1 80 22 03 00       	mov    0x32280,%eax
   193de:	c1 e0 06             	shl    $0x6,%eax
   193e1:	05 20 28 04 00       	add    $0x42820,%eax
   193e6:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!(tty->write_q || tty->read_q || tty->secondary))
   193ea:	8b 44 24 0c          	mov    0xc(%esp),%eax
   193ee:	8b 40 38             	mov    0x38(%eax),%eax
   193f1:	85 c0                	test   %eax,%eax
   193f3:	75 20                	jne    19415 <tty_read+0x92>
   193f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   193f9:	8b 40 34             	mov    0x34(%eax),%eax
   193fc:	85 c0                	test   %eax,%eax
   193fe:	75 15                	jne    19415 <tty_read+0x92>
   19400:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19404:	8b 40 3c             	mov    0x3c(%eax),%eax
   19407:	85 c0                	test   %eax,%eax
   19409:	75 0a                	jne    19415 <tty_read+0x92>
		return -EIO;
   1940b:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   19410:	e9 9b 03 00 00       	jmp    197b0 <tty_read+0x42d>
	// 如果当前进程使用的是这里正在处理的tty终端，但该终端的进程组号却与当前进程组号不同，表示当前进程是后台进程组中
	// 的一个进程，即进程不在前台。于是我们要停止当前进程组的所有进程。因此这里就需要向当前进程组发送SIGTTIN信号，
	// 并返回等待成为前台进程组后再执行读操作。
	if ((current->tty == channel) && (tty->pgrp != current->pgrp))
   19415:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1941a:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   19420:	39 44 24 30          	cmp    %eax,0x30(%esp)
   19424:	75 2c                	jne    19452 <tty_read+0xcf>
   19426:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1942a:	8b 50 24             	mov    0x24(%eax),%edx
   1942d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19432:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   19438:	39 c2                	cmp    %eax,%edx
   1943a:	74 16                	je     19452 <tty_read+0xcf>
		return(tty_signal(SIGTTIN, tty));
   1943c:	83 ec 08             	sub    $0x8,%esp
   1943f:	ff 74 24 14          	pushl  0x14(%esp)
   19443:	6a 15                	push   $0x15
   19445:	e8 83 fe ff ff       	call   192cd <tty_signal>
   1944a:	83 c4 10             	add    $0x10,%esp
   1944d:	e9 5e 03 00 00       	jmp    197b0 <tty_read+0x42d>
	// 如果当前终端是伪终端，那么对应的另一个伪终端就是other_tty。若这里tty是主伪终端，那么other_tty就是对应的从伪
	// 终端，反之亦然。
	if (channel & 0x80)
   19452:	8b 44 24 30          	mov    0x30(%esp),%eax
   19456:	25 80 00 00 00       	and    $0x80,%eax
   1945b:	85 c0                	test   %eax,%eax
   1945d:	74 13                	je     19472 <tty_read+0xef>
		other_tty = tty_table + (channel ^ 0x40);
   1945f:	8b 44 24 30          	mov    0x30(%esp),%eax
   19463:	83 f0 40             	xor    $0x40,%eax
   19466:	c1 e0 06             	shl    $0x6,%eax
   19469:	05 20 28 04 00       	add    $0x42820,%eax
   1946e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	// 然后根据VTIME和VMIN对应的控制字符数组值设置读字符操作超时定时值time和最少需要读取的字符个数minimum。在非规范
	// 模式下，这两个是超时定时值。VMIN表示为了满足读操作而需要读取的最少字符个数。VTIME是一个1/10秒计数计时值。
	time = 10L * tty->termios.c_cc[VTIME];            				// 设置读操作超时定时值。
   19472:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19476:	0f b6 40 16          	movzbl 0x16(%eax),%eax
   1947a:	0f b6 d0             	movzbl %al,%edx
   1947d:	89 d0                	mov    %edx,%eax
   1947f:	c1 e0 02             	shl    $0x2,%eax
   19482:	01 d0                	add    %edx,%eax
   19484:	01 c0                	add    %eax,%eax
   19486:	89 44 24 10          	mov    %eax,0x10(%esp)
	minimum = tty->termios.c_cc[VMIN];              				// 最少需要读取的字符个数。
   1948a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1948e:	0f b6 40 17          	movzbl 0x17(%eax),%eax
   19492:	0f b6 c0             	movzbl %al,%eax
   19495:	89 44 24 14          	mov    %eax,0x14(%esp)
	// 定时值为无限大，以让进程先读取辅助队列中已有字符。如果读到的字符数不足minimum的话，后面代码会根据指定的超时值time
	// 来设置进程的读超时值timeout，并会等待读取其余字符。若此时没有设置最少读取字符数minimum（为0），则将其设置为进程
	// 欲读字符数nr，并且如果设置了超时定时值time的话，就把进程读字符超时定时值timeout设置为系统当前时间值+指定的超时
	// 值time，同时复位time。另外，如果以上设置的最少读取字符数minimum大于进程欲读取的字符数nr，则让minimum=nr。即对
	// 于规范模式下的读取操作，它不受VTIME和VMIN对应控制字符值的约束和控制，它们仅在非规范模式（生模式）操作中起作用。
	if (L_CANON(tty)) {
   19499:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1949d:	8b 40 0c             	mov    0xc(%eax),%eax
   194a0:	83 e0 02             	and    $0x2,%eax
   194a3:	85 c0                	test   %eax,%eax
   194a5:	74 21                	je     194c8 <tty_read+0x145>
		minimum = nr;
   194a7:	8b 44 24 38          	mov    0x38(%esp),%eax
   194ab:	89 44 24 14          	mov    %eax,0x14(%esp)
		current->timeout = 0xffffffff;
   194af:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   194b4:	c7 80 d8 02 00 00 ff 	movl   $0xffffffff,0x2d8(%eax)
   194bb:	ff ff ff 
		time = 0;
   194be:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   194c5:	00 
   194c6:	eb 46                	jmp    1950e <tty_read+0x18b>
	} else if (minimum)
   194c8:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   194cd:	74 11                	je     194e0 <tty_read+0x15d>
		current->timeout = 0xffffffff;
   194cf:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   194d4:	c7 80 d8 02 00 00 ff 	movl   $0xffffffff,0x2d8(%eax)
   194db:	ff ff ff 
   194de:	eb 2e                	jmp    1950e <tty_read+0x18b>
	else {
		minimum = nr;
   194e0:	8b 44 24 38          	mov    0x38(%esp),%eax
   194e4:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (time)
   194e8:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   194ed:	74 17                	je     19506 <tty_read+0x183>
			current->timeout = time + jiffies;
   194ef:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   194f3:	8b 15 00 fb 02 00    	mov    0x2fb00,%edx
   194f9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   194fe:	01 ca                	add    %ecx,%edx
   19500:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
		time = 0;
   19506:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   1950d:	00 
	}
	if (minimum > nr)
   1950e:	8b 44 24 14          	mov    0x14(%esp),%eax
   19512:	3b 44 24 38          	cmp    0x38(%esp),%eax
   19516:	0f 8e 43 02 00 00    	jle    1975f <tty_read+0x3dc>
		minimum = nr;           									// 最多读取要求的字符数。
   1951c:	8b 44 24 38          	mov    0x38(%esp),%eax
   19520:	89 44 24 14          	mov    %eax,0x14(%esp)
	// 现在我们开始从辅助队列中循环取出字符并放到用户缓冲区buf中。当欲读的字节数大于0,则执行以下循环操作。在循环过程中
	// 如果当前终端是伪终端，那么我们就执行其对应的另一个伪终端的写操作函数，让另一个伪终端把字符写入当前伪终端辅助队列
	// 缓冲区中。即让另一终端把写队列缓冲区中字符复制到当前伪终端读队列缓冲区中，并经行规则函数转换后放入当前伪终端辅助
	// 队列中。
	while (nr > 0) {
   19524:	e9 36 02 00 00       	jmp    1975f <tty_read+0x3dc>
		if (other_tty)
   19529:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1952e:	74 13                	je     19543 <tty_read+0x1c0>
			other_tty->write(other_tty);
   19530:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   19534:	8b 40 30             	mov    0x30(%eax),%eax
   19537:	83 ec 0c             	sub    $0xc,%esp
   1953a:	ff 74 24 28          	pushl  0x28(%esp)
   1953e:	ff d0                	call   *%eax
   19540:	83 c4 10             	add    $0x10,%esp
		// 如果tty辅助缓冲队列为空，或者设置了规范模式标志并且tty读队列缓冲区未满，并且辅助队列中字符行数为0,那么，如果没
		// 有设置过进程读字符超时值（为0），或者当前进程目前收到信号，就先退出循环体。否则如果本终端是一个从伪终端，并且其
		// 对应的主伪终端已经挂断，那么我们也退出循环体。如果不是以上这两种情况，我们就让当前进程进入可中断睡眠状态，返回后
		// 继续处理。由于规范模式时内核以行为单位为用户提供数据，因此在该模式下辅助队列中必须至少有一行字符可供取胜，即
		// secondary.data起码是1才行。
		cli();
   19543:	fa                   	cli    
		if (EMPTY(tty->secondary) || (L_CANON(tty) &&
   19544:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19548:	8b 40 3c             	mov    0x3c(%eax),%eax
   1954b:	8b 50 04             	mov    0x4(%eax),%edx
   1954e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19552:	8b 40 3c             	mov    0x3c(%eax),%eax
   19555:	8b 40 08             	mov    0x8(%eax),%eax
   19558:	39 c2                	cmp    %eax,%edx
   1955a:	74 43                	je     1959f <tty_read+0x21c>
   1955c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19560:	8b 40 0c             	mov    0xc(%eax),%eax
   19563:	83 e0 02             	and    $0x2,%eax
   19566:	85 c0                	test   %eax,%eax
   19568:	0f 84 9f 00 00 00    	je     1960d <tty_read+0x28a>
		    !FULL(tty->read_q) && !tty->secondary->data)) {
   1956e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19572:	8b 40 34             	mov    0x34(%eax),%eax
   19575:	8b 50 08             	mov    0x8(%eax),%edx
   19578:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1957c:	8b 40 34             	mov    0x34(%eax),%eax
   1957f:	8b 40 04             	mov    0x4(%eax),%eax
   19582:	29 c2                	sub    %eax,%edx
   19584:	89 d0                	mov    %edx,%eax
   19586:	83 e8 01             	sub    $0x1,%eax
   19589:	25 ff 03 00 00       	and    $0x3ff,%eax
		if (EMPTY(tty->secondary) || (L_CANON(tty) &&
   1958e:	85 c0                	test   %eax,%eax
   19590:	74 7b                	je     1960d <tty_read+0x28a>
		    !FULL(tty->read_q) && !tty->secondary->data)) {
   19592:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19596:	8b 40 3c             	mov    0x3c(%eax),%eax
   19599:	8b 00                	mov    (%eax),%eax
   1959b:	85 c0                	test   %eax,%eax
   1959d:	75 6e                	jne    1960d <tty_read+0x28a>
			if (!current->timeout ||
   1959f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   195a4:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
   195aa:	85 c0                	test   %eax,%eax
   195ac:	74 1b                	je     195c9 <tty_read+0x246>
			  (current->signal & ~current->blocked)) {
   195ae:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   195b3:	8b 50 0c             	mov    0xc(%eax),%edx
   195b6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   195bb:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   195c1:	f7 d0                	not    %eax
   195c3:	21 d0                	and    %edx,%eax
			if (!current->timeout ||
   195c5:	85 c0                	test   %eax,%eax
   195c7:	74 06                	je     195cf <tty_read+0x24c>
			  	sti();
   195c9:	fb                   	sti    
				break;
   195ca:	e9 9e 01 00 00       	jmp    1976d <tty_read+0x3ea>
			}
			if (IS_A_PTY_SLAVE(channel) && C_HUP(other_tty))
   195cf:	8b 44 24 30          	mov    0x30(%esp),%eax
   195d3:	25 c0 00 00 00       	and    $0xc0,%eax
   195d8:	3d c0 00 00 00       	cmp    $0xc0,%eax
   195dd:	75 12                	jne    195f1 <tty_read+0x26e>
   195df:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   195e3:	8b 40 08             	mov    0x8(%eax),%eax
   195e6:	83 e0 0f             	and    $0xf,%eax
   195e9:	85 c0                	test   %eax,%eax
   195eb:	0f 84 7b 01 00 00    	je     1976c <tty_read+0x3e9>
				break;
			interruptible_sleep_on(&tty->secondary->proc_list);
   195f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   195f5:	8b 40 3c             	mov    0x3c(%eax),%eax
   195f8:	83 c0 0c             	add    $0xc,%eax
   195fb:	83 ec 0c             	sub    $0xc,%esp
   195fe:	50                   	push   %eax
   195ff:	e8 17 db fe ff       	call   711b <interruptible_sleep_on>
   19604:	83 c4 10             	add    $0x10,%esp
			sti();
   19607:	fb                   	sti    
			continue;
   19608:	e9 52 01 00 00       	jmp    1975f <tty_read+0x3dc>
		}
		sti();
   1960d:	fb                   	sti    
		// 现在还没有遇到文件结束符或者正处于原始（非规范）模式。在这种模式中用户以字符流作为读取对象，也不识别其中的控制字符
		// （如文件结束符）。于是将字符直接放入用户数据缓冲区buf中，并把欲读字符数减1.此时如果欲读字符数已为0则中断循环。另外
		// 如果终端处于规范模式并且读取的字符是换行符NL（10），则也退出循环。除此之外，只要还没有取完欲读字符数nr并且辅助队列
		// 不空，就继续取队列中的字符。
		do {
			GETCH(tty->secondary, c);
   1960e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19612:	8b 50 3c             	mov    0x3c(%eax),%edx
   19615:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19619:	8b 40 3c             	mov    0x3c(%eax),%eax
   1961c:	8b 40 08             	mov    0x8(%eax),%eax
   1961f:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   19624:	88 44 24 0b          	mov    %al,0xb(%esp)
   19628:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1962c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1962f:	8b 40 08             	mov    0x8(%eax),%eax
   19632:	8d 50 01             	lea    0x1(%eax),%edx
   19635:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19639:	8b 40 3c             	mov    0x3c(%eax),%eax
   1963c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19642:	89 50 08             	mov    %edx,0x8(%eax)
			if ((EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)) || c == 10)
   19645:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19649:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   1964d:	84 c0                	test   %al,%al
   1964f:	74 14                	je     19665 <tty_read+0x2e2>
   19651:	0f be 54 24 0b       	movsbl 0xb(%esp),%edx
   19656:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1965a:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   1965e:	0f b6 c0             	movzbl %al,%eax
   19661:	39 c2                	cmp    %eax,%edx
   19663:	74 07                	je     1966c <tty_read+0x2e9>
   19665:	80 7c 24 0b 0a       	cmpb   $0xa,0xb(%esp)
   1966a:	75 0e                	jne    1967a <tty_read+0x2f7>
				tty->secondary->data--;
   1966c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19670:	8b 40 3c             	mov    0x3c(%eax),%eax
   19673:	8b 10                	mov    (%eax),%edx
   19675:	83 ea 01             	sub    $0x1,%edx
   19678:	89 10                	mov    %edx,(%eax)
			if ((EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)) && L_CANON(tty))
   1967a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1967e:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   19682:	84 c0                	test   %al,%al
   19684:	74 22                	je     196a8 <tty_read+0x325>
   19686:	0f be 54 24 0b       	movsbl 0xb(%esp),%edx
   1968b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1968f:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   19693:	0f b6 c0             	movzbl %al,%eax
   19696:	39 c2                	cmp    %eax,%edx
   19698:	75 0e                	jne    196a8 <tty_read+0x325>
   1969a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1969e:	8b 40 0c             	mov    0xc(%eax),%eax
   196a1:	83 e0 02             	and    $0x2,%eax
   196a4:	85 c0                	test   %eax,%eax
   196a6:	75 67                	jne    1970f <tty_read+0x38c>
				break;
			else {
				put_fs_byte(c, b++);
   196a8:	8b 44 24 18          	mov    0x18(%esp),%eax
   196ac:	8d 50 01             	lea    0x1(%eax),%edx
   196af:	89 54 24 18          	mov    %edx,0x18(%esp)
   196b3:	0f be 54 24 0b       	movsbl 0xb(%esp),%edx
   196b8:	83 ec 08             	sub    $0x8,%esp
   196bb:	50                   	push   %eax
   196bc:	52                   	push   %edx
   196bd:	e8 3a f3 ff ff       	call   189fc <put_fs_byte>
   196c2:	83 c4 10             	add    $0x10,%esp
				if (!--nr)
   196c5:	83 6c 24 38 01       	subl   $0x1,0x38(%esp)
   196ca:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   196cf:	74 3a                	je     1970b <tty_read+0x388>
					break;
			}
			if (c == 10 && L_CANON(tty))
   196d1:	80 7c 24 0b 0a       	cmpb   $0xa,0xb(%esp)
   196d6:	75 0e                	jne    196e6 <tty_read+0x363>
   196d8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196dc:	8b 40 0c             	mov    0xc(%eax),%eax
   196df:	83 e0 02             	and    $0x2,%eax
   196e2:	85 c0                	test   %eax,%eax
   196e4:	75 28                	jne    1970e <tty_read+0x38b>
				break;
		} while (nr > 0 && !EMPTY(tty->secondary));
   196e6:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   196eb:	7e 22                	jle    1970f <tty_read+0x38c>
   196ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196f1:	8b 40 3c             	mov    0x3c(%eax),%eax
   196f4:	8b 50 04             	mov    0x4(%eax),%edx
   196f7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196fb:	8b 40 3c             	mov    0x3c(%eax),%eax
   196fe:	8b 40 08             	mov    0x8(%eax),%eax
   19701:	39 c2                	cmp    %eax,%edx
   19703:	0f 85 05 ff ff ff    	jne    1960e <tty_read+0x28b>
   19709:	eb 04                	jmp    1970f <tty_read+0x38c>
					break;
   1970b:	90                   	nop
   1970c:	eb 01                	jmp    1970f <tty_read+0x38c>
				break;
   1970e:	90                   	nop
		// 执行到此，那么如果tty终端处于规范模式下，说明我们可能读到了换行符或者遇到了文件结束符。如果是处于非规范模式下，那么
		// 说明我们已经读取了nr个字符，或者辅助队列已经被取空了。于是我们首先唤醒等待队列的进程，然后看看是否设置过超时定时值
		// time。如果超时定时值time不为0,我们就要求等待一定的时间让其他进程可以把字符写入读队列中。于是设置进程读超时定时值
		// 为系统当前时间jiffies + 读超时值time。当然，如果终端处于规范模式，或者已经读取nr个字符，我们就可以直接退出这个大
		// 循环了。
		wake_up(&tty->read_q->proc_list);
   1970f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19713:	8b 40 34             	mov    0x34(%eax),%eax
   19716:	83 c0 0c             	add    $0xc,%eax
   19719:	83 ec 0c             	sub    $0xc,%esp
   1971c:	50                   	push   %eax
   1971d:	e8 2b da fe ff       	call   714d <wake_up>
   19722:	83 c4 10             	add    $0x10,%esp
		if (time)
   19725:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   1972a:	74 17                	je     19743 <tty_read+0x3c0>
			current->timeout = time + jiffies;
   1972c:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   19730:	8b 15 00 fb 02 00    	mov    0x2fb00,%edx
   19736:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1973b:	01 ca                	add    %ecx,%edx
   1973d:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
		if (L_CANON(tty) || b - buf >= minimum)
   19743:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19747:	8b 40 0c             	mov    0xc(%eax),%eax
   1974a:	83 e0 02             	and    $0x2,%eax
   1974d:	85 c0                	test   %eax,%eax
   1974f:	75 1c                	jne    1976d <tty_read+0x3ea>
   19751:	8b 44 24 18          	mov    0x18(%esp),%eax
   19755:	2b 44 24 34          	sub    0x34(%esp),%eax
   19759:	39 44 24 14          	cmp    %eax,0x14(%esp)
   1975d:	7e 0e                	jle    1976d <tty_read+0x3ea>
	while (nr > 0) {
   1975f:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   19764:	0f 8f bf fd ff ff    	jg     19529 <tty_read+0x1a6>
   1976a:	eb 01                	jmp    1976d <tty_read+0x3ea>
				break;
   1976c:	90                   	nop
			break;
    }
	// 此时读取tty字符循环操作结束，因此复位进程的读取超时定时值timeout。如果此时当前进程已收到信号并且还没有读取到任何字符
	// 则以重新启动系统调用号“-ERESTARTSYS”返回。否则就返回已读取的字符数（b-buf）。
	current->timeout = 0;
   1976d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19772:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
   19779:	00 00 00 
	if ((current->signal & ~current->blocked) && !(b - buf))
   1977c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19781:	8b 50 0c             	mov    0xc(%eax),%edx
   19784:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19789:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   1978f:	f7 d0                	not    %eax
   19791:	21 d0                	and    %edx,%eax
   19793:	85 c0                	test   %eax,%eax
   19795:	74 11                	je     197a8 <tty_read+0x425>
   19797:	8b 44 24 18          	mov    0x18(%esp),%eax
   1979b:	3b 44 24 34          	cmp    0x34(%esp),%eax
   1979f:	75 07                	jne    197a8 <tty_read+0x425>
		return -ERESTARTSYS;
   197a1:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
   197a6:	eb 08                	jmp    197b0 <tty_read+0x42d>
	return (b - buf);
   197a8:	8b 44 24 18          	mov    0x18(%esp),%eax
   197ac:	2b 44 24 34          	sub    0x34(%esp),%eax
}
   197b0:	83 c4 2c             	add    $0x2c,%esp
   197b3:	c3                   	ret    

000197b4 <tty_write>:
// tty写函数.
// 把用户缓冲区中的字符放入tty写队列缓冲区中.
// 参数:channel - 子设备号;buf - 缓冲区指针;nr - 写字节数.
// 返回已写字节数.
int tty_write(unsigned channel, char * buf, int nr)
{
   197b4:	83 ec 1c             	sub    $0x1c,%esp
	static int cr_flag=0;
	struct tty_struct * tty;
	char c, *b = buf;
   197b7:	8b 44 24 24          	mov    0x24(%esp),%eax
   197bb:	89 44 24 08          	mov    %eax,0x8(%esp)

	// 首先判断参数有效性并取终端的tty结构指针.如果tty终端的三个缓冲队列指针都是NULL,则返回EIO出错信息.
	if (channel > 255)
   197bf:	81 7c 24 20 ff 00 00 	cmpl   $0xff,0x20(%esp)
   197c6:	00 
   197c7:	76 0a                	jbe    197d3 <tty_write+0x1f>
		return -EIO;
   197c9:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   197ce:	e9 b3 02 00 00       	jmp    19a86 <tty_write+0x2d2>
	tty = TTY_TABLE(channel);
   197d3:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   197d8:	74 28                	je     19802 <tty_write+0x4e>
   197da:	83 7c 24 20 3f       	cmpl   $0x3f,0x20(%esp)
   197df:	77 13                	ja     197f4 <tty_write+0x40>
   197e1:	8b 44 24 20          	mov    0x20(%esp),%eax
   197e5:	05 ff ff ff 03       	add    $0x3ffffff,%eax
   197ea:	c1 e0 06             	shl    $0x6,%eax
   197ed:	05 20 28 04 00       	add    $0x42820,%eax
   197f2:	eb 1b                	jmp    1980f <tty_write+0x5b>
   197f4:	8b 44 24 20          	mov    0x20(%esp),%eax
   197f8:	c1 e0 06             	shl    $0x6,%eax
   197fb:	05 20 28 04 00       	add    $0x42820,%eax
   19800:	eb 0d                	jmp    1980f <tty_write+0x5b>
   19802:	a1 80 22 03 00       	mov    0x32280,%eax
   19807:	c1 e0 06             	shl    $0x6,%eax
   1980a:	05 20 28 04 00       	add    $0x42820,%eax
   1980f:	89 44 24 04          	mov    %eax,0x4(%esp)
	if (!(tty->write_q || tty->read_q || tty->secondary))
   19813:	8b 44 24 04          	mov    0x4(%esp),%eax
   19817:	8b 40 38             	mov    0x38(%eax),%eax
   1981a:	85 c0                	test   %eax,%eax
   1981c:	75 20                	jne    1983e <tty_write+0x8a>
   1981e:	8b 44 24 04          	mov    0x4(%esp),%eax
   19822:	8b 40 34             	mov    0x34(%eax),%eax
   19825:	85 c0                	test   %eax,%eax
   19827:	75 15                	jne    1983e <tty_write+0x8a>
   19829:	8b 44 24 04          	mov    0x4(%esp),%eax
   1982d:	8b 40 3c             	mov    0x3c(%eax),%eax
   19830:	85 c0                	test   %eax,%eax
   19832:	75 0a                	jne    1983e <tty_write+0x8a>
		return -EIO;
   19834:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   19839:	e9 48 02 00 00       	jmp    19a86 <tty_write+0x2d2>
	// 如果若终端本地模式标志集中设置了TOSTOP,表示后台进程输出时需要发送信号SIGTTOU.如果当前进程使用的是这里正在处理的tty终端,但该终端的进程组号却与当前
	// 进程组号不同,即表示当前进程是后台进程组中的一个进程,即进程不在前台.于是我们要停止当前进程组的所有进程.因此这里就需要向当前进程组发送SIGTTOU信号,并返回
	// 等待成为前台进程组后再执行写操作.
	if (L_TOSTOP(tty) &&
   1983e:	8b 44 24 04          	mov    0x4(%esp),%eax
   19842:	8b 40 0c             	mov    0xc(%eax),%eax
   19845:	25 00 01 00 00       	and    $0x100,%eax
   1984a:	85 c0                	test   %eax,%eax
   1984c:	0f 84 1e 02 00 00    	je     19a70 <tty_write+0x2bc>
	    (current->tty == channel) && (tty->pgrp != current->pgrp))
   19852:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19857:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
	if (L_TOSTOP(tty) &&
   1985d:	39 44 24 20          	cmp    %eax,0x20(%esp)
   19861:	0f 85 09 02 00 00    	jne    19a70 <tty_write+0x2bc>
	    (current->tty == channel) && (tty->pgrp != current->pgrp))
   19867:	8b 44 24 04          	mov    0x4(%esp),%eax
   1986b:	8b 50 24             	mov    0x24(%eax),%edx
   1986e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19873:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   19879:	39 c2                	cmp    %eax,%edx
   1987b:	0f 84 ef 01 00 00    	je     19a70 <tty_write+0x2bc>
		return(tty_signal(SIGTTOU, tty));
   19881:	83 ec 08             	sub    $0x8,%esp
   19884:	ff 74 24 0c          	pushl  0xc(%esp)
   19888:	6a 16                	push   $0x16
   1988a:	e8 3e fa ff ff       	call   192cd <tty_signal>
   1988f:	83 c4 10             	add    $0x10,%esp
   19892:	e9 ef 01 00 00       	jmp    19a86 <tty_write+0x2d2>
	// 现在我们开始从用户缓冲区buf中循环取出字符并放到写队列缓冲区中.当欲写字节数大于0,则执行以下循环操作.在循环过程中,如果此时tty写队列已满,则当前进程进入可中断
	// 睡眠状态.如果当前进程有信号要处理,则退出循环体.
	while (nr > 0) {
		sleep_if_full(tty->write_q);
   19897:	8b 44 24 04          	mov    0x4(%esp),%eax
   1989b:	8b 40 38             	mov    0x38(%eax),%eax
   1989e:	83 ec 0c             	sub    $0xc,%esp
   198a1:	50                   	push   %eax
   198a2:	e8 18 f2 ff ff       	call   18abf <sleep_if_full>
   198a7:	83 c4 10             	add    $0x10,%esp
		if (current->signal & ~current->blocked)
   198aa:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   198af:	8b 50 0c             	mov    0xc(%eax),%edx
   198b2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   198b7:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   198bd:	f7 d0                	not    %eax
   198bf:	21 d0                	and    %edx,%eax
   198c1:	85 c0                	test   %eax,%eax
   198c3:	0f 85 b4 01 00 00    	jne    19a7d <tty_write+0x2c9>
			break;
		// 当要写的字符数nr还大于0并且tty写队列缓冲区不满,则循环执行以下操作.首先从用户缓冲区中取1字节.
		while (nr > 0 && !FULL(tty->write_q)) {
   198c9:	e9 54 01 00 00       	jmp    19a22 <tty_write+0x26e>
			c = get_fs_byte(b);
   198ce:	83 ec 0c             	sub    $0xc,%esp
   198d1:	ff 74 24 14          	pushl  0x14(%esp)
   198d5:	e8 14 f1 ff ff       	call   189ee <get_fs_byte>
   198da:	83 c4 10             	add    $0x10,%esp
   198dd:	88 44 24 0f          	mov    %al,0xf(%esp)
			// 如果终端输出模式标志集中的执行输出处理标志OPOST置位,则执行对字符的后处理操作.
			if (O_POST(tty)) {
   198e1:	8b 44 24 04          	mov    0x4(%esp),%eax
   198e5:	8b 40 04             	mov    0x4(%eax),%eax
   198e8:	83 e0 01             	and    $0x1,%eax
   198eb:	85 c0                	test   %eax,%eax
   198ed:	0f 84 e4 00 00 00    	je     199d7 <tty_write+0x223>
				// 如果该字符是回车符'\r'(CR,13)并且回车符转换行标志OCRNL置位,则将该字符换成行符'\n'(NL,10);
				if (c == '\r' && O_CRNL(tty))
   198f3:	80 7c 24 0f 0d       	cmpb   $0xd,0xf(%esp)
   198f8:	75 15                	jne    1990f <tty_write+0x15b>
   198fa:	8b 44 24 04          	mov    0x4(%esp),%eax
   198fe:	8b 40 04             	mov    0x4(%eax),%eax
   19901:	83 e0 08             	and    $0x8,%eax
   19904:	85 c0                	test   %eax,%eax
   19906:	74 07                	je     1990f <tty_write+0x15b>
					c = '\n';
   19908:	c6 44 24 0f 0a       	movb   $0xa,0xf(%esp)
   1990d:	eb 1a                	jmp    19929 <tty_write+0x175>
				// 如果该字符是换行符'\n'(NL,10)并且换行转回车功能标志ONLRET置位的话,则将该字符换成回车符'\r'(CR,13).
				else if (c == '\n' && O_NLRET(tty))
   1990f:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   19914:	75 13                	jne    19929 <tty_write+0x175>
   19916:	8b 44 24 04          	mov    0x4(%esp),%eax
   1991a:	8b 40 04             	mov    0x4(%eax),%eax
   1991d:	83 e0 20             	and    $0x20,%eax
   19920:	85 c0                	test   %eax,%eax
   19922:	74 05                	je     19929 <tty_write+0x175>
					c = '\r';
   19924:	c6 44 24 0f 0d       	movb   $0xd,0xf(%esp)
				// 如果该字符是换行符'\n'并且回车标志cr_flag没有置位,但换行转回车-换行标志ONLCR置位的话,则将cr_flag标志置位,并将一回车符放入写队列中.然后继续处理下一个字符.
				if (c == '\n' && !cr_flag && O_NLCR(tty)) {
   19929:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   1992e:	75 59                	jne    19989 <tty_write+0x1d5>
   19930:	a1 00 fe 03 00       	mov    0x3fe00,%eax
   19935:	85 c0                	test   %eax,%eax
   19937:	75 50                	jne    19989 <tty_write+0x1d5>
   19939:	8b 44 24 04          	mov    0x4(%esp),%eax
   1993d:	8b 40 04             	mov    0x4(%eax),%eax
   19940:	83 e0 04             	and    $0x4,%eax
   19943:	85 c0                	test   %eax,%eax
   19945:	74 42                	je     19989 <tty_write+0x1d5>
					cr_flag = 1;
   19947:	c7 05 00 fe 03 00 01 	movl   $0x1,0x3fe00
   1994e:	00 00 00 
					PUTCH(13, tty->write_q);
   19951:	8b 44 24 04          	mov    0x4(%esp),%eax
   19955:	8b 50 38             	mov    0x38(%eax),%edx
   19958:	8b 44 24 04          	mov    0x4(%esp),%eax
   1995c:	8b 40 38             	mov    0x38(%eax),%eax
   1995f:	8b 40 04             	mov    0x4(%eax),%eax
   19962:	c6 44 02 10 0d       	movb   $0xd,0x10(%edx,%eax,1)
   19967:	8b 44 24 04          	mov    0x4(%esp),%eax
   1996b:	8b 40 38             	mov    0x38(%eax),%eax
   1996e:	8b 40 04             	mov    0x4(%eax),%eax
   19971:	8d 50 01             	lea    0x1(%eax),%edx
   19974:	8b 44 24 04          	mov    0x4(%esp),%eax
   19978:	8b 40 38             	mov    0x38(%eax),%eax
   1997b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19981:	89 50 04             	mov    %edx,0x4(%eax)
					continue;
   19984:	e9 99 00 00 00       	jmp    19a22 <tty_write+0x26e>
				}
				// 如果小写转大写标志OLCUC置位的话,就将该字符转成大写字符.
				if (O_LCUC(tty))
   19989:	8b 44 24 04          	mov    0x4(%esp),%eax
   1998d:	8b 40 04             	mov    0x4(%eax),%eax
   19990:	83 e0 02             	and    $0x2,%eax
   19993:	85 c0                	test   %eax,%eax
   19995:	74 40                	je     199d7 <tty_write+0x223>
					c = toupper(c);									// 小写转成大写字符.
   19997:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1999c:	a2 20 68 04 00       	mov    %al,0x46820
   199a1:	0f b6 05 20 68 04 00 	movzbl 0x46820,%eax
   199a8:	0f be c0             	movsbl %al,%eax
   199ab:	83 c0 01             	add    $0x1,%eax
   199ae:	05 a0 f5 02 00       	add    $0x2f5a0,%eax
   199b3:	0f b6 00             	movzbl (%eax),%eax
   199b6:	0f b6 c0             	movzbl %al,%eax
   199b9:	83 e0 02             	and    $0x2,%eax
   199bc:	85 c0                	test   %eax,%eax
   199be:	74 0c                	je     199cc <tty_write+0x218>
   199c0:	0f b6 05 20 68 04 00 	movzbl 0x46820,%eax
   199c7:	83 e8 20             	sub    $0x20,%eax
   199ca:	eb 07                	jmp    199d3 <tty_write+0x21f>
   199cc:	0f b6 05 20 68 04 00 	movzbl 0x46820,%eax
   199d3:	88 44 24 0f          	mov    %al,0xf(%esp)
			}
			// 接着把用户数据缓冲指针b前移1字节;欲写字节数减1字节;复位cr_flag标志,并将该字节放入tty写队列中.
			b++; nr--;
   199d7:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
   199dc:	83 6c 24 28 01       	subl   $0x1,0x28(%esp)
			cr_flag = 0;
   199e1:	c7 05 00 fe 03 00 00 	movl   $0x0,0x3fe00
   199e8:	00 00 00 
			PUTCH(c, tty->write_q);
   199eb:	8b 44 24 04          	mov    0x4(%esp),%eax
   199ef:	8b 50 38             	mov    0x38(%eax),%edx
   199f2:	8b 44 24 04          	mov    0x4(%esp),%eax
   199f6:	8b 40 38             	mov    0x38(%eax),%eax
   199f9:	8b 40 04             	mov    0x4(%eax),%eax
   199fc:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   19a01:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   19a05:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a09:	8b 40 38             	mov    0x38(%eax),%eax
   19a0c:	8b 40 04             	mov    0x4(%eax),%eax
   19a0f:	8d 50 01             	lea    0x1(%eax),%edx
   19a12:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a16:	8b 40 38             	mov    0x38(%eax),%eax
   19a19:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19a1f:	89 50 04             	mov    %edx,0x4(%eax)
		while (nr > 0 && !FULL(tty->write_q)) {
   19a22:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   19a27:	7e 28                	jle    19a51 <tty_write+0x29d>
   19a29:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a2d:	8b 40 38             	mov    0x38(%eax),%eax
   19a30:	8b 50 08             	mov    0x8(%eax),%edx
   19a33:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a37:	8b 40 38             	mov    0x38(%eax),%eax
   19a3a:	8b 40 04             	mov    0x4(%eax),%eax
   19a3d:	29 c2                	sub    %eax,%edx
   19a3f:	89 d0                	mov    %edx,%eax
   19a41:	83 e8 01             	sub    $0x1,%eax
   19a44:	25 ff 03 00 00       	and    $0x3ff,%eax
   19a49:	85 c0                	test   %eax,%eax
   19a4b:	0f 85 7d fe ff ff    	jne    198ce <tty_write+0x11a>
		}
		// 若要求的字符全部写完,或者写队列已满,则程序退出循环.此时会调用对应tty写函数,把写队列缓冲区中的字符显示在控制台屏幕上,或者通过串行端口发送出去.如果当前处理的tty
		// 是控制台终端,那么tty->write()调用的是con_write();如果tty是串行终端,则tty->write()调用的是rs_write()函数.若还有字节要写,则等待写队列中字符取走.
		// 所以这里调用调度程序,先去执行其他任务.
		tty->write(tty);
   19a51:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a55:	8b 40 30             	mov    0x30(%eax),%eax
   19a58:	83 ec 0c             	sub    $0xc,%esp
   19a5b:	ff 74 24 10          	pushl  0x10(%esp)
   19a5f:	ff d0                	call   *%eax
   19a61:	83 c4 10             	add    $0x10,%esp
		if (nr > 0)
   19a64:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   19a69:	7e 05                	jle    19a70 <tty_write+0x2bc>
			schedule();
   19a6b:	e8 d3 d3 fe ff       	call   6e43 <schedule>
	while (nr > 0) {
   19a70:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   19a75:	0f 8f 1c fe ff ff    	jg     19897 <tty_write+0xe3>
   19a7b:	eb 01                	jmp    19a7e <tty_write+0x2ca>
			break;
   19a7d:	90                   	nop
        }
	return (b - buf);												// 最后返回写入的字节数.
   19a7e:	8b 44 24 08          	mov    0x8(%esp),%eax
   19a82:	2b 44 24 24          	sub    0x24(%esp),%eax
}
   19a86:	83 c4 1c             	add    $0x1c,%esp
   19a89:	c3                   	ret    

00019a8a <do_tty_interrupt>:
// tty中断处理调用函数 - 字符规范模式处理.
// 参数:tty - 指定的tty终端号.
// 将指定tty终端队列缓冲区中的字符复制或转换成规范(熟)模式字符并存放在辅助队列中.该函数会在串口读字符中断(rs_io.s)和键盘中断(
// kerboard.S)中被调用.
void do_tty_interrupt(int tty)
{
   19a8a:	83 ec 0c             	sub    $0xc,%esp
	copy_to_cooked(TTY_TABLE(tty));
   19a8d:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   19a92:	74 26                	je     19aba <do_tty_interrupt+0x30>
   19a94:	83 7c 24 10 3f       	cmpl   $0x3f,0x10(%esp)
   19a99:	7f 11                	jg     19aac <do_tty_interrupt+0x22>
   19a9b:	8b 44 24 10          	mov    0x10(%esp),%eax
   19a9f:	83 e8 01             	sub    $0x1,%eax
   19aa2:	c1 e0 06             	shl    $0x6,%eax
   19aa5:	05 20 28 04 00       	add    $0x42820,%eax
   19aaa:	eb 1b                	jmp    19ac7 <do_tty_interrupt+0x3d>
   19aac:	8b 44 24 10          	mov    0x10(%esp),%eax
   19ab0:	c1 e0 06             	shl    $0x6,%eax
   19ab3:	05 20 28 04 00       	add    $0x42820,%eax
   19ab8:	eb 0d                	jmp    19ac7 <do_tty_interrupt+0x3d>
   19aba:	a1 80 22 03 00       	mov    0x32280,%eax
   19abf:	c1 e0 06             	shl    $0x6,%eax
   19ac2:	05 20 28 04 00       	add    $0x42820,%eax
   19ac7:	83 ec 0c             	sub    $0xc,%esp
   19aca:	50                   	push   %eax
   19acb:	e8 8a f0 ff ff       	call   18b5a <copy_to_cooked>
   19ad0:	83 c4 10             	add    $0x10,%esp
}
   19ad3:	90                   	nop
   19ad4:	83 c4 0c             	add    $0xc,%esp
   19ad7:	c3                   	ret    

00019ad8 <chr_dev_init>:

//字符设备初始化函数.空,为以后扩展做准备.
void chr_dev_init(void)
{
}
   19ad8:	90                   	nop
   19ad9:	c3                   	ret    

00019ada <tty_init>:

// tty终端初始化函数
// 初始化所有终端缓冲队列,初始化串口终端和控制台终端.
void tty_init(void)
{
   19ada:	57                   	push   %edi
   19adb:	56                   	push   %esi
   19adc:	53                   	push   %ebx
   19add:	83 ec 10             	sub    $0x10,%esp
	int i;

	// 首先初始化所有终端的缓冲队列结构,设置初值.对于串行终端的读/写缓冲队列,将它们的data字段设置为串行端口基地址值.串中1是0x3f8,
	// 串口2是0x2f8.然后先初步设置所有终端的tty结构.
	// 其中特殊字符数组c_cc[]设置的初值定义在include/linux/tty.h文件中.
	for (i = 0 ; i < QUEUES ; i++)
   19ae0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19ae7:	00 
   19ae8:	eb 7f                	jmp    19b69 <tty_init+0x8f>
		tty_queues[i] = (struct tty_queue) {0, 0, 0, 0, ""};
   19aea:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19aee:	69 c0 10 04 00 00    	imul   $0x410,%eax,%eax
   19af4:	05 a0 22 03 00       	add    $0x322a0,%eax
   19af9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19aff:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19b03:	69 c0 10 04 00 00    	imul   $0x410,%eax,%eax
   19b09:	05 a4 22 03 00       	add    $0x322a4,%eax
   19b0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19b14:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19b18:	69 c0 10 04 00 00    	imul   $0x410,%eax,%eax
   19b1e:	05 a8 22 03 00       	add    $0x322a8,%eax
   19b23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19b29:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19b2d:	69 c0 10 04 00 00    	imul   $0x410,%eax,%eax
   19b33:	05 ac 22 03 00       	add    $0x322ac,%eax
   19b38:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19b3e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19b42:	69 c0 10 04 00 00    	imul   $0x410,%eax,%eax
   19b48:	05 b0 22 03 00       	add    $0x322b0,%eax
   19b4d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19b53:	8d 50 04             	lea    0x4(%eax),%edx
   19b56:	b8 00 00 00 00       	mov    $0x0,%eax
   19b5b:	b9 ff 00 00 00       	mov    $0xff,%ecx
   19b60:	89 d7                	mov    %edx,%edi
   19b62:	f3 ab                	rep stos %eax,%es:(%edi)
	for (i = 0 ; i < QUEUES ; i++)
   19b64:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19b69:	83 7c 24 0c 35       	cmpl   $0x35,0xc(%esp)
   19b6e:	0f 8e 76 ff ff ff    	jle    19aea <tty_init+0x10>
	rs_queues[0] = (struct tty_queue) {0x3f8, 0, 0, 0, ""};
   19b74:	ba 20 84 03 00       	mov    $0x38420,%edx
   19b79:	bb e0 4a 02 00       	mov    $0x24ae0,%ebx
   19b7e:	b8 04 01 00 00       	mov    $0x104,%eax
   19b83:	89 d7                	mov    %edx,%edi
   19b85:	89 de                	mov    %ebx,%esi
   19b87:	89 c1                	mov    %eax,%ecx
   19b89:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	rs_queues[1] = (struct tty_queue) {0x3f8, 0, 0, 0, ""};
   19b8b:	ba 30 88 03 00       	mov    $0x38830,%edx
   19b90:	bb e0 4a 02 00       	mov    $0x24ae0,%ebx
   19b95:	b8 04 01 00 00       	mov    $0x104,%eax
   19b9a:	89 d7                	mov    %edx,%edi
   19b9c:	89 de                	mov    %ebx,%esi
   19b9e:	89 c1                	mov    %eax,%ecx
   19ba0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	rs_queues[3] = (struct tty_queue) {0x2f8, 0, 0, 0, ""};
   19ba2:	ba 50 90 03 00       	mov    $0x39050,%edx
   19ba7:	bb 00 4f 02 00       	mov    $0x24f00,%ebx
   19bac:	b8 04 01 00 00       	mov    $0x104,%eax
   19bb1:	89 d7                	mov    %edx,%edi
   19bb3:	89 de                	mov    %ebx,%esi
   19bb5:	89 c1                	mov    %eax,%ecx
   19bb7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	rs_queues[4] = (struct tty_queue) {0x2f8, 0, 0, 0, ""};
   19bb9:	ba 60 94 03 00       	mov    $0x39460,%edx
   19bbe:	bb 00 4f 02 00       	mov    $0x24f00,%ebx
   19bc3:	b8 04 01 00 00       	mov    $0x104,%eax
   19bc8:	89 d7                	mov    %edx,%edi
   19bca:	89 de                	mov    %ebx,%esi
   19bcc:	89 c1                	mov    %eax,%ecx
   19bce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	for (i = 0 ; i < 256 ; i++) {
   19bd0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19bd7:	00 
   19bd8:	e9 14 01 00 00       	jmp    19cf1 <tty_init+0x217>
		tty_table[i] =  (struct tty_struct) {
   19bdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19be1:	c1 e0 06             	shl    $0x6,%eax
   19be4:	05 20 28 04 00       	add    $0x42820,%eax
   19be9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19bef:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19bf3:	c1 e0 06             	shl    $0x6,%eax
   19bf6:	05 24 28 04 00       	add    $0x42824,%eax
   19bfb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c01:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c05:	c1 e0 06             	shl    $0x6,%eax
   19c08:	05 28 28 04 00       	add    $0x42828,%eax
   19c0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c13:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c17:	c1 e0 06             	shl    $0x6,%eax
   19c1a:	05 2c 28 04 00       	add    $0x4282c,%eax
   19c1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c25:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c29:	c1 e0 06             	shl    $0x6,%eax
   19c2c:	05 30 28 04 00       	add    $0x42830,%eax
   19c31:	c6 00 00             	movb   $0x0,(%eax)
   19c34:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c38:	c1 e0 06             	shl    $0x6,%eax
   19c3b:	05 30 28 04 00       	add    $0x42830,%eax
   19c40:	8b 15 10 53 02 00    	mov    0x25310,%edx
   19c46:	89 50 01             	mov    %edx,0x1(%eax)
   19c49:	8b 15 14 53 02 00    	mov    0x25314,%edx
   19c4f:	89 50 05             	mov    %edx,0x5(%eax)
   19c52:	8b 15 18 53 02 00    	mov    0x25318,%edx
   19c58:	89 50 09             	mov    %edx,0x9(%eax)
   19c5b:	8b 15 1c 53 02 00    	mov    0x2531c,%edx
   19c61:	89 50 0d             	mov    %edx,0xd(%eax)
   19c64:	0f b6 15 20 53 02 00 	movzbl 0x25320,%edx
   19c6b:	88 50 11             	mov    %dl,0x11(%eax)
   19c6e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c72:	c1 e0 06             	shl    $0x6,%eax
   19c75:	05 44 28 04 00       	add    $0x42844,%eax
   19c7a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c80:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c84:	c1 e0 06             	shl    $0x6,%eax
   19c87:	05 48 28 04 00       	add    $0x42848,%eax
   19c8c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c92:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c96:	c1 e0 06             	shl    $0x6,%eax
   19c99:	05 4c 28 04 00       	add    $0x4284c,%eax
   19c9e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19ca4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ca8:	c1 e0 06             	shl    $0x6,%eax
   19cab:	05 50 28 04 00       	add    $0x42850,%eax
   19cb0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19cb6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19cba:	c1 e0 06             	shl    $0x6,%eax
   19cbd:	05 54 28 04 00       	add    $0x42854,%eax
   19cc2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19cc8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ccc:	c1 e0 06             	shl    $0x6,%eax
   19ccf:	05 58 28 04 00       	add    $0x42858,%eax
   19cd4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19cda:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19cde:	c1 e0 06             	shl    $0x6,%eax
   19ce1:	05 5c 28 04 00       	add    $0x4285c,%eax
   19ce6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for (i = 0 ; i < 256 ; i++) {
   19cec:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19cf1:	81 7c 24 0c ff 00 00 	cmpl   $0xff,0xc(%esp)
   19cf8:	00 
   19cf9:	0f 8e de fe ff ff    	jle    19bdd <tty_init+0x103>
	// 接着初始化控制台终端(console.c).把con_init()放在这里,是因为我们需要根据显示卡类型和显示内存容量来确定系统虚拟控制台的数量
	// NR_CONSOLES.该值被用于随后的控制tty结构初始化循环中.对于控制台的tty结构,425--430行是tty结构中包含的termios结构字段.其中
	// 输入模式标志集被初始化为ICRNL标志;输出模式标志被初始化含有后处理标志OPOST和把NL转换成CRNL的标志ONLCR;本地模式标志集被初始化
	// 含有IXON,ICAON,ECHO,ECHOCTL和ECHOKE标志;控制字符数组c_cc[]被设置含有初始值INIT_C_CC.
	// 435行上初始化控制台终端tty结构中的读缓冲,写缓冲和辅助缓冲队列结构,它们分别指向tty缓冲队列结构数组tty_table[]中的相应结构项.
	con_init();
   19cff:	e8 30 30 00 00       	call   1cd34 <con_init>
	for (i = 0 ; i < NR_CONSOLES ; i++) {
   19d04:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19d0b:	00 
   19d0c:	e9 42 01 00 00       	jmp    19e53 <tty_init+0x379>
			INIT_C_CC},												// 控制字符数组c_cc[]
			0,														/* initial pgrp */	// 所属初始进程组pgrp
			0,														/* initial session */	// 初始会话级session
			0,														/* initial stopped */	// 初始停止标志stopped
			con_write,
			con_queues + 0 + i * 3, con_queues + 1 + i * 3, con_queues + 2 + i * 3
   19d11:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d15:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   19d1b:	8d b0 a0 22 03 00    	lea    0x322a0(%eax),%esi
   19d21:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d25:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   19d2b:	05 10 04 00 00       	add    $0x410,%eax
   19d30:	8d 98 a0 22 03 00    	lea    0x322a0(%eax),%ebx
   19d36:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d3a:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   19d40:	05 20 08 00 00       	add    $0x820,%eax
   19d45:	8d 88 a0 22 03 00    	lea    0x322a0(%eax),%ecx
		con_table[i] = (struct tty_struct) {
   19d4b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d4f:	c1 e0 06             	shl    $0x6,%eax
   19d52:	05 20 28 04 00       	add    $0x42820,%eax
   19d57:	c7 00 00 01 00 00    	movl   $0x100,(%eax)
   19d5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d61:	c1 e0 06             	shl    $0x6,%eax
   19d64:	05 24 28 04 00       	add    $0x42824,%eax
   19d69:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
   19d6f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d73:	c1 e0 06             	shl    $0x6,%eax
   19d76:	05 28 28 04 00       	add    $0x42828,%eax
   19d7b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19d81:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d85:	c1 e0 06             	shl    $0x6,%eax
   19d88:	05 2c 28 04 00       	add    $0x4282c,%eax
   19d8d:	c7 00 0b 0e 00 00    	movl   $0xe0b,(%eax)
   19d93:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d97:	c1 e0 06             	shl    $0x6,%eax
   19d9a:	05 30 28 04 00       	add    $0x42830,%eax
   19d9f:	c6 00 00             	movb   $0x0,(%eax)
   19da2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19da6:	c1 e0 06             	shl    $0x6,%eax
   19da9:	05 30 28 04 00       	add    $0x42830,%eax
   19dae:	8b 15 10 53 02 00    	mov    0x25310,%edx
   19db4:	89 50 01             	mov    %edx,0x1(%eax)
   19db7:	8b 15 14 53 02 00    	mov    0x25314,%edx
   19dbd:	89 50 05             	mov    %edx,0x5(%eax)
   19dc0:	8b 15 18 53 02 00    	mov    0x25318,%edx
   19dc6:	89 50 09             	mov    %edx,0x9(%eax)
   19dc9:	8b 15 1c 53 02 00    	mov    0x2531c,%edx
   19dcf:	89 50 0d             	mov    %edx,0xd(%eax)
   19dd2:	0f b6 15 20 53 02 00 	movzbl 0x25320,%edx
   19dd9:	88 50 11             	mov    %dl,0x11(%eax)
   19ddc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19de0:	c1 e0 06             	shl    $0x6,%eax
   19de3:	05 44 28 04 00       	add    $0x42844,%eax
   19de8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19dee:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19df2:	c1 e0 06             	shl    $0x6,%eax
   19df5:	05 48 28 04 00       	add    $0x42848,%eax
   19dfa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19e00:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e04:	c1 e0 06             	shl    $0x6,%eax
   19e07:	05 4c 28 04 00       	add    $0x4284c,%eax
   19e0c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19e12:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e16:	c1 e0 06             	shl    $0x6,%eax
   19e19:	05 50 28 04 00       	add    $0x42850,%eax
   19e1e:	c7 00 41 b9 01 00    	movl   $0x1b941,(%eax)
   19e24:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e28:	c1 e0 06             	shl    $0x6,%eax
   19e2b:	05 54 28 04 00       	add    $0x42854,%eax
   19e30:	89 30                	mov    %esi,(%eax)
   19e32:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e36:	c1 e0 06             	shl    $0x6,%eax
   19e39:	05 58 28 04 00       	add    $0x42858,%eax
   19e3e:	89 18                	mov    %ebx,(%eax)
   19e40:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e44:	c1 e0 06             	shl    $0x6,%eax
   19e47:	05 5c 28 04 00       	add    $0x4285c,%eax
   19e4c:	89 08                	mov    %ecx,(%eax)
	for (i = 0 ; i < NR_CONSOLES ; i++) {
   19e4e:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19e53:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   19e58:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   19e5c:	0f 8c af fe ff ff    	jl     19d11 <tty_init+0x237>
		};
	}
	// 然后初始化串行终端的tty结构各字段。450行初始化串行终端tty结构中的读/写和辅助缓冲队列结构，它们分别指向tty缓冲队列
	// 结构数组tty_table[]中相应结构项。
	for (i = 0 ; i < NR_SERIALS ; i++) {
   19e62:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19e69:	00 
   19e6a:	e9 c8 00 00 00       	jmp    19f37 <tty_init+0x45d>
		rs_table[i] = (struct tty_struct) {
   19e6f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e73:	83 c0 40             	add    $0x40,%eax
   19e76:	c1 e0 06             	shl    $0x6,%eax
   19e79:	05 20 28 04 00       	add    $0x42820,%eax
			INIT_C_CC},                     						// 控制字符数组。
			0,                              						// 所属初始进程组。
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			rs_write,                       						// 串口终端写函数。
			rs_queues + 0 + i * 3, rs_queues + 1 + i * 3, rs_queues + 2 + i * 3
   19e7e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19e82:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19e88:	81 c2 80 61 00 00    	add    $0x6180,%edx
   19e8e:	8d b2 a0 22 03 00    	lea    0x322a0(%edx),%esi
   19e94:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19e98:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19e9e:	81 c2 90 65 00 00    	add    $0x6590,%edx
   19ea4:	8d 9a a0 22 03 00    	lea    0x322a0(%edx),%ebx
   19eaa:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19eae:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19eb4:	81 c2 a0 69 00 00    	add    $0x69a0,%edx
   19eba:	8d 8a a0 22 03 00    	lea    0x322a0(%edx),%ecx
		rs_table[i] = (struct tty_struct) {
   19ec0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19ec6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   19ecd:	c7 40 08 3b 00 00 00 	movl   $0x3b,0x8(%eax)
   19ed4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   19edb:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   19edf:	8b 15 10 53 02 00    	mov    0x25310,%edx
   19ee5:	89 50 11             	mov    %edx,0x11(%eax)
   19ee8:	8b 15 14 53 02 00    	mov    0x25314,%edx
   19eee:	89 50 15             	mov    %edx,0x15(%eax)
   19ef1:	8b 15 18 53 02 00    	mov    0x25318,%edx
   19ef7:	89 50 19             	mov    %edx,0x19(%eax)
   19efa:	8b 15 1c 53 02 00    	mov    0x2531c,%edx
   19f00:	89 50 1d             	mov    %edx,0x1d(%eax)
   19f03:	0f b6 15 20 53 02 00 	movzbl 0x25320,%edx
   19f0a:	88 50 21             	mov    %dl,0x21(%eax)
   19f0d:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
   19f14:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   19f1b:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   19f22:	c7 40 30 6b df 01 00 	movl   $0x1df6b,0x30(%eax)
   19f29:	89 70 34             	mov    %esi,0x34(%eax)
   19f2c:	89 58 38             	mov    %ebx,0x38(%eax)
   19f2f:	89 48 3c             	mov    %ecx,0x3c(%eax)
	for (i = 0 ; i < NR_SERIALS ; i++) {
   19f32:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19f37:	83 7c 24 0c 01       	cmpl   $0x1,0xc(%esp)
   19f3c:	0f 8e 2d ff ff ff    	jle    19e6f <tty_init+0x395>
		};
	}
	// 然后再初始化伪终端使用的tty结构。伪终端是配对使用的，即一个主（master）伪终端配有一个从（slave）伪终端。因此对它们
	// 都要进行初始化设置。在循环中，我们首先初始化每个主伪终端的tty结构，然后再初始化其对应的从伪终端的tty结构。
	for (i = 0 ; i < NR_PTYS ; i++) {
   19f42:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19f49:	00 
   19f4a:	e9 8d 01 00 00       	jmp    1a0dc <tty_init+0x602>
		mpty_table[i] = (struct tty_struct) {
   19f4f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19f53:	83 e8 80             	sub    $0xffffff80,%eax
   19f56:	c1 e0 06             	shl    $0x6,%eax
   19f59:	05 20 28 04 00       	add    $0x42820,%eax
			INIT_C_CC},                    							// 控制字符数组。
			0,                              						// 所属初始进程组。
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			mpty_write,                     						// 主伪终端写函数。
			mpty_queues + 0 + i * 3, mpty_queues + 1 + i * 3, mpty_queues + 2 + i * 3
   19f5e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19f62:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19f68:	81 c2 e0 79 00 00    	add    $0x79e0,%edx
   19f6e:	8d b2 a0 22 03 00    	lea    0x322a0(%edx),%esi
   19f74:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19f78:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19f7e:	81 c2 f0 7d 00 00    	add    $0x7df0,%edx
   19f84:	8d 9a a0 22 03 00    	lea    0x322a0(%edx),%ebx
   19f8a:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19f8e:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19f94:	81 c2 00 82 00 00    	add    $0x8200,%edx
   19f9a:	8d 8a a0 22 03 00    	lea    0x322a0(%edx),%ecx
		mpty_table[i] = (struct tty_struct) {
   19fa0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19fa6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   19fad:	c7 40 08 3d 00 00 00 	movl   $0x3d,0x8(%eax)
   19fb4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   19fbb:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   19fbf:	8b 15 10 53 02 00    	mov    0x25310,%edx
   19fc5:	89 50 11             	mov    %edx,0x11(%eax)
   19fc8:	8b 15 14 53 02 00    	mov    0x25314,%edx
   19fce:	89 50 15             	mov    %edx,0x15(%eax)
   19fd1:	8b 15 18 53 02 00    	mov    0x25318,%edx
   19fd7:	89 50 19             	mov    %edx,0x19(%eax)
   19fda:	8b 15 1c 53 02 00    	mov    0x2531c,%edx
   19fe0:	89 50 1d             	mov    %edx,0x1d(%eax)
   19fe3:	0f b6 15 20 53 02 00 	movzbl 0x25320,%edx
   19fea:	88 50 21             	mov    %dl,0x21(%eax)
   19fed:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
   19ff4:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   19ffb:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   1a002:	c7 40 30 c9 ea 01 00 	movl   $0x1eac9,0x30(%eax)
   1a009:	89 70 34             	mov    %esi,0x34(%eax)
   1a00c:	89 58 38             	mov    %ebx,0x38(%eax)
   1a00f:	89 48 3c             	mov    %ecx,0x3c(%eax)
		};
		spty_table[i] = (struct tty_struct) {
   1a012:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1a016:	05 c0 00 00 00       	add    $0xc0,%eax
   1a01b:	c1 e0 06             	shl    $0x6,%eax
   1a01e:	05 20 28 04 00       	add    $0x42820,%eax
			INIT_C_CC},                    							// 控制字符数组。
			0,                              						// 所属初始进程组。
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			spty_write,                     						// 从伪终端写函数。
			spty_queues + 0 + i * 3, spty_queues + 1 + i * 3, spty_queues + 2 + i * 3
   1a023:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a027:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a02d:	81 c2 a0 aa 00 00    	add    $0xaaa0,%edx
   1a033:	8d b2 a0 22 03 00    	lea    0x322a0(%edx),%esi
   1a039:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a03d:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a043:	81 c2 b0 ae 00 00    	add    $0xaeb0,%edx
   1a049:	8d 9a a0 22 03 00    	lea    0x322a0(%edx),%ebx
   1a04f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a053:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a059:	81 c2 c0 b2 00 00    	add    $0xb2c0,%edx
   1a05f:	8d 8a a0 22 03 00    	lea    0x322a0(%edx),%ecx
		spty_table[i] = (struct tty_struct) {
   1a065:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1a06b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1a072:	c7 40 08 3d 00 00 00 	movl   $0x3d,0x8(%eax)
   1a079:	c7 40 0c 03 04 00 00 	movl   $0x403,0xc(%eax)
   1a080:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   1a084:	8b 15 10 53 02 00    	mov    0x25310,%edx
   1a08a:	89 50 11             	mov    %edx,0x11(%eax)
   1a08d:	8b 15 14 53 02 00    	mov    0x25314,%edx
   1a093:	89 50 15             	mov    %edx,0x15(%eax)
   1a096:	8b 15 18 53 02 00    	mov    0x25318,%edx
   1a09c:	89 50 19             	mov    %edx,0x19(%eax)
   1a09f:	8b 15 1c 53 02 00    	mov    0x2531c,%edx
   1a0a5:	89 50 1d             	mov    %edx,0x1d(%eax)
   1a0a8:	0f b6 15 20 53 02 00 	movzbl 0x25320,%edx
   1a0af:	88 50 21             	mov    %dl,0x21(%eax)
   1a0b2:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
   1a0b9:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   1a0c0:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   1a0c7:	c7 40 30 18 eb 01 00 	movl   $0x1eb18,0x30(%eax)
   1a0ce:	89 70 34             	mov    %esi,0x34(%eax)
   1a0d1:	89 58 38             	mov    %ebx,0x38(%eax)
   1a0d4:	89 48 3c             	mov    %ecx,0x3c(%eax)
	for (i = 0 ; i < NR_PTYS ; i++) {
   1a0d7:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1a0dc:	83 7c 24 0c 03       	cmpl   $0x3,0xc(%esp)
   1a0e1:	0f 8e 68 fe ff ff    	jle    19f4f <tty_init+0x475>
		};
	}
	// 最后初始化串行中断处理程序和串行接口1和2（serial.c），并显示系统含有的虚拟控制台数NR_CONSOLES和伪终端数NR_PTYS。
	rs_init();
   1a0e7:	e8 f4 3d 00 00       	call   1dee0 <rs_init>
	printk("%d virtual consoles\n\r", NR_CONSOLES);
   1a0ec:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   1a0f1:	83 ec 08             	sub    $0x8,%esp
   1a0f4:	50                   	push   %eax
   1a0f5:	68 a1 4a 02 00       	push   $0x24aa1
   1a0fa:	e8 42 eb fe ff       	call   8c41 <printk>
   1a0ff:	83 c4 10             	add    $0x10,%esp
	printk("%d pty's\n\r", NR_PTYS);
   1a102:	83 ec 08             	sub    $0x8,%esp
   1a105:	6a 04                	push   $0x4
   1a107:	68 b7 4a 02 00       	push   $0x24ab7
   1a10c:	e8 30 eb fe ff       	call   8c41 <printk>
   1a111:	83 c4 10             	add    $0x10,%esp
}
   1a114:	90                   	nop
   1a115:	83 c4 10             	add    $0x10,%esp
   1a118:	5b                   	pop    %ebx
   1a119:	5e                   	pop    %esi
   1a11a:	5f                   	pop    %edi
   1a11b:	c3                   	ret    

0001a11c <get_fs_byte>:
{
   1a11c:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1a11d:	8b 44 24 08          	mov    0x8(%esp),%eax
   1a121:	64 8a 00             	mov    %fs:(%eax),%al
   1a124:	89 c3                	mov    %eax,%ebx
	return _v;
   1a126:	89 d8                	mov    %ebx,%eax
}
   1a128:	5b                   	pop    %ebx
   1a129:	c3                   	ret    

0001a12a <put_fs_byte>:
{
   1a12a:	83 ec 04             	sub    $0x4,%esp
   1a12d:	8b 44 24 08          	mov    0x8(%esp),%eax
   1a131:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   1a134:	0f b6 04 24          	movzbl (%esp),%eax
   1a138:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a13c:	64 88 02             	mov    %al,%fs:(%edx)
}
   1a13f:	90                   	nop
   1a140:	83 c4 04             	add    $0x4,%esp
   1a143:	c3                   	ret    

0001a144 <gotoxy>:
// 注意,函数中的所有变量实际上是vc_cons[currcons]结构中的相应字段.以下函数相同.
/* NOTE! gotoxy thinks x==video_num_columns is ok */
/* 注意!gotoxy函数认为x==video_num_columns时是正确的 */
static inline void gotoxy(int currcons, int new_x, unsigned int new_y)
{
	if (new_x > video_num_columns || new_y >= video_num_lines)
   1a144:	8b 54 24 08          	mov    0x8(%esp),%edx
   1a148:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1a14d:	39 c2                	cmp    %eax,%edx
   1a14f:	0f 87 a5 00 00 00    	ja     1a1fa <gotoxy+0xb6>
   1a155:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1a15a:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   1a15e:	0f 83 96 00 00 00    	jae    1a1fa <gotoxy+0xb6>
		return;
	x = new_x;
   1a164:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1a168:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a16c:	89 d0                	mov    %edx,%eax
   1a16e:	c1 e0 03             	shl    $0x3,%eax
   1a171:	01 d0                	add    %edx,%eax
   1a173:	c1 e0 04             	shl    $0x4,%eax
   1a176:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1a17b:	89 08                	mov    %ecx,(%eax)
	y = new_y;
   1a17d:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a181:	89 d0                	mov    %edx,%eax
   1a183:	c1 e0 03             	shl    $0x3,%eax
   1a186:	01 d0                	add    %edx,%eax
   1a188:	c1 e0 04             	shl    $0x4,%eax
   1a18b:	8d 90 88 fe 03 00    	lea    0x3fe88(%eax),%edx
   1a191:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1a195:	89 02                	mov    %eax,(%edx)
	pos = origin + y * video_size_row + (x << 1);	// 1列用2个字节表示,所以x<<1.
   1a197:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a19b:	89 d0                	mov    %edx,%eax
   1a19d:	c1 e0 03             	shl    $0x3,%eax
   1a1a0:	01 d0                	add    %edx,%eax
   1a1a2:	c1 e0 04             	shl    $0x4,%eax
   1a1a5:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a1aa:	8b 08                	mov    (%eax),%ecx
   1a1ac:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a1b0:	89 d0                	mov    %edx,%eax
   1a1b2:	c1 e0 03             	shl    $0x3,%eax
   1a1b5:	01 d0                	add    %edx,%eax
   1a1b7:	c1 e0 04             	shl    $0x4,%eax
   1a1ba:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1a1bf:	8b 10                	mov    (%eax),%edx
   1a1c1:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a1c6:	0f af c2             	imul   %edx,%eax
   1a1c9:	01 c1                	add    %eax,%ecx
   1a1cb:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a1cf:	89 d0                	mov    %edx,%eax
   1a1d1:	c1 e0 03             	shl    $0x3,%eax
   1a1d4:	01 d0                	add    %edx,%eax
   1a1d6:	c1 e0 04             	shl    $0x4,%eax
   1a1d9:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1a1de:	8b 00                	mov    (%eax),%eax
   1a1e0:	01 c0                	add    %eax,%eax
   1a1e2:	01 c1                	add    %eax,%ecx
   1a1e4:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a1e8:	89 d0                	mov    %edx,%eax
   1a1ea:	c1 e0 03             	shl    $0x3,%eax
   1a1ed:	01 d0                	add    %edx,%eax
   1a1ef:	c1 e0 04             	shl    $0x4,%eax
   1a1f2:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1a1f7:	89 08                	mov    %ecx,(%eax)
   1a1f9:	c3                   	ret    
		return;
   1a1fa:	90                   	nop
}
   1a1fb:	c3                   	ret    

0001a1fc <set_origin>:
static inline void set_origin(int currcons)
{
	// 首先判断显示卡类型.对于EGA/VGA,我们可以指定屏内范围(区域)进行滚屏操作,而MDA单色显示卡只能进行整屏滚屏操作.因此只有EGA/VGA卡才需要设置
	// 滚屏起始行显示内存地址(起始行是origin对应的行).即显示类型如果不是EGA/VGA彩色模式,也不是EGA/VGA单色模式,那么就直接返回.另外,我们只对前
	// 台控制台进行操作,因此当前控制台currocons必须是前台控制台时,我们才需要设置其滚屏起始行对应的内存起点位置.
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
   1a1fc:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1a203:	3c 21                	cmp    $0x21,%al
   1a205:	74 0f                	je     1a216 <set_origin+0x1a>
   1a207:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1a20e:	3c 20                	cmp    $0x20,%al
   1a210:	0f 85 93 00 00 00    	jne    1a2a9 <set_origin+0xad>
		return;
	if (currcons != fg_console)
   1a216:	a1 80 22 03 00       	mov    0x32280,%eax
   1a21b:	39 44 24 04          	cmp    %eax,0x4(%esp)
   1a21f:	0f 85 86 00 00 00    	jne    1a2ab <set_origin+0xaf>
		return;
	// 然后向显示寄存器选择端口video_port_reg输出12,即选择显示控制数据寄存器r12,接着写入滚屏起始地址高字节.其中向右移动9位,实际上表示向右移动
	// 8位再除以2(上1个字符用2字节表示).再选择显示控制数据寄存器r13,然后写入滚屏起始地址低字节.向右移动1位表示除以2,同样代表屏幕上1个字符用2字节
	// 表示.输出值相对于默认显示内存起始位置video_mem_base进行操作.
	// 例如对于EGA/VGA彩色模式,viedo_mem_base = 物理内存地址0xb8000.
	cli();
   1a225:	fa                   	cli    
	outb_p(12, video_port_reg);											// 选择数据寄存器r12,输出滚屏起始位置高字节.
   1a226:	0f b7 15 4a fe 03 00 	movzwl 0x3fe4a,%edx
   1a22d:	b8 0c 00 00 00       	mov    $0xc,%eax
   1a232:	ee                   	out    %al,(%dx)
   1a233:	eb 00                	jmp    1a235 <set_origin+0x39>
   1a235:	eb 00                	jmp    1a237 <set_origin+0x3b>
	outb_p(0xff & ((origin - video_mem_base) >> 9), video_port_val);
   1a237:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a23b:	89 d0                	mov    %edx,%eax
   1a23d:	c1 e0 03             	shl    $0x3,%eax
   1a240:	01 d0                	add    %edx,%eax
   1a242:	c1 e0 04             	shl    $0x4,%eax
   1a245:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a24a:	8b 10                	mov    (%eax),%edx
   1a24c:	a1 38 fe 03 00       	mov    0x3fe38,%eax
   1a251:	29 c2                	sub    %eax,%edx
   1a253:	89 d0                	mov    %edx,%eax
   1a255:	c1 e8 09             	shr    $0x9,%eax
   1a258:	0f b6 c0             	movzbl %al,%eax
   1a25b:	0f b7 15 4c fe 03 00 	movzwl 0x3fe4c,%edx
   1a262:	ee                   	out    %al,(%dx)
   1a263:	eb 00                	jmp    1a265 <set_origin+0x69>
   1a265:	eb 00                	jmp    1a267 <set_origin+0x6b>
	outb_p(13, video_port_reg);											// 选择数据寄存器r13,输出滚屏起始位置低字节.
   1a267:	0f b7 15 4a fe 03 00 	movzwl 0x3fe4a,%edx
   1a26e:	b8 0d 00 00 00       	mov    $0xd,%eax
   1a273:	ee                   	out    %al,(%dx)
   1a274:	eb 00                	jmp    1a276 <set_origin+0x7a>
   1a276:	eb 00                	jmp    1a278 <set_origin+0x7c>
	outb_p(0xff & ((origin - video_mem_base) >> 1), video_port_val);
   1a278:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a27c:	89 d0                	mov    %edx,%eax
   1a27e:	c1 e0 03             	shl    $0x3,%eax
   1a281:	01 d0                	add    %edx,%eax
   1a283:	c1 e0 04             	shl    $0x4,%eax
   1a286:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a28b:	8b 10                	mov    (%eax),%edx
   1a28d:	a1 38 fe 03 00       	mov    0x3fe38,%eax
   1a292:	29 c2                	sub    %eax,%edx
   1a294:	89 d0                	mov    %edx,%eax
   1a296:	d1 e8                	shr    %eax
   1a298:	0f b6 c0             	movzbl %al,%eax
   1a29b:	0f b7 15 4c fe 03 00 	movzwl 0x3fe4c,%edx
   1a2a2:	ee                   	out    %al,(%dx)
   1a2a3:	eb 00                	jmp    1a2a5 <set_origin+0xa9>
   1a2a5:	eb 00                	jmp    1a2a7 <set_origin+0xab>
	sti();
   1a2a7:	fb                   	sti    
   1a2a8:	c3                   	ret    
		return;
   1a2a9:	90                   	nop
   1a2aa:	c3                   	ret    
		return;
   1a2ab:	90                   	nop
}
   1a2ac:	c3                   	ret    

0001a2ad <scrup>:

// 向上卷动上行
// 将屏幕滚动窗口向上移动一行,并在屏幕滚动区域底出现的新行上添加空格字符.滚屏区域必须大于1行.
static void scrup(int currcons)
{
   1a2ad:	57                   	push   %edi
   1a2ae:	56                   	push   %esi
   1a2af:	53                   	push   %ebx
	// 滚屏区域必须至少有2行.如果滚屏区域顶行号大于等于区域底行号,则不满足进行滚行操作的条件.另外,对于EGA/VGA卡,我们可以指定屏内行范围(区域)
	// 进行滚屏操作,而MDA单色显示卡只能进行整屏操作.该函数对EGA和MDA显示类型进行分别处理.如果显示类型是EGA,则还分为整屏窗口移动和区域内窗口移动
	// 这里首先处理显示卡是EGA/VGA显示类型的情况.
	if (bottom <= top)
   1a2b0:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a2b4:	89 d0                	mov    %edx,%eax
   1a2b6:	c1 e0 03             	shl    $0x3,%eax
   1a2b9:	01 d0                	add    %edx,%eax
   1a2bb:	c1 e0 04             	shl    $0x4,%eax
   1a2be:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a2c3:	8b 08                	mov    (%eax),%ecx
   1a2c5:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a2c9:	89 d0                	mov    %edx,%eax
   1a2cb:	c1 e0 03             	shl    $0x3,%eax
   1a2ce:	01 d0                	add    %edx,%eax
   1a2d0:	c1 e0 04             	shl    $0x4,%eax
   1a2d3:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a2d8:	8b 00                	mov    (%eax),%eax
   1a2da:	39 c1                	cmp    %eax,%ecx
   1a2dc:	0f 86 5d 04 00 00    	jbe    1a73f <scrup+0x492>
		return;
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
   1a2e2:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1a2e9:	3c 21                	cmp    $0x21,%al
   1a2eb:	74 0f                	je     1a2fc <scrup+0x4f>
   1a2ed:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1a2f4:	3c 20                	cmp    $0x20,%al
   1a2f6:	0f 85 71 03 00 00    	jne    1a66d <scrup+0x3c0>
	{
		// 如果移动起始行top=0,移动最底行bottom = video_num_lines = 25,则表示整屏窗口向下移动,于是把整个屏幕窗口左上角对应的起始内存位置origin
		// 调整为向下移动一行对应的内存位置,同时也跟踪调整当前光标对应的内存位置以及屏幕末行末端字符指针scr_end的位置.最后把新屏幕窗口内存起始位置值
		// origin写入显示控制器中
		if (!top && bottom == video_num_lines) {
   1a2fc:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a300:	89 d0                	mov    %edx,%eax
   1a302:	c1 e0 03             	shl    $0x3,%eax
   1a305:	01 d0                	add    %edx,%eax
   1a307:	c1 e0 04             	shl    $0x4,%eax
   1a30a:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a30f:	8b 00                	mov    (%eax),%eax
   1a311:	85 c0                	test   %eax,%eax
   1a313:	0f 85 7f 02 00 00    	jne    1a598 <scrup+0x2eb>
   1a319:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a31d:	89 d0                	mov    %edx,%eax
   1a31f:	c1 e0 03             	shl    $0x3,%eax
   1a322:	01 d0                	add    %edx,%eax
   1a324:	c1 e0 04             	shl    $0x4,%eax
   1a327:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a32c:	8b 10                	mov    (%eax),%edx
   1a32e:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1a333:	39 c2                	cmp    %eax,%edx
   1a335:	0f 85 5d 02 00 00    	jne    1a598 <scrup+0x2eb>
			origin += video_size_row;
   1a33b:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a33f:	89 d0                	mov    %edx,%eax
   1a341:	c1 e0 03             	shl    $0x3,%eax
   1a344:	01 d0                	add    %edx,%eax
   1a346:	c1 e0 04             	shl    $0x4,%eax
   1a349:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a34e:	8b 10                	mov    (%eax),%edx
   1a350:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a355:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a358:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a35c:	89 d0                	mov    %edx,%eax
   1a35e:	c1 e0 03             	shl    $0x3,%eax
   1a361:	01 d0                	add    %edx,%eax
   1a363:	c1 e0 04             	shl    $0x4,%eax
   1a366:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a36b:	89 08                	mov    %ecx,(%eax)
			pos += video_size_row;
   1a36d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a371:	89 d0                	mov    %edx,%eax
   1a373:	c1 e0 03             	shl    $0x3,%eax
   1a376:	01 d0                	add    %edx,%eax
   1a378:	c1 e0 04             	shl    $0x4,%eax
   1a37b:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1a380:	8b 10                	mov    (%eax),%edx
   1a382:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a387:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a38a:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a38e:	89 d0                	mov    %edx,%eax
   1a390:	c1 e0 03             	shl    $0x3,%eax
   1a393:	01 d0                	add    %edx,%eax
   1a395:	c1 e0 04             	shl    $0x4,%eax
   1a398:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1a39d:	89 08                	mov    %ecx,(%eax)
			scr_end += video_size_row;
   1a39f:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3a3:	89 d0                	mov    %edx,%eax
   1a3a5:	c1 e0 03             	shl    $0x3,%eax
   1a3a8:	01 d0                	add    %edx,%eax
   1a3aa:	c1 e0 04             	shl    $0x4,%eax
   1a3ad:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1a3b2:	8b 10                	mov    (%eax),%edx
   1a3b4:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a3b9:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a3bc:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3c0:	89 d0                	mov    %edx,%eax
   1a3c2:	c1 e0 03             	shl    $0x3,%eax
   1a3c5:	01 d0                	add    %edx,%eax
   1a3c7:	c1 e0 04             	shl    $0x4,%eax
   1a3ca:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1a3cf:	89 08                	mov    %ecx,(%eax)
			// 如果屏幕窗口末端所对应的显示内存指针scr_end超出了实际显示内存末端,则将屏幕内容除第一行以外所有行对应的内存数据移动到显示内存的起始位置video_mem_start
			// 处,并在整屏窗口向下移动出现的新行上填入空格字符.然后根据屏幕内存数据移动后的情况,重新调整当前屏幕对应内存的起始指针,光标位置指针和屏幕末端
			// 对应内存指针scr_end.
			if (scr_end > video_mem_end) {
   1a3d1:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3d5:	89 d0                	mov    %edx,%eax
   1a3d7:	c1 e0 03             	shl    $0x3,%eax
   1a3da:	01 d0                	add    %edx,%eax
   1a3dc:	c1 e0 04             	shl    $0x4,%eax
   1a3df:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1a3e4:	8b 08                	mov    (%eax),%ecx
   1a3e6:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3ea:	89 d0                	mov    %edx,%eax
   1a3ec:	c1 e0 03             	shl    $0x3,%eax
   1a3ef:	01 d0                	add    %edx,%eax
   1a3f1:	c1 e0 04             	shl    $0x4,%eax
   1a3f4:	05 dc fe 03 00       	add    $0x3fedc,%eax
   1a3f9:	8b 00                	mov    (%eax),%eax
   1a3fb:	39 c1                	cmp    %eax,%ecx
   1a3fd:	0f 86 44 01 00 00    	jbe    1a547 <scrup+0x29a>
					"rep\n\t"												// 重复操作,将当前屏幕内存数据移动到显示内存起始处
					"movsl\n\t"
					"movl video_num_columns, %1\n\t"
					"rep\n\t"												// 在新行上填入空格字符
					"stosw"
					::"a" (video_erase_char),
   1a403:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a407:	89 d0                	mov    %edx,%eax
   1a409:	c1 e0 03             	shl    $0x3,%eax
   1a40c:	01 d0                	add    %edx,%eax
   1a40e:	c1 e0 04             	shl    $0x4,%eax
   1a411:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1a416:	0f b7 18             	movzwl (%eax),%ebx
					"c" ((video_num_lines - 1) * video_num_columns >> 1),
   1a419:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1a41e:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a421:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1a426:	0f af c2             	imul   %edx,%eax
   1a429:	d1 e8                	shr    %eax
   1a42b:	89 c1                	mov    %eax,%ecx
					"D" (video_mem_start),
   1a42d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a431:	89 d0                	mov    %edx,%eax
   1a433:	c1 e0 03             	shl    $0x3,%eax
   1a436:	01 d0                	add    %edx,%eax
   1a438:	c1 e0 04             	shl    $0x4,%eax
   1a43b:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1a440:	8b 38                	mov    (%eax),%edi
					"S" (origin)
   1a442:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a446:	89 d0                	mov    %edx,%eax
   1a448:	c1 e0 03             	shl    $0x3,%eax
   1a44b:	01 d0                	add    %edx,%eax
   1a44d:	c1 e0 04             	shl    $0x4,%eax
   1a450:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a455:	8b 10                	mov    (%eax),%edx
				__asm__("cld\n\t"											// 清方向位
   1a457:	89 d8                	mov    %ebx,%eax
   1a459:	89 d6                	mov    %edx,%esi
   1a45b:	fc                   	cld    
   1a45c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a45e:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
   1a464:	f3 66 ab             	rep stos %ax,%es:(%edi)
					:);
				// 重新设置快速滚屏的末端位置
				scr_end -= origin - video_mem_start;
   1a467:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a46b:	89 d0                	mov    %edx,%eax
   1a46d:	c1 e0 03             	shl    $0x3,%eax
   1a470:	01 d0                	add    %edx,%eax
   1a472:	c1 e0 04             	shl    $0x4,%eax
   1a475:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1a47a:	8b 08                	mov    (%eax),%ecx
   1a47c:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a480:	89 d0                	mov    %edx,%eax
   1a482:	c1 e0 03             	shl    $0x3,%eax
   1a485:	01 d0                	add    %edx,%eax
   1a487:	c1 e0 04             	shl    $0x4,%eax
   1a48a:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1a48f:	8b 18                	mov    (%eax),%ebx
   1a491:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a495:	89 d0                	mov    %edx,%eax
   1a497:	c1 e0 03             	shl    $0x3,%eax
   1a49a:	01 d0                	add    %edx,%eax
   1a49c:	c1 e0 04             	shl    $0x4,%eax
   1a49f:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a4a4:	8b 00                	mov    (%eax),%eax
   1a4a6:	29 c3                	sub    %eax,%ebx
   1a4a8:	89 d8                	mov    %ebx,%eax
   1a4aa:	01 c1                	add    %eax,%ecx
   1a4ac:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4b0:	89 d0                	mov    %edx,%eax
   1a4b2:	c1 e0 03             	shl    $0x3,%eax
   1a4b5:	01 d0                	add    %edx,%eax
   1a4b7:	c1 e0 04             	shl    $0x4,%eax
   1a4ba:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1a4bf:	89 08                	mov    %ecx,(%eax)
				// 设置当前显示位置
				pos -= origin - video_mem_start;
   1a4c1:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4c5:	89 d0                	mov    %edx,%eax
   1a4c7:	c1 e0 03             	shl    $0x3,%eax
   1a4ca:	01 d0                	add    %edx,%eax
   1a4cc:	c1 e0 04             	shl    $0x4,%eax
   1a4cf:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1a4d4:	8b 08                	mov    (%eax),%ecx
   1a4d6:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4da:	89 d0                	mov    %edx,%eax
   1a4dc:	c1 e0 03             	shl    $0x3,%eax
   1a4df:	01 d0                	add    %edx,%eax
   1a4e1:	c1 e0 04             	shl    $0x4,%eax
   1a4e4:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1a4e9:	8b 18                	mov    (%eax),%ebx
   1a4eb:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4ef:	89 d0                	mov    %edx,%eax
   1a4f1:	c1 e0 03             	shl    $0x3,%eax
   1a4f4:	01 d0                	add    %edx,%eax
   1a4f6:	c1 e0 04             	shl    $0x4,%eax
   1a4f9:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a4fe:	8b 00                	mov    (%eax),%eax
   1a500:	29 c3                	sub    %eax,%ebx
   1a502:	89 d8                	mov    %ebx,%eax
   1a504:	01 c1                	add    %eax,%ecx
   1a506:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a50a:	89 d0                	mov    %edx,%eax
   1a50c:	c1 e0 03             	shl    $0x3,%eax
   1a50f:	01 d0                	add    %edx,%eax
   1a511:	c1 e0 04             	shl    $0x4,%eax
   1a514:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1a519:	89 08                	mov    %ecx,(%eax)
				// 重新设置快速滚屏的起始位置
				origin = video_mem_start;
   1a51b:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a51f:	89 d0                	mov    %edx,%eax
   1a521:	c1 e0 03             	shl    $0x3,%eax
   1a524:	01 d0                	add    %edx,%eax
   1a526:	c1 e0 04             	shl    $0x4,%eax
   1a529:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1a52e:	8b 08                	mov    (%eax),%ecx
   1a530:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a534:	89 d0                	mov    %edx,%eax
   1a536:	c1 e0 03             	shl    $0x3,%eax
   1a539:	01 d0                	add    %edx,%eax
   1a53b:	c1 e0 04             	shl    $0x4,%eax
   1a53e:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a543:	89 08                	mov    %ecx,(%eax)
   1a545:	eb 40                	jmp    1a587 <scrup+0x2da>
			// %0 - eax(擦除字符+属性);%1 - ecx(屏幕行数);%2 - edi(最后1行开始处对应内存位置);
			} else {
				__asm__("cld\n\t"
					"rep\n\t"												// 重复操作,在新出现现上填入擦除字符(空格字符).
					"stosw"
					::"a" (video_erase_char),
   1a547:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a54b:	89 d0                	mov    %edx,%eax
   1a54d:	c1 e0 03             	shl    $0x3,%eax
   1a550:	01 d0                	add    %edx,%eax
   1a552:	c1 e0 04             	shl    $0x4,%eax
   1a555:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1a55a:	0f b7 18             	movzwl (%eax),%ebx
				__asm__("cld\n\t"
   1a55d:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
					"c" (video_num_columns),
					"D" (scr_end - video_size_row)
   1a563:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a567:	89 d0                	mov    %edx,%eax
   1a569:	c1 e0 03             	shl    $0x3,%eax
   1a56c:	01 d0                	add    %edx,%eax
   1a56e:	c1 e0 04             	shl    $0x4,%eax
   1a571:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1a576:	8b 10                	mov    (%eax),%edx
   1a578:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a57d:	29 c2                	sub    %eax,%edx
				__asm__("cld\n\t"
   1a57f:	89 d8                	mov    %ebx,%eax
   1a581:	89 d7                	mov    %edx,%edi
   1a583:	fc                   	cld    
   1a584:	f3 66 ab             	rep stos %ax,%es:(%edi)
					:);
			}
			// 然后把新屏幕滚动窗口内存起始位置值origin写入显示控制器中.
			set_origin(currcons);
   1a587:	ff 74 24 10          	pushl  0x10(%esp)
   1a58b:	e8 6c fc ff ff       	call   1a1fc <set_origin>
   1a590:	83 c4 04             	add    $0x4,%esp
		if (!top && bottom == video_num_lines) {
   1a593:	e9 a8 01 00 00       	jmp    1a740 <scrup+0x493>
				"rep\n\t"													// 循环操作,将top+1到bottom行所对应的内存块移到top行开始处.
				"movsl\n\t"
				"movl video_num_columns, %%ecx\n\t"
				"rep\n\t"													// 在新行上填入擦除字符.
				"stosw"
				::"a" (video_erase_char),
   1a598:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a59c:	89 d0                	mov    %edx,%eax
   1a59e:	c1 e0 03             	shl    $0x3,%eax
   1a5a1:	01 d0                	add    %edx,%eax
   1a5a3:	c1 e0 04             	shl    $0x4,%eax
   1a5a6:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1a5ab:	0f b7 18             	movzwl (%eax),%ebx
				"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a5ae:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5b2:	89 d0                	mov    %edx,%eax
   1a5b4:	c1 e0 03             	shl    $0x3,%eax
   1a5b7:	01 d0                	add    %edx,%eax
   1a5b9:	c1 e0 04             	shl    $0x4,%eax
   1a5bc:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a5c1:	8b 08                	mov    (%eax),%ecx
   1a5c3:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5c7:	89 d0                	mov    %edx,%eax
   1a5c9:	c1 e0 03             	shl    $0x3,%eax
   1a5cc:	01 d0                	add    %edx,%eax
   1a5ce:	c1 e0 04             	shl    $0x4,%eax
   1a5d1:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a5d6:	8b 00                	mov    (%eax),%eax
   1a5d8:	29 c1                	sub    %eax,%ecx
   1a5da:	89 c8                	mov    %ecx,%eax
   1a5dc:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a5df:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1a5e4:	0f af c2             	imul   %edx,%eax
   1a5e7:	d1 e8                	shr    %eax
   1a5e9:	89 c1                	mov    %eax,%ecx
				"D" (origin + video_size_row * top),
   1a5eb:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5ef:	89 d0                	mov    %edx,%eax
   1a5f1:	c1 e0 03             	shl    $0x3,%eax
   1a5f4:	01 d0                	add    %edx,%eax
   1a5f6:	c1 e0 04             	shl    $0x4,%eax
   1a5f9:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a5fe:	8b 30                	mov    (%eax),%esi
   1a600:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a604:	89 d0                	mov    %edx,%eax
   1a606:	c1 e0 03             	shl    $0x3,%eax
   1a609:	01 d0                	add    %edx,%eax
   1a60b:	c1 e0 04             	shl    $0x4,%eax
   1a60e:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a613:	8b 10                	mov    (%eax),%edx
   1a615:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a61a:	0f af c2             	imul   %edx,%eax
   1a61d:	8d 3c 06             	lea    (%esi,%eax,1),%edi
				"S" (origin + video_size_row * (top + 1))
   1a620:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a624:	89 d0                	mov    %edx,%eax
   1a626:	c1 e0 03             	shl    $0x3,%eax
   1a629:	01 d0                	add    %edx,%eax
   1a62b:	c1 e0 04             	shl    $0x4,%eax
   1a62e:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a633:	8b 30                	mov    (%eax),%esi
   1a635:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a639:	89 d0                	mov    %edx,%eax
   1a63b:	c1 e0 03             	shl    $0x3,%eax
   1a63e:	01 d0                	add    %edx,%eax
   1a640:	c1 e0 04             	shl    $0x4,%eax
   1a643:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a648:	8b 00                	mov    (%eax),%eax
   1a64a:	8d 50 01             	lea    0x1(%eax),%edx
   1a64d:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a652:	0f af c2             	imul   %edx,%eax
   1a655:	8d 14 06             	lea    (%esi,%eax,1),%edx
			__asm__("cld\n\t"
   1a658:	89 d8                	mov    %ebx,%eax
   1a65a:	89 d6                	mov    %edx,%esi
   1a65c:	fc                   	cld    
   1a65d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a65f:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
   1a665:	f3 66 ab             	rep stos %ax,%es:(%edi)
		if (!top && bottom == video_num_lines) {
   1a668:	e9 d3 00 00 00       	jmp    1a740 <scrup+0x493>
			"rep\n\t"
			"movsl\n\t"
			"movl video_num_columns, %%ecx\n\t"
			"rep\n\t"
			"stosw"
			::"a" (video_erase_char),
   1a66d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a671:	89 d0                	mov    %edx,%eax
   1a673:	c1 e0 03             	shl    $0x3,%eax
   1a676:	01 d0                	add    %edx,%eax
   1a678:	c1 e0 04             	shl    $0x4,%eax
   1a67b:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1a680:	0f b7 18             	movzwl (%eax),%ebx
			"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a683:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a687:	89 d0                	mov    %edx,%eax
   1a689:	c1 e0 03             	shl    $0x3,%eax
   1a68c:	01 d0                	add    %edx,%eax
   1a68e:	c1 e0 04             	shl    $0x4,%eax
   1a691:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a696:	8b 08                	mov    (%eax),%ecx
   1a698:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a69c:	89 d0                	mov    %edx,%eax
   1a69e:	c1 e0 03             	shl    $0x3,%eax
   1a6a1:	01 d0                	add    %edx,%eax
   1a6a3:	c1 e0 04             	shl    $0x4,%eax
   1a6a6:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a6ab:	8b 00                	mov    (%eax),%eax
   1a6ad:	29 c1                	sub    %eax,%ecx
   1a6af:	89 c8                	mov    %ecx,%eax
   1a6b1:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a6b4:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1a6b9:	0f af c2             	imul   %edx,%eax
   1a6bc:	d1 e8                	shr    %eax
   1a6be:	89 c1                	mov    %eax,%ecx
			"D" (origin + video_size_row * top),
   1a6c0:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a6c4:	89 d0                	mov    %edx,%eax
   1a6c6:	c1 e0 03             	shl    $0x3,%eax
   1a6c9:	01 d0                	add    %edx,%eax
   1a6cb:	c1 e0 04             	shl    $0x4,%eax
   1a6ce:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a6d3:	8b 30                	mov    (%eax),%esi
   1a6d5:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a6d9:	89 d0                	mov    %edx,%eax
   1a6db:	c1 e0 03             	shl    $0x3,%eax
   1a6de:	01 d0                	add    %edx,%eax
   1a6e0:	c1 e0 04             	shl    $0x4,%eax
   1a6e3:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a6e8:	8b 10                	mov    (%eax),%edx
   1a6ea:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a6ef:	0f af c2             	imul   %edx,%eax
   1a6f2:	8d 3c 06             	lea    (%esi,%eax,1),%edi
			"S" (origin + video_size_row * (top + 1))
   1a6f5:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a6f9:	89 d0                	mov    %edx,%eax
   1a6fb:	c1 e0 03             	shl    $0x3,%eax
   1a6fe:	01 d0                	add    %edx,%eax
   1a700:	c1 e0 04             	shl    $0x4,%eax
   1a703:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a708:	8b 30                	mov    (%eax),%esi
   1a70a:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a70e:	89 d0                	mov    %edx,%eax
   1a710:	c1 e0 03             	shl    $0x3,%eax
   1a713:	01 d0                	add    %edx,%eax
   1a715:	c1 e0 04             	shl    $0x4,%eax
   1a718:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a71d:	8b 00                	mov    (%eax),%eax
   1a71f:	8d 50 01             	lea    0x1(%eax),%edx
   1a722:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a727:	0f af c2             	imul   %edx,%eax
   1a72a:	8d 14 06             	lea    (%esi,%eax,1),%edx
		__asm__("cld\n\t"
   1a72d:	89 d8                	mov    %ebx,%eax
   1a72f:	89 d6                	mov    %edx,%esi
   1a731:	fc                   	cld    
   1a732:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a734:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
   1a73a:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1a73d:	eb 01                	jmp    1a740 <scrup+0x493>
		return;
   1a73f:	90                   	nop
			:);
	}
}
   1a740:	5b                   	pop    %ebx
   1a741:	5e                   	pop    %esi
   1a742:	5f                   	pop    %edi
   1a743:	c3                   	ret    

0001a744 <scrdown>:
// 将屏幕滚动窗口向上移动一行,相应屏幕滚动区域内容向下移动1行.并在移动开始行的上方出现一新行.处理方法与scrup()相似,只是为了在
// 移动显示内存数据时不会出现数据覆盖的问题,复制操作是以逆向进行的,即先从屏幕倒数第2行的最后一个字符开始复制到最后一行,再将倒数第3行
// 复制到倒数第2行,等等.因为此时对EGA/VGA显示类型和MDA类型的处理过程完全一样,所以该函数实际上没有必要写两段相同的代码.即这里if和
// else语句块中的操作完全一样.
static void scrdown(int currcons)
{
   1a744:	57                   	push   %edi
   1a745:	56                   	push   %esi
   1a746:	53                   	push   %ebx
	// 同样,滚屏区域必须至少有2行.如果滚屏区域顶行号大于等于区域底行号,则不满足进行滚行操作的条件.另外,对于EGA/VGA卡,我们可以指定屏内行范围(区域)
	// 进行滚屏操作,而MDA单色显示卡只能进行整屏操作.由于窗口向上移动最多移动以当前控制台实际显示内存末端的情况,所以这里只需要处理普通的内存数据
	// 移动情况.
	if (bottom <= top)
   1a747:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a74b:	89 d0                	mov    %edx,%eax
   1a74d:	c1 e0 03             	shl    $0x3,%eax
   1a750:	01 d0                	add    %edx,%eax
   1a752:	c1 e0 04             	shl    $0x4,%eax
   1a755:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a75a:	8b 08                	mov    (%eax),%ecx
   1a75c:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a760:	89 d0                	mov    %edx,%eax
   1a762:	c1 e0 03             	shl    $0x3,%eax
   1a765:	01 d0                	add    %edx,%eax
   1a767:	c1 e0 04             	shl    $0x4,%eax
   1a76a:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a76f:	8b 00                	mov    (%eax),%eax
   1a771:	39 c1                	cmp    %eax,%ecx
   1a773:	0f 86 cf 01 00 00    	jbe    1a948 <scrdown+0x204>
		return;
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
   1a779:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1a780:	3c 21                	cmp    $0x21,%al
   1a782:	74 0f                	je     1a793 <scrdown+0x4f>
   1a784:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1a78b:	3c 20                	cmp    $0x20,%al
   1a78d:	0f 85 dc 00 00 00    	jne    1a86f <scrdown+0x12b>
			"movsl\n\t"
			"addl $2, %%edi\n\t"								/* %edi has been decremented by 4 */ /* %edi已减4,因也是反向填擦除字符 */
			"movl video_num_columns, %%ecx\n\t"
			"rep\n\t"											// 将擦除字符填入上方新行中.
			"stosw"
			::"a" (video_erase_char),
   1a793:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a797:	89 d0                	mov    %edx,%eax
   1a799:	c1 e0 03             	shl    $0x3,%eax
   1a79c:	01 d0                	add    %edx,%eax
   1a79e:	c1 e0 04             	shl    $0x4,%eax
   1a7a1:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1a7a6:	0f b7 18             	movzwl (%eax),%ebx
			"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a7a9:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7ad:	89 d0                	mov    %edx,%eax
   1a7af:	c1 e0 03             	shl    $0x3,%eax
   1a7b2:	01 d0                	add    %edx,%eax
   1a7b4:	c1 e0 04             	shl    $0x4,%eax
   1a7b7:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a7bc:	8b 08                	mov    (%eax),%ecx
   1a7be:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7c2:	89 d0                	mov    %edx,%eax
   1a7c4:	c1 e0 03             	shl    $0x3,%eax
   1a7c7:	01 d0                	add    %edx,%eax
   1a7c9:	c1 e0 04             	shl    $0x4,%eax
   1a7cc:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a7d1:	8b 00                	mov    (%eax),%eax
   1a7d3:	29 c1                	sub    %eax,%ecx
   1a7d5:	89 c8                	mov    %ecx,%eax
   1a7d7:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a7da:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1a7df:	0f af c2             	imul   %edx,%eax
   1a7e2:	d1 e8                	shr    %eax
   1a7e4:	89 c1                	mov    %eax,%ecx
			"D" (origin + video_size_row * bottom - 4),
   1a7e6:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7ea:	89 d0                	mov    %edx,%eax
   1a7ec:	c1 e0 03             	shl    $0x3,%eax
   1a7ef:	01 d0                	add    %edx,%eax
   1a7f1:	c1 e0 04             	shl    $0x4,%eax
   1a7f4:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a7f9:	8b 30                	mov    (%eax),%esi
   1a7fb:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7ff:	89 d0                	mov    %edx,%eax
   1a801:	c1 e0 03             	shl    $0x3,%eax
   1a804:	01 d0                	add    %edx,%eax
   1a806:	c1 e0 04             	shl    $0x4,%eax
   1a809:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a80e:	8b 10                	mov    (%eax),%edx
   1a810:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a815:	0f af c2             	imul   %edx,%eax
   1a818:	01 f0                	add    %esi,%eax
   1a81a:	8d 78 fc             	lea    -0x4(%eax),%edi
			"S" (origin + video_size_row * (bottom - 1) - 4)
   1a81d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a821:	89 d0                	mov    %edx,%eax
   1a823:	c1 e0 03             	shl    $0x3,%eax
   1a826:	01 d0                	add    %edx,%eax
   1a828:	c1 e0 04             	shl    $0x4,%eax
   1a82b:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a830:	8b 30                	mov    (%eax),%esi
   1a832:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a836:	89 d0                	mov    %edx,%eax
   1a838:	c1 e0 03             	shl    $0x3,%eax
   1a83b:	01 d0                	add    %edx,%eax
   1a83d:	c1 e0 04             	shl    $0x4,%eax
   1a840:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a845:	8b 00                	mov    (%eax),%eax
   1a847:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a84a:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a84f:	0f af c2             	imul   %edx,%eax
   1a852:	01 f0                	add    %esi,%eax
   1a854:	8d 50 fc             	lea    -0x4(%eax),%edx
		__asm__("std\n\t"										// 置方向位!!
   1a857:	89 d8                	mov    %ebx,%eax
   1a859:	89 d6                	mov    %edx,%esi
   1a85b:	fd                   	std    
   1a85c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a85e:	83 c7 02             	add    $0x2,%edi
   1a861:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
   1a867:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1a86a:	e9 da 00 00 00       	jmp    1a949 <scrdown+0x205>
			"movsl\n\t"
			"addl $2, %%edi\n\t"									/* %edi has been decremented by 4 */
			"movl video_num_columns, %%ecx\n\t"
			"rep\n\t"
			"stosw"
			::"a" (video_erase_char),
   1a86f:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a873:	89 d0                	mov    %edx,%eax
   1a875:	c1 e0 03             	shl    $0x3,%eax
   1a878:	01 d0                	add    %edx,%eax
   1a87a:	c1 e0 04             	shl    $0x4,%eax
   1a87d:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1a882:	0f b7 18             	movzwl (%eax),%ebx
			"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a885:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a889:	89 d0                	mov    %edx,%eax
   1a88b:	c1 e0 03             	shl    $0x3,%eax
   1a88e:	01 d0                	add    %edx,%eax
   1a890:	c1 e0 04             	shl    $0x4,%eax
   1a893:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a898:	8b 08                	mov    (%eax),%ecx
   1a89a:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a89e:	89 d0                	mov    %edx,%eax
   1a8a0:	c1 e0 03             	shl    $0x3,%eax
   1a8a3:	01 d0                	add    %edx,%eax
   1a8a5:	c1 e0 04             	shl    $0x4,%eax
   1a8a8:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a8ad:	8b 00                	mov    (%eax),%eax
   1a8af:	29 c1                	sub    %eax,%ecx
   1a8b1:	89 c8                	mov    %ecx,%eax
   1a8b3:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a8b6:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1a8bb:	0f af c2             	imul   %edx,%eax
   1a8be:	d1 e8                	shr    %eax
   1a8c0:	89 c1                	mov    %eax,%ecx
			"D" (origin + video_size_row * bottom - 4),
   1a8c2:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a8c6:	89 d0                	mov    %edx,%eax
   1a8c8:	c1 e0 03             	shl    $0x3,%eax
   1a8cb:	01 d0                	add    %edx,%eax
   1a8cd:	c1 e0 04             	shl    $0x4,%eax
   1a8d0:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a8d5:	8b 30                	mov    (%eax),%esi
   1a8d7:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a8db:	89 d0                	mov    %edx,%eax
   1a8dd:	c1 e0 03             	shl    $0x3,%eax
   1a8e0:	01 d0                	add    %edx,%eax
   1a8e2:	c1 e0 04             	shl    $0x4,%eax
   1a8e5:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a8ea:	8b 10                	mov    (%eax),%edx
   1a8ec:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a8f1:	0f af c2             	imul   %edx,%eax
   1a8f4:	01 f0                	add    %esi,%eax
   1a8f6:	8d 78 fc             	lea    -0x4(%eax),%edi
			"S" (origin + video_size_row * (bottom - 1) - 4)
   1a8f9:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a8fd:	89 d0                	mov    %edx,%eax
   1a8ff:	c1 e0 03             	shl    $0x3,%eax
   1a902:	01 d0                	add    %edx,%eax
   1a904:	c1 e0 04             	shl    $0x4,%eax
   1a907:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a90c:	8b 30                	mov    (%eax),%esi
   1a90e:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a912:	89 d0                	mov    %edx,%eax
   1a914:	c1 e0 03             	shl    $0x3,%eax
   1a917:	01 d0                	add    %edx,%eax
   1a919:	c1 e0 04             	shl    $0x4,%eax
   1a91c:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a921:	8b 00                	mov    (%eax),%eax
   1a923:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a926:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a92b:	0f af c2             	imul   %edx,%eax
   1a92e:	01 f0                	add    %esi,%eax
   1a930:	8d 50 fc             	lea    -0x4(%eax),%edx
		__asm__("std\n\t"
   1a933:	89 d8                	mov    %ebx,%eax
   1a935:	89 d6                	mov    %edx,%esi
   1a937:	fd                   	std    
   1a938:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a93a:	83 c7 02             	add    $0x2,%edi
   1a93d:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
   1a943:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1a946:	eb 01                	jmp    1a949 <scrdown+0x205>
		return;
   1a948:	90                   	nop
			:);
	}
}
   1a949:	5b                   	pop    %ebx
   1a94a:	5e                   	pop    %esi
   1a94b:	5f                   	pop    %edi
   1a94c:	c3                   	ret    

0001a94d <lf>:
// 如果光标没有处在最后一行,则直接修改光标当前行变量y++,并调整光标对应显示内存位置pos(加上一行字符所对应的内存长度).否则
// 需要将屏幕窗口内容上移一行.
// 函数名称lf(line feed 换行)是指处理控制字符LF.
static void lf(int currcons)
{
	if (y + 1 < bottom) {
   1a94d:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a951:	89 d0                	mov    %edx,%eax
   1a953:	c1 e0 03             	shl    $0x3,%eax
   1a956:	01 d0                	add    %edx,%eax
   1a958:	c1 e0 04             	shl    $0x4,%eax
   1a95b:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1a960:	8b 00                	mov    (%eax),%eax
   1a962:	8d 48 01             	lea    0x1(%eax),%ecx
   1a965:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a969:	89 d0                	mov    %edx,%eax
   1a96b:	c1 e0 03             	shl    $0x3,%eax
   1a96e:	01 d0                	add    %edx,%eax
   1a970:	c1 e0 04             	shl    $0x4,%eax
   1a973:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a978:	8b 00                	mov    (%eax),%eax
   1a97a:	39 c1                	cmp    %eax,%ecx
   1a97c:	73 60                	jae    1a9de <lf+0x91>
		y++;
   1a97e:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a982:	89 d0                	mov    %edx,%eax
   1a984:	c1 e0 03             	shl    $0x3,%eax
   1a987:	01 d0                	add    %edx,%eax
   1a989:	c1 e0 04             	shl    $0x4,%eax
   1a98c:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1a991:	8b 00                	mov    (%eax),%eax
   1a993:	8d 48 01             	lea    0x1(%eax),%ecx
   1a996:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a99a:	89 d0                	mov    %edx,%eax
   1a99c:	c1 e0 03             	shl    $0x3,%eax
   1a99f:	01 d0                	add    %edx,%eax
   1a9a1:	c1 e0 04             	shl    $0x4,%eax
   1a9a4:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1a9a9:	89 08                	mov    %ecx,(%eax)
		pos += video_size_row;							// 加上屏幕一行占用内存的字节数.
   1a9ab:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a9af:	89 d0                	mov    %edx,%eax
   1a9b1:	c1 e0 03             	shl    $0x3,%eax
   1a9b4:	01 d0                	add    %edx,%eax
   1a9b6:	c1 e0 04             	shl    $0x4,%eax
   1a9b9:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1a9be:	8b 10                	mov    (%eax),%edx
   1a9c0:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a9c5:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a9c8:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a9cc:	89 d0                	mov    %edx,%eax
   1a9ce:	c1 e0 03             	shl    $0x3,%eax
   1a9d1:	01 d0                	add    %edx,%eax
   1a9d3:	c1 e0 04             	shl    $0x4,%eax
   1a9d6:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1a9db:	89 08                	mov    %ecx,(%eax)
		return;
   1a9dd:	c3                   	ret    
	}
	scrup(currcons);									// 将屏幕窗口内容上移一行.
   1a9de:	ff 74 24 04          	pushl  0x4(%esp)
   1a9e2:	e8 c6 f8 ff ff       	call   1a2ad <scrup>
   1a9e7:	83 c4 04             	add    $0x4,%esp
}
   1a9ea:	c3                   	ret    

0001a9eb <ri>:
// 如果光标不在屏幕第一行上,则直接修改光标当前标量y--,并调整光标对应显示内存位置pos,减去屏幕上一行字符所对应的内存长度字节数.
// 否则需要将屏幕窗口内容下移一行.
// 函数名称ri(reverse index 反向索引)是指控制字符RI或转义序列"ESC M".
static void ri(int currcons)
{
	if (y > top) {
   1a9eb:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a9ef:	89 d0                	mov    %edx,%eax
   1a9f1:	c1 e0 03             	shl    $0x3,%eax
   1a9f4:	01 d0                	add    %edx,%eax
   1a9f6:	c1 e0 04             	shl    $0x4,%eax
   1a9f9:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1a9fe:	8b 08                	mov    (%eax),%ecx
   1aa00:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa04:	89 d0                	mov    %edx,%eax
   1aa06:	c1 e0 03             	shl    $0x3,%eax
   1aa09:	01 d0                	add    %edx,%eax
   1aa0b:	c1 e0 04             	shl    $0x4,%eax
   1aa0e:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1aa13:	8b 00                	mov    (%eax),%eax
   1aa15:	39 c1                	cmp    %eax,%ecx
   1aa17:	76 61                	jbe    1aa7a <ri+0x8f>
		y--;											// 减去屏幕一行占用内存的字节数
   1aa19:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa1d:	89 d0                	mov    %edx,%eax
   1aa1f:	c1 e0 03             	shl    $0x3,%eax
   1aa22:	01 d0                	add    %edx,%eax
   1aa24:	c1 e0 04             	shl    $0x4,%eax
   1aa27:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1aa2c:	8b 00                	mov    (%eax),%eax
   1aa2e:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1aa31:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa35:	89 d0                	mov    %edx,%eax
   1aa37:	c1 e0 03             	shl    $0x3,%eax
   1aa3a:	01 d0                	add    %edx,%eax
   1aa3c:	c1 e0 04             	shl    $0x4,%eax
   1aa3f:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1aa44:	89 08                	mov    %ecx,(%eax)
		pos -= video_size_row;
   1aa46:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa4a:	89 d0                	mov    %edx,%eax
   1aa4c:	c1 e0 03             	shl    $0x3,%eax
   1aa4f:	01 d0                	add    %edx,%eax
   1aa51:	c1 e0 04             	shl    $0x4,%eax
   1aa54:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1aa59:	8b 10                	mov    (%eax),%edx
   1aa5b:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1aa60:	89 d1                	mov    %edx,%ecx
   1aa62:	29 c1                	sub    %eax,%ecx
   1aa64:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa68:	89 d0                	mov    %edx,%eax
   1aa6a:	c1 e0 03             	shl    $0x3,%eax
   1aa6d:	01 d0                	add    %edx,%eax
   1aa6f:	c1 e0 04             	shl    $0x4,%eax
   1aa72:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1aa77:	89 08                	mov    %ecx,(%eax)
		return;
   1aa79:	c3                   	ret    
	}
	scrdown(currcons);									// 将屏幕窗口内容下移一行
   1aa7a:	ff 74 24 04          	pushl  0x4(%esp)
   1aa7e:	e8 c1 fc ff ff       	call   1a744 <scrdown>
   1aa83:	83 c4 04             	add    $0x4,%esp
}
   1aa86:	c3                   	ret    

0001aa87 <cr>:
// 光标回到第1列(0列).
// 调整光标对应内存位置pos.光标所在列号*2即是0列到光标所在列对应的内存字节长度.
// 函数名称cr(carriage return回车)指明处理的控制字符的回车.
static void cr(int currcons)
{
	pos -= x << 1;										// 减去0列到光标处占用的内存字节数.
   1aa87:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa8b:	89 d0                	mov    %edx,%eax
   1aa8d:	c1 e0 03             	shl    $0x3,%eax
   1aa90:	01 d0                	add    %edx,%eax
   1aa92:	c1 e0 04             	shl    $0x4,%eax
   1aa95:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1aa9a:	8b 08                	mov    (%eax),%ecx
   1aa9c:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aaa0:	89 d0                	mov    %edx,%eax
   1aaa2:	c1 e0 03             	shl    $0x3,%eax
   1aaa5:	01 d0                	add    %edx,%eax
   1aaa7:	c1 e0 04             	shl    $0x4,%eax
   1aaaa:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1aaaf:	8b 00                	mov    (%eax),%eax
   1aab1:	01 c0                	add    %eax,%eax
   1aab3:	29 c1                	sub    %eax,%ecx
   1aab5:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aab9:	89 d0                	mov    %edx,%eax
   1aabb:	c1 e0 03             	shl    $0x3,%eax
   1aabe:	01 d0                	add    %edx,%eax
   1aac0:	c1 e0 04             	shl    $0x4,%eax
   1aac3:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1aac8:	89 08                	mov    %ecx,(%eax)
	x = 0;
   1aaca:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aace:	89 d0                	mov    %edx,%eax
   1aad0:	c1 e0 03             	shl    $0x3,%eax
   1aad3:	01 d0                	add    %edx,%eax
   1aad5:	c1 e0 04             	shl    $0x4,%eax
   1aad8:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1aadd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   1aae3:	90                   	nop
   1aae4:	c3                   	ret    

0001aae5 <del>:

// 擦除光标前一字符(用空格替代)(del -delete 删除)
// 如果光标没有处在0列,则将光标对应内存位置pos后退2字节(对应屏幕上一个字符),然后将当前光标变量列值减1,并将光标所在位置处字符符擦除
static void del(int currcons)
{
	if (x) {
   1aae5:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aae9:	89 d0                	mov    %edx,%eax
   1aaeb:	c1 e0 03             	shl    $0x3,%eax
   1aaee:	01 d0                	add    %edx,%eax
   1aaf0:	c1 e0 04             	shl    $0x4,%eax
   1aaf3:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1aaf8:	8b 00                	mov    (%eax),%eax
   1aafa:	85 c0                	test   %eax,%eax
   1aafc:	0f 84 8a 00 00 00    	je     1ab8c <del+0xa7>
		pos -= 2;
   1ab02:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab06:	89 d0                	mov    %edx,%eax
   1ab08:	c1 e0 03             	shl    $0x3,%eax
   1ab0b:	01 d0                	add    %edx,%eax
   1ab0d:	c1 e0 04             	shl    $0x4,%eax
   1ab10:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ab15:	8b 00                	mov    (%eax),%eax
   1ab17:	8d 48 fe             	lea    -0x2(%eax),%ecx
   1ab1a:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab1e:	89 d0                	mov    %edx,%eax
   1ab20:	c1 e0 03             	shl    $0x3,%eax
   1ab23:	01 d0                	add    %edx,%eax
   1ab25:	c1 e0 04             	shl    $0x4,%eax
   1ab28:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ab2d:	89 08                	mov    %ecx,(%eax)
		x--;
   1ab2f:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab33:	89 d0                	mov    %edx,%eax
   1ab35:	c1 e0 03             	shl    $0x3,%eax
   1ab38:	01 d0                	add    %edx,%eax
   1ab3a:	c1 e0 04             	shl    $0x4,%eax
   1ab3d:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ab42:	8b 00                	mov    (%eax),%eax
   1ab44:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1ab47:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab4b:	89 d0                	mov    %edx,%eax
   1ab4d:	c1 e0 03             	shl    $0x3,%eax
   1ab50:	01 d0                	add    %edx,%eax
   1ab52:	c1 e0 04             	shl    $0x4,%eax
   1ab55:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ab5a:	89 08                	mov    %ecx,(%eax)
		*(unsigned short *)pos = video_erase_char;
   1ab5c:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab60:	89 d0                	mov    %edx,%eax
   1ab62:	c1 e0 03             	shl    $0x3,%eax
   1ab65:	01 d0                	add    %edx,%eax
   1ab67:	c1 e0 04             	shl    $0x4,%eax
   1ab6a:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ab6f:	8b 00                	mov    (%eax),%eax
   1ab71:	89 c1                	mov    %eax,%ecx
   1ab73:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab77:	89 d0                	mov    %edx,%eax
   1ab79:	c1 e0 03             	shl    $0x3,%eax
   1ab7c:	01 d0                	add    %edx,%eax
   1ab7e:	c1 e0 04             	shl    $0x4,%eax
   1ab81:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1ab86:	0f b7 00             	movzwl (%eax),%eax
   1ab89:	66 89 01             	mov    %ax,(%ecx)
	}
}
   1ab8c:	90                   	nop
   1ab8d:	c3                   	ret    

0001ab8e <csi_J>:
// ANSI控制序列: 'ESC [ Ps J'(Ps = 0 - 删除光标处到屏幕底端;1 - 删除屏幕开始到光标处;2 - 整屏删除).本函数根据指定的控制序列
// 具体参数值,执行与光标位置的删除操作,并且在擦除字符或行时光标位置不变.
// 函数名称csi_J(CSI - Control Sequence Introducer,即控制序列引导码)指明对控制序列"CSI Ps J"进行处理.
// 参数:vpar - 对应上面控制序列中Ps的值.
static void csi_J(int currcons, int vpar)
{
   1ab8e:	57                   	push   %edi
   1ab8f:	53                   	push   %ebx
   1ab90:	83 ec 10             	sub    $0x10,%esp
	long count;
	long start;

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
   1ab93:	83 7c 24 20 01       	cmpl   $0x1,0x20(%esp)
   1ab98:	74 65                	je     1abff <csi_J+0x71>
   1ab9a:	83 7c 24 20 02       	cmpl   $0x2,0x20(%esp)
   1ab9f:	0f 84 a9 00 00 00    	je     1ac4e <csi_J+0xc0>
   1aba5:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1abaa:	0f 85 f2 00 00 00    	jne    1aca2 <csi_J+0x114>
		case 0:												/* erase from cursor to end of display */
			count = (scr_end - pos) >> 1;					/* 擦除光标到屏幕底端所有字符 */
   1abb0:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1abb4:	89 d0                	mov    %edx,%eax
   1abb6:	c1 e0 03             	shl    $0x3,%eax
   1abb9:	01 d0                	add    %edx,%eax
   1abbb:	c1 e0 04             	shl    $0x4,%eax
   1abbe:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1abc3:	8b 08                	mov    (%eax),%ecx
   1abc5:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1abc9:	89 d0                	mov    %edx,%eax
   1abcb:	c1 e0 03             	shl    $0x3,%eax
   1abce:	01 d0                	add    %edx,%eax
   1abd0:	c1 e0 04             	shl    $0x4,%eax
   1abd3:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1abd8:	8b 00                	mov    (%eax),%eax
   1abda:	29 c1                	sub    %eax,%ecx
   1abdc:	89 c8                	mov    %ecx,%eax
   1abde:	d1 e8                	shr    %eax
   1abe0:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = pos;
   1abe4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1abe8:	89 d0                	mov    %edx,%eax
   1abea:	c1 e0 03             	shl    $0x3,%eax
   1abed:	01 d0                	add    %edx,%eax
   1abef:	c1 e0 04             	shl    $0x4,%eax
   1abf2:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1abf7:	8b 00                	mov    (%eax),%eax
   1abf9:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1abfd:	eb 7b                	jmp    1ac7a <csi_J+0xec>
		case 1:												/* erase from start to cursor */
			count = (pos - origin) >> 1;					/* 删除从屏幕开始到光标处的字符 */
   1abff:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac03:	89 d0                	mov    %edx,%eax
   1ac05:	c1 e0 03             	shl    $0x3,%eax
   1ac08:	01 d0                	add    %edx,%eax
   1ac0a:	c1 e0 04             	shl    $0x4,%eax
   1ac0d:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ac12:	8b 08                	mov    (%eax),%ecx
   1ac14:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac18:	89 d0                	mov    %edx,%eax
   1ac1a:	c1 e0 03             	shl    $0x3,%eax
   1ac1d:	01 d0                	add    %edx,%eax
   1ac1f:	c1 e0 04             	shl    $0x4,%eax
   1ac22:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1ac27:	8b 00                	mov    (%eax),%eax
   1ac29:	29 c1                	sub    %eax,%ecx
   1ac2b:	89 c8                	mov    %ecx,%eax
   1ac2d:	d1 e8                	shr    %eax
   1ac2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = origin;
   1ac33:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac37:	89 d0                	mov    %edx,%eax
   1ac39:	c1 e0 03             	shl    $0x3,%eax
   1ac3c:	01 d0                	add    %edx,%eax
   1ac3e:	c1 e0 04             	shl    $0x4,%eax
   1ac41:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1ac46:	8b 00                	mov    (%eax),%eax
   1ac48:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1ac4c:	eb 2c                	jmp    1ac7a <csi_J+0xec>
		case 2: 											/* erase whole display */
			count = video_num_columns * video_num_lines;	/* 删除整个屏幕上的所有字符 */
   1ac4e:	8b 15 34 fe 03 00    	mov    0x3fe34,%edx
   1ac54:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1ac59:	0f af c2             	imul   %edx,%eax
   1ac5c:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = origin;
   1ac60:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac64:	89 d0                	mov    %edx,%eax
   1ac66:	c1 e0 03             	shl    $0x3,%eax
   1ac69:	01 d0                	add    %edx,%eax
   1ac6b:	c1 e0 04             	shl    $0x4,%eax
   1ac6e:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1ac73:	8b 00                	mov    (%eax),%eax
   1ac75:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1ac79:	90                   	nop
	// %0 - ecx(删除的字符数count);%1 - edi(删除操作开始的地址);%2 - eax(填入的擦除字符).
	__asm__("cld\n\t"
		"rep\n\t"
		"stosw\n\t"
		::"c" (count),
		"D" (start),"a" (video_erase_char)
   1ac7a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac7e:	89 d0                	mov    %edx,%eax
   1ac80:	c1 e0 03             	shl    $0x3,%eax
   1ac83:	01 d0                	add    %edx,%eax
   1ac85:	c1 e0 04             	shl    $0x4,%eax
   1ac88:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1ac8d:	0f b7 00             	movzwl (%eax),%eax
	__asm__("cld\n\t"
   1ac90:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1ac94:	8b 5c 24 08          	mov    0x8(%esp),%ebx
   1ac98:	89 d1                	mov    %edx,%ecx
   1ac9a:	89 df                	mov    %ebx,%edi
   1ac9c:	fc                   	cld    
   1ac9d:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1aca0:	eb 01                	jmp    1aca3 <csi_J+0x115>
			return;
   1aca2:	90                   	nop
		:);
}
   1aca3:	83 c4 10             	add    $0x10,%esp
   1aca6:	5b                   	pop    %ebx
   1aca7:	5f                   	pop    %edi
   1aca8:	c3                   	ret    

0001aca9 <csi_K>:
// 删除上一行上与光标位置相关的部分.
// ANSI转义字符序列:'ESC [ Ps K'(Ps = 0删除到行尾;1 从开始删除;2 整行都删除).本函数根据参数擦除光标所在行的部分或所有字符.擦除操作从屏幕上
// 移走字符但不影响其他字符.擦除的字符被丢弃.在擦除字符或行时光标位置不变.
// 参数:par - 对应上面控制序列中Ps的值.
static void csi_K(int currcons, int vpar)
{
   1aca9:	57                   	push   %edi
   1acaa:	53                   	push   %ebx
   1acab:	83 ec 10             	sub    $0x10,%esp
	long count;
	long start;

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
   1acae:	83 7c 24 20 01       	cmpl   $0x1,0x20(%esp)
   1acb3:	74 79                	je     1ad2e <csi_K+0x85>
   1acb5:	83 7c 24 20 02       	cmpl   $0x2,0x20(%esp)
   1acba:	0f 84 c7 00 00 00    	je     1ad87 <csi_K+0xde>
   1acc0:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1acc5:	0f 85 22 01 00 00    	jne    1aded <csi_K+0x144>
		case 0:													/* erase from cursor to end of line */
			if (x >= video_num_columns)							/* 删除光标到行尾所有字符 */
   1accb:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1accf:	89 d0                	mov    %edx,%eax
   1acd1:	c1 e0 03             	shl    $0x3,%eax
   1acd4:	01 d0                	add    %edx,%eax
   1acd6:	c1 e0 04             	shl    $0x4,%eax
   1acd9:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1acde:	8b 10                	mov    (%eax),%edx
   1ace0:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1ace5:	39 c2                	cmp    %eax,%edx
   1ace7:	0f 83 03 01 00 00    	jae    1adf0 <csi_K+0x147>
				return;
			count = video_num_columns - x;
   1aced:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
   1acf3:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1acf7:	89 d0                	mov    %edx,%eax
   1acf9:	c1 e0 03             	shl    $0x3,%eax
   1acfc:	01 d0                	add    %edx,%eax
   1acfe:	c1 e0 04             	shl    $0x4,%eax
   1ad01:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ad06:	8b 00                	mov    (%eax),%eax
   1ad08:	29 c1                	sub    %eax,%ecx
   1ad0a:	89 c8                	mov    %ecx,%eax
   1ad0c:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = pos;
   1ad10:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad14:	89 d0                	mov    %edx,%eax
   1ad16:	c1 e0 03             	shl    $0x3,%eax
   1ad19:	01 d0                	add    %edx,%eax
   1ad1b:	c1 e0 04             	shl    $0x4,%eax
   1ad1e:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ad23:	8b 00                	mov    (%eax),%eax
   1ad25:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1ad29:	e9 97 00 00 00       	jmp    1adc5 <csi_K+0x11c>
		case 1:													/* erase from start of line to cursor */
			start = pos - (x << 1);								/* 删除从行开始到光标处 */
   1ad2e:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad32:	89 d0                	mov    %edx,%eax
   1ad34:	c1 e0 03             	shl    $0x3,%eax
   1ad37:	01 d0                	add    %edx,%eax
   1ad39:	c1 e0 04             	shl    $0x4,%eax
   1ad3c:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ad41:	8b 08                	mov    (%eax),%ecx
   1ad43:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad47:	89 d0                	mov    %edx,%eax
   1ad49:	c1 e0 03             	shl    $0x3,%eax
   1ad4c:	01 d0                	add    %edx,%eax
   1ad4e:	c1 e0 04             	shl    $0x4,%eax
   1ad51:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ad56:	8b 00                	mov    (%eax),%eax
   1ad58:	01 c0                	add    %eax,%eax
   1ad5a:	29 c1                	sub    %eax,%ecx
   1ad5c:	89 c8                	mov    %ecx,%eax
   1ad5e:	89 44 24 08          	mov    %eax,0x8(%esp)
			count = (x < video_num_columns) ? x : video_num_columns;
   1ad62:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad66:	89 d0                	mov    %edx,%eax
   1ad68:	c1 e0 03             	shl    $0x3,%eax
   1ad6b:	01 d0                	add    %edx,%eax
   1ad6d:	c1 e0 04             	shl    $0x4,%eax
   1ad70:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ad75:	8b 10                	mov    (%eax),%edx
   1ad77:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1ad7c:	39 c2                	cmp    %eax,%edx
   1ad7e:	0f 46 c2             	cmovbe %edx,%eax
   1ad81:	89 44 24 0c          	mov    %eax,0xc(%esp)
			break;
   1ad85:	eb 3e                	jmp    1adc5 <csi_K+0x11c>
		case 2: 												/* erase whole line */
			start = pos - (x << 1);								/* 将整行字符全删除 */
   1ad87:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad8b:	89 d0                	mov    %edx,%eax
   1ad8d:	c1 e0 03             	shl    $0x3,%eax
   1ad90:	01 d0                	add    %edx,%eax
   1ad92:	c1 e0 04             	shl    $0x4,%eax
   1ad95:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ad9a:	8b 08                	mov    (%eax),%ecx
   1ad9c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ada0:	89 d0                	mov    %edx,%eax
   1ada2:	c1 e0 03             	shl    $0x3,%eax
   1ada5:	01 d0                	add    %edx,%eax
   1ada7:	c1 e0 04             	shl    $0x4,%eax
   1adaa:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1adaf:	8b 00                	mov    (%eax),%eax
   1adb1:	01 c0                	add    %eax,%eax
   1adb3:	29 c1                	sub    %eax,%ecx
   1adb5:	89 c8                	mov    %ecx,%eax
   1adb7:	89 44 24 08          	mov    %eax,0x8(%esp)
			count = video_num_columns;
   1adbb:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1adc0:	89 44 24 0c          	mov    %eax,0xc(%esp)
			break;
   1adc4:	90                   	nop
	// %0 - ecx(删除字符数count);%1 - edi(删除操作开始地址);%2 - eax(填入的擦除字符).
	__asm__("cld\n\t"
		"rep\n\t"
		"stosw\n\t"
		::"c" (count),
		"D" (start),"a" (video_erase_char)
   1adc5:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1adc9:	89 d0                	mov    %edx,%eax
   1adcb:	c1 e0 03             	shl    $0x3,%eax
   1adce:	01 d0                	add    %edx,%eax
   1add0:	c1 e0 04             	shl    $0x4,%eax
   1add3:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1add8:	0f b7 00             	movzwl (%eax),%eax
	__asm__("cld\n\t"
   1addb:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1addf:	8b 5c 24 08          	mov    0x8(%esp),%ebx
   1ade3:	89 d1                	mov    %edx,%ecx
   1ade5:	89 df                	mov    %ebx,%edi
   1ade7:	fc                   	cld    
   1ade8:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1adeb:	eb 04                	jmp    1adf1 <csi_K+0x148>
			return;
   1aded:	90                   	nop
   1adee:	eb 01                	jmp    1adf1 <csi_K+0x148>
				return;
   1adf0:	90                   	nop
		:);
}
   1adf1:	83 c4 10             	add    $0x10,%esp
   1adf4:	5b                   	pop    %ebx
   1adf5:	5f                   	pop    %edi
   1adf6:	c3                   	ret    

0001adf7 <csi_m>:
// 设置显示字符属性
// ANSI转义序列:'ESC [ Ps;PS m'.Ps = 0 - 默认属性;1 - 粗体并增亮;4 - 下划线;5 - 闪烁;7 - 反显;22 - 非粗体;24 - 无下划线;
// 25 - 无闪烁;27 - 正显;30~38 - 设置前景色彩;39 - 默认前景色(White);40~48 - 设置背景色彩;49 - 默认背景色(Black).
// 该控制序列根据参数设置字符显示属性.以后所有发送到终端的字符都将使用这里指定的属性,直到再次执行本控制序列重新设置字符显示的属性.
void csi_m(int currcons)
{
   1adf7:	53                   	push   %ebx
   1adf8:	83 ec 10             	sub    $0x10,%esp
	// 如果Ps = 0,则把当前虚拟控制台随后显示的字符属性设置为默认属性def_attr.初始化时def_attr已被设置成0x07(黑底白字).
	// 如果Ps = 1,则把当前虚拟控制台随后显示的字符属性设置为粗体或增亮显示.如果是彩色显示,则把字符属性或上0x08让字符高亮度显示;如果是单色显示,
	// 则让人带下划线显示.
	// 如果ps = 4,则对彩色和单色显示进行不同的处理.若此时不是彩色显示方式,则让字符带下划线显示.如果是彩色显示,那么若原来vc_bold_attr不等于-1
	// 时就复位其背景色;否则的话就把背景色取反.若取反后前景色与背景色相同,就把前景色增1而取另一种颜色.
	for (i = 0; i <= npar; i++)
   1adfb:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1ae02:	00 
   1ae03:	e9 ba 05 00 00       	jmp    1b3c2 <csi_m+0x5cb>
		switch (par[i]) {
   1ae08:	8b 54 24 18          	mov    0x18(%esp),%edx
   1ae0c:	89 d0                	mov    %edx,%eax
   1ae0e:	c1 e0 03             	shl    $0x3,%eax
   1ae11:	01 d0                	add    %edx,%eax
   1ae13:	c1 e0 02             	shl    $0x2,%eax
   1ae16:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1ae1a:	01 d0                	add    %edx,%eax
   1ae1c:	83 c0 0c             	add    $0xc,%eax
   1ae1f:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1ae26:	83 f8 31             	cmp    $0x31,%eax
   1ae29:	0f 87 2b 04 00 00    	ja     1b25a <csi_m+0x463>
   1ae2f:	8b 04 85 ec 53 02 00 	mov    0x253ec(,%eax,4),%eax
   1ae36:	ff e0                	jmp    *%eax
			case 0:
				attr = def_attr; break;  									/* default */
   1ae38:	8b 54 24 18          	mov    0x18(%esp),%edx
   1ae3c:	89 d0                	mov    %edx,%eax
   1ae3e:	c1 e0 03             	shl    $0x3,%eax
   1ae41:	01 d0                	add    %edx,%eax
   1ae43:	c1 e0 04             	shl    $0x4,%eax
   1ae46:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1ae4b:	0f b6 08             	movzbl (%eax),%ecx
   1ae4e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1ae52:	89 d0                	mov    %edx,%eax
   1ae54:	c1 e0 03             	shl    $0x3,%eax
   1ae57:	01 d0                	add    %edx,%eax
   1ae59:	c1 e0 04             	shl    $0x4,%eax
   1ae5c:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1ae61:	88 08                	mov    %cl,(%eax)
   1ae63:	e9 55 05 00 00       	jmp    1b3bd <csi_m+0x5c6>
			case 1:
				attr = (iscolor ? attr | 0x08 : attr | 0x0f); break;  		/* bold */
   1ae68:	8b 54 24 18          	mov    0x18(%esp),%edx
   1ae6c:	89 d0                	mov    %edx,%eax
   1ae6e:	c1 e0 03             	shl    $0x3,%eax
   1ae71:	01 d0                	add    %edx,%eax
   1ae73:	c1 e0 04             	shl    $0x4,%eax
   1ae76:	05 e8 fe 03 00       	add    $0x3fee8,%eax
   1ae7b:	8b 00                	mov    (%eax),%eax
   1ae7d:	85 c0                	test   %eax,%eax
   1ae7f:	74 1d                	je     1ae9e <csi_m+0xa7>
   1ae81:	8b 54 24 18          	mov    0x18(%esp),%edx
   1ae85:	89 d0                	mov    %edx,%eax
   1ae87:	c1 e0 03             	shl    $0x3,%eax
   1ae8a:	01 d0                	add    %edx,%eax
   1ae8c:	c1 e0 04             	shl    $0x4,%eax
   1ae8f:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1ae94:	0f b6 00             	movzbl (%eax),%eax
   1ae97:	83 c8 08             	or     $0x8,%eax
   1ae9a:	89 c1                	mov    %eax,%ecx
   1ae9c:	eb 1b                	jmp    1aeb9 <csi_m+0xc2>
   1ae9e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aea2:	89 d0                	mov    %edx,%eax
   1aea4:	c1 e0 03             	shl    $0x3,%eax
   1aea7:	01 d0                	add    %edx,%eax
   1aea9:	c1 e0 04             	shl    $0x4,%eax
   1aeac:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1aeb1:	0f b6 00             	movzbl (%eax),%eax
   1aeb4:	83 c8 0f             	or     $0xf,%eax
   1aeb7:	89 c1                	mov    %eax,%ecx
   1aeb9:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aebd:	89 d0                	mov    %edx,%eax
   1aebf:	c1 e0 03             	shl    $0x3,%eax
   1aec2:	01 d0                	add    %edx,%eax
   1aec4:	c1 e0 04             	shl    $0x4,%eax
   1aec7:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1aecc:	88 08                	mov    %cl,(%eax)
   1aece:	e9 ea 04 00 00       	jmp    1b3bd <csi_m+0x5c6>
			/*case 4: attr=attr|0x01;break;*/  /* underline */
			case 4: 														/* bold */
			  if (!iscolor)
   1aed3:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aed7:	89 d0                	mov    %edx,%eax
   1aed9:	c1 e0 03             	shl    $0x3,%eax
   1aedc:	01 d0                	add    %edx,%eax
   1aede:	c1 e0 04             	shl    $0x4,%eax
   1aee1:	05 e8 fe 03 00       	add    $0x3fee8,%eax
   1aee6:	8b 00                	mov    (%eax),%eax
   1aee8:	85 c0                	test   %eax,%eax
   1aeea:	75 35                	jne    1af21 <csi_m+0x12a>
			    attr |= 0x01;												// 单色则带下划线显示.
   1aeec:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aef0:	89 d0                	mov    %edx,%eax
   1aef2:	c1 e0 03             	shl    $0x3,%eax
   1aef5:	01 d0                	add    %edx,%eax
   1aef7:	c1 e0 04             	shl    $0x4,%eax
   1aefa:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1aeff:	0f b6 00             	movzbl (%eax),%eax
   1af02:	83 c8 01             	or     $0x1,%eax
   1af05:	89 c1                	mov    %eax,%ecx
   1af07:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af0b:	89 d0                	mov    %edx,%eax
   1af0d:	c1 e0 03             	shl    $0x3,%eax
   1af10:	01 d0                	add    %edx,%eax
   1af12:	c1 e0 04             	shl    $0x4,%eax
   1af15:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1af1a:	88 08                	mov    %cl,(%eax)
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
			        newattr);
			    }
			  }
			  break;
   1af1c:	e9 9c 04 00 00       	jmp    1b3bd <csi_m+0x5c6>
			    if (vc_cons[currcons].vc_bold_attr != -1)
   1af21:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af25:	89 d0                	mov    %edx,%eax
   1af27:	c1 e0 03             	shl    $0x3,%eax
   1af2a:	01 d0                	add    %edx,%eax
   1af2c:	c1 e0 04             	shl    $0x4,%eax
   1af2f:	05 64 fe 03 00       	add    $0x3fe64,%eax
   1af34:	8b 00                	mov    (%eax),%eax
   1af36:	83 f8 ff             	cmp    $0xffffffff,%eax
   1af39:	74 51                	je     1af8c <csi_m+0x195>
			      attr = (vc_cons[currcons].vc_bold_attr & 0x0f) | (0xf0 & (attr));
   1af3b:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af3f:	89 d0                	mov    %edx,%eax
   1af41:	c1 e0 03             	shl    $0x3,%eax
   1af44:	01 d0                	add    %edx,%eax
   1af46:	c1 e0 04             	shl    $0x4,%eax
   1af49:	05 64 fe 03 00       	add    $0x3fe64,%eax
   1af4e:	8b 00                	mov    (%eax),%eax
   1af50:	83 e0 0f             	and    $0xf,%eax
   1af53:	89 c1                	mov    %eax,%ecx
   1af55:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af59:	89 d0                	mov    %edx,%eax
   1af5b:	c1 e0 03             	shl    $0x3,%eax
   1af5e:	01 d0                	add    %edx,%eax
   1af60:	c1 e0 04             	shl    $0x4,%eax
   1af63:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1af68:	0f b6 00             	movzbl (%eax),%eax
   1af6b:	83 e0 f0             	and    $0xfffffff0,%eax
   1af6e:	09 c8                	or     %ecx,%eax
   1af70:	89 c1                	mov    %eax,%ecx
   1af72:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af76:	89 d0                	mov    %edx,%eax
   1af78:	c1 e0 03             	shl    $0x3,%eax
   1af7b:	01 d0                	add    %edx,%eax
   1af7d:	c1 e0 04             	shl    $0x4,%eax
   1af80:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1af85:	88 08                	mov    %cl,(%eax)
			  break;
   1af87:	e9 31 04 00 00       	jmp    1b3bd <csi_m+0x5c6>
			    	short newattr = (attr&0xf0)|(0xf&(~attr));
   1af8c:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af90:	89 d0                	mov    %edx,%eax
   1af92:	c1 e0 03             	shl    $0x3,%eax
   1af95:	01 d0                	add    %edx,%eax
   1af97:	c1 e0 04             	shl    $0x4,%eax
   1af9a:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1af9f:	0f b6 00             	movzbl (%eax),%eax
   1afa2:	83 f0 0f             	xor    $0xf,%eax
   1afa5:	0f b6 c0             	movzbl %al,%eax
   1afa8:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
   1afad:	0f bf 4c 24 0a       	movswl 0xa(%esp),%ecx
   1afb2:	8b 54 24 18          	mov    0x18(%esp),%edx
   1afb6:	89 d0                	mov    %edx,%eax
   1afb8:	c1 e0 03             	shl    $0x3,%eax
   1afbb:	01 d0                	add    %edx,%eax
   1afbd:	c1 e0 04             	shl    $0x4,%eax
   1afc0:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1afc5:	0f b6 00             	movzbl (%eax),%eax
   1afc8:	c0 e8 04             	shr    $0x4,%al
   1afcb:	0f b6 c0             	movzbl %al,%eax
   1afce:	31 c8                	xor    %ecx,%eax
   1afd0:	83 e0 0f             	and    $0xf,%eax
   1afd3:	85 c0                	test   %eax,%eax
   1afd5:	75 65                	jne    1b03c <csi_m+0x245>
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
   1afd7:	8b 54 24 18          	mov    0x18(%esp),%edx
   1afdb:	89 d0                	mov    %edx,%eax
   1afdd:	c1 e0 03             	shl    $0x3,%eax
   1afe0:	01 d0                	add    %edx,%eax
   1afe2:	c1 e0 04             	shl    $0x4,%eax
   1afe5:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1afea:	0f b6 00             	movzbl (%eax),%eax
   1afed:	83 e0 f0             	and    $0xfffffff0,%eax
   1aff0:	89 c3                	mov    %eax,%ebx
   1aff2:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aff6:	89 d0                	mov    %edx,%eax
   1aff8:	c1 e0 03             	shl    $0x3,%eax
   1affb:	01 d0                	add    %edx,%eax
   1affd:	c1 e0 04             	shl    $0x4,%eax
   1b000:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b005:	0f b6 00             	movzbl (%eax),%eax
   1b008:	0f b6 c0             	movzbl %al,%eax
   1b00b:	83 e0 0f             	and    $0xf,%eax
   1b00e:	8d 48 01             	lea    0x1(%eax),%ecx
   1b011:	ba 89 88 88 88       	mov    $0x88888889,%edx
   1b016:	89 c8                	mov    %ecx,%eax
   1b018:	f7 ea                	imul   %edx
   1b01a:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
   1b01d:	c1 f8 03             	sar    $0x3,%eax
   1b020:	89 c2                	mov    %eax,%edx
   1b022:	89 c8                	mov    %ecx,%eax
   1b024:	c1 f8 1f             	sar    $0x1f,%eax
   1b027:	29 c2                	sub    %eax,%edx
   1b029:	89 d0                	mov    %edx,%eax
   1b02b:	c1 e0 04             	shl    $0x4,%eax
   1b02e:	29 d0                	sub    %edx,%eax
   1b030:	29 c1                	sub    %eax,%ecx
   1b032:	89 ca                	mov    %ecx,%edx
   1b034:	89 d0                	mov    %edx,%eax
   1b036:	09 d8                	or     %ebx,%eax
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
   1b038:	89 c1                	mov    %eax,%ecx
   1b03a:	eb 07                	jmp    1b043 <csi_m+0x24c>
   1b03c:	0f b7 44 24 0a       	movzwl 0xa(%esp),%eax
   1b041:	89 c1                	mov    %eax,%ecx
   1b043:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b047:	89 d0                	mov    %edx,%eax
   1b049:	c1 e0 03             	shl    $0x3,%eax
   1b04c:	01 d0                	add    %edx,%eax
   1b04e:	c1 e0 04             	shl    $0x4,%eax
   1b051:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b056:	88 08                	mov    %cl,(%eax)
			  break;
   1b058:	e9 60 03 00 00       	jmp    1b3bd <csi_m+0x5c6>
			// 如果Ps = 5,则把当前虚拟控制台随后显示的字符设置为闪烁,即把属性字节位7置1.
			case 5: attr = attr | 0x80; break;  							/* blinking */
   1b05d:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b061:	89 d0                	mov    %edx,%eax
   1b063:	c1 e0 03             	shl    $0x3,%eax
   1b066:	01 d0                	add    %edx,%eax
   1b068:	c1 e0 04             	shl    $0x4,%eax
   1b06b:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b070:	0f b6 00             	movzbl (%eax),%eax
   1b073:	83 c8 80             	or     $0xffffff80,%eax
   1b076:	89 c1                	mov    %eax,%ecx
   1b078:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b07c:	89 d0                	mov    %edx,%eax
   1b07e:	c1 e0 03             	shl    $0x3,%eax
   1b081:	01 d0                	add    %edx,%eax
   1b083:	c1 e0 04             	shl    $0x4,%eax
   1b086:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b08b:	88 08                	mov    %cl,(%eax)
   1b08d:	e9 2b 03 00 00       	jmp    1b3bd <csi_m+0x5c6>
			// 如果Ps = 7,则把当前虚拟控制台随后显示的字符设置为反显,即把前景色和背景色交换.
			case 7: attr = (attr << 4) | (attr >> 4); break;  				/* negative */
   1b092:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b096:	89 d0                	mov    %edx,%eax
   1b098:	c1 e0 03             	shl    $0x3,%eax
   1b09b:	01 d0                	add    %edx,%eax
   1b09d:	c1 e0 04             	shl    $0x4,%eax
   1b0a0:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b0a5:	0f b6 00             	movzbl (%eax),%eax
   1b0a8:	0f b6 c0             	movzbl %al,%eax
   1b0ab:	c1 e0 04             	shl    $0x4,%eax
   1b0ae:	89 c1                	mov    %eax,%ecx
   1b0b0:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0b4:	89 d0                	mov    %edx,%eax
   1b0b6:	c1 e0 03             	shl    $0x3,%eax
   1b0b9:	01 d0                	add    %edx,%eax
   1b0bb:	c1 e0 04             	shl    $0x4,%eax
   1b0be:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b0c3:	0f b6 00             	movzbl (%eax),%eax
   1b0c6:	c0 e8 04             	shr    $0x4,%al
   1b0c9:	09 c8                	or     %ecx,%eax
   1b0cb:	89 c1                	mov    %eax,%ecx
   1b0cd:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0d1:	89 d0                	mov    %edx,%eax
   1b0d3:	c1 e0 03             	shl    $0x3,%eax
   1b0d6:	01 d0                	add    %edx,%eax
   1b0d8:	c1 e0 04             	shl    $0x4,%eax
   1b0db:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b0e0:	88 08                	mov    %cl,(%eax)
   1b0e2:	e9 d6 02 00 00       	jmp    1b3bd <csi_m+0x5c6>
			// 如果Ps = 22,则取消随后字符的高亮度显示(取消粗体显示).
			case 22: attr = attr & 0xf7; break; 							/* not bold */
   1b0e7:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0eb:	89 d0                	mov    %edx,%eax
   1b0ed:	c1 e0 03             	shl    $0x3,%eax
   1b0f0:	01 d0                	add    %edx,%eax
   1b0f2:	c1 e0 04             	shl    $0x4,%eax
   1b0f5:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b0fa:	0f b6 00             	movzbl (%eax),%eax
   1b0fd:	83 e0 f7             	and    $0xfffffff7,%eax
   1b100:	89 c1                	mov    %eax,%ecx
   1b102:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b106:	89 d0                	mov    %edx,%eax
   1b108:	c1 e0 03             	shl    $0x3,%eax
   1b10b:	01 d0                	add    %edx,%eax
   1b10d:	c1 e0 04             	shl    $0x4,%eax
   1b110:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b115:	88 08                	mov    %cl,(%eax)
   1b117:	e9 a1 02 00 00       	jmp    1b3bd <csi_m+0x5c6>
			// 如果Ps = 24,则对于单色显示是取消随后字符的下划线显示,对于彩色显示取是取消绿色.
			case 24: attr = attr & 0xfe; break;  							/* not underline */
   1b11c:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b120:	89 d0                	mov    %edx,%eax
   1b122:	c1 e0 03             	shl    $0x3,%eax
   1b125:	01 d0                	add    %edx,%eax
   1b127:	c1 e0 04             	shl    $0x4,%eax
   1b12a:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b12f:	0f b6 00             	movzbl (%eax),%eax
   1b132:	83 e0 fe             	and    $0xfffffffe,%eax
   1b135:	89 c1                	mov    %eax,%ecx
   1b137:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b13b:	89 d0                	mov    %edx,%eax
   1b13d:	c1 e0 03             	shl    $0x3,%eax
   1b140:	01 d0                	add    %edx,%eax
   1b142:	c1 e0 04             	shl    $0x4,%eax
   1b145:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b14a:	88 08                	mov    %cl,(%eax)
   1b14c:	e9 6c 02 00 00       	jmp    1b3bd <csi_m+0x5c6>
			// 如果Ps = 25,则取消随后字符的闪烁显示.
			case 25: attr = attr & 0x7f; break;  							/* not blinking */
   1b151:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b155:	89 d0                	mov    %edx,%eax
   1b157:	c1 e0 03             	shl    $0x3,%eax
   1b15a:	01 d0                	add    %edx,%eax
   1b15c:	c1 e0 04             	shl    $0x4,%eax
   1b15f:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b164:	0f b6 00             	movzbl (%eax),%eax
   1b167:	83 e0 7f             	and    $0x7f,%eax
   1b16a:	89 c1                	mov    %eax,%ecx
   1b16c:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b170:	89 d0                	mov    %edx,%eax
   1b172:	c1 e0 03             	shl    $0x3,%eax
   1b175:	01 d0                	add    %edx,%eax
   1b177:	c1 e0 04             	shl    $0x4,%eax
   1b17a:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b17f:	88 08                	mov    %cl,(%eax)
   1b181:	e9 37 02 00 00       	jmp    1b3bd <csi_m+0x5c6>
			// 如果Ps = 27,则取消随后字符的反显.
			case 27: attr = def_attr; break; 								/* positive image */
   1b186:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b18a:	89 d0                	mov    %edx,%eax
   1b18c:	c1 e0 03             	shl    $0x3,%eax
   1b18f:	01 d0                	add    %edx,%eax
   1b191:	c1 e0 04             	shl    $0x4,%eax
   1b194:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1b199:	0f b6 08             	movzbl (%eax),%ecx
   1b19c:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1a0:	89 d0                	mov    %edx,%eax
   1b1a2:	c1 e0 03             	shl    $0x3,%eax
   1b1a5:	01 d0                	add    %edx,%eax
   1b1a7:	c1 e0 04             	shl    $0x4,%eax
   1b1aa:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b1af:	88 08                	mov    %cl,(%eax)
   1b1b1:	e9 07 02 00 00       	jmp    1b3bd <csi_m+0x5c6>
			// 如果Ps = 39,则复位随后字符的前景色为默认前景色(白色).
			case 39: attr = (attr & 0xf0) | (def_attr & 0x0f); break;
   1b1b6:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1ba:	89 d0                	mov    %edx,%eax
   1b1bc:	c1 e0 03             	shl    $0x3,%eax
   1b1bf:	01 d0                	add    %edx,%eax
   1b1c1:	c1 e0 04             	shl    $0x4,%eax
   1b1c4:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b1c9:	0f b6 00             	movzbl (%eax),%eax
   1b1cc:	83 e0 f0             	and    $0xfffffff0,%eax
   1b1cf:	89 c1                	mov    %eax,%ecx
   1b1d1:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1d5:	89 d0                	mov    %edx,%eax
   1b1d7:	c1 e0 03             	shl    $0x3,%eax
   1b1da:	01 d0                	add    %edx,%eax
   1b1dc:	c1 e0 04             	shl    $0x4,%eax
   1b1df:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1b1e4:	0f b6 00             	movzbl (%eax),%eax
   1b1e7:	83 e0 0f             	and    $0xf,%eax
   1b1ea:	09 c8                	or     %ecx,%eax
   1b1ec:	89 c1                	mov    %eax,%ecx
   1b1ee:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1f2:	89 d0                	mov    %edx,%eax
   1b1f4:	c1 e0 03             	shl    $0x3,%eax
   1b1f7:	01 d0                	add    %edx,%eax
   1b1f9:	c1 e0 04             	shl    $0x4,%eax
   1b1fc:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b201:	88 08                	mov    %cl,(%eax)
   1b203:	e9 b5 01 00 00       	jmp    1b3bd <csi_m+0x5c6>
			// 如果Ps = 49,则复位随后字符的背景色为默认背景色(黑色).
			case 49: attr = (attr & 0x0f) | (def_attr & 0xf0); break;
   1b208:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b20c:	89 d0                	mov    %edx,%eax
   1b20e:	c1 e0 03             	shl    $0x3,%eax
   1b211:	01 d0                	add    %edx,%eax
   1b213:	c1 e0 04             	shl    $0x4,%eax
   1b216:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b21b:	0f b6 00             	movzbl (%eax),%eax
   1b21e:	83 e0 0f             	and    $0xf,%eax
   1b221:	89 c1                	mov    %eax,%ecx
   1b223:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b227:	89 d0                	mov    %edx,%eax
   1b229:	c1 e0 03             	shl    $0x3,%eax
   1b22c:	01 d0                	add    %edx,%eax
   1b22e:	c1 e0 04             	shl    $0x4,%eax
   1b231:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1b236:	0f b6 00             	movzbl (%eax),%eax
   1b239:	83 e0 f0             	and    $0xfffffff0,%eax
   1b23c:	09 c8                	or     %ecx,%eax
   1b23e:	89 c1                	mov    %eax,%ecx
   1b240:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b244:	89 d0                	mov    %edx,%eax
   1b246:	c1 e0 03             	shl    $0x3,%eax
   1b249:	01 d0                	add    %edx,%eax
   1b24b:	c1 e0 04             	shl    $0x4,%eax
   1b24e:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b253:	88 08                	mov    %cl,(%eax)
   1b255:	e9 63 01 00 00       	jmp    1b3bd <csi_m+0x5c6>
			// 当Ps(par[i])为其他值时,则是设置指定的前景色或背景色.如果Ps = 30..37,则是设置前景色;如果Ps=40..47,则是设置背景色.
			default:
			  if (!can_do_colour)
   1b25a:	a1 50 fe 03 00       	mov    0x3fe50,%eax
   1b25f:	85 c0                	test   %eax,%eax
   1b261:	0f 84 55 01 00 00    	je     1b3bc <csi_m+0x5c5>
			    break;
			  iscolor = 1;
   1b267:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b26b:	89 d0                	mov    %edx,%eax
   1b26d:	c1 e0 03             	shl    $0x3,%eax
   1b270:	01 d0                	add    %edx,%eax
   1b272:	c1 e0 04             	shl    $0x4,%eax
   1b275:	05 e8 fe 03 00       	add    $0x3fee8,%eax
   1b27a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
			  if ((par[i] >= 30) && (par[i] <= 38))		 					// 设置前景色.
   1b280:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b284:	89 d0                	mov    %edx,%eax
   1b286:	c1 e0 03             	shl    $0x3,%eax
   1b289:	01 d0                	add    %edx,%eax
   1b28b:	c1 e0 02             	shl    $0x2,%eax
   1b28e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b292:	01 d0                	add    %edx,%eax
   1b294:	83 c0 0c             	add    $0xc,%eax
   1b297:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1b29e:	83 f8 1d             	cmp    $0x1d,%eax
   1b2a1:	76 7b                	jbe    1b31e <csi_m+0x527>
   1b2a3:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b2a7:	89 d0                	mov    %edx,%eax
   1b2a9:	c1 e0 03             	shl    $0x3,%eax
   1b2ac:	01 d0                	add    %edx,%eax
   1b2ae:	c1 e0 02             	shl    $0x2,%eax
   1b2b1:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b2b5:	01 d0                	add    %edx,%eax
   1b2b7:	83 c0 0c             	add    $0xc,%eax
   1b2ba:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1b2c1:	83 f8 26             	cmp    $0x26,%eax
   1b2c4:	77 58                	ja     1b31e <csi_m+0x527>
			    attr = (attr & 0xf0) | (par[i] - 30);
   1b2c6:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b2ca:	89 d0                	mov    %edx,%eax
   1b2cc:	c1 e0 03             	shl    $0x3,%eax
   1b2cf:	01 d0                	add    %edx,%eax
   1b2d1:	c1 e0 04             	shl    $0x4,%eax
   1b2d4:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b2d9:	0f b6 00             	movzbl (%eax),%eax
   1b2dc:	83 e0 f0             	and    $0xfffffff0,%eax
   1b2df:	89 c1                	mov    %eax,%ecx
   1b2e1:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b2e5:	89 d0                	mov    %edx,%eax
   1b2e7:	c1 e0 03             	shl    $0x3,%eax
   1b2ea:	01 d0                	add    %edx,%eax
   1b2ec:	c1 e0 02             	shl    $0x2,%eax
   1b2ef:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b2f3:	01 d0                	add    %edx,%eax
   1b2f5:	83 c0 0c             	add    $0xc,%eax
   1b2f8:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1b2ff:	83 e8 1e             	sub    $0x1e,%eax
   1b302:	09 c1                	or     %eax,%ecx
   1b304:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b308:	89 d0                	mov    %edx,%eax
   1b30a:	c1 e0 03             	shl    $0x3,%eax
   1b30d:	01 d0                	add    %edx,%eax
   1b30f:	c1 e0 04             	shl    $0x4,%eax
   1b312:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b317:	88 08                	mov    %cl,(%eax)
   1b319:	e9 9f 00 00 00       	jmp    1b3bd <csi_m+0x5c6>
			  else  														/* Background color */			 // 设置背景色.
			    if ((par[i] >= 40) && (par[i] <= 48))
   1b31e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b322:	89 d0                	mov    %edx,%eax
   1b324:	c1 e0 03             	shl    $0x3,%eax
   1b327:	01 d0                	add    %edx,%eax
   1b329:	c1 e0 02             	shl    $0x2,%eax
   1b32c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b330:	01 d0                	add    %edx,%eax
   1b332:	83 c0 0c             	add    $0xc,%eax
   1b335:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1b33c:	83 f8 27             	cmp    $0x27,%eax
   1b33f:	76 7c                	jbe    1b3bd <csi_m+0x5c6>
   1b341:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b345:	89 d0                	mov    %edx,%eax
   1b347:	c1 e0 03             	shl    $0x3,%eax
   1b34a:	01 d0                	add    %edx,%eax
   1b34c:	c1 e0 02             	shl    $0x2,%eax
   1b34f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b353:	01 d0                	add    %edx,%eax
   1b355:	83 c0 0c             	add    $0xc,%eax
   1b358:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1b35f:	83 f8 30             	cmp    $0x30,%eax
   1b362:	77 59                	ja     1b3bd <csi_m+0x5c6>
			      attr = (attr & 0x0f) | ((par[i] - 40) << 4);
   1b364:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b368:	89 d0                	mov    %edx,%eax
   1b36a:	c1 e0 03             	shl    $0x3,%eax
   1b36d:	01 d0                	add    %edx,%eax
   1b36f:	c1 e0 04             	shl    $0x4,%eax
   1b372:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b377:	0f b6 00             	movzbl (%eax),%eax
   1b37a:	83 e0 0f             	and    $0xf,%eax
   1b37d:	89 c1                	mov    %eax,%ecx
   1b37f:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b383:	89 d0                	mov    %edx,%eax
   1b385:	c1 e0 03             	shl    $0x3,%eax
   1b388:	01 d0                	add    %edx,%eax
   1b38a:	c1 e0 02             	shl    $0x2,%eax
   1b38d:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b391:	01 d0                	add    %edx,%eax
   1b393:	83 c0 0c             	add    $0xc,%eax
   1b396:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1b39d:	83 e8 28             	sub    $0x28,%eax
   1b3a0:	c1 e0 04             	shl    $0x4,%eax
   1b3a3:	09 c1                	or     %eax,%ecx
   1b3a5:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b3a9:	89 d0                	mov    %edx,%eax
   1b3ab:	c1 e0 03             	shl    $0x3,%eax
   1b3ae:	01 d0                	add    %edx,%eax
   1b3b0:	c1 e0 04             	shl    $0x4,%eax
   1b3b3:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b3b8:	88 08                	mov    %cl,(%eax)
   1b3ba:	eb 01                	jmp    1b3bd <csi_m+0x5c6>
			    break;
   1b3bc:	90                   	nop
	for (i = 0; i <= npar; i++)
   1b3bd:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1b3c2:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b3c6:	89 d0                	mov    %edx,%eax
   1b3c8:	c1 e0 03             	shl    $0x3,%eax
   1b3cb:	01 d0                	add    %edx,%eax
   1b3cd:	c1 e0 04             	shl    $0x4,%eax
   1b3d0:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1b3d5:	8b 10                	mov    (%eax),%edx
   1b3d7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1b3db:	39 c2                	cmp    %eax,%edx
   1b3dd:	0f 83 25 fa ff ff    	jae    1ae08 <csi_m+0x11>
			    else
					break;
		}
}
   1b3e3:	90                   	nop
   1b3e4:	83 c4 10             	add    $0x10,%esp
   1b3e7:	5b                   	pop    %ebx
   1b3e8:	c3                   	ret    

0001b3e9 <set_cursor>:
// 根据光标对应显示内存位置pos,设置显示控制器光标的显示位置.
static inline void set_cursor(int currcons)
{
	// 既然我们需要设置显示光标,说明有键盘操作,因此需要恢复进行黑屏操作的延时计数值.
	// 另外,显示光标的控制台必须是当前控制台,因此若当前处理的台号currocons不是前台控制台就立刻返回.
	blankcount = blankinterval;						// 复位黑屏操作的计数值.
   1b3e9:	a1 24 fe 03 00       	mov    0x3fe24,%eax
   1b3ee:	a3 28 fe 03 00       	mov    %eax,0x3fe28
	if (currcons != fg_console)
   1b3f3:	a1 80 22 03 00       	mov    0x32280,%eax
   1b3f8:	39 44 24 04          	cmp    %eax,0x4(%esp)
   1b3fc:	0f 85 84 00 00 00    	jne    1b486 <set_cursor+0x9d>
		return;
	// 然后使用索引寄存器端口选择显示控制数据寄存器r14(光标当前显示位置高字节),接着写入光标当前位置高字节(向右移动9位表示高字节移到低字节再除以2),
	// 相对于默认显示内存操作的.再使用索引寄存器选择r15,并将光标当前位置低字节写入其中.
	cli();
   1b402:	fa                   	cli    
	outb_p(14, video_port_reg);
   1b403:	0f b7 15 4a fe 03 00 	movzwl 0x3fe4a,%edx
   1b40a:	b8 0e 00 00 00       	mov    $0xe,%eax
   1b40f:	ee                   	out    %al,(%dx)
   1b410:	eb 00                	jmp    1b412 <set_cursor+0x29>
   1b412:	eb 00                	jmp    1b414 <set_cursor+0x2b>
	outb_p(0xff & ((pos - video_mem_base) >> 9), video_port_val);
   1b414:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b418:	89 d0                	mov    %edx,%eax
   1b41a:	c1 e0 03             	shl    $0x3,%eax
   1b41d:	01 d0                	add    %edx,%eax
   1b41f:	c1 e0 04             	shl    $0x4,%eax
   1b422:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1b427:	8b 10                	mov    (%eax),%edx
   1b429:	a1 38 fe 03 00       	mov    0x3fe38,%eax
   1b42e:	29 c2                	sub    %eax,%edx
   1b430:	89 d0                	mov    %edx,%eax
   1b432:	c1 e8 09             	shr    $0x9,%eax
   1b435:	0f b6 c0             	movzbl %al,%eax
   1b438:	0f b7 15 4c fe 03 00 	movzwl 0x3fe4c,%edx
   1b43f:	ee                   	out    %al,(%dx)
   1b440:	eb 00                	jmp    1b442 <set_cursor+0x59>
   1b442:	eb 00                	jmp    1b444 <set_cursor+0x5b>
	outb_p(15, video_port_reg);
   1b444:	0f b7 15 4a fe 03 00 	movzwl 0x3fe4a,%edx
   1b44b:	b8 0f 00 00 00       	mov    $0xf,%eax
   1b450:	ee                   	out    %al,(%dx)
   1b451:	eb 00                	jmp    1b453 <set_cursor+0x6a>
   1b453:	eb 00                	jmp    1b455 <set_cursor+0x6c>
	outb_p(0xff & ((pos - video_mem_base) >> 1), video_port_val);
   1b455:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b459:	89 d0                	mov    %edx,%eax
   1b45b:	c1 e0 03             	shl    $0x3,%eax
   1b45e:	01 d0                	add    %edx,%eax
   1b460:	c1 e0 04             	shl    $0x4,%eax
   1b463:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1b468:	8b 10                	mov    (%eax),%edx
   1b46a:	a1 38 fe 03 00       	mov    0x3fe38,%eax
   1b46f:	29 c2                	sub    %eax,%edx
   1b471:	89 d0                	mov    %edx,%eax
   1b473:	d1 e8                	shr    %eax
   1b475:	0f b6 c0             	movzbl %al,%eax
   1b478:	0f b7 15 4c fe 03 00 	movzwl 0x3fe4c,%edx
   1b47f:	ee                   	out    %al,(%dx)
   1b480:	eb 00                	jmp    1b482 <set_cursor+0x99>
   1b482:	eb 00                	jmp    1b484 <set_cursor+0x9b>
	sti();
   1b484:	fb                   	sti    
   1b485:	c3                   	ret    
		return;
   1b486:	90                   	nop
}
   1b487:	c3                   	ret    

0001b488 <respond>:
// 发送对VT100的响应序列.
// 即为响应主机请求终端向主机发送设备属性(DA).主机通过发送不带参数或参数是0的DA控制序列('ESC [ 0c'或'ESC Z']要求终端发送一个设备属性(DA)控制
// 序列,终端则发送第85行上定义的应答序列(即'ESC [?];2c']来主机的序列,该序列告诉主机本终端是具有高级视频功能的VT100兼容终端.处理过程是将应答序列
// 放入读缓冲队列中,并使用copy_to_cooked()函数处理后放入辅助队列中.
static void respond(int currcons, struct tty_struct * tty)
{
   1b488:	83 ec 1c             	sub    $0x1c,%esp
	char * p = RESPONSE;
   1b48b:	c7 44 24 0c b4 54 02 	movl   $0x254b4,0xc(%esp)
   1b492:	00 

	cli();
   1b493:	fa                   	cli    
	while (*p) {									// 将应答序列放入读队列.
   1b494:	eb 3e                	jmp    1b4d4 <respond+0x4c>
		PUTCH(*p, tty->read_q);						// 逐字符放入.include/linux/tty.h
   1b496:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b49a:	8b 50 34             	mov    0x34(%eax),%edx
   1b49d:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b4a1:	8b 40 34             	mov    0x34(%eax),%eax
   1b4a4:	8b 40 04             	mov    0x4(%eax),%eax
   1b4a7:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1b4ab:	0f b6 09             	movzbl (%ecx),%ecx
   1b4ae:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1b4b2:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b4b6:	8b 40 34             	mov    0x34(%eax),%eax
   1b4b9:	8b 40 04             	mov    0x4(%eax),%eax
   1b4bc:	8d 50 01             	lea    0x1(%eax),%edx
   1b4bf:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b4c3:	8b 40 34             	mov    0x34(%eax),%eax
   1b4c6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1b4cc:	89 50 04             	mov    %edx,0x4(%eax)
		p++;
   1b4cf:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
	while (*p) {									// 将应答序列放入读队列.
   1b4d4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1b4d8:	0f b6 00             	movzbl (%eax),%eax
   1b4db:	84 c0                	test   %al,%al
   1b4dd:	75 b7                	jne    1b496 <respond+0xe>
	}
	sti();
   1b4df:	fb                   	sti    
	copy_to_cooked(tty);							// 转换成规范模式(放入辅助队列中).tty_io.c
   1b4e0:	83 ec 0c             	sub    $0xc,%esp
   1b4e3:	ff 74 24 30          	pushl  0x30(%esp)
   1b4e7:	e8 6e d6 ff ff       	call   18b5a <copy_to_cooked>
   1b4ec:	83 c4 10             	add    $0x10,%esp
}
   1b4ef:	90                   	nop
   1b4f0:	83 c4 1c             	add    $0x1c,%esp
   1b4f3:	c3                   	ret    

0001b4f4 <insert_char>:

// 在光标处插入一空格字符.
// 把光标开始处的所有字符右移一格,并将擦除字符插入在光标所在处.
static void insert_char(int currcons)
{
   1b4f4:	83 ec 10             	sub    $0x10,%esp
	int i = x;
   1b4f7:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b4fb:	89 d0                	mov    %edx,%eax
   1b4fd:	c1 e0 03             	shl    $0x3,%eax
   1b500:	01 d0                	add    %edx,%eax
   1b502:	c1 e0 04             	shl    $0x4,%eax
   1b505:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1b50a:	8b 00                	mov    (%eax),%eax
   1b50c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	unsigned short tmp, old = video_erase_char;		// 擦除字符(加属性)
   1b510:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b514:	89 d0                	mov    %edx,%eax
   1b516:	c1 e0 03             	shl    $0x3,%eax
   1b519:	01 d0                	add    %edx,%eax
   1b51b:	c1 e0 04             	shl    $0x4,%eax
   1b51e:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1b523:	0f b7 00             	movzwl (%eax),%eax
   1b526:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
	unsigned short * p = (unsigned short *) pos;	// 光标对应内存位置.
   1b52b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b52f:	89 d0                	mov    %edx,%eax
   1b531:	c1 e0 03             	shl    $0x3,%eax
   1b534:	01 d0                	add    %edx,%eax
   1b536:	c1 e0 04             	shl    $0x4,%eax
   1b539:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1b53e:	8b 00                	mov    (%eax),%eax
   1b540:	89 44 24 04          	mov    %eax,0x4(%esp)

	while (i++ < video_num_columns) {
   1b544:	eb 27                	jmp    1b56d <insert_char+0x79>
		tmp = *p;
   1b546:	8b 44 24 04          	mov    0x4(%esp),%eax
   1b54a:	0f b7 00             	movzwl (%eax),%eax
   1b54d:	66 89 44 24 02       	mov    %ax,0x2(%esp)
		*p = old;
   1b552:	8b 44 24 04          	mov    0x4(%esp),%eax
   1b556:	0f b7 54 24 0a       	movzwl 0xa(%esp),%edx
   1b55b:	66 89 10             	mov    %dx,(%eax)
		old = tmp;
   1b55e:	0f b7 44 24 02       	movzwl 0x2(%esp),%eax
   1b563:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
		p++;
   1b568:	83 44 24 04 02       	addl   $0x2,0x4(%esp)
	while (i++ < video_num_columns) {
   1b56d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1b571:	8d 50 01             	lea    0x1(%eax),%edx
   1b574:	89 54 24 0c          	mov    %edx,0xc(%esp)
   1b578:	89 c2                	mov    %eax,%edx
   1b57a:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b57f:	39 c2                	cmp    %eax,%edx
   1b581:	72 c3                	jb     1b546 <insert_char+0x52>
	}
}
   1b583:	90                   	nop
   1b584:	83 c4 10             	add    $0x10,%esp
   1b587:	c3                   	ret    

0001b588 <insert_line>:

// 在光标处插入一行.
// 将屏幕窗口从光标所在行到窗口底的内容向下卷动一行.光标将处在新的空行上.
static void insert_line(int currcons)
{
   1b588:	83 ec 10             	sub    $0x10,%esp
	int oldtop, oldbottom;

	// 首先保存屏幕窗口卷动开始行top和最后行bottom值,然后从光标所在行让屏幕内容向下滚动一行.最后恢复屏幕窗口卷动开始行top和最后行bottom
	// 的原来值.
	oldtop = top;
   1b58b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b58f:	89 d0                	mov    %edx,%eax
   1b591:	c1 e0 03             	shl    $0x3,%eax
   1b594:	01 d0                	add    %edx,%eax
   1b596:	c1 e0 04             	shl    $0x4,%eax
   1b599:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1b59e:	8b 00                	mov    (%eax),%eax
   1b5a0:	89 44 24 0c          	mov    %eax,0xc(%esp)
	oldbottom = bottom;
   1b5a4:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b5a8:	89 d0                	mov    %edx,%eax
   1b5aa:	c1 e0 03             	shl    $0x3,%eax
   1b5ad:	01 d0                	add    %edx,%eax
   1b5af:	c1 e0 04             	shl    $0x4,%eax
   1b5b2:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1b5b7:	8b 00                	mov    (%eax),%eax
   1b5b9:	89 44 24 08          	mov    %eax,0x8(%esp)
	top = y;										// 设置屏幕卷动开始行和结束行.
   1b5bd:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b5c1:	89 d0                	mov    %edx,%eax
   1b5c3:	c1 e0 03             	shl    $0x3,%eax
   1b5c6:	01 d0                	add    %edx,%eax
   1b5c8:	c1 e0 04             	shl    $0x4,%eax
   1b5cb:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1b5d0:	8b 08                	mov    (%eax),%ecx
   1b5d2:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b5d6:	89 d0                	mov    %edx,%eax
   1b5d8:	c1 e0 03             	shl    $0x3,%eax
   1b5db:	01 d0                	add    %edx,%eax
   1b5dd:	c1 e0 04             	shl    $0x4,%eax
   1b5e0:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1b5e5:	89 08                	mov    %ecx,(%eax)
	bottom = video_num_lines;
   1b5e7:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1b5ed:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b5f1:	89 d0                	mov    %edx,%eax
   1b5f3:	c1 e0 03             	shl    $0x3,%eax
   1b5f6:	01 d0                	add    %edx,%eax
   1b5f8:	c1 e0 04             	shl    $0x4,%eax
   1b5fb:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1b600:	89 08                	mov    %ecx,(%eax)
	scrdown(currcons);								// 从光标开始处,屏幕内容向下滚动一行.
   1b602:	ff 74 24 14          	pushl  0x14(%esp)
   1b606:	e8 39 f1 ff ff       	call   1a744 <scrdown>
   1b60b:	83 c4 04             	add    $0x4,%esp
	top = oldtop;
   1b60e:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1b612:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b616:	89 d0                	mov    %edx,%eax
   1b618:	c1 e0 03             	shl    $0x3,%eax
   1b61b:	01 d0                	add    %edx,%eax
   1b61d:	c1 e0 04             	shl    $0x4,%eax
   1b620:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1b625:	89 08                	mov    %ecx,(%eax)
	bottom = oldbottom;
   1b627:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1b62b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b62f:	89 d0                	mov    %edx,%eax
   1b631:	c1 e0 03             	shl    $0x3,%eax
   1b634:	01 d0                	add    %edx,%eax
   1b636:	c1 e0 04             	shl    $0x4,%eax
   1b639:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1b63e:	89 08                	mov    %ecx,(%eax)
}
   1b640:	90                   	nop
   1b641:	83 c4 10             	add    $0x10,%esp
   1b644:	c3                   	ret    

0001b645 <delete_char>:

// 删除一个字符
// 删除光标处的一个字符,光标右边的所有字符左移一格.
static void delete_char(int currcons)
{
   1b645:	83 ec 10             	sub    $0x10,%esp
	int i;
	unsigned short * p = (unsigned short *) pos;
   1b648:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b64c:	89 d0                	mov    %edx,%eax
   1b64e:	c1 e0 03             	shl    $0x3,%eax
   1b651:	01 d0                	add    %edx,%eax
   1b653:	c1 e0 04             	shl    $0x4,%eax
   1b656:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1b65b:	8b 00                	mov    (%eax),%eax
   1b65d:	89 44 24 08          	mov    %eax,0x8(%esp)

	// 如果光标的当前列位置x走出屏幕最右列,则返回.否则从光标右一个字符开始到行末所有字符左移一格.然后在最后一个字符处填入擦除字符.
	if (x >= video_num_columns)
   1b661:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b665:	89 d0                	mov    %edx,%eax
   1b667:	c1 e0 03             	shl    $0x3,%eax
   1b66a:	01 d0                	add    %edx,%eax
   1b66c:	c1 e0 04             	shl    $0x4,%eax
   1b66f:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1b674:	8b 10                	mov    (%eax),%edx
   1b676:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b67b:	39 c2                	cmp    %eax,%edx
   1b67d:	73 60                	jae    1b6df <delete_char+0x9a>
		return;
	i = x;
   1b67f:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b683:	89 d0                	mov    %edx,%eax
   1b685:	c1 e0 03             	shl    $0x3,%eax
   1b688:	01 d0                	add    %edx,%eax
   1b68a:	c1 e0 04             	shl    $0x4,%eax
   1b68d:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1b692:	8b 00                	mov    (%eax),%eax
   1b694:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (++i < video_num_columns) {				// 光标右所有字符左移1格.
   1b698:	eb 14                	jmp    1b6ae <delete_char+0x69>
		*p = *(p + 1);
   1b69a:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b69e:	0f b7 50 02          	movzwl 0x2(%eax),%edx
   1b6a2:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b6a6:	66 89 10             	mov    %dx,(%eax)
		p++;
   1b6a9:	83 44 24 08 02       	addl   $0x2,0x8(%esp)
	while (++i < video_num_columns) {				// 光标右所有字符左移1格.
   1b6ae:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1b6b3:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b6b7:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b6bc:	39 c2                	cmp    %eax,%edx
   1b6be:	72 da                	jb     1b69a <delete_char+0x55>
	}
	*p = video_erase_char;							// 最后填入擦除字符.
   1b6c0:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b6c4:	89 d0                	mov    %edx,%eax
   1b6c6:	c1 e0 03             	shl    $0x3,%eax
   1b6c9:	01 d0                	add    %edx,%eax
   1b6cb:	c1 e0 04             	shl    $0x4,%eax
   1b6ce:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1b6d3:	0f b7 10             	movzwl (%eax),%edx
   1b6d6:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b6da:	66 89 10             	mov    %dx,(%eax)
   1b6dd:	eb 01                	jmp    1b6e0 <delete_char+0x9b>
		return;
   1b6df:	90                   	nop
}
   1b6e0:	83 c4 10             	add    $0x10,%esp
   1b6e3:	c3                   	ret    

0001b6e4 <delete_line>:

// 删除光标所在行
// 删除光标所在的一行,并从光标所在行开始屏幕内容上巻一行.
static void delete_line(int currcons)
{
   1b6e4:	83 ec 10             	sub    $0x10,%esp
	int oldtop, oldbottom;

	// 首先保存屏幕窗口卷动开始行top和最后行bottom值,然后从光标所在行让屏幕内容向上滚动一行.最后恢复屏幕窗口卷动开始行top和最后行bottom
	// 的原来值.
	oldtop = top;
   1b6e7:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b6eb:	89 d0                	mov    %edx,%eax
   1b6ed:	c1 e0 03             	shl    $0x3,%eax
   1b6f0:	01 d0                	add    %edx,%eax
   1b6f2:	c1 e0 04             	shl    $0x4,%eax
   1b6f5:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1b6fa:	8b 00                	mov    (%eax),%eax
   1b6fc:	89 44 24 0c          	mov    %eax,0xc(%esp)
	oldbottom = bottom;
   1b700:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b704:	89 d0                	mov    %edx,%eax
   1b706:	c1 e0 03             	shl    $0x3,%eax
   1b709:	01 d0                	add    %edx,%eax
   1b70b:	c1 e0 04             	shl    $0x4,%eax
   1b70e:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1b713:	8b 00                	mov    (%eax),%eax
   1b715:	89 44 24 08          	mov    %eax,0x8(%esp)
	top = y;										// 设置屏幕卷动开始行和最后行.
   1b719:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b71d:	89 d0                	mov    %edx,%eax
   1b71f:	c1 e0 03             	shl    $0x3,%eax
   1b722:	01 d0                	add    %edx,%eax
   1b724:	c1 e0 04             	shl    $0x4,%eax
   1b727:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1b72c:	8b 08                	mov    (%eax),%ecx
   1b72e:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b732:	89 d0                	mov    %edx,%eax
   1b734:	c1 e0 03             	shl    $0x3,%eax
   1b737:	01 d0                	add    %edx,%eax
   1b739:	c1 e0 04             	shl    $0x4,%eax
   1b73c:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1b741:	89 08                	mov    %ecx,(%eax)
	bottom = video_num_lines;
   1b743:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1b749:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b74d:	89 d0                	mov    %edx,%eax
   1b74f:	c1 e0 03             	shl    $0x3,%eax
   1b752:	01 d0                	add    %edx,%eax
   1b754:	c1 e0 04             	shl    $0x4,%eax
   1b757:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1b75c:	89 08                	mov    %ecx,(%eax)
	scrup(currcons);								// 从光标开始处,屏幕内容向上滚动一行.
   1b75e:	ff 74 24 14          	pushl  0x14(%esp)
   1b762:	e8 46 eb ff ff       	call   1a2ad <scrup>
   1b767:	83 c4 04             	add    $0x4,%esp
	top = oldtop;
   1b76a:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1b76e:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b772:	89 d0                	mov    %edx,%eax
   1b774:	c1 e0 03             	shl    $0x3,%eax
   1b777:	01 d0                	add    %edx,%eax
   1b779:	c1 e0 04             	shl    $0x4,%eax
   1b77c:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1b781:	89 08                	mov    %ecx,(%eax)
	bottom = oldbottom;
   1b783:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1b787:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b78b:	89 d0                	mov    %edx,%eax
   1b78d:	c1 e0 03             	shl    $0x3,%eax
   1b790:	01 d0                	add    %edx,%eax
   1b792:	c1 e0 04             	shl    $0x4,%eax
   1b795:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1b79a:	89 08                	mov    %ecx,(%eax)
}
   1b79c:	90                   	nop
   1b79d:	83 c4 10             	add    $0x10,%esp
   1b7a0:	c3                   	ret    

0001b7a1 <csi_at>:
// 的字符将右移.超过右边界的字符将被丢失.
// 参数 nr = 转义字符序列中的参数Pn.
static void csi_at(int currcons, unsigned int nr)
{
	// 如果插入的字符数大于一行字符数,则截为一行字符数;若插入字符数nr为0,则插入1个字符.然后循环插入指定个空格字符.
	if (nr > video_num_columns)
   1b7a1:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b7a6:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b7aa:	76 0b                	jbe    1b7b7 <csi_at+0x16>
		nr = video_num_columns;
   1b7ac:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b7b1:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b7b5:	eb 1d                	jmp    1b7d4 <csi_at+0x33>
	else if (!nr)
   1b7b7:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b7bc:	75 16                	jne    1b7d4 <csi_at+0x33>
		nr = 1;
   1b7be:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b7c5:	00 
	while (nr--)
   1b7c6:	eb 0c                	jmp    1b7d4 <csi_at+0x33>
		insert_char(currcons);
   1b7c8:	ff 74 24 04          	pushl  0x4(%esp)
   1b7cc:	e8 23 fd ff ff       	call   1b4f4 <insert_char>
   1b7d1:	83 c4 04             	add    $0x4,%esp
	while (nr--)
   1b7d4:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b7d8:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b7db:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b7df:	85 c0                	test   %eax,%eax
   1b7e1:	75 e5                	jne    1b7c8 <csi_at+0x27>
}
   1b7e3:	90                   	nop
   1b7e4:	c3                   	ret    

0001b7e5 <csi_L>:
// 行就丢失.
// 参数nr = 转义字符序列中的参数Pn.
static void csi_L(int currcons, unsigned int nr)
{
	// 如果插入的行数大于屏最多行数,则截为屏幕显示行数;若插入行数nr为0,则插入1行.然后循环插入指定行数nr的空行.
	if (nr > video_num_lines)
   1b7e5:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1b7ea:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b7ee:	76 0b                	jbe    1b7fb <csi_L+0x16>
		nr = video_num_lines;
   1b7f0:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1b7f5:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b7f9:	eb 1d                	jmp    1b818 <csi_L+0x33>
	else if (!nr)
   1b7fb:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b800:	75 16                	jne    1b818 <csi_L+0x33>
		nr = 1;
   1b802:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b809:	00 
	while (nr--)
   1b80a:	eb 0c                	jmp    1b818 <csi_L+0x33>
		insert_line(currcons);
   1b80c:	ff 74 24 04          	pushl  0x4(%esp)
   1b810:	e8 73 fd ff ff       	call   1b588 <insert_line>
   1b815:	83 c4 04             	add    $0x4,%esp
	while (nr--)
   1b818:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b81c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b81f:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b823:	85 c0                	test   %eax,%eax
   1b825:	75 e5                	jne    1b80c <csi_L+0x27>
}
   1b827:	90                   	nop
   1b828:	c3                   	ret    

0001b829 <csi_P>:
// 相同,但这里作了简化处理,仅使用字符的默认属性(黑底白字空格0x0720)来设置空字符.
// 参数nr = 转义字符序列中的参数Pn.
static void csi_P(int currcons, unsigned int nr)
{
	// 如果删除的字符数大于一行字符数,则截为一行字符数;若删除字符数nr为0,则删除1个字符.然后循环删除光标处指定字符数nr.
	if (nr > video_num_columns)
   1b829:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b82e:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b832:	76 0b                	jbe    1b83f <csi_P+0x16>
		nr = video_num_columns;
   1b834:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b839:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b83d:	eb 1d                	jmp    1b85c <csi_P+0x33>
	else if (!nr)
   1b83f:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b844:	75 16                	jne    1b85c <csi_P+0x33>
		nr = 1;
   1b846:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b84d:	00 
	while (nr--)
   1b84e:	eb 0c                	jmp    1b85c <csi_P+0x33>
		delete_char(currcons);
   1b850:	ff 74 24 04          	pushl  0x4(%esp)
   1b854:	e8 ec fd ff ff       	call   1b645 <delete_char>
   1b859:	83 c4 04             	add    $0x4,%esp
	while (nr--)
   1b85c:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b860:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b863:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b867:	85 c0                	test   %eax,%eax
   1b869:	75 e5                	jne    1b850 <csi_P+0x27>
}
   1b86b:	90                   	nop
   1b86c:	c3                   	ret    

0001b86d <csi_M>:
// Pn大于显示页上剩余行数,则本序列仅删除这些剩余行,并对滚动区域处不起作用.
// 参数nr = 转义字符序列中的参数Pn.
static void csi_M(int currcons, unsigned int nr)
{
	// 如果删除的行数大于屏幕最大行数,则截为屏幕显示行数;若欲删除的行数nr为0,则删除1行.然后循环删除指定行数nr.
	if (nr > video_num_lines)
   1b86d:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1b872:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b876:	76 0b                	jbe    1b883 <csi_M+0x16>
		nr = video_num_lines;
   1b878:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1b87d:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b881:	eb 1d                	jmp    1b8a0 <csi_M+0x33>
	else if (!nr)
   1b883:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b888:	75 16                	jne    1b8a0 <csi_M+0x33>
		nr=1;
   1b88a:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b891:	00 
	while (nr--)
   1b892:	eb 0c                	jmp    1b8a0 <csi_M+0x33>
		delete_line(currcons);
   1b894:	ff 74 24 04          	pushl  0x4(%esp)
   1b898:	e8 47 fe ff ff       	call   1b6e4 <delete_line>
   1b89d:	83 c4 04             	add    $0x4,%esp
	while (nr--)
   1b8a0:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b8a4:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b8a7:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b8ab:	85 c0                	test   %eax,%eax
   1b8ad:	75 e5                	jne    1b894 <csi_M+0x27>
}
   1b8af:	90                   	nop
   1b8b0:	c3                   	ret    

0001b8b1 <save_cur>:

//// 保存当前光标位置
static void save_cur(int currcons)
{
	saved_x = x;
   1b8b1:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b8b5:	89 d0                	mov    %edx,%eax
   1b8b7:	c1 e0 03             	shl    $0x3,%eax
   1b8ba:	01 d0                	add    %edx,%eax
   1b8bc:	c1 e0 04             	shl    $0x4,%eax
   1b8bf:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1b8c4:	8b 08                	mov    (%eax),%ecx
   1b8c6:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b8ca:	89 d0                	mov    %edx,%eax
   1b8cc:	c1 e0 03             	shl    $0x3,%eax
   1b8cf:	01 d0                	add    %edx,%eax
   1b8d1:	c1 e0 04             	shl    $0x4,%eax
   1b8d4:	05 e0 fe 03 00       	add    $0x3fee0,%eax
   1b8d9:	89 08                	mov    %ecx,(%eax)
	saved_y = y;
   1b8db:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b8df:	89 d0                	mov    %edx,%eax
   1b8e1:	c1 e0 03             	shl    $0x3,%eax
   1b8e4:	01 d0                	add    %edx,%eax
   1b8e6:	c1 e0 04             	shl    $0x4,%eax
   1b8e9:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1b8ee:	8b 08                	mov    (%eax),%ecx
   1b8f0:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b8f4:	89 d0                	mov    %edx,%eax
   1b8f6:	c1 e0 03             	shl    $0x3,%eax
   1b8f9:	01 d0                	add    %edx,%eax
   1b8fb:	c1 e0 04             	shl    $0x4,%eax
   1b8fe:	05 e4 fe 03 00       	add    $0x3fee4,%eax
   1b903:	89 08                	mov    %ecx,(%eax)
}
   1b905:	90                   	nop
   1b906:	c3                   	ret    

0001b907 <restore_cur>:

// 恢复保存的光标位置
static void restore_cur(int currcons)
{
	gotoxy(currcons, saved_x, saved_y);
   1b907:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b90b:	89 d0                	mov    %edx,%eax
   1b90d:	c1 e0 03             	shl    $0x3,%eax
   1b910:	01 d0                	add    %edx,%eax
   1b912:	c1 e0 04             	shl    $0x4,%eax
   1b915:	05 e4 fe 03 00       	add    $0x3fee4,%eax
   1b91a:	8b 08                	mov    (%eax),%ecx
   1b91c:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b920:	89 d0                	mov    %edx,%eax
   1b922:	c1 e0 03             	shl    $0x3,%eax
   1b925:	01 d0                	add    %edx,%eax
   1b927:	c1 e0 04             	shl    $0x4,%eax
   1b92a:	05 e0 fe 03 00       	add    $0x3fee0,%eax
   1b92f:	8b 00                	mov    (%eax),%eax
   1b931:	51                   	push   %ecx
   1b932:	50                   	push   %eax
   1b933:	ff 74 24 0c          	pushl  0xc(%esp)
   1b937:	e8 08 e8 ff ff       	call   1a144 <gotoxy>
   1b93c:	83 c4 0c             	add    $0xc,%esp
}
   1b93f:	90                   	nop
   1b940:	c3                   	ret    

0001b941 <con_write>:
// 控制台写函数
// 从终端对应的tty写缓冲队列中取字符针对每个字符进行分析.若是控制字符或转义或控制序列,则进行光标定位,字符删除等的控制处理;对于普通字符就直接在光标处
// 显示.
// 参数:tty是当前控制台使用的tty结构指针.
void con_write(struct tty_struct * tty)
{
   1b941:	53                   	push   %ebx
   1b942:	83 ec 18             	sub    $0x18,%esp

	// 该函数首先根据当前控制台使用的tty在tty表的项位置取得对应控制台号currcons,然后计算出(CHARS())目前tty写队列中含有的字符数nr,并循环取出其中的每个
	// 字符进行处理.不过如果当前控制台由于接收键盘或发出的暂停命令(如按键Ctrl-S)而处于停止状态,那么本函数就停止处理写队列中的字符,退出函数.另外,如果取出的
	// 是控制字符CAN(24)或SUB(6),那么若是在转义或控制序列期间收到的,则序列不会执行而立刻终止,同时显示随后的字符.注意,con_write()函数只处理取队列字符数
	// 时写队列中当前含有的字符.这有可能在一个序列被放到写队列期间读取字符数,因此本函数前一次退出时state有可能处于处理转义或控制序列的其他状态上.
	currcons = tty - tty_table;
   1b945:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b949:	2d 20 28 04 00       	sub    $0x42820,%eax
   1b94e:	c1 f8 06             	sar    $0x6,%eax
   1b951:	89 44 24 08          	mov    %eax,0x8(%esp)
	if ((currcons >= MAX_CONSOLES) || (currcons < 0))
   1b955:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
   1b95a:	7f 07                	jg     1b963 <con_write+0x22>
   1b95c:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b961:	79 10                	jns    1b973 <con_write+0x32>
		panic("con_write: illegal tty");
   1b963:	83 ec 0c             	sub    $0xc,%esp
   1b966:	68 bc 54 02 00       	push   $0x254bc
   1b96b:	e8 92 d2 fe ff       	call   8c02 <panic>
   1b970:	83 c4 10             	add    $0x10,%esp

	nr = CHARS(tty->write_q);										// 取写队列中字符数,在tty.h文件中
   1b973:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b977:	8b 40 38             	mov    0x38(%eax),%eax
   1b97a:	8b 50 04             	mov    0x4(%eax),%edx
   1b97d:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b981:	8b 40 38             	mov    0x38(%eax),%eax
   1b984:	8b 40 08             	mov    0x8(%eax),%eax
   1b987:	29 c2                	sub    %eax,%edx
   1b989:	89 d0                	mov    %edx,%eax
   1b98b:	25 ff 03 00 00       	and    $0x3ff,%eax
   1b990:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (nr--) {
   1b994:	e9 70 13 00 00       	jmp    1cd09 <con_write+0x13c8>
		if (tty->stopped)
   1b999:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b99d:	8b 40 2c             	mov    0x2c(%eax),%eax
   1b9a0:	85 c0                	test   %eax,%eax
   1b9a2:	0f 85 76 13 00 00    	jne    1cd1e <con_write+0x13dd>
			break;
		GETCH(tty->write_q, c);										// 取1字符到c中
   1b9a8:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b9ac:	8b 50 38             	mov    0x38(%eax),%edx
   1b9af:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b9b3:	8b 40 38             	mov    0x38(%eax),%eax
   1b9b6:	8b 40 08             	mov    0x8(%eax),%eax
   1b9b9:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   1b9be:	88 44 24 07          	mov    %al,0x7(%esp)
   1b9c2:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b9c6:	8b 40 38             	mov    0x38(%eax),%eax
   1b9c9:	8b 40 08             	mov    0x8(%eax),%eax
   1b9cc:	8d 50 01             	lea    0x1(%eax),%edx
   1b9cf:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b9d3:	8b 40 38             	mov    0x38(%eax),%eax
   1b9d6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1b9dc:	89 50 08             	mov    %edx,0x8(%eax)
		if (c == 24 || c == 26)										// 控制字符CAN,SUB - 取消,替换
   1b9df:	80 7c 24 07 18       	cmpb   $0x18,0x7(%esp)
   1b9e4:	74 07                	je     1b9ed <con_write+0xac>
   1b9e6:	80 7c 24 07 1a       	cmpb   $0x1a,0x7(%esp)
   1b9eb:	75 19                	jne    1ba06 <con_write+0xc5>
			state = ESnormal;
   1b9ed:	8b 54 24 08          	mov    0x8(%esp),%edx
   1b9f1:	89 d0                	mov    %edx,%eax
   1b9f3:	c1 e0 03             	shl    $0x3,%eax
   1b9f6:	01 d0                	add    %edx,%eax
   1b9f8:	c1 e0 04             	shl    $0x4,%eax
   1b9fb:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1ba00:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		switch(state) {
   1ba06:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ba0a:	89 d0                	mov    %edx,%eax
   1ba0c:	c1 e0 03             	shl    $0x3,%eax
   1ba0f:	01 d0                	add    %edx,%eax
   1ba11:	c1 e0 04             	shl    $0x4,%eax
   1ba14:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1ba19:	8b 00                	mov    (%eax),%eax
   1ba1b:	83 f8 07             	cmp    $0x7,%eax
   1ba1e:	0f 87 cc 12 00 00    	ja     1ccf0 <con_write+0x13af>
   1ba24:	8b 04 85 e8 54 02 00 	mov    0x254e8(,%eax,4),%eax
   1ba2b:	ff e0                	jmp    *%eax
			//          标位置进行设置.当刚处理完一个转义或控制序列,程序也会返回到本状态.
			// 如果从写队列中取出的字符是普通显示字符代码,就直接从当前映射字符集中取出对应的显示字符,并放到当前光标所处的显示内存位置处,即直接显示该字符.然后把光标
			// 位置右移一个字符位置.具体地,如果字符不是控制字符也不是扩展字符,即(31<c<127),那么,若当前光标处在行末端或末端以外,则将光标移到下行头列.并调整光标位置
			// 对应的内存指针pos.然后将字符c写到显示内存中pos处,并将光标右移1列,同时也将pos对应地移动2个字节.
			case ESnormal:
				if (c > 31 && c < 127) {							// 是普通显示字符
   1ba2d:	80 7c 24 07 1f       	cmpb   $0x1f,0x7(%esp)
   1ba32:	0f 8e 51 01 00 00    	jle    1bb89 <con_write+0x248>
   1ba38:	80 7c 24 07 7f       	cmpb   $0x7f,0x7(%esp)
   1ba3d:	0f 84 46 01 00 00    	je     1bb89 <con_write+0x248>
					if (x >= video_num_columns) {					// 要换行?
   1ba43:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ba47:	89 d0                	mov    %edx,%eax
   1ba49:	c1 e0 03             	shl    $0x3,%eax
   1ba4c:	01 d0                	add    %edx,%eax
   1ba4e:	c1 e0 04             	shl    $0x4,%eax
   1ba51:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ba56:	8b 10                	mov    (%eax),%edx
   1ba58:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1ba5d:	39 c2                	cmp    %eax,%edx
   1ba5f:	72 75                	jb     1bad6 <con_write+0x195>
						x -= video_num_columns;
   1ba61:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ba65:	89 d0                	mov    %edx,%eax
   1ba67:	c1 e0 03             	shl    $0x3,%eax
   1ba6a:	01 d0                	add    %edx,%eax
   1ba6c:	c1 e0 04             	shl    $0x4,%eax
   1ba6f:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ba74:	8b 10                	mov    (%eax),%edx
   1ba76:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1ba7b:	89 d1                	mov    %edx,%ecx
   1ba7d:	29 c1                	sub    %eax,%ecx
   1ba7f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ba83:	89 d0                	mov    %edx,%eax
   1ba85:	c1 e0 03             	shl    $0x3,%eax
   1ba88:	01 d0                	add    %edx,%eax
   1ba8a:	c1 e0 04             	shl    $0x4,%eax
   1ba8d:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ba92:	89 08                	mov    %ecx,(%eax)
						pos -= video_size_row;
   1ba94:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ba98:	89 d0                	mov    %edx,%eax
   1ba9a:	c1 e0 03             	shl    $0x3,%eax
   1ba9d:	01 d0                	add    %edx,%eax
   1ba9f:	c1 e0 04             	shl    $0x4,%eax
   1baa2:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1baa7:	8b 10                	mov    (%eax),%edx
   1baa9:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1baae:	89 d1                	mov    %edx,%ecx
   1bab0:	29 c1                	sub    %eax,%ecx
   1bab2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bab6:	89 d0                	mov    %edx,%eax
   1bab8:	c1 e0 03             	shl    $0x3,%eax
   1babb:	01 d0                	add    %edx,%eax
   1babd:	c1 e0 04             	shl    $0x4,%eax
   1bac0:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bac5:	89 08                	mov    %ecx,(%eax)
						lf(currcons);
   1bac7:	83 ec 0c             	sub    $0xc,%esp
   1baca:	ff 74 24 14          	pushl  0x14(%esp)
   1bace:	e8 7a ee ff ff       	call   1a94d <lf>
   1bad3:	83 c4 10             	add    $0x10,%esp
					}
					__asm__("movb %2, %%ah\n\t"						// 写字符
						"movw %%ax, %1\n\t"
						::"a" (translate[c - 32]),
   1bad6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bada:	89 d0                	mov    %edx,%eax
   1badc:	c1 e0 03             	shl    $0x3,%eax
   1badf:	01 d0                	add    %edx,%eax
   1bae1:	c1 e0 04             	shl    $0x4,%eax
   1bae4:	05 ec fe 03 00       	add    $0x3feec,%eax
   1bae9:	8b 00                	mov    (%eax),%eax
   1baeb:	0f be 54 24 07       	movsbl 0x7(%esp),%edx
   1baf0:	83 ea 20             	sub    $0x20,%edx
   1baf3:	01 d0                	add    %edx,%eax
   1baf5:	0f b6 08             	movzbl (%eax),%ecx
						"m" (*(short *)pos),
   1baf8:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bafc:	89 d0                	mov    %edx,%eax
   1bafe:	c1 e0 03             	shl    $0x3,%eax
   1bb01:	01 d0                	add    %edx,%eax
   1bb03:	c1 e0 04             	shl    $0x4,%eax
   1bb06:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bb0b:	8b 00                	mov    (%eax),%eax
   1bb0d:	89 c3                	mov    %eax,%ebx
					__asm__("movb %2, %%ah\n\t"						// 写字符
   1bb0f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb13:	89 d0                	mov    %edx,%eax
   1bb15:	c1 e0 03             	shl    $0x3,%eax
   1bb18:	01 d0                	add    %edx,%eax
   1bb1a:	c1 e0 04             	shl    $0x4,%eax
   1bb1d:	8d 90 62 fe 03 00    	lea    0x3fe62(%eax),%edx
   1bb23:	89 c8                	mov    %ecx,%eax
   1bb25:	8a 22                	mov    (%edx),%ah
   1bb27:	66 89 03             	mov    %ax,(%ebx)
						"m" (attr)
						:);
					pos += 2;
   1bb2a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb2e:	89 d0                	mov    %edx,%eax
   1bb30:	c1 e0 03             	shl    $0x3,%eax
   1bb33:	01 d0                	add    %edx,%eax
   1bb35:	c1 e0 04             	shl    $0x4,%eax
   1bb38:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bb3d:	8b 00                	mov    (%eax),%eax
   1bb3f:	8d 48 02             	lea    0x2(%eax),%ecx
   1bb42:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb46:	89 d0                	mov    %edx,%eax
   1bb48:	c1 e0 03             	shl    $0x3,%eax
   1bb4b:	01 d0                	add    %edx,%eax
   1bb4d:	c1 e0 04             	shl    $0x4,%eax
   1bb50:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bb55:	89 08                	mov    %ecx,(%eax)
					x++;
   1bb57:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb5b:	89 d0                	mov    %edx,%eax
   1bb5d:	c1 e0 03             	shl    $0x3,%eax
   1bb60:	01 d0                	add    %edx,%eax
   1bb62:	c1 e0 04             	shl    $0x4,%eax
   1bb65:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bb6a:	8b 00                	mov    (%eax),%eax
   1bb6c:	8d 48 01             	lea    0x1(%eax),%ecx
   1bb6f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb73:	89 d0                	mov    %edx,%eax
   1bb75:	c1 e0 03             	shl    $0x3,%eax
   1bb78:	01 d0                	add    %edx,%eax
   1bb7a:	c1 e0 04             	shl    $0x4,%eax
   1bb7d:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bb82:	89 08                	mov    %ecx,(%eax)
   1bb84:	e9 a5 02 00 00       	jmp    1be2e <con_write+0x4ed>
				// 如果字符c是转义字符ESC,则转换状态state到ESesc
				} else if (c == 27)									// ESC - 转义控制字符
   1bb89:	80 7c 24 07 1b       	cmpb   $0x1b,0x7(%esp)
   1bb8e:	75 1e                	jne    1bbae <con_write+0x26d>
					state = ESesc;
   1bb90:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb94:	89 d0                	mov    %edx,%eax
   1bb96:	c1 e0 03             	shl    $0x3,%eax
   1bb99:	01 d0                	add    %edx,%eax
   1bb9b:	c1 e0 04             	shl    $0x4,%eax
   1bb9e:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1bba3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
   1bba9:	e9 5b 11 00 00       	jmp    1cd09 <con_write+0x13c8>
				// 如果c是换行符LF(10),或垂直制表符VT(11),或换页符FF(12),则光标移动到下1行.
				else if (c == 10 || c == 11 || c == 12)
   1bbae:	80 7c 24 07 0a       	cmpb   $0xa,0x7(%esp)
   1bbb3:	74 0e                	je     1bbc3 <con_write+0x282>
   1bbb5:	80 7c 24 07 0b       	cmpb   $0xb,0x7(%esp)
   1bbba:	74 07                	je     1bbc3 <con_write+0x282>
   1bbbc:	80 7c 24 07 0c       	cmpb   $0xc,0x7(%esp)
   1bbc1:	75 14                	jne    1bbd7 <con_write+0x296>
					lf(currcons);
   1bbc3:	83 ec 0c             	sub    $0xc,%esp
   1bbc6:	ff 74 24 14          	pushl  0x14(%esp)
   1bbca:	e8 7e ed ff ff       	call   1a94d <lf>
   1bbcf:	83 c4 10             	add    $0x10,%esp
   1bbd2:	e9 57 02 00 00       	jmp    1be2e <con_write+0x4ed>
				// 如果c是回车符CR(13),则将光标移动到头列(0列)
				else if (c == 13)									// CR - 回车
   1bbd7:	80 7c 24 07 0d       	cmpb   $0xd,0x7(%esp)
   1bbdc:	75 14                	jne    1bbf2 <con_write+0x2b1>
					cr(currcons);
   1bbde:	83 ec 0c             	sub    $0xc,%esp
   1bbe1:	ff 74 24 14          	pushl  0x14(%esp)
   1bbe5:	e8 9d ee ff ff       	call   1aa87 <cr>
   1bbea:	83 c4 10             	add    $0x10,%esp
   1bbed:	e9 17 11 00 00       	jmp    1cd09 <con_write+0x13c8>
				// 如果c是DEL(127),则将光标左边字符擦除(用空格字符替代),并将光标移到被擦除位置.
				else if (c == ERASE_CHAR(tty))
   1bbf2:	0f be 54 24 07       	movsbl 0x7(%esp),%edx
   1bbf7:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bbfb:	0f b6 40 13          	movzbl 0x13(%eax),%eax
   1bbff:	0f b6 c0             	movzbl %al,%eax
   1bc02:	39 c2                	cmp    %eax,%edx
   1bc04:	75 14                	jne    1bc1a <con_write+0x2d9>
					del(currcons);
   1bc06:	83 ec 0c             	sub    $0xc,%esp
   1bc09:	ff 74 24 14          	pushl  0x14(%esp)
   1bc0d:	e8 d3 ee ff ff       	call   1aae5 <del>
   1bc12:	83 c4 10             	add    $0x10,%esp
   1bc15:	e9 ef 10 00 00       	jmp    1cd09 <con_write+0x13c8>
				// 如果c是BS(backspace,8),则将光标左移1格,并相应调整光标对应内存位置指针pos.
				else if (c == 8) {									// BS - 后退.
   1bc1a:	80 7c 24 07 08       	cmpb   $0x8,0x7(%esp)
   1bc1f:	75 7c                	jne    1bc9d <con_write+0x35c>
					if (x) {
   1bc21:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc25:	89 d0                	mov    %edx,%eax
   1bc27:	c1 e0 03             	shl    $0x3,%eax
   1bc2a:	01 d0                	add    %edx,%eax
   1bc2c:	c1 e0 04             	shl    $0x4,%eax
   1bc2f:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bc34:	8b 00                	mov    (%eax),%eax
   1bc36:	85 c0                	test   %eax,%eax
   1bc38:	0f 84 cb 10 00 00    	je     1cd09 <con_write+0x13c8>
						x--;
   1bc3e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc42:	89 d0                	mov    %edx,%eax
   1bc44:	c1 e0 03             	shl    $0x3,%eax
   1bc47:	01 d0                	add    %edx,%eax
   1bc49:	c1 e0 04             	shl    $0x4,%eax
   1bc4c:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bc51:	8b 00                	mov    (%eax),%eax
   1bc53:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1bc56:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc5a:	89 d0                	mov    %edx,%eax
   1bc5c:	c1 e0 03             	shl    $0x3,%eax
   1bc5f:	01 d0                	add    %edx,%eax
   1bc61:	c1 e0 04             	shl    $0x4,%eax
   1bc64:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bc69:	89 08                	mov    %ecx,(%eax)
						pos -= 2;
   1bc6b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc6f:	89 d0                	mov    %edx,%eax
   1bc71:	c1 e0 03             	shl    $0x3,%eax
   1bc74:	01 d0                	add    %edx,%eax
   1bc76:	c1 e0 04             	shl    $0x4,%eax
   1bc79:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bc7e:	8b 00                	mov    (%eax),%eax
   1bc80:	8d 48 fe             	lea    -0x2(%eax),%ecx
   1bc83:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc87:	89 d0                	mov    %edx,%eax
   1bc89:	c1 e0 03             	shl    $0x3,%eax
   1bc8c:	01 d0                	add    %edx,%eax
   1bc8e:	c1 e0 04             	shl    $0x4,%eax
   1bc91:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bc96:	89 08                	mov    %ecx,(%eax)
   1bc98:	e9 6c 10 00 00       	jmp    1cd09 <con_write+0x13c8>
					}
				// 如果字符c是水平制表符HT(9),则将光标移到8的位数列上.若此时光标列数超出屏幕最大列数,则将光标移到下一行上.
				} else if (c == 9) {								// HT - 水平制表
   1bc9d:	80 7c 24 07 09       	cmpb   $0x9,0x7(%esp)
   1bca2:	0f 85 28 01 00 00    	jne    1bdd0 <con_write+0x48f>
					c = 8 - (x & 7);
   1bca8:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bcac:	89 d0                	mov    %edx,%eax
   1bcae:	c1 e0 03             	shl    $0x3,%eax
   1bcb1:	01 d0                	add    %edx,%eax
   1bcb3:	c1 e0 04             	shl    $0x4,%eax
   1bcb6:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bcbb:	8b 00                	mov    (%eax),%eax
   1bcbd:	83 e0 07             	and    $0x7,%eax
   1bcc0:	ba 08 00 00 00       	mov    $0x8,%edx
   1bcc5:	29 c2                	sub    %eax,%edx
   1bcc7:	89 d0                	mov    %edx,%eax
   1bcc9:	88 44 24 07          	mov    %al,0x7(%esp)
					x += c;
   1bccd:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bcd1:	89 d0                	mov    %edx,%eax
   1bcd3:	c1 e0 03             	shl    $0x3,%eax
   1bcd6:	01 d0                	add    %edx,%eax
   1bcd8:	c1 e0 04             	shl    $0x4,%eax
   1bcdb:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bce0:	8b 10                	mov    (%eax),%edx
   1bce2:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1bce7:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1bcea:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bcee:	89 d0                	mov    %edx,%eax
   1bcf0:	c1 e0 03             	shl    $0x3,%eax
   1bcf3:	01 d0                	add    %edx,%eax
   1bcf5:	c1 e0 04             	shl    $0x4,%eax
   1bcf8:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bcfd:	89 08                	mov    %ecx,(%eax)
					pos += c << 1;
   1bcff:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd03:	89 d0                	mov    %edx,%eax
   1bd05:	c1 e0 03             	shl    $0x3,%eax
   1bd08:	01 d0                	add    %edx,%eax
   1bd0a:	c1 e0 04             	shl    $0x4,%eax
   1bd0d:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bd12:	8b 00                	mov    (%eax),%eax
   1bd14:	0f be 54 24 07       	movsbl 0x7(%esp),%edx
   1bd19:	01 d2                	add    %edx,%edx
   1bd1b:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
   1bd1e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd22:	89 d0                	mov    %edx,%eax
   1bd24:	c1 e0 03             	shl    $0x3,%eax
   1bd27:	01 d0                	add    %edx,%eax
   1bd29:	c1 e0 04             	shl    $0x4,%eax
   1bd2c:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bd31:	89 08                	mov    %ecx,(%eax)
					if (x > video_num_columns) {
   1bd33:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd37:	89 d0                	mov    %edx,%eax
   1bd39:	c1 e0 03             	shl    $0x3,%eax
   1bd3c:	01 d0                	add    %edx,%eax
   1bd3e:	c1 e0 04             	shl    $0x4,%eax
   1bd41:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bd46:	8b 10                	mov    (%eax),%edx
   1bd48:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1bd4d:	39 c2                	cmp    %eax,%edx
   1bd4f:	76 75                	jbe    1bdc6 <con_write+0x485>
						x -= video_num_columns;
   1bd51:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd55:	89 d0                	mov    %edx,%eax
   1bd57:	c1 e0 03             	shl    $0x3,%eax
   1bd5a:	01 d0                	add    %edx,%eax
   1bd5c:	c1 e0 04             	shl    $0x4,%eax
   1bd5f:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bd64:	8b 10                	mov    (%eax),%edx
   1bd66:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1bd6b:	89 d1                	mov    %edx,%ecx
   1bd6d:	29 c1                	sub    %eax,%ecx
   1bd6f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd73:	89 d0                	mov    %edx,%eax
   1bd75:	c1 e0 03             	shl    $0x3,%eax
   1bd78:	01 d0                	add    %edx,%eax
   1bd7a:	c1 e0 04             	shl    $0x4,%eax
   1bd7d:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bd82:	89 08                	mov    %ecx,(%eax)
						pos -= video_size_row;
   1bd84:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd88:	89 d0                	mov    %edx,%eax
   1bd8a:	c1 e0 03             	shl    $0x3,%eax
   1bd8d:	01 d0                	add    %edx,%eax
   1bd8f:	c1 e0 04             	shl    $0x4,%eax
   1bd92:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bd97:	8b 10                	mov    (%eax),%edx
   1bd99:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1bd9e:	89 d1                	mov    %edx,%ecx
   1bda0:	29 c1                	sub    %eax,%ecx
   1bda2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bda6:	89 d0                	mov    %edx,%eax
   1bda8:	c1 e0 03             	shl    $0x3,%eax
   1bdab:	01 d0                	add    %edx,%eax
   1bdad:	c1 e0 04             	shl    $0x4,%eax
   1bdb0:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bdb5:	89 08                	mov    %ecx,(%eax)
						lf(currcons);
   1bdb7:	83 ec 0c             	sub    $0xc,%esp
   1bdba:	ff 74 24 14          	pushl  0x14(%esp)
   1bdbe:	e8 8a eb ff ff       	call   1a94d <lf>
   1bdc3:	83 c4 10             	add    $0x10,%esp
					}
					c = 9;
   1bdc6:	c6 44 24 07 09       	movb   $0x9,0x7(%esp)
   1bdcb:	e9 39 0f 00 00       	jmp    1cd09 <con_write+0x13c8>
				// 如果字符c是响铃符BEL(7),则调用蜂鸣函数,使扬声器发声.
				} else if (c == 7)									// BEL - 响铃
   1bdd0:	80 7c 24 07 07       	cmpb   $0x7,0x7(%esp)
   1bdd5:	75 0a                	jne    1bde1 <con_write+0x4a0>
					sysbeep();
   1bdd7:	e8 3f 15 00 00       	call   1d31b <sysbeep>
   1bddc:	e9 28 0f 00 00       	jmp    1cd09 <con_write+0x13c8>
				// 如果c是控制字符SO(14)或SI(15),则相应选择字符集G1或G0作为显示字符集.
			  	else if (c == 14)									// SO - 换出,使用G1.
   1bde1:	80 7c 24 07 0e       	cmpb   $0xe,0x7(%esp)
   1bde6:	75 20                	jne    1be08 <con_write+0x4c7>
			  		translate = GRAF_TRANS;
   1bde8:	8b 0d 40 f5 02 00    	mov    0x2f540,%ecx
   1bdee:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bdf2:	89 d0                	mov    %edx,%eax
   1bdf4:	c1 e0 03             	shl    $0x3,%eax
   1bdf7:	01 d0                	add    %edx,%eax
   1bdf9:	c1 e0 04             	shl    $0x4,%eax
   1bdfc:	05 ec fe 03 00       	add    $0x3feec,%eax
   1be01:	89 08                	mov    %ecx,(%eax)
   1be03:	e9 01 0f 00 00       	jmp    1cd09 <con_write+0x13c8>
			  	else if (c == 15)									// SI - 换进,使用G0.
   1be08:	80 7c 24 07 0f       	cmpb   $0xf,0x7(%esp)
   1be0d:	0f 85 f6 0e 00 00    	jne    1cd09 <con_write+0x13c8>
					translate = NORM_TRANS;
   1be13:	8b 0d 3c f5 02 00    	mov    0x2f53c,%ecx
   1be19:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be1d:	89 d0                	mov    %edx,%eax
   1be1f:	c1 e0 03             	shl    $0x3,%eax
   1be22:	01 d0                	add    %edx,%eax
   1be24:	c1 e0 04             	shl    $0x4,%eax
   1be27:	05 ec fe 03 00       	add    $0x3feec,%eax
   1be2c:	89 08                	mov    %ecx,(%eax)
				break;
   1be2e:	e9 d6 0e 00 00       	jmp    1cd09 <con_write+0x13c8>
			//       ESsquare去处理.否则就把接收到的字符作为转义序列来处理.对于选择字符集转义序列'ESC ('和'ESC )',使用单独的状态ESsetgraph
			//       来处理;对于设备控制字符串序列'ESC P',使用单独的状态ESsetterm来处理
			// 如果在ESnormal状态收到转义字符ESC(0x1b = 033 = 27),则转到本状态处理.该状态对C1中控制字符或转义字符进行处理.处理完后默认的
			// 状态将是ESnormal.
			case ESesc:
				state = ESnormal;
   1be33:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be37:	89 d0                	mov    %edx,%eax
   1be39:	c1 e0 03             	shl    $0x3,%eax
   1be3c:	01 d0                	add    %edx,%eax
   1be3e:	c1 e0 04             	shl    $0x4,%eax
   1be41:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1be46:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				switch (c)
   1be4c:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1be51:	83 e8 23             	sub    $0x23,%eax
   1be54:	83 f8 40             	cmp    $0x40,%eax
   1be57:	0f 87 ac 0e 00 00    	ja     1cd09 <con_write+0x13c8>
   1be5d:	8b 04 85 08 55 02 00 	mov    0x25508(,%eax,4),%eax
   1be64:	ff e0                	jmp    *%eax
				{
				  case '[':											// ESC [ - 是CSI序列.
					state = ESsquare;
   1be66:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be6a:	89 d0                	mov    %edx,%eax
   1be6c:	c1 e0 03             	shl    $0x3,%eax
   1be6f:	01 d0                	add    %edx,%eax
   1be71:	c1 e0 04             	shl    $0x4,%eax
   1be74:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1be79:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
					break;
   1be7f:	e9 e7 01 00 00       	jmp    1c06b <con_write+0x72a>
				  case 'E':											// ESC E - 光标下移1行回0列.
					gotoxy(currcons, 0, y + 1);
   1be84:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be88:	89 d0                	mov    %edx,%eax
   1be8a:	c1 e0 03             	shl    $0x3,%eax
   1be8d:	01 d0                	add    %edx,%eax
   1be8f:	c1 e0 04             	shl    $0x4,%eax
   1be92:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1be97:	8b 00                	mov    (%eax),%eax
   1be99:	83 c0 01             	add    $0x1,%eax
   1be9c:	83 ec 04             	sub    $0x4,%esp
   1be9f:	50                   	push   %eax
   1bea0:	6a 00                	push   $0x0
   1bea2:	ff 74 24 14          	pushl  0x14(%esp)
   1bea6:	e8 99 e2 ff ff       	call   1a144 <gotoxy>
   1beab:	83 c4 10             	add    $0x10,%esp
					break;
   1beae:	e9 b8 01 00 00       	jmp    1c06b <con_write+0x72a>
				  case 'M':											// ESC M - 光标上移一行.
					ri(currcons);
   1beb3:	83 ec 0c             	sub    $0xc,%esp
   1beb6:	ff 74 24 14          	pushl  0x14(%esp)
   1beba:	e8 2c eb ff ff       	call   1a9eb <ri>
   1bebf:	83 c4 10             	add    $0x10,%esp
					break;
   1bec2:	e9 a4 01 00 00       	jmp    1c06b <con_write+0x72a>
				  case 'D':											// ESC D - 光标下移一行
					lf(currcons);
   1bec7:	83 ec 0c             	sub    $0xc,%esp
   1beca:	ff 74 24 14          	pushl  0x14(%esp)
   1bece:	e8 7a ea ff ff       	call   1a94d <lf>
   1bed3:	83 c4 10             	add    $0x10,%esp
					break;
   1bed6:	e9 90 01 00 00       	jmp    1c06b <con_write+0x72a>
				  case 'Z':											// ESC Z - 设备属性查询
					respond(currcons, tty);
   1bedb:	83 ec 08             	sub    $0x8,%esp
   1bede:	ff 74 24 28          	pushl  0x28(%esp)
   1bee2:	ff 74 24 14          	pushl  0x14(%esp)
   1bee6:	e8 9d f5 ff ff       	call   1b488 <respond>
   1beeb:	83 c4 10             	add    $0x10,%esp
					break;
   1beee:	e9 78 01 00 00       	jmp    1c06b <con_write+0x72a>
				  case '7':											// ESC 7 - 保存光标位置
					save_cur(currcons);
   1bef3:	83 ec 0c             	sub    $0xc,%esp
   1bef6:	ff 74 24 14          	pushl  0x14(%esp)
   1befa:	e8 b2 f9 ff ff       	call   1b8b1 <save_cur>
   1beff:	83 c4 10             	add    $0x10,%esp
					break;
   1bf02:	e9 64 01 00 00       	jmp    1c06b <con_write+0x72a>
				  case '8':											// ESC 8 - 恢复光标位置
					restore_cur(currcons);
   1bf07:	83 ec 0c             	sub    $0xc,%esp
   1bf0a:	ff 74 24 14          	pushl  0x14(%esp)
   1bf0e:	e8 f4 f9 ff ff       	call   1b907 <restore_cur>
   1bf13:	83 c4 10             	add    $0x10,%esp
					break;
   1bf16:	e9 50 01 00 00       	jmp    1c06b <con_write+0x72a>
				  case '(':  case ')':								// ESC(,ESC) - 选择字符集
				    	state = ESsetgraph;
   1bf1b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bf1f:	89 d0                	mov    %edx,%eax
   1bf21:	c1 e0 03             	shl    $0x3,%eax
   1bf24:	01 d0                	add    %edx,%eax
   1bf26:	c1 e0 04             	shl    $0x4,%eax
   1bf29:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1bf2e:	c7 00 07 00 00 00    	movl   $0x7,(%eax)
					break;
   1bf34:	e9 32 01 00 00       	jmp    1c06b <con_write+0x72a>
				  case 'P':											// ESC P - 设置终端参数
				    	state = ESsetterm;
   1bf39:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bf3d:	89 d0                	mov    %edx,%eax
   1bf3f:	c1 e0 03             	shl    $0x3,%eax
   1bf42:	01 d0                	add    %edx,%eax
   1bf44:	c1 e0 04             	shl    $0x4,%eax
   1bf47:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1bf4c:	c7 00 06 00 00 00    	movl   $0x6,(%eax)
				    	break;
   1bf52:	e9 14 01 00 00       	jmp    1c06b <con_write+0x72a>
				  case '#':											// ESC # - 修改整行属性
				  	state = -1;
   1bf57:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bf5b:	89 d0                	mov    %edx,%eax
   1bf5d:	c1 e0 03             	shl    $0x3,%eax
   1bf60:	01 d0                	add    %edx,%eax
   1bf62:	c1 e0 04             	shl    $0x4,%eax
   1bf65:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1bf6a:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
				  	break;
   1bf70:	e9 f6 00 00 00       	jmp    1c06b <con_write+0x72a>
				  case 'c':											// ESC c - 复位到终端初始设置
					tty->termios = DEF_TERMIOS;
   1bf75:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bf79:	c7 00 00 01 00 00    	movl   $0x100,(%eax)
   1bf7f:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bf83:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
   1bf8a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bf8e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   1bf95:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bf99:	c7 40 0c 0b 0e 00 00 	movl   $0xe0b,0xc(%eax)
   1bfa0:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bfa4:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   1bfa8:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bfac:	8b 15 d3 54 02 00    	mov    0x254d3,%edx
   1bfb2:	89 50 11             	mov    %edx,0x11(%eax)
   1bfb5:	8b 15 d7 54 02 00    	mov    0x254d7,%edx
   1bfbb:	89 50 15             	mov    %edx,0x15(%eax)
   1bfbe:	8b 15 db 54 02 00    	mov    0x254db,%edx
   1bfc4:	89 50 19             	mov    %edx,0x19(%eax)
   1bfc7:	8b 15 df 54 02 00    	mov    0x254df,%edx
   1bfcd:	89 50 1d             	mov    %edx,0x1d(%eax)
   1bfd0:	0f b6 15 e3 54 02 00 	movzbl 0x254e3,%edx
   1bfd7:	88 50 21             	mov    %dl,0x21(%eax)
				  	state = restate = ESnormal;
   1bfda:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bfde:	89 d0                	mov    %edx,%eax
   1bfe0:	c1 e0 03             	shl    $0x3,%eax
   1bfe3:	01 d0                	add    %edx,%eax
   1bfe5:	c1 e0 04             	shl    $0x4,%eax
   1bfe8:	05 70 fe 03 00       	add    $0x3fe70,%eax
   1bfed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1bff3:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bff7:	89 d0                	mov    %edx,%eax
   1bff9:	c1 e0 03             	shl    $0x3,%eax
   1bffc:	01 d0                	add    %edx,%eax
   1bffe:	c1 e0 04             	shl    $0x4,%eax
   1c001:	05 70 fe 03 00       	add    $0x3fe70,%eax
   1c006:	8b 08                	mov    (%eax),%ecx
   1c008:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c00c:	89 d0                	mov    %edx,%eax
   1c00e:	c1 e0 03             	shl    $0x3,%eax
   1c011:	01 d0                	add    %edx,%eax
   1c013:	c1 e0 04             	shl    $0x4,%eax
   1c016:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1c01b:	89 08                	mov    %ecx,(%eax)
					checkin = 0;
   1c01d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c021:	89 d0                	mov    %edx,%eax
   1c023:	c1 e0 03             	shl    $0x3,%eax
   1c026:	01 d0                	add    %edx,%eax
   1c028:	c1 e0 04             	shl    $0x4,%eax
   1c02b:	05 74 fe 03 00       	add    $0x3fe74,%eax
   1c030:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					top = 0;
   1c036:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c03a:	89 d0                	mov    %edx,%eax
   1c03c:	c1 e0 03             	shl    $0x3,%eax
   1c03f:	01 d0                	add    %edx,%eax
   1c041:	c1 e0 04             	shl    $0x4,%eax
   1c044:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1c049:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					bottom = video_num_lines;
   1c04f:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1c055:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c059:	89 d0                	mov    %edx,%eax
   1c05b:	c1 e0 03             	shl    $0x3,%eax
   1c05e:	01 d0                	add    %edx,%eax
   1c060:	c1 e0 04             	shl    $0x4,%eax
   1c063:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1c068:	89 08                	mov    %ecx,(%eax)
					break;
   1c06a:	90                   	nop
				 /* case '>':   Numeric keypad */
				 /* case '=':   Appl. keypad */
				}
				break;
   1c06b:	e9 99 0c 00 00       	jmp    1cd09 <con_write+0x13c8>
			// 如果在状态ESesc(是转义字符ESC)时收到的字符'[',则表明是CSI控制序列,于是转到状态Essequare来处理.首先对ESC转义序列保存参数数组par[]清零,
			// 索引变量npar指向首项,并且设置开始处于参数状态ESgetpars.如果接收到的字符不是'?',则直接转到状态ESgetpars去处理,若接收到的字符是'?',说明这
			// 个序列是终端设备私有序列,后面会有一个功能字符.于是去读下一字符,再到状态ESgetpars去处理代码处.如果此时接收到字符还是'[',那么表明收到了键盘功能
			// 键发出的序列,于是设置下一状态为ESfunckey.否则直接进入ESgetpars状态继续处理.
			case ESsquare:
				for(npar = 0; npar < NPAR; npar++)					// 初始化参数数组.
   1c070:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c074:	89 d0                	mov    %edx,%eax
   1c076:	c1 e0 03             	shl    $0x3,%eax
   1c079:	01 d0                	add    %edx,%eax
   1c07b:	c1 e0 04             	shl    $0x4,%eax
   1c07e:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c083:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1c089:	eb 60                	jmp    1c0eb <con_write+0x7aa>
					par[npar] = 0;
   1c08b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c08f:	89 d0                	mov    %edx,%eax
   1c091:	c1 e0 03             	shl    $0x3,%eax
   1c094:	01 d0                	add    %edx,%eax
   1c096:	c1 e0 04             	shl    $0x4,%eax
   1c099:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c09e:	8b 08                	mov    (%eax),%ecx
   1c0a0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0a4:	89 d0                	mov    %edx,%eax
   1c0a6:	c1 e0 03             	shl    $0x3,%eax
   1c0a9:	01 d0                	add    %edx,%eax
   1c0ab:	c1 e0 02             	shl    $0x2,%eax
   1c0ae:	01 c8                	add    %ecx,%eax
   1c0b0:	83 c0 0c             	add    $0xc,%eax
   1c0b3:	c7 04 85 68 fe 03 00 	movl   $0x0,0x3fe68(,%eax,4)
   1c0ba:	00 00 00 00 
				for(npar = 0; npar < NPAR; npar++)					// 初始化参数数组.
   1c0be:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0c2:	89 d0                	mov    %edx,%eax
   1c0c4:	c1 e0 03             	shl    $0x3,%eax
   1c0c7:	01 d0                	add    %edx,%eax
   1c0c9:	c1 e0 04             	shl    $0x4,%eax
   1c0cc:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c0d1:	8b 00                	mov    (%eax),%eax
   1c0d3:	8d 48 01             	lea    0x1(%eax),%ecx
   1c0d6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0da:	89 d0                	mov    %edx,%eax
   1c0dc:	c1 e0 03             	shl    $0x3,%eax
   1c0df:	01 d0                	add    %edx,%eax
   1c0e1:	c1 e0 04             	shl    $0x4,%eax
   1c0e4:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c0e9:	89 08                	mov    %ecx,(%eax)
   1c0eb:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0ef:	89 d0                	mov    %edx,%eax
   1c0f1:	c1 e0 03             	shl    $0x3,%eax
   1c0f4:	01 d0                	add    %edx,%eax
   1c0f6:	c1 e0 04             	shl    $0x4,%eax
   1c0f9:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c0fe:	8b 00                	mov    (%eax),%eax
   1c100:	83 f8 0f             	cmp    $0xf,%eax
   1c103:	76 86                	jbe    1c08b <con_write+0x74a>
				npar = 0;
   1c105:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c109:	89 d0                	mov    %edx,%eax
   1c10b:	c1 e0 03             	shl    $0x3,%eax
   1c10e:	01 d0                	add    %edx,%eax
   1c110:	c1 e0 04             	shl    $0x4,%eax
   1c113:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c118:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				state = ESgetpars;
   1c11e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c122:	89 d0                	mov    %edx,%eax
   1c124:	c1 e0 03             	shl    $0x3,%eax
   1c127:	01 d0                	add    %edx,%eax
   1c129:	c1 e0 04             	shl    $0x4,%eax
   1c12c:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1c131:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
				if (c == '[')  										/* Function key */	// 'ESC [['是功能键.
   1c137:	80 7c 24 07 5b       	cmpb   $0x5b,0x7(%esp)
   1c13c:	75 1e                	jne    1c15c <con_write+0x81b>
				{
					state = ESfunckey;
   1c13e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c142:	89 d0                	mov    %edx,%eax
   1c144:	c1 e0 03             	shl    $0x3,%eax
   1c147:	01 d0                	add    %edx,%eax
   1c149:	c1 e0 04             	shl    $0x4,%eax
   1c14c:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1c151:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
					break;
   1c157:	e9 ad 0b 00 00       	jmp    1cd09 <con_write+0x13c8>
				}
				if (ques = (c == '?'))
   1c15c:	80 7c 24 07 3f       	cmpb   $0x3f,0x7(%esp)
   1c161:	0f 94 c0             	sete   %al
   1c164:	0f b6 c8             	movzbl %al,%ecx
   1c167:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c16b:	89 d0                	mov    %edx,%eax
   1c16d:	c1 e0 03             	shl    $0x3,%eax
   1c170:	01 d0                	add    %edx,%eax
   1c172:	c1 e0 04             	shl    $0x4,%eax
   1c175:	05 68 fe 03 00       	add    $0x3fe68,%eax
   1c17a:	89 08                	mov    %ecx,(%eax)
   1c17c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c180:	89 d0                	mov    %edx,%eax
   1c182:	c1 e0 03             	shl    $0x3,%eax
   1c185:	01 d0                	add    %edx,%eax
   1c187:	c1 e0 04             	shl    $0x4,%eax
   1c18a:	05 68 fe 03 00       	add    $0x3fe68,%eax
   1c18f:	8b 00                	mov    (%eax),%eax
   1c191:	85 c0                	test   %eax,%eax
   1c193:	74 05                	je     1c19a <con_write+0x859>
					break;
   1c195:	e9 6f 0b 00 00       	jmp    1cd09 <con_write+0x13c8>
			//            则还是维持在本状态,并把接收到的参数值保存在数据par[]下一项中.若不是数字字符或分号,说明已取得所有参数,那么就转移到状态
			//            ESgotparts去处理.
			// 该状态表示此时要接收控制序列的参数值.参数用十进制数表示,把接收到的数字字符转换成数值并保存到par[]数组中.如果收到一个分号';',则还是维持在本状态,并
			// 把接收到的参数值保存在数据par[]下一项中.若不是数字字符或分号,说明已取得所有参数,那么就转移到状态ESgotpars去处理.
			case ESgetpars:
				if (c == ';' && npar < NPAR - 1) {
   1c19a:	80 7c 24 07 3b       	cmpb   $0x3b,0x7(%esp)
   1c19f:	75 4c                	jne    1c1ed <con_write+0x8ac>
   1c1a1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1a5:	89 d0                	mov    %edx,%eax
   1c1a7:	c1 e0 03             	shl    $0x3,%eax
   1c1aa:	01 d0                	add    %edx,%eax
   1c1ac:	c1 e0 04             	shl    $0x4,%eax
   1c1af:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c1b4:	8b 00                	mov    (%eax),%eax
   1c1b6:	83 f8 0e             	cmp    $0xe,%eax
   1c1b9:	77 32                	ja     1c1ed <con_write+0x8ac>
					npar++;
   1c1bb:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1bf:	89 d0                	mov    %edx,%eax
   1c1c1:	c1 e0 03             	shl    $0x3,%eax
   1c1c4:	01 d0                	add    %edx,%eax
   1c1c6:	c1 e0 04             	shl    $0x4,%eax
   1c1c9:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c1ce:	8b 00                	mov    (%eax),%eax
   1c1d0:	8d 48 01             	lea    0x1(%eax),%ecx
   1c1d3:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1d7:	89 d0                	mov    %edx,%eax
   1c1d9:	c1 e0 03             	shl    $0x3,%eax
   1c1dc:	01 d0                	add    %edx,%eax
   1c1de:	c1 e0 04             	shl    $0x4,%eax
   1c1e1:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c1e6:	89 08                	mov    %ecx,(%eax)
					break;
   1c1e8:	e9 1c 0b 00 00       	jmp    1cd09 <con_write+0x13c8>
				} else if (c >= '0' && c <= '9') {
   1c1ed:	80 7c 24 07 2f       	cmpb   $0x2f,0x7(%esp)
   1c1f2:	0f 8e 80 00 00 00    	jle    1c278 <con_write+0x937>
   1c1f8:	80 7c 24 07 39       	cmpb   $0x39,0x7(%esp)
   1c1fd:	7f 79                	jg     1c278 <con_write+0x937>
					par[npar] = 10 * par[npar] + c - '0';
   1c1ff:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c203:	89 d0                	mov    %edx,%eax
   1c205:	c1 e0 03             	shl    $0x3,%eax
   1c208:	01 d0                	add    %edx,%eax
   1c20a:	c1 e0 04             	shl    $0x4,%eax
   1c20d:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c212:	8b 08                	mov    (%eax),%ecx
   1c214:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c218:	89 d0                	mov    %edx,%eax
   1c21a:	c1 e0 03             	shl    $0x3,%eax
   1c21d:	01 d0                	add    %edx,%eax
   1c21f:	c1 e0 02             	shl    $0x2,%eax
   1c222:	01 c8                	add    %ecx,%eax
   1c224:	83 c0 0c             	add    $0xc,%eax
   1c227:	8b 14 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%edx
   1c22e:	89 d0                	mov    %edx,%eax
   1c230:	c1 e0 02             	shl    $0x2,%eax
   1c233:	01 d0                	add    %edx,%eax
   1c235:	01 c0                	add    %eax,%eax
   1c237:	89 c2                	mov    %eax,%edx
   1c239:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1c23e:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1c241:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c245:	89 d0                	mov    %edx,%eax
   1c247:	c1 e0 03             	shl    $0x3,%eax
   1c24a:	01 d0                	add    %edx,%eax
   1c24c:	c1 e0 04             	shl    $0x4,%eax
   1c24f:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c254:	8b 18                	mov    (%eax),%ebx
   1c256:	83 e9 30             	sub    $0x30,%ecx
   1c259:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c25d:	89 d0                	mov    %edx,%eax
   1c25f:	c1 e0 03             	shl    $0x3,%eax
   1c262:	01 d0                	add    %edx,%eax
   1c264:	c1 e0 02             	shl    $0x2,%eax
   1c267:	01 d8                	add    %ebx,%eax
   1c269:	83 c0 0c             	add    $0xc,%eax
   1c26c:	89 0c 85 68 fe 03 00 	mov    %ecx,0x3fe68(,%eax,4)
					break;
   1c273:	e9 91 0a 00 00       	jmp    1cd09 <con_write+0x13c8>
				} else state = ESgotpars;
   1c278:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c27c:	89 d0                	mov    %edx,%eax
   1c27e:	c1 e0 03             	shl    $0x3,%eax
   1c281:	01 d0                	add    %edx,%eax
   1c283:	c1 e0 04             	shl    $0x4,%eax
   1c286:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1c28b:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
			//           收到过'?',说明这个序列是终端设备私有序列.本内核不对支持对这种序列的处理,于是直接恢复到ESnormal状态.否则就去执行相应控制序列.
			//           待序列处理完后就把状态恢复到ESnormal.
			// ESgotpars状态表示我们已经接收到一个完整的控制序列.此时可以根据本状态接收到的结尾字符对相应控制序列进行处理.不过在处理之前,如果在ESsquare状态收到过'?',
			// 说明这个序列是终端设备私有序列.本内核不支持对这种序列的处理,于是直接恢复到ESnormal状态.否则就去执行相应控制序列.待序列处理完后就把状态恢复到ESnormal.
			case ESgotpars:
				state = ESnormal;
   1c291:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c295:	89 d0                	mov    %edx,%eax
   1c297:	c1 e0 03             	shl    $0x3,%eax
   1c29a:	01 d0                	add    %edx,%eax
   1c29c:	c1 e0 04             	shl    $0x4,%eax
   1c29f:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1c2a4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				if (ques)
   1c2aa:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2ae:	89 d0                	mov    %edx,%eax
   1c2b0:	c1 e0 03             	shl    $0x3,%eax
   1c2b3:	01 d0                	add    %edx,%eax
   1c2b5:	c1 e0 04             	shl    $0x4,%eax
   1c2b8:	05 68 fe 03 00       	add    $0x3fe68,%eax
   1c2bd:	8b 00                	mov    (%eax),%eax
   1c2bf:	85 c0                	test   %eax,%eax
   1c2c1:	74 1e                	je     1c2e1 <con_write+0x9a0>
				{ ques =0;
   1c2c3:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2c7:	89 d0                	mov    %edx,%eax
   1c2c9:	c1 e0 03             	shl    $0x3,%eax
   1c2cc:	01 d0                	add    %edx,%eax
   1c2ce:	c1 e0 04             	shl    $0x4,%eax
   1c2d1:	05 68 fe 03 00       	add    $0x3fe68,%eax
   1c2d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				  break;
   1c2dc:	e9 28 0a 00 00       	jmp    1cd09 <con_write+0x13c8>
				}
				switch(c) {
   1c2e1:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1c2e6:	83 e8 40             	sub    $0x40,%eax
   1c2e9:	83 f8 35             	cmp    $0x35,%eax
   1c2ec:	0f 87 17 0a 00 00    	ja     1cd09 <con_write+0x13c8>
   1c2f2:	8b 04 85 0c 56 02 00 	mov    0x2560c(,%eax,4),%eax
   1c2f9:	ff e0                	jmp    *%eax
					// 如果c是字符'G'或'`',则par[]中第1个参数代表列号,若列号不为零,则将光标左移1格.
					case 'G': case '`':							// CSI Pn G - 光标水平移动.
						if (par[0]) par[0]--;
   1c2fb:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2ff:	89 d0                	mov    %edx,%eax
   1c301:	c1 e0 03             	shl    $0x3,%eax
   1c304:	01 d0                	add    %edx,%eax
   1c306:	c1 e0 04             	shl    $0x4,%eax
   1c309:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c30e:	8b 00                	mov    (%eax),%eax
   1c310:	85 c0                	test   %eax,%eax
   1c312:	74 2d                	je     1c341 <con_write+0xa00>
   1c314:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c318:	89 d0                	mov    %edx,%eax
   1c31a:	c1 e0 03             	shl    $0x3,%eax
   1c31d:	01 d0                	add    %edx,%eax
   1c31f:	c1 e0 04             	shl    $0x4,%eax
   1c322:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c327:	8b 00                	mov    (%eax),%eax
   1c329:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c32c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c330:	89 d0                	mov    %edx,%eax
   1c332:	c1 e0 03             	shl    $0x3,%eax
   1c335:	01 d0                	add    %edx,%eax
   1c337:	c1 e0 04             	shl    $0x4,%eax
   1c33a:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c33f:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, par[0], y);
   1c341:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c345:	89 d0                	mov    %edx,%eax
   1c347:	c1 e0 03             	shl    $0x3,%eax
   1c34a:	01 d0                	add    %edx,%eax
   1c34c:	c1 e0 04             	shl    $0x4,%eax
   1c34f:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c354:	8b 08                	mov    (%eax),%ecx
   1c356:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c35a:	89 d0                	mov    %edx,%eax
   1c35c:	c1 e0 03             	shl    $0x3,%eax
   1c35f:	01 d0                	add    %edx,%eax
   1c361:	c1 e0 04             	shl    $0x4,%eax
   1c364:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c369:	8b 00                	mov    (%eax),%eax
   1c36b:	83 ec 04             	sub    $0x4,%esp
   1c36e:	51                   	push   %ecx
   1c36f:	50                   	push   %eax
   1c370:	ff 74 24 14          	pushl  0x14(%esp)
   1c374:	e8 cb dd ff ff       	call   1a144 <gotoxy>
   1c379:	83 c4 10             	add    $0x10,%esp
						break;
   1c37c:	e9 4b 08 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果c是'A',则第1个参数代表光标上移的行数.若参数为0则上移1行.
					case 'A':									// CSI Pn A - 光标上移.
						if (!par[0]) par[0]++;
   1c381:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c385:	89 d0                	mov    %edx,%eax
   1c387:	c1 e0 03             	shl    $0x3,%eax
   1c38a:	01 d0                	add    %edx,%eax
   1c38c:	c1 e0 04             	shl    $0x4,%eax
   1c38f:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c394:	8b 00                	mov    (%eax),%eax
   1c396:	85 c0                	test   %eax,%eax
   1c398:	75 2d                	jne    1c3c7 <con_write+0xa86>
   1c39a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c39e:	89 d0                	mov    %edx,%eax
   1c3a0:	c1 e0 03             	shl    $0x3,%eax
   1c3a3:	01 d0                	add    %edx,%eax
   1c3a5:	c1 e0 04             	shl    $0x4,%eax
   1c3a8:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c3ad:	8b 00                	mov    (%eax),%eax
   1c3af:	8d 48 01             	lea    0x1(%eax),%ecx
   1c3b2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3b6:	89 d0                	mov    %edx,%eax
   1c3b8:	c1 e0 03             	shl    $0x3,%eax
   1c3bb:	01 d0                	add    %edx,%eax
   1c3bd:	c1 e0 04             	shl    $0x4,%eax
   1c3c0:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c3c5:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x, y - par[0]);
   1c3c7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3cb:	89 d0                	mov    %edx,%eax
   1c3cd:	c1 e0 03             	shl    $0x3,%eax
   1c3d0:	01 d0                	add    %edx,%eax
   1c3d2:	c1 e0 04             	shl    $0x4,%eax
   1c3d5:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c3da:	8b 08                	mov    (%eax),%ecx
   1c3dc:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3e0:	89 d0                	mov    %edx,%eax
   1c3e2:	c1 e0 03             	shl    $0x3,%eax
   1c3e5:	01 d0                	add    %edx,%eax
   1c3e7:	c1 e0 04             	shl    $0x4,%eax
   1c3ea:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c3ef:	8b 00                	mov    (%eax),%eax
   1c3f1:	29 c1                	sub    %eax,%ecx
   1c3f3:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3f7:	89 d0                	mov    %edx,%eax
   1c3f9:	c1 e0 03             	shl    $0x3,%eax
   1c3fc:	01 d0                	add    %edx,%eax
   1c3fe:	c1 e0 04             	shl    $0x4,%eax
   1c401:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1c406:	8b 00                	mov    (%eax),%eax
   1c408:	83 ec 04             	sub    $0x4,%esp
   1c40b:	51                   	push   %ecx
   1c40c:	50                   	push   %eax
   1c40d:	ff 74 24 14          	pushl  0x14(%esp)
   1c411:	e8 2e dd ff ff       	call   1a144 <gotoxy>
   1c416:	83 c4 10             	add    $0x10,%esp
						break;
   1c419:	e9 ae 07 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果c是'B'或'e',则第1个代表光标右移的格数.若参数为0则下移一行.
					case 'B': case 'e':							// CSI Pn B - 光标下移.
						if (!par[0]) par[0]++;
   1c41e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c422:	89 d0                	mov    %edx,%eax
   1c424:	c1 e0 03             	shl    $0x3,%eax
   1c427:	01 d0                	add    %edx,%eax
   1c429:	c1 e0 04             	shl    $0x4,%eax
   1c42c:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c431:	8b 00                	mov    (%eax),%eax
   1c433:	85 c0                	test   %eax,%eax
   1c435:	75 2d                	jne    1c464 <con_write+0xb23>
   1c437:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c43b:	89 d0                	mov    %edx,%eax
   1c43d:	c1 e0 03             	shl    $0x3,%eax
   1c440:	01 d0                	add    %edx,%eax
   1c442:	c1 e0 04             	shl    $0x4,%eax
   1c445:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c44a:	8b 00                	mov    (%eax),%eax
   1c44c:	8d 48 01             	lea    0x1(%eax),%ecx
   1c44f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c453:	89 d0                	mov    %edx,%eax
   1c455:	c1 e0 03             	shl    $0x3,%eax
   1c458:	01 d0                	add    %edx,%eax
   1c45a:	c1 e0 04             	shl    $0x4,%eax
   1c45d:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c462:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x, y + par[0]);
   1c464:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c468:	89 d0                	mov    %edx,%eax
   1c46a:	c1 e0 03             	shl    $0x3,%eax
   1c46d:	01 d0                	add    %edx,%eax
   1c46f:	c1 e0 04             	shl    $0x4,%eax
   1c472:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c477:	8b 08                	mov    (%eax),%ecx
   1c479:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c47d:	89 d0                	mov    %edx,%eax
   1c47f:	c1 e0 03             	shl    $0x3,%eax
   1c482:	01 d0                	add    %edx,%eax
   1c484:	c1 e0 04             	shl    $0x4,%eax
   1c487:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c48c:	8b 00                	mov    (%eax),%eax
   1c48e:	01 c1                	add    %eax,%ecx
   1c490:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c494:	89 d0                	mov    %edx,%eax
   1c496:	c1 e0 03             	shl    $0x3,%eax
   1c499:	01 d0                	add    %edx,%eax
   1c49b:	c1 e0 04             	shl    $0x4,%eax
   1c49e:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1c4a3:	8b 00                	mov    (%eax),%eax
   1c4a5:	83 ec 04             	sub    $0x4,%esp
   1c4a8:	51                   	push   %ecx
   1c4a9:	50                   	push   %eax
   1c4aa:	ff 74 24 14          	pushl  0x14(%esp)
   1c4ae:	e8 91 dc ff ff       	call   1a144 <gotoxy>
   1c4b3:	83 c4 10             	add    $0x10,%esp
						break;
   1c4b6:	e9 11 07 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果c是'C'或'a',则第1个参数代表光标右移的格数.若参数为0则右移1格.
					case 'C': case 'a':							// CSI Pn C - 光标右移.
						if (!par[0]) par[0]++;
   1c4bb:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4bf:	89 d0                	mov    %edx,%eax
   1c4c1:	c1 e0 03             	shl    $0x3,%eax
   1c4c4:	01 d0                	add    %edx,%eax
   1c4c6:	c1 e0 04             	shl    $0x4,%eax
   1c4c9:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c4ce:	8b 00                	mov    (%eax),%eax
   1c4d0:	85 c0                	test   %eax,%eax
   1c4d2:	75 2d                	jne    1c501 <con_write+0xbc0>
   1c4d4:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4d8:	89 d0                	mov    %edx,%eax
   1c4da:	c1 e0 03             	shl    $0x3,%eax
   1c4dd:	01 d0                	add    %edx,%eax
   1c4df:	c1 e0 04             	shl    $0x4,%eax
   1c4e2:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c4e7:	8b 00                	mov    (%eax),%eax
   1c4e9:	8d 48 01             	lea    0x1(%eax),%ecx
   1c4ec:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4f0:	89 d0                	mov    %edx,%eax
   1c4f2:	c1 e0 03             	shl    $0x3,%eax
   1c4f5:	01 d0                	add    %edx,%eax
   1c4f7:	c1 e0 04             	shl    $0x4,%eax
   1c4fa:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c4ff:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x + par[0], y);
   1c501:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c505:	89 d0                	mov    %edx,%eax
   1c507:	c1 e0 03             	shl    $0x3,%eax
   1c50a:	01 d0                	add    %edx,%eax
   1c50c:	c1 e0 04             	shl    $0x4,%eax
   1c50f:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c514:	8b 08                	mov    (%eax),%ecx
   1c516:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c51a:	89 d0                	mov    %edx,%eax
   1c51c:	c1 e0 03             	shl    $0x3,%eax
   1c51f:	01 d0                	add    %edx,%eax
   1c521:	c1 e0 04             	shl    $0x4,%eax
   1c524:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1c529:	8b 18                	mov    (%eax),%ebx
   1c52b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c52f:	89 d0                	mov    %edx,%eax
   1c531:	c1 e0 03             	shl    $0x3,%eax
   1c534:	01 d0                	add    %edx,%eax
   1c536:	c1 e0 04             	shl    $0x4,%eax
   1c539:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c53e:	8b 00                	mov    (%eax),%eax
   1c540:	01 d8                	add    %ebx,%eax
   1c542:	83 ec 04             	sub    $0x4,%esp
   1c545:	51                   	push   %ecx
   1c546:	50                   	push   %eax
   1c547:	ff 74 24 14          	pushl  0x14(%esp)
   1c54b:	e8 f4 db ff ff       	call   1a144 <gotoxy>
   1c550:	83 c4 10             	add    $0x10,%esp
						break;
   1c553:	e9 74 06 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果c是'D',则第1个参数代表光标左移的格数.若参数为0则左移1格.
					case 'D':									// CSI Pn D - 光标左移.
						if (!par[0]) par[0]++;
   1c558:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c55c:	89 d0                	mov    %edx,%eax
   1c55e:	c1 e0 03             	shl    $0x3,%eax
   1c561:	01 d0                	add    %edx,%eax
   1c563:	c1 e0 04             	shl    $0x4,%eax
   1c566:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c56b:	8b 00                	mov    (%eax),%eax
   1c56d:	85 c0                	test   %eax,%eax
   1c56f:	75 2d                	jne    1c59e <con_write+0xc5d>
   1c571:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c575:	89 d0                	mov    %edx,%eax
   1c577:	c1 e0 03             	shl    $0x3,%eax
   1c57a:	01 d0                	add    %edx,%eax
   1c57c:	c1 e0 04             	shl    $0x4,%eax
   1c57f:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c584:	8b 00                	mov    (%eax),%eax
   1c586:	8d 48 01             	lea    0x1(%eax),%ecx
   1c589:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c58d:	89 d0                	mov    %edx,%eax
   1c58f:	c1 e0 03             	shl    $0x3,%eax
   1c592:	01 d0                	add    %edx,%eax
   1c594:	c1 e0 04             	shl    $0x4,%eax
   1c597:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c59c:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x - par[0], y);
   1c59e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5a2:	89 d0                	mov    %edx,%eax
   1c5a4:	c1 e0 03             	shl    $0x3,%eax
   1c5a7:	01 d0                	add    %edx,%eax
   1c5a9:	c1 e0 04             	shl    $0x4,%eax
   1c5ac:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c5b1:	8b 08                	mov    (%eax),%ecx
   1c5b3:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5b7:	89 d0                	mov    %edx,%eax
   1c5b9:	c1 e0 03             	shl    $0x3,%eax
   1c5bc:	01 d0                	add    %edx,%eax
   1c5be:	c1 e0 04             	shl    $0x4,%eax
   1c5c1:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1c5c6:	8b 18                	mov    (%eax),%ebx
   1c5c8:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5cc:	89 d0                	mov    %edx,%eax
   1c5ce:	c1 e0 03             	shl    $0x3,%eax
   1c5d1:	01 d0                	add    %edx,%eax
   1c5d3:	c1 e0 04             	shl    $0x4,%eax
   1c5d6:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c5db:	8b 00                	mov    (%eax),%eax
   1c5dd:	29 c3                	sub    %eax,%ebx
   1c5df:	89 d8                	mov    %ebx,%eax
   1c5e1:	83 ec 04             	sub    $0x4,%esp
   1c5e4:	51                   	push   %ecx
   1c5e5:	50                   	push   %eax
   1c5e6:	ff 74 24 14          	pushl  0x14(%esp)
   1c5ea:	e8 55 db ff ff       	call   1a144 <gotoxy>
   1c5ef:	83 c4 10             	add    $0x10,%esp
						break;
   1c5f2:	e9 d5 05 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果c是'E',则第1个参数代表光标向下移动的行数,并回到0列.若参数为0则下移1行.
					case 'E':									// CSI Pn E - 光标下移回0列
						if (!par[0]) par[0]++;
   1c5f7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5fb:	89 d0                	mov    %edx,%eax
   1c5fd:	c1 e0 03             	shl    $0x3,%eax
   1c600:	01 d0                	add    %edx,%eax
   1c602:	c1 e0 04             	shl    $0x4,%eax
   1c605:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c60a:	8b 00                	mov    (%eax),%eax
   1c60c:	85 c0                	test   %eax,%eax
   1c60e:	75 2d                	jne    1c63d <con_write+0xcfc>
   1c610:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c614:	89 d0                	mov    %edx,%eax
   1c616:	c1 e0 03             	shl    $0x3,%eax
   1c619:	01 d0                	add    %edx,%eax
   1c61b:	c1 e0 04             	shl    $0x4,%eax
   1c61e:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c623:	8b 00                	mov    (%eax),%eax
   1c625:	8d 48 01             	lea    0x1(%eax),%ecx
   1c628:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c62c:	89 d0                	mov    %edx,%eax
   1c62e:	c1 e0 03             	shl    $0x3,%eax
   1c631:	01 d0                	add    %edx,%eax
   1c633:	c1 e0 04             	shl    $0x4,%eax
   1c636:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c63b:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, 0, y + par[0]);
   1c63d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c641:	89 d0                	mov    %edx,%eax
   1c643:	c1 e0 03             	shl    $0x3,%eax
   1c646:	01 d0                	add    %edx,%eax
   1c648:	c1 e0 04             	shl    $0x4,%eax
   1c64b:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c650:	8b 08                	mov    (%eax),%ecx
   1c652:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c656:	89 d0                	mov    %edx,%eax
   1c658:	c1 e0 03             	shl    $0x3,%eax
   1c65b:	01 d0                	add    %edx,%eax
   1c65d:	c1 e0 04             	shl    $0x4,%eax
   1c660:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c665:	8b 00                	mov    (%eax),%eax
   1c667:	01 c8                	add    %ecx,%eax
   1c669:	83 ec 04             	sub    $0x4,%esp
   1c66c:	50                   	push   %eax
   1c66d:	6a 00                	push   $0x0
   1c66f:	ff 74 24 14          	pushl  0x14(%esp)
   1c673:	e8 cc da ff ff       	call   1a144 <gotoxy>
   1c678:	83 c4 10             	add    $0x10,%esp
						break;
   1c67b:	e9 4c 05 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果c是'F',则第1个参数代表光标向上移动的行数,并回到0列.若参数为0则上移1行.
					case 'F':									// CSI Pn F - 光标上移回0列.
						if (!par[0]) par[0]++;
   1c680:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c684:	89 d0                	mov    %edx,%eax
   1c686:	c1 e0 03             	shl    $0x3,%eax
   1c689:	01 d0                	add    %edx,%eax
   1c68b:	c1 e0 04             	shl    $0x4,%eax
   1c68e:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c693:	8b 00                	mov    (%eax),%eax
   1c695:	85 c0                	test   %eax,%eax
   1c697:	75 2d                	jne    1c6c6 <con_write+0xd85>
   1c699:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c69d:	89 d0                	mov    %edx,%eax
   1c69f:	c1 e0 03             	shl    $0x3,%eax
   1c6a2:	01 d0                	add    %edx,%eax
   1c6a4:	c1 e0 04             	shl    $0x4,%eax
   1c6a7:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c6ac:	8b 00                	mov    (%eax),%eax
   1c6ae:	8d 48 01             	lea    0x1(%eax),%ecx
   1c6b1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6b5:	89 d0                	mov    %edx,%eax
   1c6b7:	c1 e0 03             	shl    $0x3,%eax
   1c6ba:	01 d0                	add    %edx,%eax
   1c6bc:	c1 e0 04             	shl    $0x4,%eax
   1c6bf:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c6c4:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, 0, y - par[0]);
   1c6c6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6ca:	89 d0                	mov    %edx,%eax
   1c6cc:	c1 e0 03             	shl    $0x3,%eax
   1c6cf:	01 d0                	add    %edx,%eax
   1c6d1:	c1 e0 04             	shl    $0x4,%eax
   1c6d4:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c6d9:	8b 08                	mov    (%eax),%ecx
   1c6db:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6df:	89 d0                	mov    %edx,%eax
   1c6e1:	c1 e0 03             	shl    $0x3,%eax
   1c6e4:	01 d0                	add    %edx,%eax
   1c6e6:	c1 e0 04             	shl    $0x4,%eax
   1c6e9:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c6ee:	8b 00                	mov    (%eax),%eax
   1c6f0:	29 c1                	sub    %eax,%ecx
   1c6f2:	89 c8                	mov    %ecx,%eax
   1c6f4:	83 ec 04             	sub    $0x4,%esp
   1c6f7:	50                   	push   %eax
   1c6f8:	6a 00                	push   $0x0
   1c6fa:	ff 74 24 14          	pushl  0x14(%esp)
   1c6fe:	e8 41 da ff ff       	call   1a144 <gotoxy>
   1c703:	83 c4 10             	add    $0x10,%esp
						break;
   1c706:	e9 c1 04 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果c是'd',则第1个参数代表光标所需在的行号(从0计数).
					case 'd':									// CSI Pn d - 在当前列置行位置
						if (par[0]) par[0]--;
   1c70b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c70f:	89 d0                	mov    %edx,%eax
   1c711:	c1 e0 03             	shl    $0x3,%eax
   1c714:	01 d0                	add    %edx,%eax
   1c716:	c1 e0 04             	shl    $0x4,%eax
   1c719:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c71e:	8b 00                	mov    (%eax),%eax
   1c720:	85 c0                	test   %eax,%eax
   1c722:	74 2d                	je     1c751 <con_write+0xe10>
   1c724:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c728:	89 d0                	mov    %edx,%eax
   1c72a:	c1 e0 03             	shl    $0x3,%eax
   1c72d:	01 d0                	add    %edx,%eax
   1c72f:	c1 e0 04             	shl    $0x4,%eax
   1c732:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c737:	8b 00                	mov    (%eax),%eax
   1c739:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c73c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c740:	89 d0                	mov    %edx,%eax
   1c742:	c1 e0 03             	shl    $0x3,%eax
   1c745:	01 d0                	add    %edx,%eax
   1c747:	c1 e0 04             	shl    $0x4,%eax
   1c74a:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c74f:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x, par[0]);
   1c751:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c755:	89 d0                	mov    %edx,%eax
   1c757:	c1 e0 03             	shl    $0x3,%eax
   1c75a:	01 d0                	add    %edx,%eax
   1c75c:	c1 e0 04             	shl    $0x4,%eax
   1c75f:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c764:	8b 08                	mov    (%eax),%ecx
   1c766:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c76a:	89 d0                	mov    %edx,%eax
   1c76c:	c1 e0 03             	shl    $0x3,%eax
   1c76f:	01 d0                	add    %edx,%eax
   1c771:	c1 e0 04             	shl    $0x4,%eax
   1c774:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1c779:	8b 00                	mov    (%eax),%eax
   1c77b:	83 ec 04             	sub    $0x4,%esp
   1c77e:	51                   	push   %ecx
   1c77f:	50                   	push   %eax
   1c780:	ff 74 24 14          	pushl  0x14(%esp)
   1c784:	e8 bb d9 ff ff       	call   1a144 <gotoxy>
   1c789:	83 c4 10             	add    $0x10,%esp
						break;
   1c78c:	e9 3b 04 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果c是'H'或'f',则第1个参数代表光标移到的行号,第2个参数代表光标移到的列号.
					case 'H': case 'f':							// CSI Pn H - 光标定位.
						if (par[0]) par[0]--;
   1c791:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c795:	89 d0                	mov    %edx,%eax
   1c797:	c1 e0 03             	shl    $0x3,%eax
   1c79a:	01 d0                	add    %edx,%eax
   1c79c:	c1 e0 04             	shl    $0x4,%eax
   1c79f:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c7a4:	8b 00                	mov    (%eax),%eax
   1c7a6:	85 c0                	test   %eax,%eax
   1c7a8:	74 2d                	je     1c7d7 <con_write+0xe96>
   1c7aa:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7ae:	89 d0                	mov    %edx,%eax
   1c7b0:	c1 e0 03             	shl    $0x3,%eax
   1c7b3:	01 d0                	add    %edx,%eax
   1c7b5:	c1 e0 04             	shl    $0x4,%eax
   1c7b8:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c7bd:	8b 00                	mov    (%eax),%eax
   1c7bf:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c7c2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7c6:	89 d0                	mov    %edx,%eax
   1c7c8:	c1 e0 03             	shl    $0x3,%eax
   1c7cb:	01 d0                	add    %edx,%eax
   1c7cd:	c1 e0 04             	shl    $0x4,%eax
   1c7d0:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c7d5:	89 08                	mov    %ecx,(%eax)
						if (par[1]) par[1]--;
   1c7d7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7db:	89 d0                	mov    %edx,%eax
   1c7dd:	c1 e0 03             	shl    $0x3,%eax
   1c7e0:	01 d0                	add    %edx,%eax
   1c7e2:	c1 e0 04             	shl    $0x4,%eax
   1c7e5:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1c7ea:	8b 00                	mov    (%eax),%eax
   1c7ec:	85 c0                	test   %eax,%eax
   1c7ee:	74 2d                	je     1c81d <con_write+0xedc>
   1c7f0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7f4:	89 d0                	mov    %edx,%eax
   1c7f6:	c1 e0 03             	shl    $0x3,%eax
   1c7f9:	01 d0                	add    %edx,%eax
   1c7fb:	c1 e0 04             	shl    $0x4,%eax
   1c7fe:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1c803:	8b 00                	mov    (%eax),%eax
   1c805:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c808:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c80c:	89 d0                	mov    %edx,%eax
   1c80e:	c1 e0 03             	shl    $0x3,%eax
   1c811:	01 d0                	add    %edx,%eax
   1c813:	c1 e0 04             	shl    $0x4,%eax
   1c816:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1c81b:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, par[1], par[0]);
   1c81d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c821:	89 d0                	mov    %edx,%eax
   1c823:	c1 e0 03             	shl    $0x3,%eax
   1c826:	01 d0                	add    %edx,%eax
   1c828:	c1 e0 04             	shl    $0x4,%eax
   1c82b:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c830:	8b 08                	mov    (%eax),%ecx
   1c832:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c836:	89 d0                	mov    %edx,%eax
   1c838:	c1 e0 03             	shl    $0x3,%eax
   1c83b:	01 d0                	add    %edx,%eax
   1c83d:	c1 e0 04             	shl    $0x4,%eax
   1c840:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1c845:	8b 00                	mov    (%eax),%eax
   1c847:	83 ec 04             	sub    $0x4,%esp
   1c84a:	51                   	push   %ecx
   1c84b:	50                   	push   %eax
   1c84c:	ff 74 24 14          	pushl  0x14(%esp)
   1c850:	e8 ef d8 ff ff       	call   1a144 <gotoxy>
   1c855:	83 c4 10             	add    $0x10,%esp
						break;
   1c858:	e9 6f 03 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果字符c是'J',则第1个参数代表以光标所处位置清屏的方式:
					// 序列: 'ESC [ Ps J'(Ps=0删除光标到屏幕底端;Ps=1删除屏幕开始到光标处;Ps=2整屏删除).
					case 'J':									// CSI Pn J - 屏幕擦除字符.
						csi_J(currcons, par[0]);
   1c85d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c861:	89 d0                	mov    %edx,%eax
   1c863:	c1 e0 03             	shl    $0x3,%eax
   1c866:	01 d0                	add    %edx,%eax
   1c868:	c1 e0 04             	shl    $0x4,%eax
   1c86b:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c870:	8b 00                	mov    (%eax),%eax
   1c872:	83 ec 08             	sub    $0x8,%esp
   1c875:	50                   	push   %eax
   1c876:	ff 74 24 14          	pushl  0x14(%esp)
   1c87a:	e8 0f e3 ff ff       	call   1ab8e <csi_J>
   1c87f:	83 c4 10             	add    $0x10,%esp
						break;
   1c882:	e9 45 03 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果字符c是'K',则第1个参数代表以光标所在位置对行中字符进行删除处理的方式:
					// 序列: 'ESC [ Ps K'(Ps=0删除到行尾;Ps=1从开始删除;Ps=2整行都删除).
					case 'K':									// CSI Pn K - 行内擦除字符.
						csi_K(currcons,par[0]);
   1c887:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c88b:	89 d0                	mov    %edx,%eax
   1c88d:	c1 e0 03             	shl    $0x3,%eax
   1c890:	01 d0                	add    %edx,%eax
   1c892:	c1 e0 04             	shl    $0x4,%eax
   1c895:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c89a:	8b 00                	mov    (%eax),%eax
   1c89c:	83 ec 08             	sub    $0x8,%esp
   1c89f:	50                   	push   %eax
   1c8a0:	ff 74 24 14          	pushl  0x14(%esp)
   1c8a4:	e8 00 e4 ff ff       	call   1aca9 <csi_K>
   1c8a9:	83 c4 10             	add    $0x10,%esp
						break;
   1c8ac:	e9 1b 03 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果字符c是'L',表示在光标位置处插入n行(控制序列 'ESC [ Pn L')
					case 'L':									// CSI Pn L - 插入行.
						csi_L(currcons, par[0]);
   1c8b1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c8b5:	89 d0                	mov    %edx,%eax
   1c8b7:	c1 e0 03             	shl    $0x3,%eax
   1c8ba:	01 d0                	add    %edx,%eax
   1c8bc:	c1 e0 04             	shl    $0x4,%eax
   1c8bf:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c8c4:	8b 00                	mov    (%eax),%eax
   1c8c6:	83 ec 08             	sub    $0x8,%esp
   1c8c9:	50                   	push   %eax
   1c8ca:	ff 74 24 14          	pushl  0x14(%esp)
   1c8ce:	e8 12 ef ff ff       	call   1b7e5 <csi_L>
   1c8d3:	83 c4 10             	add    $0x10,%esp
						break;
   1c8d6:	e9 f1 02 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果字符c是'M',表示在光标位置处删除n行(控制序列 'ESC [ Pn M')
					case 'M':									// 删除行
						csi_M(currcons, par[0]);
   1c8db:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c8df:	89 d0                	mov    %edx,%eax
   1c8e1:	c1 e0 03             	shl    $0x3,%eax
   1c8e4:	01 d0                	add    %edx,%eax
   1c8e6:	c1 e0 04             	shl    $0x4,%eax
   1c8e9:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c8ee:	8b 00                	mov    (%eax),%eax
   1c8f0:	83 ec 08             	sub    $0x8,%esp
   1c8f3:	50                   	push   %eax
   1c8f4:	ff 74 24 14          	pushl  0x14(%esp)
   1c8f8:	e8 70 ef ff ff       	call   1b86d <csi_M>
   1c8fd:	83 c4 10             	add    $0x10,%esp
						break;
   1c900:	e9 c7 02 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果字符c是'P',表示在光标位置处删除n个字符(控制序列 'ESC [ Pn P')
					case 'P':									// 删除字符.
						csi_P(currcons, par[0]);
   1c905:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c909:	89 d0                	mov    %edx,%eax
   1c90b:	c1 e0 03             	shl    $0x3,%eax
   1c90e:	01 d0                	add    %edx,%eax
   1c910:	c1 e0 04             	shl    $0x4,%eax
   1c913:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c918:	8b 00                	mov    (%eax),%eax
   1c91a:	83 ec 08             	sub    $0x8,%esp
   1c91d:	50                   	push   %eax
   1c91e:	ff 74 24 14          	pushl  0x14(%esp)
   1c922:	e8 02 ef ff ff       	call   1b829 <csi_P>
   1c927:	83 c4 10             	add    $0x10,%esp
						break;
   1c92a:	e9 9d 02 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果字符c是'@',表示在光标位置处插入n个字符(控制序列 'ESC [ Pn @')
					case '@':									// 插入字符.
						csi_at(currcons, par[0]);
   1c92f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c933:	89 d0                	mov    %edx,%eax
   1c935:	c1 e0 03             	shl    $0x3,%eax
   1c938:	01 d0                	add    %edx,%eax
   1c93a:	c1 e0 04             	shl    $0x4,%eax
   1c93d:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c942:	8b 00                	mov    (%eax),%eax
   1c944:	83 ec 08             	sub    $0x8,%esp
   1c947:	50                   	push   %eax
   1c948:	ff 74 24 14          	pushl  0x14(%esp)
   1c94c:	e8 50 ee ff ff       	call   1b7a1 <csi_at>
   1c951:	83 c4 10             	add    $0x10,%esp
						break;
   1c954:	e9 73 02 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果字符c是'm',表示改变光标处字符的显示属性,比如加粗,加下划线,闪烁,反显等.
					// 转义序列: 'ESC [ Pn m'.n=0正常显示;1加粗;4加下划线;7反显;27正常显示等.
					case 'm':									// CSI Ps m - 设置显示字符属性.
						csi_m(currcons);
   1c959:	83 ec 0c             	sub    $0xc,%esp
   1c95c:	ff 74 24 14          	pushl  0x14(%esp)
   1c960:	e8 92 e4 ff ff       	call   1adf7 <csi_m>
   1c965:	83 c4 10             	add    $0x10,%esp
						break;
   1c968:	e9 5f 02 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果字符c是'r',则表示两个参数设置滚屏的起始行号和终止行号.
					case 'r':									// CSI Pn r - 设置滚屏上下界.
						if (par[0]) par[0]--;
   1c96d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c971:	89 d0                	mov    %edx,%eax
   1c973:	c1 e0 03             	shl    $0x3,%eax
   1c976:	01 d0                	add    %edx,%eax
   1c978:	c1 e0 04             	shl    $0x4,%eax
   1c97b:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c980:	8b 00                	mov    (%eax),%eax
   1c982:	85 c0                	test   %eax,%eax
   1c984:	74 2d                	je     1c9b3 <con_write+0x1072>
   1c986:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c98a:	89 d0                	mov    %edx,%eax
   1c98c:	c1 e0 03             	shl    $0x3,%eax
   1c98f:	01 d0                	add    %edx,%eax
   1c991:	c1 e0 04             	shl    $0x4,%eax
   1c994:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c999:	8b 00                	mov    (%eax),%eax
   1c99b:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c99e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c9a2:	89 d0                	mov    %edx,%eax
   1c9a4:	c1 e0 03             	shl    $0x3,%eax
   1c9a7:	01 d0                	add    %edx,%eax
   1c9a9:	c1 e0 04             	shl    $0x4,%eax
   1c9ac:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c9b1:	89 08                	mov    %ecx,(%eax)
						if (!par[1]) par[1] = video_num_lines;
   1c9b3:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c9b7:	89 d0                	mov    %edx,%eax
   1c9b9:	c1 e0 03             	shl    $0x3,%eax
   1c9bc:	01 d0                	add    %edx,%eax
   1c9be:	c1 e0 04             	shl    $0x4,%eax
   1c9c1:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1c9c6:	8b 00                	mov    (%eax),%eax
   1c9c8:	85 c0                	test   %eax,%eax
   1c9ca:	75 1b                	jne    1c9e7 <con_write+0x10a6>
   1c9cc:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1c9d2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c9d6:	89 d0                	mov    %edx,%eax
   1c9d8:	c1 e0 03             	shl    $0x3,%eax
   1c9db:	01 d0                	add    %edx,%eax
   1c9dd:	c1 e0 04             	shl    $0x4,%eax
   1c9e0:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1c9e5:	89 08                	mov    %ecx,(%eax)
						if (par[0] < par[1] &&
   1c9e7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c9eb:	89 d0                	mov    %edx,%eax
   1c9ed:	c1 e0 03             	shl    $0x3,%eax
   1c9f0:	01 d0                	add    %edx,%eax
   1c9f2:	c1 e0 04             	shl    $0x4,%eax
   1c9f5:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c9fa:	8b 08                	mov    (%eax),%ecx
   1c9fc:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca00:	89 d0                	mov    %edx,%eax
   1ca02:	c1 e0 03             	shl    $0x3,%eax
   1ca05:	01 d0                	add    %edx,%eax
   1ca07:	c1 e0 04             	shl    $0x4,%eax
   1ca0a:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1ca0f:	8b 00                	mov    (%eax),%eax
   1ca11:	39 c1                	cmp    %eax,%ecx
   1ca13:	0f 83 b2 01 00 00    	jae    1cbcb <con_write+0x128a>
						    par[1] <= video_num_lines) {
   1ca19:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca1d:	89 d0                	mov    %edx,%eax
   1ca1f:	c1 e0 03             	shl    $0x3,%eax
   1ca22:	01 d0                	add    %edx,%eax
   1ca24:	c1 e0 04             	shl    $0x4,%eax
   1ca27:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1ca2c:	8b 10                	mov    (%eax),%edx
   1ca2e:	a1 44 fe 03 00       	mov    0x3fe44,%eax
						if (par[0] < par[1] &&
   1ca33:	39 c2                	cmp    %eax,%edx
   1ca35:	0f 87 90 01 00 00    	ja     1cbcb <con_write+0x128a>
							top = par[0];
   1ca3b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca3f:	89 d0                	mov    %edx,%eax
   1ca41:	c1 e0 03             	shl    $0x3,%eax
   1ca44:	01 d0                	add    %edx,%eax
   1ca46:	c1 e0 04             	shl    $0x4,%eax
   1ca49:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1ca4e:	8b 08                	mov    (%eax),%ecx
   1ca50:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca54:	89 d0                	mov    %edx,%eax
   1ca56:	c1 e0 03             	shl    $0x3,%eax
   1ca59:	01 d0                	add    %edx,%eax
   1ca5b:	c1 e0 04             	shl    $0x4,%eax
   1ca5e:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1ca63:	89 08                	mov    %ecx,(%eax)
							bottom = par[1];
   1ca65:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca69:	89 d0                	mov    %edx,%eax
   1ca6b:	c1 e0 03             	shl    $0x3,%eax
   1ca6e:	01 d0                	add    %edx,%eax
   1ca70:	c1 e0 04             	shl    $0x4,%eax
   1ca73:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1ca78:	8b 08                	mov    (%eax),%ecx
   1ca7a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca7e:	89 d0                	mov    %edx,%eax
   1ca80:	c1 e0 03             	shl    $0x3,%eax
   1ca83:	01 d0                	add    %edx,%eax
   1ca85:	c1 e0 04             	shl    $0x4,%eax
   1ca88:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1ca8d:	89 08                	mov    %ecx,(%eax)
						}
						break;
   1ca8f:	e9 37 01 00 00       	jmp    1cbcb <con_write+0x128a>
					// 如果字符c是's',则表示保存当前光标所在位置.
					case 's':									// CSI s - 保存光标位置.
						save_cur(currcons);
   1ca94:	83 ec 0c             	sub    $0xc,%esp
   1ca97:	ff 74 24 14          	pushl  0x14(%esp)
   1ca9b:	e8 11 ee ff ff       	call   1b8b1 <save_cur>
   1caa0:	83 c4 10             	add    $0x10,%esp
						break;
   1caa3:	e9 24 01 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果字符c是'u',则表示恢复光标到原保存的位置处.
					case 'u':									// CSI u - 恢复保存的光标位置.
						restore_cur(currcons);
   1caa8:	83 ec 0c             	sub    $0xc,%esp
   1caab:	ff 74 24 14          	pushl  0x14(%esp)
   1caaf:	e8 53 ee ff ff       	call   1b907 <restore_cur>
   1cab4:	83 c4 10             	add    $0x10,%esp
						break;
   1cab7:	e9 10 01 00 00       	jmp    1cbcc <con_write+0x128b>
					// 如果字符c是'l'或'b',则分别表示设置屏幕黑屏间隔时间和设置粗体字符显示.此时参数数组中par[1]和par[2]是特征值,它们分别必须par[1]=par[0]+13;
					// par[2]=par[0]+17.在这个条件下,如果c是字符'l',那么par[0]中是开始黑屏时延迟的分钟数;如果c是字符'b',那么par[0]中是设置的粗体字符属性值.
					case 'l': 									/* blank interval */
					case 'b': 									/* bold attribute */
						  if (!((npar >= 2) &&
   1cabc:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cac0:	89 d0                	mov    %edx,%eax
   1cac2:	c1 e0 03             	shl    $0x3,%eax
   1cac5:	01 d0                	add    %edx,%eax
   1cac7:	c1 e0 04             	shl    $0x4,%eax
   1caca:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1cacf:	8b 00                	mov    (%eax),%eax
   1cad1:	83 f8 01             	cmp    $0x1,%eax
   1cad4:	0f 86 2f 02 00 00    	jbe    1cd09 <con_write+0x13c8>
						  ((par[1] - 13) == par[0]) &&
   1cada:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cade:	89 d0                	mov    %edx,%eax
   1cae0:	c1 e0 03             	shl    $0x3,%eax
   1cae3:	01 d0                	add    %edx,%eax
   1cae5:	c1 e0 04             	shl    $0x4,%eax
   1cae8:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1caed:	8b 00                	mov    (%eax),%eax
   1caef:	8d 48 f3             	lea    -0xd(%eax),%ecx
   1caf2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1caf6:	89 d0                	mov    %edx,%eax
   1caf8:	c1 e0 03             	shl    $0x3,%eax
   1cafb:	01 d0                	add    %edx,%eax
   1cafd:	c1 e0 04             	shl    $0x4,%eax
   1cb00:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1cb05:	8b 00                	mov    (%eax),%eax
						  if (!((npar >= 2) &&
   1cb07:	39 c1                	cmp    %eax,%ecx
   1cb09:	0f 85 fa 01 00 00    	jne    1cd09 <con_write+0x13c8>
						  ((par[2] - 17) == par[0])))
   1cb0f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb13:	89 d0                	mov    %edx,%eax
   1cb15:	c1 e0 03             	shl    $0x3,%eax
   1cb18:	01 d0                	add    %edx,%eax
   1cb1a:	c1 e0 04             	shl    $0x4,%eax
   1cb1d:	05 a0 fe 03 00       	add    $0x3fea0,%eax
   1cb22:	8b 00                	mov    (%eax),%eax
   1cb24:	8d 48 ef             	lea    -0x11(%eax),%ecx
   1cb27:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb2b:	89 d0                	mov    %edx,%eax
   1cb2d:	c1 e0 03             	shl    $0x3,%eax
   1cb30:	01 d0                	add    %edx,%eax
   1cb32:	c1 e0 04             	shl    $0x4,%eax
   1cb35:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1cb3a:	8b 00                	mov    (%eax),%eax
						  if (!((npar >= 2) &&
   1cb3c:	39 c1                	cmp    %eax,%ecx
   1cb3e:	0f 85 c5 01 00 00    	jne    1cd09 <con_write+0x13c8>
						    break;
						if ((c == 'l') && (par[0] >= 0) && (par[0] <= 60))
   1cb44:	80 7c 24 07 6c       	cmpb   $0x6c,0x7(%esp)
   1cb49:	75 44                	jne    1cb8f <con_write+0x124e>
   1cb4b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb4f:	89 d0                	mov    %edx,%eax
   1cb51:	c1 e0 03             	shl    $0x3,%eax
   1cb54:	01 d0                	add    %edx,%eax
   1cb56:	c1 e0 04             	shl    $0x4,%eax
   1cb59:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1cb5e:	8b 00                	mov    (%eax),%eax
   1cb60:	83 f8 3c             	cmp    $0x3c,%eax
   1cb63:	77 2a                	ja     1cb8f <con_write+0x124e>
						{
						  blankinterval = HZ * 60 * par[0];
   1cb65:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb69:	89 d0                	mov    %edx,%eax
   1cb6b:	c1 e0 03             	shl    $0x3,%eax
   1cb6e:	01 d0                	add    %edx,%eax
   1cb70:	c1 e0 04             	shl    $0x4,%eax
   1cb73:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1cb78:	8b 00                	mov    (%eax),%eax
   1cb7a:	69 c0 70 17 00 00    	imul   $0x1770,%eax,%eax
   1cb80:	a3 24 fe 03 00       	mov    %eax,0x3fe24
						  blankcount = blankinterval;
   1cb85:	a1 24 fe 03 00       	mov    0x3fe24,%eax
   1cb8a:	a3 28 fe 03 00       	mov    %eax,0x3fe28
						}
						if (c == 'b')
   1cb8f:	80 7c 24 07 62       	cmpb   $0x62,0x7(%esp)
   1cb94:	0f 85 6f 01 00 00    	jne    1cd09 <con_write+0x13c8>
						  vc_cons[currcons].vc_bold_attr = par[0];
   1cb9a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb9e:	89 d0                	mov    %edx,%eax
   1cba0:	c1 e0 03             	shl    $0x3,%eax
   1cba3:	01 d0                	add    %edx,%eax
   1cba5:	c1 e0 04             	shl    $0x4,%eax
   1cba8:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1cbad:	8b 00                	mov    (%eax),%eax
   1cbaf:	89 c1                	mov    %eax,%ecx
   1cbb1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cbb5:	89 d0                	mov    %edx,%eax
   1cbb7:	c1 e0 03             	shl    $0x3,%eax
   1cbba:	01 d0                	add    %edx,%eax
   1cbbc:	c1 e0 04             	shl    $0x4,%eax
   1cbbf:	05 64 fe 03 00       	add    $0x3fe64,%eax
   1cbc4:	89 08                	mov    %ecx,(%eax)
   1cbc6:	e9 3e 01 00 00       	jmp    1cd09 <con_write+0x13c8>
						break;
   1cbcb:	90                   	nop
				}
				break;
   1cbcc:	e9 38 01 00 00       	jmp    1cd09 <con_write+0x13c8>
			// ESfunckey:表示接收到了键盘上功能键发出的一个序列,不用显示.于是恢复到正常状态ESnormal.
			// 状态ESfunckey表示接收到了键盘上功能键发出的一个序列,不用显示.于是恢复到正常状态ESnormal.
			case ESfunckey:									// 键盘功能键码.
				state = ESnormal;
   1cbd1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cbd5:	89 d0                	mov    %edx,%eax
   1cbd7:	c1 e0 03             	shl    $0x3,%eax
   1cbda:	01 d0                	add    %edx,%eax
   1cbdc:	c1 e0 04             	shl    $0x4,%eax
   1cbdf:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1cbe4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				break;
   1cbea:	e9 1a 01 00 00       	jmp    1cd09 <con_write+0x13c8>
			// ESsetterm:表示处于设备控制字符串序列状态(DCS).此时收到字符'S',则恢复初始的显示字符属性.若收到的字符是'L'或'l',则开启或关折行显示方式.
			// 状态ESsetterm表示处于设备控制字符串序列状态(DCS).此时若收到字符'S',则恢复初始的显示字符属性.若收到的字符是'L'或'l',则开启或关闭折行显示方式.
			case ESsetterm:  								/* Setterm functions. */
				state = ESnormal;
   1cbef:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cbf3:	89 d0                	mov    %edx,%eax
   1cbf5:	c1 e0 03             	shl    $0x3,%eax
   1cbf8:	01 d0                	add    %edx,%eax
   1cbfa:	c1 e0 04             	shl    $0x4,%eax
   1cbfd:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1cc02:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				if (c == 'S') {
   1cc08:	80 7c 24 07 53       	cmpb   $0x53,0x7(%esp)
   1cc0d:	0f 85 f6 00 00 00    	jne    1cd09 <con_write+0x13c8>
					def_attr = attr;
   1cc13:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc17:	89 d0                	mov    %edx,%eax
   1cc19:	c1 e0 03             	shl    $0x3,%eax
   1cc1c:	01 d0                	add    %edx,%eax
   1cc1e:	c1 e0 04             	shl    $0x4,%eax
   1cc21:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1cc26:	0f b6 08             	movzbl (%eax),%ecx
   1cc29:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc2d:	89 d0                	mov    %edx,%eax
   1cc2f:	c1 e0 03             	shl    $0x3,%eax
   1cc32:	01 d0                	add    %edx,%eax
   1cc34:	c1 e0 04             	shl    $0x4,%eax
   1cc37:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1cc3c:	88 08                	mov    %cl,(%eax)
					video_erase_char = (video_erase_char & 0x0ff) | (def_attr << 8);
   1cc3e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc42:	89 d0                	mov    %edx,%eax
   1cc44:	c1 e0 03             	shl    $0x3,%eax
   1cc47:	01 d0                	add    %edx,%eax
   1cc49:	c1 e0 04             	shl    $0x4,%eax
   1cc4c:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1cc51:	0f b7 00             	movzwl (%eax),%eax
   1cc54:	0f b6 c8             	movzbl %al,%ecx
   1cc57:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc5b:	89 d0                	mov    %edx,%eax
   1cc5d:	c1 e0 03             	shl    $0x3,%eax
   1cc60:	01 d0                	add    %edx,%eax
   1cc62:	c1 e0 04             	shl    $0x4,%eax
   1cc65:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1cc6a:	0f b6 00             	movzbl (%eax),%eax
   1cc6d:	0f b6 c0             	movzbl %al,%eax
   1cc70:	c1 e0 08             	shl    $0x8,%eax
   1cc73:	09 c8                	or     %ecx,%eax
   1cc75:	89 c1                	mov    %eax,%ecx
   1cc77:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc7b:	89 d0                	mov    %edx,%eax
   1cc7d:	c1 e0 03             	shl    $0x3,%eax
   1cc80:	01 d0                	add    %edx,%eax
   1cc82:	c1 e0 04             	shl    $0x4,%eax
   1cc85:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1cc8a:	66 89 08             	mov    %cx,(%eax)
				} else if (c == 'L')
					; 										/*linewrap on*/
				else if (c == 'l')
					; 										/*linewrap off*/
				break;
   1cc8d:	eb 7a                	jmp    1cd09 <con_write+0x13c8>
			// ESsetgraph:表示收到设置字符转移序列'ESC ('或'ESC )'.它们分别用于指定G0和G1所用的字符集.此时若收到字符'0',则选择图形字符集作为G0和G1,
			//            若收到的字符是'B',这选择普通ASCII字符集作为G0和G1的字符集.
			// 状态ESsetgraph表示收到设置字符集转移序列'ESC ('或'ESC )'.它们分别用于指定G0和G1所用的字符集.此时若收到字符'0',则选择图形字符集作为G0和G1,若收
			// 到的字符是'B',则选择普通ASCII字符集作为G0和G1的字符集.
			case ESsetgraph:								// 'CSI ( 0'或'CSI ( B' - 选择字符集
				state = ESnormal;
   1cc8f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc93:	89 d0                	mov    %edx,%eax
   1cc95:	c1 e0 03             	shl    $0x3,%eax
   1cc98:	01 d0                	add    %edx,%eax
   1cc9a:	c1 e0 04             	shl    $0x4,%eax
   1cc9d:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1cca2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				if (c == '0')
   1cca8:	80 7c 24 07 30       	cmpb   $0x30,0x7(%esp)
   1ccad:	75 1d                	jne    1cccc <con_write+0x138b>
					translate = GRAF_TRANS;
   1ccaf:	8b 0d 40 f5 02 00    	mov    0x2f540,%ecx
   1ccb5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ccb9:	89 d0                	mov    %edx,%eax
   1ccbb:	c1 e0 03             	shl    $0x3,%eax
   1ccbe:	01 d0                	add    %edx,%eax
   1ccc0:	c1 e0 04             	shl    $0x4,%eax
   1ccc3:	05 ec fe 03 00       	add    $0x3feec,%eax
   1ccc8:	89 08                	mov    %ecx,(%eax)
   1ccca:	eb 3d                	jmp    1cd09 <con_write+0x13c8>
				else if (c == 'B')
   1cccc:	80 7c 24 07 42       	cmpb   $0x42,0x7(%esp)
   1ccd1:	75 36                	jne    1cd09 <con_write+0x13c8>
					translate = NORM_TRANS;
   1ccd3:	8b 0d 3c f5 02 00    	mov    0x2f53c,%ecx
   1ccd9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ccdd:	89 d0                	mov    %edx,%eax
   1ccdf:	c1 e0 03             	shl    $0x3,%eax
   1cce2:	01 d0                	add    %edx,%eax
   1cce4:	c1 e0 04             	shl    $0x4,%eax
   1cce7:	05 ec fe 03 00       	add    $0x3feec,%eax
   1ccec:	89 08                	mov    %ecx,(%eax)
				break;
   1ccee:	eb 19                	jmp    1cd09 <con_write+0x13c8>
			default:
				state = ESnormal;
   1ccf0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ccf4:	89 d0                	mov    %edx,%eax
   1ccf6:	c1 e0 03             	shl    $0x3,%eax
   1ccf9:	01 d0                	add    %edx,%eax
   1ccfb:	c1 e0 04             	shl    $0x4,%eax
   1ccfe:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1cd03:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (nr--) {
   1cd09:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1cd0d:	8d 50 ff             	lea    -0x1(%eax),%edx
   1cd10:	89 54 24 0c          	mov    %edx,0xc(%esp)
   1cd14:	85 c0                	test   %eax,%eax
   1cd16:	0f 85 7d ec ff ff    	jne    1b999 <con_write+0x58>
   1cd1c:	eb 01                	jmp    1cd1f <con_write+0x13de>
			break;
   1cd1e:	90                   	nop
        }
    }
	set_cursor(currcons);									// 最后根据上面设置的光标位置,设置显示控制器中光标位置.
   1cd1f:	83 ec 0c             	sub    $0xc,%esp
   1cd22:	ff 74 24 14          	pushl  0x14(%esp)
   1cd26:	e8 be e6 ff ff       	call   1b3e9 <set_cursor>
   1cd2b:	83 c4 10             	add    $0x10,%esp
}
   1cd2e:	90                   	nop
   1cd2f:	83 c4 18             	add    $0x18,%esp
   1cd32:	5b                   	pop    %ebx
   1cd33:	c3                   	ret    

0001cd34 <con_init>:
 *
 * 这个子程序初始化控制台中断,其他什么都不做.如果你想让屏幕干净的话,就使用适当的转义字符序列调用tty_write()函数.
 * 读取setup.s程序保存的信息,用以确定当前显示器类型,并且设置所有相关参数.
 */
void con_init(void)
{
   1cd34:	57                   	push   %edi
   1cd35:	56                   	push   %esi
   1cd36:	53                   	push   %ebx
   1cd37:	83 ec 20             	sub    $0x20,%esp
	register unsigned char a;
	char *display_desc = "????";
   1cd3a:	c7 44 24 1c e4 56 02 	movl   $0x256e4,0x1c(%esp)
   1cd41:	00 
	char *display_ptr;
	int currcons = 0;								// 当前虚拟控制台号.
   1cd42:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   1cd49:	00 
	long base, term;
	long video_memory;

	// 初始化屏幕的列数
	video_num_columns = ORIG_VIDEO_COLS;
   1cd4a:	b8 06 00 09 00       	mov    $0x90006,%eax
   1cd4f:	0f b7 00             	movzwl (%eax),%eax
   1cd52:	66 c1 e8 08          	shr    $0x8,%ax
   1cd56:	0f b7 c0             	movzwl %ax,%eax
   1cd59:	a3 34 fe 03 00       	mov    %eax,0x3fe34
	// 屏幕每行的字节数等于屏幕列数乘以2，因为一个显示字节需要一个控制字节
	video_size_row = video_num_columns * 2;
   1cd5e:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1cd63:	01 c0                	add    %eax,%eax
   1cd65:	a3 40 fe 03 00       	mov    %eax,0x3fe40
	// 初始化屏幕的行数
	video_num_lines = ORIG_VIDEO_LINES;
   1cd6a:	b8 0e 00 09 00       	mov    $0x9000e,%eax
   1cd6f:	0f b7 00             	movzwl (%eax),%eax
   1cd72:	0f b7 c0             	movzwl %ax,%eax
   1cd75:	0f b6 c0             	movzbl %al,%eax
   1cd78:	a3 44 fe 03 00       	mov    %eax,0x3fe44
	// 初始化显示页数
	video_page = ORIG_VIDEO_PAGE;
   1cd7d:	b8 04 00 09 00       	mov    $0x90004,%eax
   1cd82:	0f b7 00             	movzwl (%eax),%eax
   1cd85:	a2 48 fe 03 00       	mov    %al,0x3fe48
	// 设置此时第0个(currcons)显示终端的擦除字符属性及字符
	video_erase_char = 0x0720;
   1cd8a:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cd8e:	89 d0                	mov    %edx,%eax
   1cd90:	c1 e0 03             	shl    $0x3,%eax
   1cd93:	01 d0                	add    %edx,%eax
   1cd95:	c1 e0 04             	shl    $0x4,%eax
   1cd98:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1cd9d:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// 初始化黑屏时间计数
	blankcount = blankinterval;
   1cda2:	a1 24 fe 03 00       	mov    0x3fe24,%eax
   1cda7:	a3 28 fe 03 00       	mov    %eax,0x3fe28

	// 然后根据显示模式是单色还是彩色,分别设置所使用的显示内存起始位置以及显示寄存器索引端口号和显示寄存器数据端口号.如果获得的BIOS显示方式等于7,
	// 则表示是单色显示卡.
	if (ORIG_VIDEO_MODE == 7)					/* Is this a monochrome display? */
   1cdac:	b8 06 00 09 00       	mov    $0x90006,%eax
   1cdb1:	0f b7 00             	movzwl (%eax),%eax
   1cdb4:	0f b7 c0             	movzwl %ax,%eax
   1cdb7:	0f b6 c0             	movzbl %al,%eax
   1cdba:	83 f8 07             	cmp    $0x7,%eax
   1cdbd:	75 68                	jne    1ce27 <con_init+0xf3>
	{
		video_mem_base = 0xb0000;				// 设置单显映像内存起始地址.
   1cdbf:	c7 05 38 fe 03 00 00 	movl   $0xb0000,0x3fe38
   1cdc6:	00 0b 00 
		video_port_reg = 0x3b4;					// 设置单显索引寄存器端口.
   1cdc9:	66 c7 05 4a fe 03 00 	movw   $0x3b4,0x3fe4a
   1cdd0:	b4 03 
		video_port_val = 0x3b5;					// 设置单显数据寄存器端口.
   1cdd2:	66 c7 05 4c fe 03 00 	movw   $0x3b5,0x3fe4c
   1cdd9:	b5 03 
		// 0x10,则说明是EGA卡.因此初始显示类型为EGA单色.虽然EGA卡上有较多显示内存,但在单色方式下最多只能利用地址范围在0xb0000~xb8000之间的显示内存.
		// 然后置显示器描述字符串为'EGAm'.
		// 并会在系统初始化期间显示器描述符字符串将显示在屏幕的右上角.
		// 注意,这里使用了bx在调用中断int 0x10前后是否被改变的方法来判断卡的类型.若BL在中断调用后值被改变,表示显示卡支持ah=12h功能调用,是EGA或后推
		// 出来的VGA等类型显示卡.若中断调用返回值末变,表示显示卡不支持这个功能,则说明是一般单色显示卡.
		if ((ORIG_VIDEO_EGA_BX & 0xff) != 0x10)
   1cddb:	b8 0a 00 09 00       	mov    $0x9000a,%eax
   1cde0:	0f b7 00             	movzwl (%eax),%eax
   1cde3:	0f b7 c0             	movzwl %ax,%eax
   1cde6:	0f b6 c0             	movzbl %al,%eax
   1cde9:	83 f8 10             	cmp    $0x10,%eax
   1cdec:	74 1e                	je     1ce0c <con_init+0xd8>
		{
			video_type = VIDEO_TYPE_EGAM;		// 设置显示类型(EGA单色).
   1cdee:	c6 05 30 fe 03 00 20 	movb   $0x20,0x3fe30
			video_mem_term = 0xb8000;			// 设置显示内存末端地址.
   1cdf5:	c7 05 3c fe 03 00 00 	movl   $0xb8000,0x3fe3c
   1cdfc:	80 0b 00 
			display_desc = "EGAm";				// 设置显示描述字符串.
   1cdff:	c7 44 24 1c e9 56 02 	movl   $0x256e9,0x1c(%esp)
   1ce06:	00 
   1ce07:	e9 88 00 00 00       	jmp    1ce94 <con_init+0x160>
		}
		// 如果BX寄存器的值等于0x10,则说明是单色显示卡MDA,仅有8KB显示内存.
		else
		{
			video_type = VIDEO_TYPE_MDA;		// 设置显示类型(MDA单色).
   1ce0c:	c6 05 30 fe 03 00 10 	movb   $0x10,0x3fe30
			video_mem_term = 0xb2000;			// 设置显示内存末端地址.
   1ce13:	c7 05 3c fe 03 00 00 	movl   $0xb2000,0x3fe3c
   1ce1a:	20 0b 00 
			display_desc = "*MDA";				// 设置显示描述字符串.
   1ce1d:	c7 44 24 1c ee 56 02 	movl   $0x256ee,0x1c(%esp)
   1ce24:	00 
   1ce25:	eb 6d                	jmp    1ce94 <con_init+0x160>
		}
	}
	// 如果显示方式不为7,说明是彩色显示卡.此时文本方式下所用显示内存起始地址为0xb8000;显示控制索引寄存器端口地址为0x3d4;数据寄存器端口地址为0x3d5.
	else										/* If not, it is color. */
	{
		can_do_colour = 1;						// 设置彩色显示标志.
   1ce27:	c7 05 50 fe 03 00 01 	movl   $0x1,0x3fe50
   1ce2e:	00 00 00 
		video_mem_base = 0xb8000;				// 显示内存起始地址.
   1ce31:	c7 05 38 fe 03 00 00 	movl   $0xb8000,0x3fe38
   1ce38:	80 0b 00 
		video_port_reg	= 0x3d4;				// 设置彩色显示索引寄存器端口.
   1ce3b:	66 c7 05 4a fe 03 00 	movw   $0x3d4,0x3fe4a
   1ce42:	d4 03 
		video_port_val	= 0x3d5;				// 设置彩色显示数据寄存器端口.
   1ce44:	66 c7 05 4c fe 03 00 	movw   $0x3d5,0x3fe4c
   1ce4b:	d5 03 
		// 再判断显示卡类别.如果BX不等于0x10,则说明是EGA显示卡,此时共有32KB显示内存可用(0xb8000~0xc0000).否则说明是CGA显示卡,只能使用8KB显示内存(
		// 0xb8000~0xba000).
		if ((ORIG_VIDEO_EGA_BX & 0xff) != 0x10)
   1ce4d:	b8 0a 00 09 00       	mov    $0x9000a,%eax
   1ce52:	0f b7 00             	movzwl (%eax),%eax
   1ce55:	0f b7 c0             	movzwl %ax,%eax
   1ce58:	0f b6 c0             	movzbl %al,%eax
   1ce5b:	83 f8 10             	cmp    $0x10,%eax
   1ce5e:	74 1b                	je     1ce7b <con_init+0x147>
		{
			video_type = VIDEO_TYPE_EGAC;		// 设置显示类型(EGA彩色).
   1ce60:	c6 05 30 fe 03 00 21 	movb   $0x21,0x3fe30
			video_mem_term = 0xc0000;			// 设置显示内存末端地址.
   1ce67:	c7 05 3c fe 03 00 00 	movl   $0xc0000,0x3fe3c
   1ce6e:	00 0c 00 
			display_desc = "EGAc";				// 设置显示描述字符串.
   1ce71:	c7 44 24 1c f3 56 02 	movl   $0x256f3,0x1c(%esp)
   1ce78:	00 
   1ce79:	eb 19                	jmp    1ce94 <con_init+0x160>
		}
		else
		{
			video_type = VIDEO_TYPE_CGA;		// 设置显示类型(CGA).
   1ce7b:	c6 05 30 fe 03 00 11 	movb   $0x11,0x3fe30
			video_mem_term = 0xba000;			// 设置显示内存末端地址.
   1ce82:	c7 05 3c fe 03 00 00 	movl   $0xba000,0x3fe3c
   1ce89:	a0 0b 00 
			display_desc = "*CGA";				// 设置显示描述字符串.
   1ce8c:	c7 44 24 1c f8 56 02 	movl   $0x256f8,0x1c(%esp)
   1ce93:	00 
	// 现在来计算当前显示卡内存上可以开设的虚拟控制台数量.硬件允许的虚拟控制台数量等于总显示内存量video_memory除以每个虚拟控制台占用的
	// 字节数.每个虚拟控制台占用的显示内存数等于屏幕显示数video_num_lines乘上每行字符占有的字节数video_size_row.
	// 如果硬件允许开设的虚拟控制台数量大于系统既定的数量MAX_CONSOLES,就把虚拟控制台数量设置为MAX_CONSOLES.若这样计算出的虚拟控制台
	// 数量为0,则设置为1.
	// 最后用显示内存数除以判断出的虚拟控制台数即得到每个虚拟控制台占用显示内存字节数.
	video_memory = video_mem_term - video_mem_base;
   1ce94:	8b 15 3c fe 03 00    	mov    0x3fe3c,%edx
   1ce9a:	a1 38 fe 03 00       	mov    0x3fe38,%eax
   1ce9f:	29 c2                	sub    %eax,%edx
   1cea1:	89 d0                	mov    %edx,%eax
   1cea3:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 根据实际的显示内存的大小计算显示控制终端的实际数量
	NR_CONSOLES = video_memory / (video_num_lines * video_size_row);
   1cea7:	8b 44 24 08          	mov    0x8(%esp),%eax
   1ceab:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1ceb1:	8b 15 40 fe 03 00    	mov    0x3fe40,%edx
   1ceb7:	89 d6                	mov    %edx,%esi
   1ceb9:	0f af f1             	imul   %ecx,%esi
   1cebc:	ba 00 00 00 00       	mov    $0x0,%edx
   1cec1:	f7 f6                	div    %esi
   1cec3:	a3 20 fe 03 00       	mov    %eax,0x3fe20
	// 显示终端的最大数量是MAX_CONSOLES,设置在tty.h头文件中
	if (NR_CONSOLES > MAX_CONSOLES)
   1cec8:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   1cecd:	83 f8 08             	cmp    $0x8,%eax
   1ced0:	7e 0a                	jle    1cedc <con_init+0x1a8>
		NR_CONSOLES = MAX_CONSOLES;
   1ced2:	c7 05 20 fe 03 00 08 	movl   $0x8,0x3fe20
   1ced9:	00 00 00 
	// 如果计算出来的显示终端数量为0，则将显示终端数量设置为1
	if (!NR_CONSOLES)
   1cedc:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   1cee1:	85 c0                	test   %eax,%eax
   1cee3:	75 0a                	jne    1ceef <con_init+0x1bb>
		NR_CONSOLES = 1;
   1cee5:	c7 05 20 fe 03 00 01 	movl   $0x1,0x3fe20
   1ceec:	00 00 00 
	video_memory /= NR_CONSOLES;				// 每个虚拟控制台占用显示内存字节数.
   1ceef:	8b 3d 20 fe 03 00    	mov    0x3fe20,%edi
   1cef5:	8b 44 24 08          	mov    0x8(%esp),%eax
   1cef9:	99                   	cltd   
   1cefa:	f7 ff                	idiv   %edi
   1cefc:	89 44 24 08          	mov    %eax,0x8(%esp)

	/* Let the user known what kind of display driver we are using */

	// 然后我们在屏幕的右上角显示描述字符串.采用的方法是直接将字符串写到显示内存的相应位置处.首先将显示指针display_ptr指到屏幕第1行右端差
	// 4个字符处(每个字符需2个字节,因此减8),然后循环复制字符串的字符,并且每复制1个字符都空开1个属性字节.
	display_ptr = ((char *)video_mem_base) + video_size_row - 8;
   1cf00:	8b 15 40 fe 03 00    	mov    0x3fe40,%edx
   1cf06:	a1 38 fe 03 00       	mov    0x3fe38,%eax
   1cf0b:	01 d0                	add    %edx,%eax
   1cf0d:	83 e8 08             	sub    $0x8,%eax
   1cf10:	89 44 24 18          	mov    %eax,0x18(%esp)
	while (*display_desc)
   1cf14:	eb 20                	jmp    1cf36 <con_init+0x202>
	{
		*display_ptr++ = *display_desc++;
   1cf16:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1cf1a:	8d 42 01             	lea    0x1(%edx),%eax
   1cf1d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   1cf21:	8b 44 24 18          	mov    0x18(%esp),%eax
   1cf25:	8d 48 01             	lea    0x1(%eax),%ecx
   1cf28:	89 4c 24 18          	mov    %ecx,0x18(%esp)
   1cf2c:	0f b6 12             	movzbl (%edx),%edx
   1cf2f:	88 10                	mov    %dl,(%eax)
		display_ptr++;
   1cf31:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
	while (*display_desc)
   1cf36:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1cf3a:	0f b6 00             	movzbl (%eax),%eax
   1cf3d:	84 c0                	test   %al,%al
   1cf3f:	75 d5                	jne    1cf16 <con_init+0x1e2>
	/* 初始化用于滚屏的变量(主要用于EGA/VGA) */

	// 注意,此时当前虚拟控制台号curcons已经被初始化0.因此下面实际上是初始化0号虚拟控制台的结构vc_cons[0]中的所有字段值.下面首先设置0号控制台
	// 的默认滚屏开始位置video_mem_start和默认滚屏末行内存位置,实际上它们也就是0号控制台占用的部分显示内存区域.然后初始化设置0号虚拟控制台的
	// 其它属性和标志值.
	base = origin = video_mem_start = video_mem_base;						// 默认滚屏开始内存位置.
   1cf41:	8b 0d 38 fe 03 00    	mov    0x3fe38,%ecx
   1cf47:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cf4b:	89 d0                	mov    %edx,%eax
   1cf4d:	c1 e0 03             	shl    $0x3,%eax
   1cf50:	01 d0                	add    %edx,%eax
   1cf52:	c1 e0 04             	shl    $0x4,%eax
   1cf55:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1cf5a:	89 08                	mov    %ecx,(%eax)
   1cf5c:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cf60:	89 d0                	mov    %edx,%eax
   1cf62:	c1 e0 03             	shl    $0x3,%eax
   1cf65:	01 d0                	add    %edx,%eax
   1cf67:	c1 e0 04             	shl    $0x4,%eax
   1cf6a:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1cf6f:	8b 08                	mov    (%eax),%ecx
   1cf71:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cf75:	89 d0                	mov    %edx,%eax
   1cf77:	c1 e0 03             	shl    $0x3,%eax
   1cf7a:	01 d0                	add    %edx,%eax
   1cf7c:	c1 e0 04             	shl    $0x4,%eax
   1cf7f:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1cf84:	89 08                	mov    %ecx,(%eax)
   1cf86:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cf8a:	89 d0                	mov    %edx,%eax
   1cf8c:	c1 e0 03             	shl    $0x3,%eax
   1cf8f:	01 d0                	add    %edx,%eax
   1cf91:	c1 e0 04             	shl    $0x4,%eax
   1cf94:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1cf99:	8b 00                	mov    (%eax),%eax
   1cf9b:	89 44 24 10          	mov    %eax,0x10(%esp)
	term = video_mem_end = base + video_memory;								// 0号屏幕内存末端位置.
   1cf9f:	8b 54 24 10          	mov    0x10(%esp),%edx
   1cfa3:	8b 44 24 08          	mov    0x8(%esp),%eax
   1cfa7:	01 d0                	add    %edx,%eax
   1cfa9:	89 c1                	mov    %eax,%ecx
   1cfab:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cfaf:	89 d0                	mov    %edx,%eax
   1cfb1:	c1 e0 03             	shl    $0x3,%eax
   1cfb4:	01 d0                	add    %edx,%eax
   1cfb6:	c1 e0 04             	shl    $0x4,%eax
   1cfb9:	05 dc fe 03 00       	add    $0x3fedc,%eax
   1cfbe:	89 08                	mov    %ecx,(%eax)
   1cfc0:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cfc4:	89 d0                	mov    %edx,%eax
   1cfc6:	c1 e0 03             	shl    $0x3,%eax
   1cfc9:	01 d0                	add    %edx,%eax
   1cfcb:	c1 e0 04             	shl    $0x4,%eax
   1cfce:	05 dc fe 03 00       	add    $0x3fedc,%eax
   1cfd3:	8b 00                	mov    (%eax),%eax
   1cfd5:	89 44 24 0c          	mov    %eax,0xc(%esp)
	scr_end	= video_mem_start + video_num_lines * video_size_row;			// 滚屏末端位置.
   1cfd9:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cfdd:	89 d0                	mov    %edx,%eax
   1cfdf:	c1 e0 03             	shl    $0x3,%eax
   1cfe2:	01 d0                	add    %edx,%eax
   1cfe4:	c1 e0 04             	shl    $0x4,%eax
   1cfe7:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1cfec:	8b 10                	mov    (%eax),%edx
   1cfee:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1cff4:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1cff9:	0f af c1             	imul   %ecx,%eax
   1cffc:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1cfff:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d003:	89 d0                	mov    %edx,%eax
   1d005:	c1 e0 03             	shl    $0x3,%eax
   1d008:	01 d0                	add    %edx,%eax
   1d00a:	c1 e0 04             	shl    $0x4,%eax
   1d00d:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1d012:	89 08                	mov    %ecx,(%eax)
	top	= 0;																// 初始设置滚动时顶行行号.
   1d014:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d018:	89 d0                	mov    %edx,%eax
   1d01a:	c1 e0 03             	shl    $0x3,%eax
   1d01d:	01 d0                	add    %edx,%eax
   1d01f:	c1 e0 04             	shl    $0x4,%eax
   1d022:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1d027:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	bottom	= video_num_lines;												// 初始设置滚动时底行行号.
   1d02d:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1d033:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d037:	89 d0                	mov    %edx,%eax
   1d039:	c1 e0 03             	shl    $0x3,%eax
   1d03c:	01 d0                	add    %edx,%eax
   1d03e:	c1 e0 04             	shl    $0x4,%eax
   1d041:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1d046:	89 08                	mov    %ecx,(%eax)
	attr = 0x07;															// 初始设置显示字符属性(黑底白字).
   1d048:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d04c:	89 d0                	mov    %edx,%eax
   1d04e:	c1 e0 03             	shl    $0x3,%eax
   1d051:	01 d0                	add    %edx,%eax
   1d053:	c1 e0 04             	shl    $0x4,%eax
   1d056:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1d05b:	c6 00 07             	movb   $0x7,(%eax)
	def_attr = 0x07;														// 设置默认显示字符属性.
   1d05e:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d062:	89 d0                	mov    %edx,%eax
   1d064:	c1 e0 03             	shl    $0x3,%eax
   1d067:	01 d0                	add    %edx,%eax
   1d069:	c1 e0 04             	shl    $0x4,%eax
   1d06c:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1d071:	c6 00 07             	movb   $0x7,(%eax)
	restate = state = ESnormal;												// 初始化转义序列操作的前和下一状态.
   1d074:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d078:	89 d0                	mov    %edx,%eax
   1d07a:	c1 e0 03             	shl    $0x3,%eax
   1d07d:	01 d0                	add    %edx,%eax
   1d07f:	c1 e0 04             	shl    $0x4,%eax
   1d082:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1d087:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1d08d:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d091:	89 d0                	mov    %edx,%eax
   1d093:	c1 e0 03             	shl    $0x3,%eax
   1d096:	01 d0                	add    %edx,%eax
   1d098:	c1 e0 04             	shl    $0x4,%eax
   1d09b:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1d0a0:	8b 08                	mov    (%eax),%ecx
   1d0a2:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0a6:	89 d0                	mov    %edx,%eax
   1d0a8:	c1 e0 03             	shl    $0x3,%eax
   1d0ab:	01 d0                	add    %edx,%eax
   1d0ad:	c1 e0 04             	shl    $0x4,%eax
   1d0b0:	05 70 fe 03 00       	add    $0x3fe70,%eax
   1d0b5:	89 08                	mov    %ecx,(%eax)
	checkin = 0;
   1d0b7:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0bb:	89 d0                	mov    %edx,%eax
   1d0bd:	c1 e0 03             	shl    $0x3,%eax
   1d0c0:	01 d0                	add    %edx,%eax
   1d0c2:	c1 e0 04             	shl    $0x4,%eax
   1d0c5:	05 74 fe 03 00       	add    $0x3fe74,%eax
   1d0ca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	ques = 0;																// 收到问号字符标志.
   1d0d0:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0d4:	89 d0                	mov    %edx,%eax
   1d0d6:	c1 e0 03             	shl    $0x3,%eax
   1d0d9:	01 d0                	add    %edx,%eax
   1d0db:	c1 e0 04             	shl    $0x4,%eax
   1d0de:	05 68 fe 03 00       	add    $0x3fe68,%eax
   1d0e3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	iscolor = 0;															// 彩色显示标志.
   1d0e9:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0ed:	89 d0                	mov    %edx,%eax
   1d0ef:	c1 e0 03             	shl    $0x3,%eax
   1d0f2:	01 d0                	add    %edx,%eax
   1d0f4:	c1 e0 04             	shl    $0x4,%eax
   1d0f7:	05 e8 fe 03 00       	add    $0x3fee8,%eax
   1d0fc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	translate = NORM_TRANS;													// 使用的字符集(普通ASCII码表).
   1d102:	8b 0d 3c f5 02 00    	mov    0x2f53c,%ecx
   1d108:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d10c:	89 d0                	mov    %edx,%eax
   1d10e:	c1 e0 03             	shl    $0x3,%eax
   1d111:	01 d0                	add    %edx,%eax
   1d113:	c1 e0 04             	shl    $0x4,%eax
   1d116:	05 ec fe 03 00       	add    $0x3feec,%eax
   1d11b:	89 08                	mov    %ecx,(%eax)
	vc_cons[0].vc_bold_attr = -1;											// 粗体字符属性标志(-1表示不用).
   1d11d:	c7 05 64 fe 03 00 ff 	movl   $0xffffffff,0x3fe64
   1d124:	ff ff ff 

	// 在设置了0号控制台当前光标所有位置和光标对应的内存位置pos后,循环设置其余的几个虚拟控制台结构的参数值.除了各自占用的显示内存开始和结束位置不同,
	// 它们的初始值基本上都与0号控制台相同.
	gotoxy(currcons, ORIG_X, ORIG_Y);
   1d127:	b8 01 00 09 00       	mov    $0x90001,%eax
   1d12c:	0f b6 00             	movzbl (%eax),%eax
   1d12f:	0f b6 d0             	movzbl %al,%edx
   1d132:	b8 00 00 09 00       	mov    $0x90000,%eax
   1d137:	0f b6 00             	movzbl (%eax),%eax
   1d13a:	0f b6 c0             	movzbl %al,%eax
   1d13d:	52                   	push   %edx
   1d13e:	50                   	push   %eax
   1d13f:	ff 74 24 1c          	pushl  0x1c(%esp)
   1d143:	e8 fc cf ff ff       	call   1a144 <gotoxy>
   1d148:	83 c4 0c             	add    $0xc,%esp
  	for (currcons = 1; currcons < NR_CONSOLES; currcons++) {
   1d14b:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
   1d152:	00 
   1d153:	e9 e3 00 00 00       	jmp    1d23b <con_init+0x507>
		vc_cons[currcons] = vc_cons[0];         							// 复制0号结构的参数.
   1d158:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d15c:	89 d0                	mov    %edx,%eax
   1d15e:	c1 e0 03             	shl    $0x3,%eax
   1d161:	01 d0                	add    %edx,%eax
   1d163:	c1 e0 04             	shl    $0x4,%eax
   1d166:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1d16b:	89 c2                	mov    %eax,%edx
   1d16d:	bb 60 fe 03 00       	mov    $0x3fe60,%ebx
   1d172:	b8 24 00 00 00       	mov    $0x24,%eax
   1d177:	89 d7                	mov    %edx,%edi
   1d179:	89 de                	mov    %ebx,%esi
   1d17b:	89 c1                	mov    %eax,%ecx
   1d17d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		origin = video_mem_start = (base += video_memory);
   1d17f:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d183:	01 44 24 10          	add    %eax,0x10(%esp)
   1d187:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   1d18b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d18f:	89 d0                	mov    %edx,%eax
   1d191:	c1 e0 03             	shl    $0x3,%eax
   1d194:	01 d0                	add    %edx,%eax
   1d196:	c1 e0 04             	shl    $0x4,%eax
   1d199:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1d19e:	89 08                	mov    %ecx,(%eax)
   1d1a0:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1a4:	89 d0                	mov    %edx,%eax
   1d1a6:	c1 e0 03             	shl    $0x3,%eax
   1d1a9:	01 d0                	add    %edx,%eax
   1d1ab:	c1 e0 04             	shl    $0x4,%eax
   1d1ae:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1d1b3:	8b 08                	mov    (%eax),%ecx
   1d1b5:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1b9:	89 d0                	mov    %edx,%eax
   1d1bb:	c1 e0 03             	shl    $0x3,%eax
   1d1be:	01 d0                	add    %edx,%eax
   1d1c0:	c1 e0 04             	shl    $0x4,%eax
   1d1c3:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1d1c8:	89 08                	mov    %ecx,(%eax)
		scr_end = origin + video_num_lines * video_size_row;
   1d1ca:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1ce:	89 d0                	mov    %edx,%eax
   1d1d0:	c1 e0 03             	shl    $0x3,%eax
   1d1d3:	01 d0                	add    %edx,%eax
   1d1d5:	c1 e0 04             	shl    $0x4,%eax
   1d1d8:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1d1dd:	8b 10                	mov    (%eax),%edx
   1d1df:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1d1e5:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1d1ea:	0f af c1             	imul   %ecx,%eax
   1d1ed:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1d1f0:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1f4:	89 d0                	mov    %edx,%eax
   1d1f6:	c1 e0 03             	shl    $0x3,%eax
   1d1f9:	01 d0                	add    %edx,%eax
   1d1fb:	c1 e0 04             	shl    $0x4,%eax
   1d1fe:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1d203:	89 08                	mov    %ecx,(%eax)
		video_mem_end = (term += video_memory);
   1d205:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d209:	01 44 24 0c          	add    %eax,0xc(%esp)
   1d20d:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1d211:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d215:	89 d0                	mov    %edx,%eax
   1d217:	c1 e0 03             	shl    $0x3,%eax
   1d21a:	01 d0                	add    %edx,%eax
   1d21c:	c1 e0 04             	shl    $0x4,%eax
   1d21f:	05 dc fe 03 00       	add    $0x3fedc,%eax
   1d224:	89 08                	mov    %ecx,(%eax)
		gotoxy(currcons, 0, 0);                           					// 光标都初始化在屏幕左上角位置.
   1d226:	6a 00                	push   $0x0
   1d228:	6a 00                	push   $0x0
   1d22a:	ff 74 24 1c          	pushl  0x1c(%esp)
   1d22e:	e8 11 cf ff ff       	call   1a144 <gotoxy>
   1d233:	83 c4 0c             	add    $0xc,%esp
  	for (currcons = 1; currcons < NR_CONSOLES; currcons++) {
   1d236:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
   1d23b:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   1d240:	39 44 24 14          	cmp    %eax,0x14(%esp)
   1d244:	0f 8c 0e ff ff ff    	jl     1d158 <con_init+0x424>
	}
	// 最后设置当前前台控制台的屏幕原点(左上角)位置和显示控制器中光标显示位置,并设置键盘中断0x21陷阱门描述符(&keyboard_inierrupt是键盘中断处理过程
	// 地址).然后取消中断控制芯片8259A中对键盘中断的屏蔽,允许响应键盘发出的IRQ1请求信号.最后复位键盘控制器以允许键盘开始正常工作.
	update_screen();														// 更新前台原点来设置光标位置.
   1d24a:	e8 83 00 00 00       	call   1d2d2 <update_screen>
	set_trap_gate(0x21, &keyboard_interrupt);								// 参见system.h,设置键盘的系统中断门
   1d24f:	b9 c0 55 00 00       	mov    $0x55c0,%ecx
   1d254:	bb c4 55 00 00       	mov    $0x55c4,%ebx
   1d259:	ba 6b d6 01 00       	mov    $0x1d66b,%edx
   1d25e:	b8 00 00 08 00       	mov    $0x80000,%eax
   1d263:	66 89 d0             	mov    %dx,%ax
   1d266:	66 ba 00 8f          	mov    $0x8f00,%dx
   1d26a:	89 01                	mov    %eax,(%ecx)
   1d26c:	89 13                	mov    %edx,(%ebx)
	outb_p(inb_p(0x21) & 0xfd, 0x21);										// 取消对键盘中断的屏蔽,允许IRQ1.
   1d26e:	b8 21 00 00 00       	mov    $0x21,%eax
   1d273:	89 c2                	mov    %eax,%edx
   1d275:	ec                   	in     (%dx),%al
   1d276:	eb 00                	jmp    1d278 <con_init+0x544>
   1d278:	eb 00                	jmp    1d27a <con_init+0x546>
   1d27a:	88 44 24 07          	mov    %al,0x7(%esp)
   1d27e:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
   1d283:	0f b6 c0             	movzbl %al,%eax
   1d286:	25 fd 00 00 00       	and    $0xfd,%eax
   1d28b:	ba 21 00 00 00       	mov    $0x21,%edx
   1d290:	ee                   	out    %al,(%dx)
   1d291:	eb 00                	jmp    1d293 <con_init+0x55f>
   1d293:	eb 00                	jmp    1d295 <con_init+0x561>
	a = inb_p(0x61);														// 读取键盘端口0x61(8255A端口PB).
   1d295:	b8 61 00 00 00       	mov    $0x61,%eax
   1d29a:	89 c2                	mov    %eax,%edx
   1d29c:	ec                   	in     (%dx),%al
   1d29d:	eb 00                	jmp    1d29f <con_init+0x56b>
   1d29f:	eb 00                	jmp    1d2a1 <con_init+0x56d>
   1d2a1:	88 44 24 06          	mov    %al,0x6(%esp)
   1d2a5:	0f b6 44 24 06       	movzbl 0x6(%esp),%eax
   1d2aa:	89 c3                	mov    %eax,%ebx
	outb_p(a | 0x80, 0x61);													// 设置禁止键盘工作(位7置位).
   1d2ac:	89 d8                	mov    %ebx,%eax
   1d2ae:	83 c8 80             	or     $0xffffff80,%eax
   1d2b1:	0f b6 c0             	movzbl %al,%eax
   1d2b4:	ba 61 00 00 00       	mov    $0x61,%edx
   1d2b9:	ee                   	out    %al,(%dx)
   1d2ba:	eb 00                	jmp    1d2bc <con_init+0x588>
   1d2bc:	eb 00                	jmp    1d2be <con_init+0x58a>
	outb_p(a, 0x61);														// 再允许键盘工作,用以复位键盘.
   1d2be:	ba 61 00 00 00       	mov    $0x61,%edx
   1d2c3:	89 d8                	mov    %ebx,%eax
   1d2c5:	ee                   	out    %al,(%dx)
   1d2c6:	eb 00                	jmp    1d2c8 <con_init+0x594>
   1d2c8:	eb 00                	jmp    1d2ca <con_init+0x596>
}
   1d2ca:	90                   	nop
   1d2cb:	83 c4 20             	add    $0x20,%esp
   1d2ce:	5b                   	pop    %ebx
   1d2cf:	5e                   	pop    %esi
   1d2d0:	5f                   	pop    %edi
   1d2d1:	c3                   	ret    

0001d2d2 <update_screen>:
// 更新当前控制台.
// 把前台控制台转换为fg_console指定的虚拟控制台.fg_console是设置的前台虚拟控制台号.
// fg_console变量在tty.h头文件中定义，用来启动后默认使用的显示终端
void update_screen(void)
{
	set_origin(fg_console);													// 设置滚屏起始显示内存地址.
   1d2d2:	a1 80 22 03 00       	mov    0x32280,%eax
   1d2d7:	50                   	push   %eax
   1d2d8:	e8 1f cf ff ff       	call   1a1fc <set_origin>
   1d2dd:	83 c4 04             	add    $0x4,%esp
	set_cursor(fg_console);													// 设置显示控制器中光标显示内存位置.
   1d2e0:	a1 80 22 03 00       	mov    0x32280,%eax
   1d2e5:	50                   	push   %eax
   1d2e6:	e8 fe e0 ff ff       	call   1b3e9 <set_cursor>
   1d2eb:	83 c4 04             	add    $0x4,%esp
}
   1d2ee:	90                   	nop
   1d2ef:	c3                   	ret    

0001d2f0 <sysbeepstop>:
/* from bsd-net-2: */

// 停止蜂鸣
// 复位8255A PB端口的位1和位0.
void sysbeepstop(void)
{
   1d2f0:	83 ec 10             	sub    $0x10,%esp
	/* disable counter 2 */		/* 禁止定时器2 */
	outb(inb_p(0x61)&0xFC, 0x61);
   1d2f3:	b8 61 00 00 00       	mov    $0x61,%eax
   1d2f8:	89 c2                	mov    %eax,%edx
   1d2fa:	ec                   	in     (%dx),%al
   1d2fb:	eb 00                	jmp    1d2fd <sysbeepstop+0xd>
   1d2fd:	eb 00                	jmp    1d2ff <sysbeepstop+0xf>
   1d2ff:	88 44 24 0f          	mov    %al,0xf(%esp)
   1d303:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1d308:	0f b6 c0             	movzbl %al,%eax
   1d30b:	25 fc 00 00 00       	and    $0xfc,%eax
   1d310:	ba 61 00 00 00       	mov    $0x61,%edx
   1d315:	ee                   	out    %al,(%dx)
}
   1d316:	90                   	nop
   1d317:	83 c4 10             	add    $0x10,%esp
   1d31a:	c3                   	ret    

0001d31b <sysbeep>:

// 开通蜂鸣
// 8255A芯片PB端口的位1用作扬声器的开门信号;位0用作8253定时器2门信号,该定时器的输出脉冲送往扬声器,作为扬声器发声频率.因此要使扬声器
// 发声,需要两步:首先开启PB端口(0x61)位1和位0(置位),然后设置定时器2通道发送一定的定时频率即可.
static void sysbeep(void)
{
   1d31b:	83 ec 10             	sub    $0x10,%esp
	/* enable counter 2 */		/* 开启定时器2 */
	outb_p(inb_p(0x61)|3, 0x61);
   1d31e:	b8 61 00 00 00       	mov    $0x61,%eax
   1d323:	89 c2                	mov    %eax,%edx
   1d325:	ec                   	in     (%dx),%al
   1d326:	eb 00                	jmp    1d328 <sysbeep+0xd>
   1d328:	eb 00                	jmp    1d32a <sysbeep+0xf>
   1d32a:	88 44 24 0f          	mov    %al,0xf(%esp)
   1d32e:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1d333:	83 c8 03             	or     $0x3,%eax
   1d336:	0f b6 c0             	movzbl %al,%eax
   1d339:	ba 61 00 00 00       	mov    $0x61,%edx
   1d33e:	ee                   	out    %al,(%dx)
   1d33f:	eb 00                	jmp    1d341 <sysbeep+0x26>
   1d341:	eb 00                	jmp    1d343 <sysbeep+0x28>
	/* set command for counter 2, 2 byte write */	/* 送设置定时器2命令 */
	outb_p(0xB6, 0x43);		// 定时器芯片控制字寄存器端口.
   1d343:	b8 b6 00 00 00       	mov    $0xb6,%eax
   1d348:	ba 43 00 00 00       	mov    $0x43,%edx
   1d34d:	ee                   	out    %al,(%dx)
   1d34e:	eb 00                	jmp    1d350 <sysbeep+0x35>
   1d350:	eb 00                	jmp    1d352 <sysbeep+0x37>
	/* send 0x637 for 750 HZ */	/* 设置频率为720Hz,因此送定时值0x637 */
	outb_p(0x37, 0x42);		// 通过2数据端口分别送计数高低字节
   1d352:	b8 37 00 00 00       	mov    $0x37,%eax
   1d357:	ba 42 00 00 00       	mov    $0x42,%edx
   1d35c:	ee                   	out    %al,(%dx)
   1d35d:	eb 00                	jmp    1d35f <sysbeep+0x44>
   1d35f:	eb 00                	jmp    1d361 <sysbeep+0x46>
	outb(0x06, 0x42);
   1d361:	b8 06 00 00 00       	mov    $0x6,%eax
   1d366:	ba 42 00 00 00       	mov    $0x42,%edx
   1d36b:	ee                   	out    %al,(%dx)
	/* 1/8 second */		/* 蜂鸣时间为1/8s */
	beepcount = HZ / 8;
   1d36c:	c7 05 2c fe 03 00 0c 	movl   $0xc,0x3fe2c
   1d373:	00 00 00 
}
   1d376:	90                   	nop
   1d377:	83 c4 10             	add    $0x10,%esp
   1d37a:	c3                   	ret    

0001d37b <do_screendump>:

// 拷贝屏幕
// 把屏幕内容复制到参数指定的用户缓冲区arg中。
// 参数arg有两个用途：一是用于传递控制台号，二是作为用户缓冲区指针。
int do_screendump(int arg)
{
   1d37b:	83 ec 1c             	sub    $0x1c,%esp
	char *sptr, *buf = (char *)arg;
   1d37e:	8b 44 24 20          	mov    0x20(%esp),%eax
   1d382:	89 44 24 08          	mov    %eax,0x8(%esp)
	int currcons, l;

	// 函数首先验证用户提供的缓冲区容量，若不够则进行适当扩展。然后从其开始处取出控制台号currcons.
	// 在判断控制台号有效后，就把该控制台屏幕的所有内存内容复制到用户缓冲区中。
	verify_area(buf, video_num_columns * video_num_lines);
   1d386:	8b 15 34 fe 03 00    	mov    0x3fe34,%edx
   1d38c:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1d391:	0f af c2             	imul   %edx,%eax
   1d394:	83 ec 08             	sub    $0x8,%esp
   1d397:	50                   	push   %eax
   1d398:	ff 74 24 14          	pushl  0x14(%esp)
   1d39c:	e8 fa af fe ff       	call   839b <verify_area>
   1d3a1:	83 c4 10             	add    $0x10,%esp
	currcons = get_fs_byte(buf);
   1d3a4:	83 ec 0c             	sub    $0xc,%esp
   1d3a7:	ff 74 24 14          	pushl  0x14(%esp)
   1d3ab:	e8 6c cd ff ff       	call   1a11c <get_fs_byte>
   1d3b0:	83 c4 10             	add    $0x10,%esp
   1d3b3:	0f b6 c0             	movzbl %al,%eax
   1d3b6:	89 04 24             	mov    %eax,(%esp)
	if ((currcons < 1) || (currcons > NR_CONSOLES))
   1d3b9:	83 3c 24 00          	cmpl   $0x0,(%esp)
   1d3bd:	7e 0a                	jle    1d3c9 <do_screendump+0x4e>
   1d3bf:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   1d3c4:	39 04 24             	cmp    %eax,(%esp)
   1d3c7:	7e 07                	jle    1d3d0 <do_screendump+0x55>
		return -EIO;
   1d3c9:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   1d3ce:	eb 6a                	jmp    1d43a <do_screendump+0xbf>
	currcons--;
   1d3d0:	83 2c 24 01          	subl   $0x1,(%esp)
	sptr = (char *) origin;
   1d3d4:	8b 14 24             	mov    (%esp),%edx
   1d3d7:	89 d0                	mov    %edx,%eax
   1d3d9:	c1 e0 03             	shl    $0x3,%eax
   1d3dc:	01 d0                	add    %edx,%eax
   1d3de:	c1 e0 04             	shl    $0x4,%eax
   1d3e1:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1d3e6:	8b 00                	mov    (%eax),%eax
   1d3e8:	89 44 24 0c          	mov    %eax,0xc(%esp)
	for (l = video_num_lines * video_num_columns; l > 0 ; l--)
   1d3ec:	8b 15 44 fe 03 00    	mov    0x3fe44,%edx
   1d3f2:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1d3f7:	0f af c2             	imul   %edx,%eax
   1d3fa:	89 44 24 04          	mov    %eax,0x4(%esp)
   1d3fe:	eb 2e                	jmp    1d42e <do_screendump+0xb3>
		put_fs_byte(*sptr++, buf++);
   1d400:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d404:	8d 50 01             	lea    0x1(%eax),%edx
   1d407:	89 54 24 08          	mov    %edx,0x8(%esp)
   1d40b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d40f:	8d 4a 01             	lea    0x1(%edx),%ecx
   1d412:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
   1d416:	0f b6 12             	movzbl (%edx),%edx
   1d419:	0f be d2             	movsbl %dl,%edx
   1d41c:	83 ec 08             	sub    $0x8,%esp
   1d41f:	50                   	push   %eax
   1d420:	52                   	push   %edx
   1d421:	e8 04 cd ff ff       	call   1a12a <put_fs_byte>
   1d426:	83 c4 10             	add    $0x10,%esp
	for (l = video_num_lines * video_num_columns; l > 0 ; l--)
   1d429:	83 6c 24 04 01       	subl   $0x1,0x4(%esp)
   1d42e:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1d433:	7f cb                	jg     1d400 <do_screendump+0x85>
	return(0);
   1d435:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1d43a:	83 c4 1c             	add    $0x1c,%esp
   1d43d:	c3                   	ret    

0001d43e <blank_screen>:

// 黑屏处理
// 当用户在blankInterval时间间隔内没有按任何按键时就让屏幕黑屏,以保护屏幕.
void blank_screen()
{
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
   1d43e:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1d445:	3c 21                	cmp    $0x21,%al
   1d447:	74 09                	je     1d452 <blank_screen+0x14>
   1d449:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1d450:	3c 20                	cmp    $0x20,%al
		return;
	/* blank here. I can't find out how to do it, though */
}
   1d452:	c3                   	ret    

0001d453 <unblank_screen>:

// 恢复黑屏的屏幕
// 当用户按下任何按键时,就恢复处于黑屏状态的屏幕显示内容.
void unblank_screen()
{
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
   1d453:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1d45a:	3c 21                	cmp    $0x21,%al
   1d45c:	74 09                	je     1d467 <unblank_screen+0x14>
   1d45e:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1d465:	3c 20                	cmp    $0x20,%al
		return;
	/* unblank here */
}
   1d467:	c3                   	ret    

0001d468 <console_print>:
// 控制台显示函数
// 该函数仅用于内核显示函数printk()(kernel/printk.c),用于在当前前台控制台上显示内核信息.
// 处理方法是循环取出缓冲区中的字符,并根据字符的特性控制光标移动或直接显示在屏幕上.
// 参数b是null结尾的字符串缓冲区指针。
void console_print(const char * b)
{
   1d468:	53                   	push   %ebx
   1d469:	83 ec 10             	sub    $0x10,%esp
	int currcons = fg_console;
   1d46c:	a1 80 22 03 00       	mov    0x32280,%eax
   1d471:	89 44 24 0c          	mov    %eax,0xc(%esp)
	char c;

	// 循环读取缓冲区b中的字符。
	while (c = *(b++)) {
   1d475:	e9 5d 01 00 00       	jmp    1d5d7 <console_print+0x16f>
		// 如果当前字符c是换行符，则对光标执行回车换行操作
		if (c == 10) {
   1d47a:	80 7c 24 0b 0a       	cmpb   $0xa,0xb(%esp)
   1d47f:	75 1d                	jne    1d49e <console_print+0x36>
			// 光标回到当前行的第0列
			cr(currcons);
   1d481:	ff 74 24 0c          	pushl  0xc(%esp)
   1d485:	e8 fd d5 ff ff       	call   1aa87 <cr>
   1d48a:	83 c4 04             	add    $0x4,%esp
			// 将光标从当前列移动到下一行
			lf(currcons);
   1d48d:	ff 74 24 0c          	pushl  0xc(%esp)
   1d491:	e8 b7 d4 ff ff       	call   1a94d <lf>
   1d496:	83 c4 04             	add    $0x4,%esp
			continue;
   1d499:	e9 39 01 00 00       	jmp    1d5d7 <console_print+0x16f>
		}
		// 如果是回车符，就直接执行回车动作。然后去处理下一个字符。
		if (c == 13) {
   1d49e:	80 7c 24 0b 0d       	cmpb   $0xd,0xb(%esp)
   1d4a3:	75 11                	jne    1d4b6 <console_print+0x4e>
			cr(currcons);
   1d4a5:	ff 74 24 0c          	pushl  0xc(%esp)
   1d4a9:	e8 d9 d5 ff ff       	call   1aa87 <cr>
   1d4ae:	83 c4 04             	add    $0x4,%esp
			continue;
   1d4b1:	e9 21 01 00 00       	jmp    1d5d7 <console_print+0x16f>
		}
		// 在读取了一个不是回车或换行字符后，如果发现当前光标列位置x已经到达屏幕右末端，则让光标折返到下一行开始处。
		// 然后把字符放到光标所处显示内存位置处，即在屏幕上显示出来。再把光标右移一格位置，为显示下一个字符作准备。
		if (x >= video_num_columns) {
   1d4b6:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d4ba:	89 d0                	mov    %edx,%eax
   1d4bc:	c1 e0 03             	shl    $0x3,%eax
   1d4bf:	01 d0                	add    %edx,%eax
   1d4c1:	c1 e0 04             	shl    $0x4,%eax
   1d4c4:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1d4c9:	8b 10                	mov    (%eax),%edx
   1d4cb:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1d4d0:	39 c2                	cmp    %eax,%edx
   1d4d2:	72 72                	jb     1d546 <console_print+0xde>
			x -= video_num_columns;
   1d4d4:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d4d8:	89 d0                	mov    %edx,%eax
   1d4da:	c1 e0 03             	shl    $0x3,%eax
   1d4dd:	01 d0                	add    %edx,%eax
   1d4df:	c1 e0 04             	shl    $0x4,%eax
   1d4e2:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1d4e7:	8b 10                	mov    (%eax),%edx
   1d4e9:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1d4ee:	89 d1                	mov    %edx,%ecx
   1d4f0:	29 c1                	sub    %eax,%ecx
   1d4f2:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d4f6:	89 d0                	mov    %edx,%eax
   1d4f8:	c1 e0 03             	shl    $0x3,%eax
   1d4fb:	01 d0                	add    %edx,%eax
   1d4fd:	c1 e0 04             	shl    $0x4,%eax
   1d500:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1d505:	89 08                	mov    %ecx,(%eax)
			pos -= video_size_row;
   1d507:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d50b:	89 d0                	mov    %edx,%eax
   1d50d:	c1 e0 03             	shl    $0x3,%eax
   1d510:	01 d0                	add    %edx,%eax
   1d512:	c1 e0 04             	shl    $0x4,%eax
   1d515:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1d51a:	8b 10                	mov    (%eax),%edx
   1d51c:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1d521:	89 d1                	mov    %edx,%ecx
   1d523:	29 c1                	sub    %eax,%ecx
   1d525:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d529:	89 d0                	mov    %edx,%eax
   1d52b:	c1 e0 03             	shl    $0x3,%eax
   1d52e:	01 d0                	add    %edx,%eax
   1d530:	c1 e0 04             	shl    $0x4,%eax
   1d533:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1d538:	89 08                	mov    %ecx,(%eax)
			lf(currcons);
   1d53a:	ff 74 24 0c          	pushl  0xc(%esp)
   1d53e:	e8 0a d4 ff ff       	call   1a94d <lf>
   1d543:	83 c4 04             	add    $0x4,%esp
		}
		// 寄存器al中是需要显示的字符，这里把属性字节放到ah中，然后把ax内容存储到光标内存位置pos处，即在光标处显示字符。
		__asm__("movb %2, %%ah\n\t"              				// 属性字节放到ah中。
			"movw %%ax, %1\n\t"              					// ax内容放到pos处。
			::"a" (c),
			"m" (*(short *)pos),
   1d546:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d54a:	89 d0                	mov    %edx,%eax
   1d54c:	c1 e0 03             	shl    $0x3,%eax
   1d54f:	01 d0                	add    %edx,%eax
   1d551:	c1 e0 04             	shl    $0x4,%eax
   1d554:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1d559:	8b 00                	mov    (%eax),%eax
   1d55b:	89 c3                	mov    %eax,%ebx
		__asm__("movb %2, %%ah\n\t"              				// 属性字节放到ah中。
   1d55d:	0f b6 4c 24 0b       	movzbl 0xb(%esp),%ecx
   1d562:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d566:	89 d0                	mov    %edx,%eax
   1d568:	c1 e0 03             	shl    $0x3,%eax
   1d56b:	01 d0                	add    %edx,%eax
   1d56d:	c1 e0 04             	shl    $0x4,%eax
   1d570:	8d 90 62 fe 03 00    	lea    0x3fe62(%eax),%edx
   1d576:	89 c8                	mov    %ecx,%eax
   1d578:	8a 22                	mov    (%edx),%ah
   1d57a:	66 89 03             	mov    %ax,(%ebx)
			"m" (attr)
			:);
		pos += 2;
   1d57d:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d581:	89 d0                	mov    %edx,%eax
   1d583:	c1 e0 03             	shl    $0x3,%eax
   1d586:	01 d0                	add    %edx,%eax
   1d588:	c1 e0 04             	shl    $0x4,%eax
   1d58b:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1d590:	8b 00                	mov    (%eax),%eax
   1d592:	8d 48 02             	lea    0x2(%eax),%ecx
   1d595:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d599:	89 d0                	mov    %edx,%eax
   1d59b:	c1 e0 03             	shl    $0x3,%eax
   1d59e:	01 d0                	add    %edx,%eax
   1d5a0:	c1 e0 04             	shl    $0x4,%eax
   1d5a3:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1d5a8:	89 08                	mov    %ecx,(%eax)
		x++;
   1d5aa:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d5ae:	89 d0                	mov    %edx,%eax
   1d5b0:	c1 e0 03             	shl    $0x3,%eax
   1d5b3:	01 d0                	add    %edx,%eax
   1d5b5:	c1 e0 04             	shl    $0x4,%eax
   1d5b8:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1d5bd:	8b 00                	mov    (%eax),%eax
   1d5bf:	8d 48 01             	lea    0x1(%eax),%ecx
   1d5c2:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d5c6:	89 d0                	mov    %edx,%eax
   1d5c8:	c1 e0 03             	shl    $0x3,%eax
   1d5cb:	01 d0                	add    %edx,%eax
   1d5cd:	c1 e0 04             	shl    $0x4,%eax
   1d5d0:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1d5d5:	89 08                	mov    %ecx,(%eax)
	while (c = *(b++)) {
   1d5d7:	8b 44 24 18          	mov    0x18(%esp),%eax
   1d5db:	8d 50 01             	lea    0x1(%eax),%edx
   1d5de:	89 54 24 18          	mov    %edx,0x18(%esp)
   1d5e2:	0f b6 00             	movzbl (%eax),%eax
   1d5e5:	88 44 24 0b          	mov    %al,0xb(%esp)
   1d5e9:	80 7c 24 0b 00       	cmpb   $0x0,0xb(%esp)
   1d5ee:	0f 85 86 fe ff ff    	jne    1d47a <console_print+0x12>
	}
	set_cursor(currcons);           							// 最后设置的光标内存位置，设置显示控制器中光标位置。
   1d5f4:	ff 74 24 0c          	pushl  0xc(%esp)
   1d5f8:	e8 ec dd ff ff       	call   1b3e9 <set_cursor>
   1d5fd:	83 c4 04             	add    $0x4,%esp
}
   1d600:	90                   	nop
   1d601:	83 c4 10             	add    $0x10,%esp
   1d604:	5b                   	pop    %ebx
   1d605:	c3                   	ret    

0001d606 <del_col>:


void del_col(int i){
   1d606:	83 ec 10             	sub    $0x10,%esp
	int currcons = fg_console;
   1d609:	a1 80 22 03 00       	mov    0x32280,%eax
   1d60e:	89 44 24 0c          	mov    %eax,0xc(%esp)
	gotoxy(currcons, x - i, y);
   1d612:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d616:	89 d0                	mov    %edx,%eax
   1d618:	c1 e0 03             	shl    $0x3,%eax
   1d61b:	01 d0                	add    %edx,%eax
   1d61d:	c1 e0 04             	shl    $0x4,%eax
   1d620:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1d625:	8b 08                	mov    (%eax),%ecx
   1d627:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d62b:	89 d0                	mov    %edx,%eax
   1d62d:	c1 e0 03             	shl    $0x3,%eax
   1d630:	01 d0                	add    %edx,%eax
   1d632:	c1 e0 04             	shl    $0x4,%eax
   1d635:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1d63a:	8b 10                	mov    (%eax),%edx
   1d63c:	8b 44 24 14          	mov    0x14(%esp),%eax
   1d640:	29 c2                	sub    %eax,%edx
   1d642:	89 d0                	mov    %edx,%eax
   1d644:	51                   	push   %ecx
   1d645:	50                   	push   %eax
   1d646:	ff 74 24 14          	pushl  0x14(%esp)
   1d64a:	e8 f5 ca ff ff       	call   1a144 <gotoxy>
   1d64f:	83 c4 0c             	add    $0xc,%esp
	csi_P(currcons, i);
   1d652:	8b 44 24 14          	mov    0x14(%esp),%eax
   1d656:	50                   	push   %eax
   1d657:	ff 74 24 10          	pushl  0x10(%esp)
   1d65b:	e8 c9 e1 ff ff       	call   1b829 <csi_P>
   1d660:	83 c4 08             	add    $0x8,%esp
}
   1d663:	90                   	nop
   1d664:	83 c4 10             	add    $0x10,%esp
   1d667:	c3                   	ret    

0001d668 <mode>:
	...

0001d669 <leds>:
   1d669:	02                   	.byte 0x2

0001d66a <e0>:
	...

0001d66b <keyboard_interrupt>:
   1d66b:	50                   	push   %eax
   1d66c:	53                   	push   %ebx
   1d66d:	51                   	push   %ecx
   1d66e:	52                   	push   %edx
   1d66f:	1e                   	push   %ds
   1d670:	06                   	push   %es
   1d671:	b8 10 00 00 00       	mov    $0x10,%eax
   1d676:	8e d8                	mov    %eax,%ds
   1d678:	8e c0                	mov    %eax,%es
   1d67a:	a1 24 fe 03 00       	mov    0x3fe24,%eax
   1d67f:	a3 28 fe 03 00       	mov    %eax,0x3fe28
   1d684:	31 c0                	xor    %eax,%eax
   1d686:	e4 60                	in     $0x60,%al
   1d688:	3c e0                	cmp    $0xe0,%al
   1d68a:	74 3d                	je     1d6c9 <set_e0>
   1d68c:	3c e1                	cmp    $0xe1,%al
   1d68e:	74 42                	je     1d6d2 <set_e1>
   1d690:	ff 14 85 4d da 01 00 	call   *0x1da4d(,%eax,4)
   1d697:	c6 05 6a d6 01 00 00 	movb   $0x0,0x1d66a

0001d69e <e0_e1>:
   1d69e:	e4 61                	in     $0x61,%al
   1d6a0:	eb 00                	jmp    1d6a2 <e0_e1+0x4>
   1d6a2:	eb 00                	jmp    1d6a4 <e0_e1+0x6>
   1d6a4:	0c 80                	or     $0x80,%al
   1d6a6:	eb 00                	jmp    1d6a8 <e0_e1+0xa>
   1d6a8:	eb 00                	jmp    1d6aa <e0_e1+0xc>
   1d6aa:	e6 61                	out    %al,$0x61
   1d6ac:	eb 00                	jmp    1d6ae <e0_e1+0x10>
   1d6ae:	eb 00                	jmp    1d6b0 <e0_e1+0x12>
   1d6b0:	24 7f                	and    $0x7f,%al
   1d6b2:	e6 61                	out    %al,$0x61
   1d6b4:	b0 20                	mov    $0x20,%al
   1d6b6:	e6 20                	out    %al,$0x20
   1d6b8:	6a 00                	push   $0x0
   1d6ba:	e8 cb c3 ff ff       	call   19a8a <do_tty_interrupt>
   1d6bf:	83 c4 04             	add    $0x4,%esp
   1d6c2:	07                   	pop    %es
   1d6c3:	1f                   	pop    %ds
   1d6c4:	5a                   	pop    %edx
   1d6c5:	59                   	pop    %ecx
   1d6c6:	5b                   	pop    %ebx
   1d6c7:	58                   	pop    %eax
   1d6c8:	cf                   	iret   

0001d6c9 <set_e0>:
   1d6c9:	c6 05 6a d6 01 00 01 	movb   $0x1,0x1d66a
   1d6d0:	eb cc                	jmp    1d69e <e0_e1>

0001d6d2 <set_e1>:
   1d6d2:	c6 05 6a d6 01 00 02 	movb   $0x2,0x1d66a
   1d6d9:	eb c3                	jmp    1d69e <e0_e1>

0001d6db <put_queue>:
   1d6db:	51                   	push   %ecx
   1d6dc:	52                   	push   %edx
   1d6dd:	8b 15 24 f5 02 00    	mov    0x2f524,%edx
   1d6e3:	8b 4a 04             	mov    0x4(%edx),%ecx
   1d6e6:	88 44 0a 10          	mov    %al,0x10(%edx,%ecx,1)
   1d6ea:	41                   	inc    %ecx
   1d6eb:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
   1d6f1:	3b 4a 08             	cmp    0x8(%edx),%ecx
   1d6f4:	74 1b                	je     1d711 <put_queue+0x36>
   1d6f6:	0f ac d8 08          	shrd   $0x8,%ebx,%eax
   1d6fa:	74 05                	je     1d701 <put_queue+0x26>
   1d6fc:	c1 eb 08             	shr    $0x8,%ebx
   1d6ff:	eb e5                	jmp    1d6e6 <put_queue+0xb>
   1d701:	89 4a 04             	mov    %ecx,0x4(%edx)
   1d704:	8b 4a 0c             	mov    0xc(%edx),%ecx
   1d707:	85 c9                	test   %ecx,%ecx
   1d709:	74 06                	je     1d711 <put_queue+0x36>
   1d70b:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
   1d711:	5a                   	pop    %edx
   1d712:	59                   	pop    %ecx
   1d713:	c3                   	ret    

0001d714 <ctrl>:
   1d714:	b0 04                	mov    $0x4,%al
   1d716:	eb 02                	jmp    1d71a <alt+0x2>

0001d718 <alt>:
   1d718:	b0 10                	mov    $0x10,%al
   1d71a:	80 3d 6a d6 01 00 00 	cmpb   $0x0,0x1d66a
   1d721:	74 02                	je     1d725 <alt+0xd>
   1d723:	00 c0                	add    %al,%al
   1d725:	08 05 68 d6 01 00    	or     %al,0x1d668
   1d72b:	c3                   	ret    

0001d72c <unctrl>:
   1d72c:	b0 04                	mov    $0x4,%al
   1d72e:	eb 02                	jmp    1d732 <unalt+0x2>

0001d730 <unalt>:
   1d730:	b0 10                	mov    $0x10,%al
   1d732:	80 3d 6a d6 01 00 00 	cmpb   $0x0,0x1d66a
   1d739:	74 02                	je     1d73d <unalt+0xd>
   1d73b:	00 c0                	add    %al,%al
   1d73d:	f6 d0                	not    %al
   1d73f:	20 05 68 d6 01 00    	and    %al,0x1d668
   1d745:	c3                   	ret    

0001d746 <lshift>:
   1d746:	80 0d 68 d6 01 00 01 	orb    $0x1,0x1d668
   1d74d:	c3                   	ret    

0001d74e <unlshift>:
   1d74e:	80 25 68 d6 01 00 fe 	andb   $0xfe,0x1d668
   1d755:	c3                   	ret    

0001d756 <rshift>:
   1d756:	80 0d 68 d6 01 00 02 	orb    $0x2,0x1d668
   1d75d:	c3                   	ret    

0001d75e <unrshift>:
   1d75e:	80 25 68 d6 01 00 fd 	andb   $0xfd,0x1d668
   1d765:	c3                   	ret    

0001d766 <caps>:
   1d766:	f6 05 68 d6 01 00 80 	testb  $0x80,0x1d668
   1d76d:	75 43                	jne    1d7b2 <scroll+0x10>
   1d76f:	80 35 69 d6 01 00 04 	xorb   $0x4,0x1d669
   1d776:	80 35 68 d6 01 00 40 	xorb   $0x40,0x1d668
   1d77d:	80 0d 68 d6 01 00 80 	orb    $0x80,0x1d668

0001d784 <set_leds>:
   1d784:	e8 c4 06 00 00       	call   1de4d <kb_wait>
   1d789:	b0 ed                	mov    $0xed,%al
   1d78b:	e6 60                	out    %al,$0x60
   1d78d:	e8 bb 06 00 00       	call   1de4d <kb_wait>
   1d792:	a0 69 d6 01 00       	mov    0x1d669,%al
   1d797:	e6 60                	out    %al,$0x60
   1d799:	c3                   	ret    

0001d79a <uncaps>:
   1d79a:	80 25 68 d6 01 00 7f 	andb   $0x7f,0x1d668
   1d7a1:	c3                   	ret    

0001d7a2 <scroll>:
   1d7a2:	f6 05 68 d6 01 00 03 	testb  $0x3,0x1d668
   1d7a9:	74 07                	je     1d7b2 <scroll+0x10>
   1d7ab:	e8 52 f1 fe ff       	call   c902 <show_mem>
   1d7b0:	eb 05                	jmp    1d7b7 <scroll+0x15>
   1d7b2:	e8 d6 95 fe ff       	call   6d8d <show_state>
   1d7b7:	80 35 69 d6 01 00 01 	xorb   $0x1,0x1d669
   1d7be:	eb c4                	jmp    1d784 <set_leds>

0001d7c0 <num>:
   1d7c0:	80 35 69 d6 01 00 02 	xorb   $0x2,0x1d669
   1d7c7:	eb bb                	jmp    1d784 <set_leds>

0001d7c9 <cursor>:
   1d7c9:	2c 47                	sub    $0x47,%al
   1d7cb:	72 44                	jb     1d811 <cur2+0x28>
   1d7cd:	3c 0c                	cmp    $0xc,%al
   1d7cf:	77 40                	ja     1d811 <cur2+0x28>
   1d7d1:	75 16                	jne    1d7e9 <cur2>
   1d7d3:	f6 05 68 d6 01 00 0c 	testb  $0xc,0x1d668
   1d7da:	74 0d                	je     1d7e9 <cur2>
   1d7dc:	f6 05 68 d6 01 00 30 	testb  $0x30,0x1d668
   1d7e3:	0f 85 6d 06 00 00    	jne    1de56 <reboot>

0001d7e9 <cur2>:
   1d7e9:	80 3d 6a d6 01 00 01 	cmpb   $0x1,0x1d66a
   1d7f0:	74 20                	je     1d812 <cur>
   1d7f2:	f6 05 69 d6 01 00 02 	testb  $0x2,0x1d669
   1d7f9:	74 17                	je     1d812 <cur>
   1d7fb:	f6 05 68 d6 01 00 03 	testb  $0x3,0x1d668
   1d802:	75 0e                	jne    1d812 <cur>
   1d804:	31 db                	xor    %ebx,%ebx
   1d806:	8a 80 2c d8 01 00    	mov    0x1d82c(%eax),%al
   1d80c:	e9 ca fe ff ff       	jmp    1d6db <put_queue>
   1d811:	c3                   	ret    

0001d812 <cur>:
   1d812:	8a 80 39 d8 01 00    	mov    0x1d839(%eax),%al
   1d818:	3c 39                	cmp    $0x39,%al
   1d81a:	77 02                	ja     1d81e <ok_cur>
   1d81c:	b4 7e                	mov    $0x7e,%ah

0001d81e <ok_cur>:
   1d81e:	c1 e0 10             	shl    $0x10,%eax
   1d821:	66 b8 1b 5b          	mov    $0x5b1b,%ax
   1d825:	31 db                	xor    %ebx,%ebx
   1d827:	e9 af fe ff ff       	jmp    1d6db <put_queue>

0001d82c <num_table>:
   1d82c:	37                   	aaa    
   1d82d:	38 39                	cmp    %bh,(%ecx)
   1d82f:	20 34 35 36 20 31 32 	and    %dh,0x32312036(,%esi,1)
   1d836:	33 30                	xor    (%eax),%esi
   1d838:	2c                   	.byte 0x2c

0001d839 <cur_table>:
   1d839:	48                   	dec    %eax
   1d83a:	41                   	inc    %ecx
   1d83b:	35 20 44 47 43       	xor    $0x43474420,%eax
   1d840:	20 59 42             	and    %bl,0x42(%ecx)
   1d843:	36 32 33             	xor    %ss:(%ebx),%dh

0001d846 <func>:
   1d846:	2c 3b                	sub    $0x3b,%al
   1d848:	72 31                	jb     1d87b <end_func>
   1d84a:	3c 09                	cmp    $0x9,%al
   1d84c:	76 0a                	jbe    1d858 <ok_func>
   1d84e:	2c 12                	sub    $0x12,%al
   1d850:	3c 0a                	cmp    $0xa,%al
   1d852:	72 27                	jb     1d87b <end_func>
   1d854:	3c 0b                	cmp    $0xb,%al
   1d856:	77 23                	ja     1d87b <end_func>

0001d858 <ok_func>:
   1d858:	f6 05 68 d6 01 00 10 	testb  $0x10,0x1d668
   1d85f:	75 13                	jne    1d874 <alt_func>
   1d861:	83 f9 04             	cmp    $0x4,%ecx
   1d864:	7c 15                	jl     1d87b <end_func>
   1d866:	8b 04 85 7c d8 01 00 	mov    0x1d87c(,%eax,4),%eax
   1d86d:	31 db                	xor    %ebx,%ebx
   1d86f:	e9 67 fe ff ff       	jmp    1d6db <put_queue>

0001d874 <alt_func>:
   1d874:	50                   	push   %eax
   1d875:	e8 9c b1 ff ff       	call   18a16 <change_console>
   1d87a:	58                   	pop    %eax

0001d87b <end_func>:
   1d87b:	c3                   	ret    

0001d87c <func_table>:
   1d87c:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d87f:	41                   	inc    %ecx
   1d880:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d883:	42                   	inc    %edx
   1d884:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d887:	43                   	inc    %ebx
   1d888:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d88b:	44                   	inc    %esp
   1d88c:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d88f:	45                   	inc    %ebp
   1d890:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d893:	46                   	inc    %esi
   1d894:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d897:	47                   	inc    %edi
   1d898:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d89b:	48                   	dec    %eax
   1d89c:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d89f:	49                   	dec    %ecx
   1d8a0:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8a3:	4a                   	dec    %edx
   1d8a4:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8a7:	4b                   	dec    %ebx
   1d8a8:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8ab:	4c                   	dec    %esp

0001d8ac <key_map>:
   1d8ac:	00 1b                	add    %bl,(%ebx)
   1d8ae:	31 32                	xor    %esi,(%edx)
   1d8b0:	33 34 35 36 37 38 39 	xor    0x39383736(,%esi,1),%esi
   1d8b7:	30 2d 3d 7f 09 71    	xor    %ch,0x71097f3d
   1d8bd:	77 65                	ja     1d924 <shift_map+0x17>
   1d8bf:	72 74                	jb     1d935 <shift_map+0x28>
   1d8c1:	79 75                	jns    1d938 <shift_map+0x2b>
   1d8c3:	69 6f 70 5b 5d 0d 00 	imul   $0xd5d5b,0x70(%edi),%ebp
   1d8ca:	61                   	popa   
   1d8cb:	73 64                	jae    1d931 <shift_map+0x24>
   1d8cd:	66 67 68 6a 6b       	addr16 pushw $0x6b6a
   1d8d2:	6c                   	insb   (%dx),%es:(%edi)
   1d8d3:	3b 27                	cmp    (%edi),%esp
   1d8d5:	60                   	pusha  
   1d8d6:	00 5c 7a 78          	add    %bl,0x78(%edx,%edi,2)
   1d8da:	63 76 62             	arpl   %si,0x62(%esi)
   1d8dd:	6e                   	outsb  %ds:(%esi),(%dx)
   1d8de:	6d                   	insl   (%dx),%es:(%edi)
   1d8df:	2c 2e                	sub    $0x2e,%al
   1d8e1:	2f                   	das    
   1d8e2:	00 2a                	add    %ch,(%edx)
   1d8e4:	00 20                	add    %ah,(%eax)
	...
   1d8f6:	2d 00 00 00 2b       	sub    $0x2b000000,%eax
   1d8fb:	00 00                	add    %al,(%eax)
   1d8fd:	00 00                	add    %al,(%eax)
   1d8ff:	00 00                	add    %al,(%eax)
   1d901:	00 3c 00             	add    %bh,(%eax,%eax,1)
	...

0001d90d <shift_map>:
   1d90d:	00 1b                	add    %bl,(%ebx)
   1d90f:	21 40 23             	and    %eax,0x23(%eax)
   1d912:	24 25                	and    $0x25,%al
   1d914:	5e                   	pop    %esi
   1d915:	26 2a 28             	sub    %es:(%eax),%ch
   1d918:	29 5f 2b             	sub    %ebx,0x2b(%edi)
   1d91b:	7f 09                	jg     1d926 <shift_map+0x19>
   1d91d:	51                   	push   %ecx
   1d91e:	57                   	push   %edi
   1d91f:	45                   	inc    %ebp
   1d920:	52                   	push   %edx
   1d921:	54                   	push   %esp
   1d922:	59                   	pop    %ecx
   1d923:	55                   	push   %ebp
   1d924:	49                   	dec    %ecx
   1d925:	4f                   	dec    %edi
   1d926:	50                   	push   %eax
   1d927:	7b 7d                	jnp    1d9a6 <alt_map+0x38>
   1d929:	0d 00 41 53 44       	or     $0x44534100,%eax
   1d92e:	46                   	inc    %esi
   1d92f:	47                   	inc    %edi
   1d930:	48                   	dec    %eax
   1d931:	4a                   	dec    %edx
   1d932:	4b                   	dec    %ebx
   1d933:	4c                   	dec    %esp
   1d934:	3a 22                	cmp    (%edx),%ah
   1d936:	7e 00                	jle    1d938 <shift_map+0x2b>
   1d938:	7c 5a                	jl     1d994 <alt_map+0x26>
   1d93a:	58                   	pop    %eax
   1d93b:	43                   	inc    %ebx
   1d93c:	56                   	push   %esi
   1d93d:	42                   	inc    %edx
   1d93e:	4e                   	dec    %esi
   1d93f:	4d                   	dec    %ebp
   1d940:	3c 3e                	cmp    $0x3e,%al
   1d942:	3f                   	aas    
   1d943:	00 2a                	add    %ch,(%edx)
   1d945:	00 20                	add    %ah,(%eax)
	...
   1d957:	2d 00 00 00 2b       	sub    $0x2b000000,%eax
   1d95c:	00 00                	add    %al,(%eax)
   1d95e:	00 00                	add    %al,(%eax)
   1d960:	00 00                	add    %al,(%eax)
   1d962:	00 3e                	add    %bh,(%esi)
	...

0001d96e <alt_map>:
   1d96e:	00 00                	add    %al,(%eax)
   1d970:	00 40 00             	add    %al,0x0(%eax)
   1d973:	24 00                	and    $0x0,%al
   1d975:	00 7b 5b             	add    %bh,0x5b(%ebx)
   1d978:	5d                   	pop    %ebp
   1d979:	7d 5c                	jge    1d9d7 <do_self+0x8>
	...
   1d987:	00 00                	add    %al,(%eax)
   1d989:	7e 0d                	jle    1d998 <alt_map+0x2a>
	...
   1d9c3:	00 7c 00 00          	add    %bh,0x0(%eax,%eax,1)
	...

0001d9cf <do_self>:
   1d9cf:	8d 1d 6e d9 01 00    	lea    0x1d96e,%ebx
   1d9d5:	f6 05 68 d6 01 00 20 	testb  $0x20,0x1d668
   1d9dc:	75 15                	jne    1d9f3 <do_self+0x24>
   1d9de:	8d 1d 0d d9 01 00    	lea    0x1d90d,%ebx
   1d9e4:	f6 05 68 d6 01 00 03 	testb  $0x3,0x1d668
   1d9eb:	75 06                	jne    1d9f3 <do_self+0x24>
   1d9ed:	8d 1d ac d8 01 00    	lea    0x1d8ac,%ebx
   1d9f3:	8a 04 03             	mov    (%ebx,%eax,1),%al
   1d9f6:	08 c0                	or     %al,%al
   1d9f8:	74 3d                	je     1da37 <none>
   1d9fa:	f6 05 68 d6 01 00 4c 	testb  $0x4c,0x1d668
   1da01:	74 0a                	je     1da0d <do_self+0x3e>
   1da03:	3c 61                	cmp    $0x61,%al
   1da05:	72 06                	jb     1da0d <do_self+0x3e>
   1da07:	3c 7d                	cmp    $0x7d,%al
   1da09:	77 02                	ja     1da0d <do_self+0x3e>
   1da0b:	2c 20                	sub    $0x20,%al
   1da0d:	f6 05 68 d6 01 00 0c 	testb  $0xc,0x1d668
   1da14:	74 0a                	je     1da20 <do_self+0x51>
   1da16:	3c 40                	cmp    $0x40,%al
   1da18:	72 06                	jb     1da20 <do_self+0x51>
   1da1a:	3c 60                	cmp    $0x60,%al
   1da1c:	73 02                	jae    1da20 <do_self+0x51>
   1da1e:	2c 40                	sub    $0x40,%al
   1da20:	f6 05 68 d6 01 00 10 	testb  $0x10,0x1d668
   1da27:	74 02                	je     1da2b <do_self+0x5c>
   1da29:	0c 80                	or     $0x80,%al
   1da2b:	25 ff 00 00 00       	and    $0xff,%eax
   1da30:	31 db                	xor    %ebx,%ebx
   1da32:	e8 a4 fc ff ff       	call   1d6db <put_queue>

0001da37 <none>:
   1da37:	c3                   	ret    

0001da38 <minus>:
   1da38:	80 3d 6a d6 01 00 01 	cmpb   $0x1,0x1d66a
   1da3f:	75 8e                	jne    1d9cf <do_self>
   1da41:	b8 2f 00 00 00       	mov    $0x2f,%eax
   1da46:	31 db                	xor    %ebx,%ebx
   1da48:	e9 8e fc ff ff       	jmp    1d6db <put_queue>

0001da4d <key_table>:
   1da4d:	37                   	aaa    
   1da4e:	da 01                	fiaddl (%ecx)
   1da50:	00 cf                	add    %cl,%bh
   1da52:	d9 01                	flds   (%ecx)
   1da54:	00 cf                	add    %cl,%bh
   1da56:	d9 01                	flds   (%ecx)
   1da58:	00 cf                	add    %cl,%bh
   1da5a:	d9 01                	flds   (%ecx)
   1da5c:	00 cf                	add    %cl,%bh
   1da5e:	d9 01                	flds   (%ecx)
   1da60:	00 cf                	add    %cl,%bh
   1da62:	d9 01                	flds   (%ecx)
   1da64:	00 cf                	add    %cl,%bh
   1da66:	d9 01                	flds   (%ecx)
   1da68:	00 cf                	add    %cl,%bh
   1da6a:	d9 01                	flds   (%ecx)
   1da6c:	00 cf                	add    %cl,%bh
   1da6e:	d9 01                	flds   (%ecx)
   1da70:	00 cf                	add    %cl,%bh
   1da72:	d9 01                	flds   (%ecx)
   1da74:	00 cf                	add    %cl,%bh
   1da76:	d9 01                	flds   (%ecx)
   1da78:	00 cf                	add    %cl,%bh
   1da7a:	d9 01                	flds   (%ecx)
   1da7c:	00 cf                	add    %cl,%bh
   1da7e:	d9 01                	flds   (%ecx)
   1da80:	00 cf                	add    %cl,%bh
   1da82:	d9 01                	flds   (%ecx)
   1da84:	00 cf                	add    %cl,%bh
   1da86:	d9 01                	flds   (%ecx)
   1da88:	00 cf                	add    %cl,%bh
   1da8a:	d9 01                	flds   (%ecx)
   1da8c:	00 cf                	add    %cl,%bh
   1da8e:	d9 01                	flds   (%ecx)
   1da90:	00 cf                	add    %cl,%bh
   1da92:	d9 01                	flds   (%ecx)
   1da94:	00 cf                	add    %cl,%bh
   1da96:	d9 01                	flds   (%ecx)
   1da98:	00 cf                	add    %cl,%bh
   1da9a:	d9 01                	flds   (%ecx)
   1da9c:	00 cf                	add    %cl,%bh
   1da9e:	d9 01                	flds   (%ecx)
   1daa0:	00 cf                	add    %cl,%bh
   1daa2:	d9 01                	flds   (%ecx)
   1daa4:	00 cf                	add    %cl,%bh
   1daa6:	d9 01                	flds   (%ecx)
   1daa8:	00 cf                	add    %cl,%bh
   1daaa:	d9 01                	flds   (%ecx)
   1daac:	00 cf                	add    %cl,%bh
   1daae:	d9 01                	flds   (%ecx)
   1dab0:	00 cf                	add    %cl,%bh
   1dab2:	d9 01                	flds   (%ecx)
   1dab4:	00 cf                	add    %cl,%bh
   1dab6:	d9 01                	flds   (%ecx)
   1dab8:	00 cf                	add    %cl,%bh
   1daba:	d9 01                	flds   (%ecx)
   1dabc:	00 cf                	add    %cl,%bh
   1dabe:	d9 01                	flds   (%ecx)
   1dac0:	00 14 d7             	add    %dl,(%edi,%edx,8)
   1dac3:	01 00                	add    %eax,(%eax)
   1dac5:	cf                   	iret   
   1dac6:	d9 01                	flds   (%ecx)
   1dac8:	00 cf                	add    %cl,%bh
   1daca:	d9 01                	flds   (%ecx)
   1dacc:	00 cf                	add    %cl,%bh
   1dace:	d9 01                	flds   (%ecx)
   1dad0:	00 cf                	add    %cl,%bh
   1dad2:	d9 01                	flds   (%ecx)
   1dad4:	00 cf                	add    %cl,%bh
   1dad6:	d9 01                	flds   (%ecx)
   1dad8:	00 cf                	add    %cl,%bh
   1dada:	d9 01                	flds   (%ecx)
   1dadc:	00 cf                	add    %cl,%bh
   1dade:	d9 01                	flds   (%ecx)
   1dae0:	00 cf                	add    %cl,%bh
   1dae2:	d9 01                	flds   (%ecx)
   1dae4:	00 cf                	add    %cl,%bh
   1dae6:	d9 01                	flds   (%ecx)
   1dae8:	00 cf                	add    %cl,%bh
   1daea:	d9 01                	flds   (%ecx)
   1daec:	00 cf                	add    %cl,%bh
   1daee:	d9 01                	flds   (%ecx)
   1daf0:	00 cf                	add    %cl,%bh
   1daf2:	d9 01                	flds   (%ecx)
   1daf4:	00 46 d7             	add    %al,-0x29(%esi)
   1daf7:	01 00                	add    %eax,(%eax)
   1daf9:	cf                   	iret   
   1dafa:	d9 01                	flds   (%ecx)
   1dafc:	00 cf                	add    %cl,%bh
   1dafe:	d9 01                	flds   (%ecx)
   1db00:	00 cf                	add    %cl,%bh
   1db02:	d9 01                	flds   (%ecx)
   1db04:	00 cf                	add    %cl,%bh
   1db06:	d9 01                	flds   (%ecx)
   1db08:	00 cf                	add    %cl,%bh
   1db0a:	d9 01                	flds   (%ecx)
   1db0c:	00 cf                	add    %cl,%bh
   1db0e:	d9 01                	flds   (%ecx)
   1db10:	00 cf                	add    %cl,%bh
   1db12:	d9 01                	flds   (%ecx)
   1db14:	00 cf                	add    %cl,%bh
   1db16:	d9 01                	flds   (%ecx)
   1db18:	00 cf                	add    %cl,%bh
   1db1a:	d9 01                	flds   (%ecx)
   1db1c:	00 cf                	add    %cl,%bh
   1db1e:	d9 01                	flds   (%ecx)
   1db20:	00 38                	add    %bh,(%eax)
   1db22:	da 01                	fiaddl (%ecx)
   1db24:	00 56 d7             	add    %dl,-0x29(%esi)
   1db27:	01 00                	add    %eax,(%eax)
   1db29:	cf                   	iret   
   1db2a:	d9 01                	flds   (%ecx)
   1db2c:	00 18                	add    %bl,(%eax)
   1db2e:	d7                   	xlat   %ds:(%ebx)
   1db2f:	01 00                	add    %eax,(%eax)
   1db31:	cf                   	iret   
   1db32:	d9 01                	flds   (%ecx)
   1db34:	00 66 d7             	add    %ah,-0x29(%esi)
   1db37:	01 00                	add    %eax,(%eax)
   1db39:	46                   	inc    %esi
   1db3a:	d8 01                	fadds  (%ecx)
   1db3c:	00 46 d8             	add    %al,-0x28(%esi)
   1db3f:	01 00                	add    %eax,(%eax)
   1db41:	46                   	inc    %esi
   1db42:	d8 01                	fadds  (%ecx)
   1db44:	00 46 d8             	add    %al,-0x28(%esi)
   1db47:	01 00                	add    %eax,(%eax)
   1db49:	46                   	inc    %esi
   1db4a:	d8 01                	fadds  (%ecx)
   1db4c:	00 46 d8             	add    %al,-0x28(%esi)
   1db4f:	01 00                	add    %eax,(%eax)
   1db51:	46                   	inc    %esi
   1db52:	d8 01                	fadds  (%ecx)
   1db54:	00 46 d8             	add    %al,-0x28(%esi)
   1db57:	01 00                	add    %eax,(%eax)
   1db59:	46                   	inc    %esi
   1db5a:	d8 01                	fadds  (%ecx)
   1db5c:	00 46 d8             	add    %al,-0x28(%esi)
   1db5f:	01 00                	add    %eax,(%eax)
   1db61:	c0 d7 01             	rcl    $0x1,%bh
   1db64:	00 a2 d7 01 00 c9    	add    %ah,-0x36fffe29(%edx)
   1db6a:	d7                   	xlat   %ds:(%ebx)
   1db6b:	01 00                	add    %eax,(%eax)
   1db6d:	c9                   	leave  
   1db6e:	d7                   	xlat   %ds:(%ebx)
   1db6f:	01 00                	add    %eax,(%eax)
   1db71:	c9                   	leave  
   1db72:	d7                   	xlat   %ds:(%ebx)
   1db73:	01 00                	add    %eax,(%eax)
   1db75:	cf                   	iret   
   1db76:	d9 01                	flds   (%ecx)
   1db78:	00 c9                	add    %cl,%cl
   1db7a:	d7                   	xlat   %ds:(%ebx)
   1db7b:	01 00                	add    %eax,(%eax)
   1db7d:	c9                   	leave  
   1db7e:	d7                   	xlat   %ds:(%ebx)
   1db7f:	01 00                	add    %eax,(%eax)
   1db81:	c9                   	leave  
   1db82:	d7                   	xlat   %ds:(%ebx)
   1db83:	01 00                	add    %eax,(%eax)
   1db85:	cf                   	iret   
   1db86:	d9 01                	flds   (%ecx)
   1db88:	00 c9                	add    %cl,%cl
   1db8a:	d7                   	xlat   %ds:(%ebx)
   1db8b:	01 00                	add    %eax,(%eax)
   1db8d:	c9                   	leave  
   1db8e:	d7                   	xlat   %ds:(%ebx)
   1db8f:	01 00                	add    %eax,(%eax)
   1db91:	c9                   	leave  
   1db92:	d7                   	xlat   %ds:(%ebx)
   1db93:	01 00                	add    %eax,(%eax)
   1db95:	c9                   	leave  
   1db96:	d7                   	xlat   %ds:(%ebx)
   1db97:	01 00                	add    %eax,(%eax)
   1db99:	c9                   	leave  
   1db9a:	d7                   	xlat   %ds:(%ebx)
   1db9b:	01 00                	add    %eax,(%eax)
   1db9d:	37                   	aaa    
   1db9e:	da 01                	fiaddl (%ecx)
   1dba0:	00 37                	add    %dh,(%edi)
   1dba2:	da 01                	fiaddl (%ecx)
   1dba4:	00 cf                	add    %cl,%bh
   1dba6:	d9 01                	flds   (%ecx)
   1dba8:	00 46 d8             	add    %al,-0x28(%esi)
   1dbab:	01 00                	add    %eax,(%eax)
   1dbad:	46                   	inc    %esi
   1dbae:	d8 01                	fadds  (%ecx)
   1dbb0:	00 37                	add    %dh,(%edi)
   1dbb2:	da 01                	fiaddl (%ecx)
   1dbb4:	00 37                	add    %dh,(%edi)
   1dbb6:	da 01                	fiaddl (%ecx)
   1dbb8:	00 37                	add    %dh,(%edi)
   1dbba:	da 01                	fiaddl (%ecx)
   1dbbc:	00 37                	add    %dh,(%edi)
   1dbbe:	da 01                	fiaddl (%ecx)
   1dbc0:	00 37                	add    %dh,(%edi)
   1dbc2:	da 01                	fiaddl (%ecx)
   1dbc4:	00 37                	add    %dh,(%edi)
   1dbc6:	da 01                	fiaddl (%ecx)
   1dbc8:	00 37                	add    %dh,(%edi)
   1dbca:	da 01                	fiaddl (%ecx)
   1dbcc:	00 37                	add    %dh,(%edi)
   1dbce:	da 01                	fiaddl (%ecx)
   1dbd0:	00 37                	add    %dh,(%edi)
   1dbd2:	da 01                	fiaddl (%ecx)
   1dbd4:	00 37                	add    %dh,(%edi)
   1dbd6:	da 01                	fiaddl (%ecx)
   1dbd8:	00 37                	add    %dh,(%edi)
   1dbda:	da 01                	fiaddl (%ecx)
   1dbdc:	00 37                	add    %dh,(%edi)
   1dbde:	da 01                	fiaddl (%ecx)
   1dbe0:	00 37                	add    %dh,(%edi)
   1dbe2:	da 01                	fiaddl (%ecx)
   1dbe4:	00 37                	add    %dh,(%edi)
   1dbe6:	da 01                	fiaddl (%ecx)
   1dbe8:	00 37                	add    %dh,(%edi)
   1dbea:	da 01                	fiaddl (%ecx)
   1dbec:	00 37                	add    %dh,(%edi)
   1dbee:	da 01                	fiaddl (%ecx)
   1dbf0:	00 37                	add    %dh,(%edi)
   1dbf2:	da 01                	fiaddl (%ecx)
   1dbf4:	00 37                	add    %dh,(%edi)
   1dbf6:	da 01                	fiaddl (%ecx)
   1dbf8:	00 37                	add    %dh,(%edi)
   1dbfa:	da 01                	fiaddl (%ecx)
   1dbfc:	00 37                	add    %dh,(%edi)
   1dbfe:	da 01                	fiaddl (%ecx)
   1dc00:	00 37                	add    %dh,(%edi)
   1dc02:	da 01                	fiaddl (%ecx)
   1dc04:	00 37                	add    %dh,(%edi)
   1dc06:	da 01                	fiaddl (%ecx)
   1dc08:	00 37                	add    %dh,(%edi)
   1dc0a:	da 01                	fiaddl (%ecx)
   1dc0c:	00 37                	add    %dh,(%edi)
   1dc0e:	da 01                	fiaddl (%ecx)
   1dc10:	00 37                	add    %dh,(%edi)
   1dc12:	da 01                	fiaddl (%ecx)
   1dc14:	00 37                	add    %dh,(%edi)
   1dc16:	da 01                	fiaddl (%ecx)
   1dc18:	00 37                	add    %dh,(%edi)
   1dc1a:	da 01                	fiaddl (%ecx)
   1dc1c:	00 37                	add    %dh,(%edi)
   1dc1e:	da 01                	fiaddl (%ecx)
   1dc20:	00 37                	add    %dh,(%edi)
   1dc22:	da 01                	fiaddl (%ecx)
   1dc24:	00 37                	add    %dh,(%edi)
   1dc26:	da 01                	fiaddl (%ecx)
   1dc28:	00 37                	add    %dh,(%edi)
   1dc2a:	da 01                	fiaddl (%ecx)
   1dc2c:	00 37                	add    %dh,(%edi)
   1dc2e:	da 01                	fiaddl (%ecx)
   1dc30:	00 37                	add    %dh,(%edi)
   1dc32:	da 01                	fiaddl (%ecx)
   1dc34:	00 37                	add    %dh,(%edi)
   1dc36:	da 01                	fiaddl (%ecx)
   1dc38:	00 37                	add    %dh,(%edi)
   1dc3a:	da 01                	fiaddl (%ecx)
   1dc3c:	00 37                	add    %dh,(%edi)
   1dc3e:	da 01                	fiaddl (%ecx)
   1dc40:	00 37                	add    %dh,(%edi)
   1dc42:	da 01                	fiaddl (%ecx)
   1dc44:	00 37                	add    %dh,(%edi)
   1dc46:	da 01                	fiaddl (%ecx)
   1dc48:	00 37                	add    %dh,(%edi)
   1dc4a:	da 01                	fiaddl (%ecx)
   1dc4c:	00 37                	add    %dh,(%edi)
   1dc4e:	da 01                	fiaddl (%ecx)
   1dc50:	00 37                	add    %dh,(%edi)
   1dc52:	da 01                	fiaddl (%ecx)
   1dc54:	00 37                	add    %dh,(%edi)
   1dc56:	da 01                	fiaddl (%ecx)
   1dc58:	00 37                	add    %dh,(%edi)
   1dc5a:	da 01                	fiaddl (%ecx)
   1dc5c:	00 37                	add    %dh,(%edi)
   1dc5e:	da 01                	fiaddl (%ecx)
   1dc60:	00 37                	add    %dh,(%edi)
   1dc62:	da 01                	fiaddl (%ecx)
   1dc64:	00 37                	add    %dh,(%edi)
   1dc66:	da 01                	fiaddl (%ecx)
   1dc68:	00 37                	add    %dh,(%edi)
   1dc6a:	da 01                	fiaddl (%ecx)
   1dc6c:	00 37                	add    %dh,(%edi)
   1dc6e:	da 01                	fiaddl (%ecx)
   1dc70:	00 37                	add    %dh,(%edi)
   1dc72:	da 01                	fiaddl (%ecx)
   1dc74:	00 37                	add    %dh,(%edi)
   1dc76:	da 01                	fiaddl (%ecx)
   1dc78:	00 37                	add    %dh,(%edi)
   1dc7a:	da 01                	fiaddl (%ecx)
   1dc7c:	00 37                	add    %dh,(%edi)
   1dc7e:	da 01                	fiaddl (%ecx)
   1dc80:	00 37                	add    %dh,(%edi)
   1dc82:	da 01                	fiaddl (%ecx)
   1dc84:	00 37                	add    %dh,(%edi)
   1dc86:	da 01                	fiaddl (%ecx)
   1dc88:	00 37                	add    %dh,(%edi)
   1dc8a:	da 01                	fiaddl (%ecx)
   1dc8c:	00 37                	add    %dh,(%edi)
   1dc8e:	da 01                	fiaddl (%ecx)
   1dc90:	00 37                	add    %dh,(%edi)
   1dc92:	da 01                	fiaddl (%ecx)
   1dc94:	00 37                	add    %dh,(%edi)
   1dc96:	da 01                	fiaddl (%ecx)
   1dc98:	00 37                	add    %dh,(%edi)
   1dc9a:	da 01                	fiaddl (%ecx)
   1dc9c:	00 37                	add    %dh,(%edi)
   1dc9e:	da 01                	fiaddl (%ecx)
   1dca0:	00 37                	add    %dh,(%edi)
   1dca2:	da 01                	fiaddl (%ecx)
   1dca4:	00 37                	add    %dh,(%edi)
   1dca6:	da 01                	fiaddl (%ecx)
   1dca8:	00 37                	add    %dh,(%edi)
   1dcaa:	da 01                	fiaddl (%ecx)
   1dcac:	00 37                	add    %dh,(%edi)
   1dcae:	da 01                	fiaddl (%ecx)
   1dcb0:	00 37                	add    %dh,(%edi)
   1dcb2:	da 01                	fiaddl (%ecx)
   1dcb4:	00 37                	add    %dh,(%edi)
   1dcb6:	da 01                	fiaddl (%ecx)
   1dcb8:	00 37                	add    %dh,(%edi)
   1dcba:	da 01                	fiaddl (%ecx)
   1dcbc:	00 37                	add    %dh,(%edi)
   1dcbe:	da 01                	fiaddl (%ecx)
   1dcc0:	00 2c d7             	add    %ch,(%edi,%edx,8)
   1dcc3:	01 00                	add    %eax,(%eax)
   1dcc5:	37                   	aaa    
   1dcc6:	da 01                	fiaddl (%ecx)
   1dcc8:	00 37                	add    %dh,(%edi)
   1dcca:	da 01                	fiaddl (%ecx)
   1dccc:	00 37                	add    %dh,(%edi)
   1dcce:	da 01                	fiaddl (%ecx)
   1dcd0:	00 37                	add    %dh,(%edi)
   1dcd2:	da 01                	fiaddl (%ecx)
   1dcd4:	00 37                	add    %dh,(%edi)
   1dcd6:	da 01                	fiaddl (%ecx)
   1dcd8:	00 37                	add    %dh,(%edi)
   1dcda:	da 01                	fiaddl (%ecx)
   1dcdc:	00 37                	add    %dh,(%edi)
   1dcde:	da 01                	fiaddl (%ecx)
   1dce0:	00 37                	add    %dh,(%edi)
   1dce2:	da 01                	fiaddl (%ecx)
   1dce4:	00 37                	add    %dh,(%edi)
   1dce6:	da 01                	fiaddl (%ecx)
   1dce8:	00 37                	add    %dh,(%edi)
   1dcea:	da 01                	fiaddl (%ecx)
   1dcec:	00 37                	add    %dh,(%edi)
   1dcee:	da 01                	fiaddl (%ecx)
   1dcf0:	00 37                	add    %dh,(%edi)
   1dcf2:	da 01                	fiaddl (%ecx)
   1dcf4:	00 4e d7             	add    %cl,-0x29(%esi)
   1dcf7:	01 00                	add    %eax,(%eax)
   1dcf9:	37                   	aaa    
   1dcfa:	da 01                	fiaddl (%ecx)
   1dcfc:	00 37                	add    %dh,(%edi)
   1dcfe:	da 01                	fiaddl (%ecx)
   1dd00:	00 37                	add    %dh,(%edi)
   1dd02:	da 01                	fiaddl (%ecx)
   1dd04:	00 37                	add    %dh,(%edi)
   1dd06:	da 01                	fiaddl (%ecx)
   1dd08:	00 37                	add    %dh,(%edi)
   1dd0a:	da 01                	fiaddl (%ecx)
   1dd0c:	00 37                	add    %dh,(%edi)
   1dd0e:	da 01                	fiaddl (%ecx)
   1dd10:	00 37                	add    %dh,(%edi)
   1dd12:	da 01                	fiaddl (%ecx)
   1dd14:	00 37                	add    %dh,(%edi)
   1dd16:	da 01                	fiaddl (%ecx)
   1dd18:	00 37                	add    %dh,(%edi)
   1dd1a:	da 01                	fiaddl (%ecx)
   1dd1c:	00 37                	add    %dh,(%edi)
   1dd1e:	da 01                	fiaddl (%ecx)
   1dd20:	00 37                	add    %dh,(%edi)
   1dd22:	da 01                	fiaddl (%ecx)
   1dd24:	00 5e d7             	add    %bl,-0x29(%esi)
   1dd27:	01 00                	add    %eax,(%eax)
   1dd29:	37                   	aaa    
   1dd2a:	da 01                	fiaddl (%ecx)
   1dd2c:	00 30                	add    %dh,(%eax)
   1dd2e:	d7                   	xlat   %ds:(%ebx)
   1dd2f:	01 00                	add    %eax,(%eax)
   1dd31:	37                   	aaa    
   1dd32:	da 01                	fiaddl (%ecx)
   1dd34:	00 9a d7 01 00 37    	add    %bl,0x370001d7(%edx)
   1dd3a:	da 01                	fiaddl (%ecx)
   1dd3c:	00 37                	add    %dh,(%edi)
   1dd3e:	da 01                	fiaddl (%ecx)
   1dd40:	00 37                	add    %dh,(%edi)
   1dd42:	da 01                	fiaddl (%ecx)
   1dd44:	00 37                	add    %dh,(%edi)
   1dd46:	da 01                	fiaddl (%ecx)
   1dd48:	00 37                	add    %dh,(%edi)
   1dd4a:	da 01                	fiaddl (%ecx)
   1dd4c:	00 37                	add    %dh,(%edi)
   1dd4e:	da 01                	fiaddl (%ecx)
   1dd50:	00 37                	add    %dh,(%edi)
   1dd52:	da 01                	fiaddl (%ecx)
   1dd54:	00 37                	add    %dh,(%edi)
   1dd56:	da 01                	fiaddl (%ecx)
   1dd58:	00 37                	add    %dh,(%edi)
   1dd5a:	da 01                	fiaddl (%ecx)
   1dd5c:	00 37                	add    %dh,(%edi)
   1dd5e:	da 01                	fiaddl (%ecx)
   1dd60:	00 37                	add    %dh,(%edi)
   1dd62:	da 01                	fiaddl (%ecx)
   1dd64:	00 37                	add    %dh,(%edi)
   1dd66:	da 01                	fiaddl (%ecx)
   1dd68:	00 37                	add    %dh,(%edi)
   1dd6a:	da 01                	fiaddl (%ecx)
   1dd6c:	00 37                	add    %dh,(%edi)
   1dd6e:	da 01                	fiaddl (%ecx)
   1dd70:	00 37                	add    %dh,(%edi)
   1dd72:	da 01                	fiaddl (%ecx)
   1dd74:	00 37                	add    %dh,(%edi)
   1dd76:	da 01                	fiaddl (%ecx)
   1dd78:	00 37                	add    %dh,(%edi)
   1dd7a:	da 01                	fiaddl (%ecx)
   1dd7c:	00 37                	add    %dh,(%edi)
   1dd7e:	da 01                	fiaddl (%ecx)
   1dd80:	00 37                	add    %dh,(%edi)
   1dd82:	da 01                	fiaddl (%ecx)
   1dd84:	00 37                	add    %dh,(%edi)
   1dd86:	da 01                	fiaddl (%ecx)
   1dd88:	00 37                	add    %dh,(%edi)
   1dd8a:	da 01                	fiaddl (%ecx)
   1dd8c:	00 37                	add    %dh,(%edi)
   1dd8e:	da 01                	fiaddl (%ecx)
   1dd90:	00 37                	add    %dh,(%edi)
   1dd92:	da 01                	fiaddl (%ecx)
   1dd94:	00 37                	add    %dh,(%edi)
   1dd96:	da 01                	fiaddl (%ecx)
   1dd98:	00 37                	add    %dh,(%edi)
   1dd9a:	da 01                	fiaddl (%ecx)
   1dd9c:	00 37                	add    %dh,(%edi)
   1dd9e:	da 01                	fiaddl (%ecx)
   1dda0:	00 37                	add    %dh,(%edi)
   1dda2:	da 01                	fiaddl (%ecx)
   1dda4:	00 37                	add    %dh,(%edi)
   1dda6:	da 01                	fiaddl (%ecx)
   1dda8:	00 37                	add    %dh,(%edi)
   1ddaa:	da 01                	fiaddl (%ecx)
   1ddac:	00 37                	add    %dh,(%edi)
   1ddae:	da 01                	fiaddl (%ecx)
   1ddb0:	00 37                	add    %dh,(%edi)
   1ddb2:	da 01                	fiaddl (%ecx)
   1ddb4:	00 37                	add    %dh,(%edi)
   1ddb6:	da 01                	fiaddl (%ecx)
   1ddb8:	00 37                	add    %dh,(%edi)
   1ddba:	da 01                	fiaddl (%ecx)
   1ddbc:	00 37                	add    %dh,(%edi)
   1ddbe:	da 01                	fiaddl (%ecx)
   1ddc0:	00 37                	add    %dh,(%edi)
   1ddc2:	da 01                	fiaddl (%ecx)
   1ddc4:	00 37                	add    %dh,(%edi)
   1ddc6:	da 01                	fiaddl (%ecx)
   1ddc8:	00 37                	add    %dh,(%edi)
   1ddca:	da 01                	fiaddl (%ecx)
   1ddcc:	00 37                	add    %dh,(%edi)
   1ddce:	da 01                	fiaddl (%ecx)
   1ddd0:	00 37                	add    %dh,(%edi)
   1ddd2:	da 01                	fiaddl (%ecx)
   1ddd4:	00 37                	add    %dh,(%edi)
   1ddd6:	da 01                	fiaddl (%ecx)
   1ddd8:	00 37                	add    %dh,(%edi)
   1ddda:	da 01                	fiaddl (%ecx)
   1dddc:	00 37                	add    %dh,(%edi)
   1ddde:	da 01                	fiaddl (%ecx)
   1dde0:	00 37                	add    %dh,(%edi)
   1dde2:	da 01                	fiaddl (%ecx)
   1dde4:	00 37                	add    %dh,(%edi)
   1dde6:	da 01                	fiaddl (%ecx)
   1dde8:	00 37                	add    %dh,(%edi)
   1ddea:	da 01                	fiaddl (%ecx)
   1ddec:	00 37                	add    %dh,(%edi)
   1ddee:	da 01                	fiaddl (%ecx)
   1ddf0:	00 37                	add    %dh,(%edi)
   1ddf2:	da 01                	fiaddl (%ecx)
   1ddf4:	00 37                	add    %dh,(%edi)
   1ddf6:	da 01                	fiaddl (%ecx)
   1ddf8:	00 37                	add    %dh,(%edi)
   1ddfa:	da 01                	fiaddl (%ecx)
   1ddfc:	00 37                	add    %dh,(%edi)
   1ddfe:	da 01                	fiaddl (%ecx)
   1de00:	00 37                	add    %dh,(%edi)
   1de02:	da 01                	fiaddl (%ecx)
   1de04:	00 37                	add    %dh,(%edi)
   1de06:	da 01                	fiaddl (%ecx)
   1de08:	00 37                	add    %dh,(%edi)
   1de0a:	da 01                	fiaddl (%ecx)
   1de0c:	00 37                	add    %dh,(%edi)
   1de0e:	da 01                	fiaddl (%ecx)
   1de10:	00 37                	add    %dh,(%edi)
   1de12:	da 01                	fiaddl (%ecx)
   1de14:	00 37                	add    %dh,(%edi)
   1de16:	da 01                	fiaddl (%ecx)
   1de18:	00 37                	add    %dh,(%edi)
   1de1a:	da 01                	fiaddl (%ecx)
   1de1c:	00 37                	add    %dh,(%edi)
   1de1e:	da 01                	fiaddl (%ecx)
   1de20:	00 37                	add    %dh,(%edi)
   1de22:	da 01                	fiaddl (%ecx)
   1de24:	00 37                	add    %dh,(%edi)
   1de26:	da 01                	fiaddl (%ecx)
   1de28:	00 37                	add    %dh,(%edi)
   1de2a:	da 01                	fiaddl (%ecx)
   1de2c:	00 37                	add    %dh,(%edi)
   1de2e:	da 01                	fiaddl (%ecx)
   1de30:	00 37                	add    %dh,(%edi)
   1de32:	da 01                	fiaddl (%ecx)
   1de34:	00 37                	add    %dh,(%edi)
   1de36:	da 01                	fiaddl (%ecx)
   1de38:	00 37                	add    %dh,(%edi)
   1de3a:	da 01                	fiaddl (%ecx)
   1de3c:	00 37                	add    %dh,(%edi)
   1de3e:	da 01                	fiaddl (%ecx)
   1de40:	00 37                	add    %dh,(%edi)
   1de42:	da 01                	fiaddl (%ecx)
   1de44:	00 37                	add    %dh,(%edi)
   1de46:	da 01                	fiaddl (%ecx)
   1de48:	00 37                	add    %dh,(%edi)
   1de4a:	da 01                	fiaddl (%ecx)
	...

0001de4d <kb_wait>:
   1de4d:	50                   	push   %eax
   1de4e:	e4 64                	in     $0x64,%al
   1de50:	a8 02                	test   $0x2,%al
   1de52:	75 fa                	jne    1de4e <kb_wait+0x1>
   1de54:	58                   	pop    %eax
   1de55:	c3                   	ret    

0001de56 <reboot>:
   1de56:	e8 f2 ff ff ff       	call   1de4d <kb_wait>
   1de5b:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
   1de62:	34 12 
   1de64:	b0 fc                	mov    $0xfc,%al
   1de66:	e6 64                	out    %al,$0x64

0001de68 <die>:
   1de68:	eb fe                	jmp    1de68 <die>

0001de6a <init>:
// 初始化串行端口。
// 设置指定串行端口的传输波特率（2400bps）并允许除了写保持寄存器空以外所有中断源。另外，在输出2字节的波特率因子时，须
// 首先设置线路控制寄存器的DLAB位（位7）。
// 参数：port是串行端口基地址，串口1 - 0x3F8；串口2 - 0x2F8。
static void init(int port)
{
   1de6a:	83 ec 10             	sub    $0x10,%esp
	outb_p(0x80, port + 3);										/* set DLAB of line control reg */
   1de6d:	8b 44 24 14          	mov    0x14(%esp),%eax
   1de71:	8d 50 03             	lea    0x3(%eax),%edx
   1de74:	b8 80 00 00 00       	mov    $0x80,%eax
   1de79:	ee                   	out    %al,(%dx)
   1de7a:	eb 00                	jmp    1de7c <init+0x12>
   1de7c:	eb 00                	jmp    1de7e <init+0x14>
	outb_p(0x30, port);											/* LS of divisor (48 -> 2400 bps */
   1de7e:	b8 30 00 00 00       	mov    $0x30,%eax
   1de83:	8b 54 24 14          	mov    0x14(%esp),%edx
   1de87:	ee                   	out    %al,(%dx)
   1de88:	eb 00                	jmp    1de8a <init+0x20>
   1de8a:	eb 00                	jmp    1de8c <init+0x22>
	outb_p(0x00, port + 1);										/* MS of divisor */
   1de8c:	8b 44 24 14          	mov    0x14(%esp),%eax
   1de90:	8d 50 01             	lea    0x1(%eax),%edx
   1de93:	b8 00 00 00 00       	mov    $0x0,%eax
   1de98:	ee                   	out    %al,(%dx)
   1de99:	eb 00                	jmp    1de9b <init+0x31>
   1de9b:	eb 00                	jmp    1de9d <init+0x33>
	outb_p(0x03, port + 3);										/* reset DLAB */
   1de9d:	8b 44 24 14          	mov    0x14(%esp),%eax
   1dea1:	8d 50 03             	lea    0x3(%eax),%edx
   1dea4:	b8 03 00 00 00       	mov    $0x3,%eax
   1dea9:	ee                   	out    %al,(%dx)
   1deaa:	eb 00                	jmp    1deac <init+0x42>
   1deac:	eb 00                	jmp    1deae <init+0x44>
	outb_p(0x0b, port + 4);										/* set DTR,RTS, OUT_2 */
   1deae:	8b 44 24 14          	mov    0x14(%esp),%eax
   1deb2:	8d 50 04             	lea    0x4(%eax),%edx
   1deb5:	b8 0b 00 00 00       	mov    $0xb,%eax
   1deba:	ee                   	out    %al,(%dx)
   1debb:	eb 00                	jmp    1debd <init+0x53>
   1debd:	eb 00                	jmp    1debf <init+0x55>
	outb_p(0x0d, port + 1);										/* enable all intrs but writes */
   1debf:	8b 44 24 14          	mov    0x14(%esp),%eax
   1dec3:	8d 50 01             	lea    0x1(%eax),%edx
   1dec6:	b8 0d 00 00 00       	mov    $0xd,%eax
   1decb:	ee                   	out    %al,(%dx)
   1decc:	eb 00                	jmp    1dece <init+0x64>
   1dece:	eb 00                	jmp    1ded0 <init+0x66>
	(void)inb(port);											/* read data port to reset things (?) */
   1ded0:	8b 44 24 14          	mov    0x14(%esp),%eax
   1ded4:	89 c2                	mov    %eax,%edx
   1ded6:	ec                   	in     (%dx),%al
   1ded7:	88 44 24 0f          	mov    %al,0xf(%esp)
}
   1dedb:	90                   	nop
   1dedc:	83 c4 10             	add    $0x10,%esp
   1dedf:	c3                   	ret    

0001dee0 <rs_init>:

// 初始化串行中断程序和串行接口。
// 中断描述符表IDT中的门描述符设置宏set_intr_gate()在include/asm/system.h中实现。
void rs_init(void)
{
   1dee0:	53                   	push   %ebx
   1dee1:	83 ec 10             	sub    $0x10,%esp
	// 下面两句用于设置两个串行口的中断门描述符。rs1_interrupt是口串1的中断处理过程指针。
	// 串口1使用的中断是int 0x24，串口2的是int 0x23。
	set_intr_gate(0x24, rs1_interrupt);      					// 设置串行口1的中断向量（IRQ4信号）。
   1dee4:	b9 d8 55 00 00       	mov    $0x55d8,%ecx
   1dee9:	bb dc 55 00 00       	mov    $0x55dc,%ebx
   1deee:	ba bc df 01 00       	mov    $0x1dfbc,%edx
   1def3:	b8 00 00 08 00       	mov    $0x80000,%eax
   1def8:	66 89 d0             	mov    %dx,%ax
   1defb:	66 ba 00 8e          	mov    $0x8e00,%dx
   1deff:	89 01                	mov    %eax,(%ecx)
   1df01:	89 13                	mov    %edx,(%ebx)
	set_intr_gate(0x23, rs2_interrupt);      					// 设置串行口2的中断向量（IRQ3信号）。
   1df03:	b9 d0 55 00 00       	mov    $0x55d0,%ecx
   1df08:	bb d4 55 00 00       	mov    $0x55d4,%ebx
   1df0d:	ba c4 df 01 00       	mov    $0x1dfc4,%edx
   1df12:	b8 00 00 08 00       	mov    $0x80000,%eax
   1df17:	66 89 d0             	mov    %dx,%ax
   1df1a:	66 ba 00 8e          	mov    $0x8e00,%dx
   1df1e:	89 01                	mov    %eax,(%ecx)
   1df20:	89 13                	mov    %edx,(%ebx)
	init(tty_table[64].read_q->data);       					// 初始化串行口1（.data是端口基地址）。
   1df22:	a1 54 38 04 00       	mov    0x43854,%eax
   1df27:	8b 00                	mov    (%eax),%eax
   1df29:	50                   	push   %eax
   1df2a:	e8 3b ff ff ff       	call   1de6a <init>
   1df2f:	83 c4 04             	add    $0x4,%esp
	init(tty_table[65].read_q->data);       					// 初始化串行口2.
   1df32:	a1 94 38 04 00       	mov    0x43894,%eax
   1df37:	8b 00                	mov    (%eax),%eax
   1df39:	50                   	push   %eax
   1df3a:	e8 2b ff ff ff       	call   1de6a <init>
   1df3f:	83 c4 04             	add    $0x4,%esp
	outb(inb_p(0x21) & 0xE7, 0x21);            					// 允许主8259A响应IRQ3、IRQ4中断请求。
   1df42:	b8 21 00 00 00       	mov    $0x21,%eax
   1df47:	89 c2                	mov    %eax,%edx
   1df49:	ec                   	in     (%dx),%al
   1df4a:	eb 00                	jmp    1df4c <rs_init+0x6c>
   1df4c:	eb 00                	jmp    1df4e <rs_init+0x6e>
   1df4e:	88 44 24 0f          	mov    %al,0xf(%esp)
   1df52:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1df57:	0f b6 c0             	movzbl %al,%eax
   1df5a:	25 e7 00 00 00       	and    $0xe7,%eax
   1df5f:	ba 21 00 00 00       	mov    $0x21,%edx
   1df64:	ee                   	out    %al,(%dx)
}
   1df65:	90                   	nop
   1df66:	83 c4 10             	add    $0x10,%esp
   1df69:	5b                   	pop    %ebx
   1df6a:	c3                   	ret    

0001df6b <rs_write>:
// 串行数据发送输出。
// 该函数实际上只是开启发送保持寄存器已空中断标志。此后当发送保持寄存器空时，UART就会产生中断请求。而在该串行中断
// 处理过程中，程序会取出写队列尾指针处的字符，并输出到发送保持寄存器中。一旦UART把该字符发送出去，发送保持寄存器
// 中断允许标志复位掉，从而再次禁止发送保持寄存器空引发中断请求。此次“循环”发送操作也随之结束。
void rs_write(struct tty_struct * tty)
{
   1df6b:	83 ec 10             	sub    $0x10,%esp
	// 如果写队列不空，则首先从0x3f9（或0x2f9）读取中断允许寄存器内容，添上发送保持寄存器中断允许标志（位1）后，再写
	// 回该寄存器。这样，当发送保持寄存器空时UART就能够因期望获得欲发送的字符而引发中断。write_q.data中是串行端口基
	// 地址。
	cli();
   1df6e:	fa                   	cli    
	if (!EMPTY(tty->write_q))
   1df6f:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df73:	8b 40 38             	mov    0x38(%eax),%eax
   1df76:	8b 50 04             	mov    0x4(%eax),%edx
   1df79:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df7d:	8b 40 38             	mov    0x38(%eax),%eax
   1df80:	8b 40 08             	mov    0x8(%eax),%eax
   1df83:	39 c2                	cmp    %eax,%edx
   1df85:	74 2f                	je     1dfb6 <rs_write+0x4b>
		outb(inb_p(tty->write_q->data + 1) | 0x02, tty->write_q->data + 1);
   1df87:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df8b:	8b 40 38             	mov    0x38(%eax),%eax
   1df8e:	8b 00                	mov    (%eax),%eax
   1df90:	83 c0 01             	add    $0x1,%eax
   1df93:	89 c2                	mov    %eax,%edx
   1df95:	ec                   	in     (%dx),%al
   1df96:	eb 00                	jmp    1df98 <rs_write+0x2d>
   1df98:	eb 00                	jmp    1df9a <rs_write+0x2f>
   1df9a:	88 44 24 0f          	mov    %al,0xf(%esp)
   1df9e:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1dfa3:	83 c8 02             	or     $0x2,%eax
   1dfa6:	0f b6 c0             	movzbl %al,%eax
   1dfa9:	8b 54 24 14          	mov    0x14(%esp),%edx
   1dfad:	8b 52 38             	mov    0x38(%edx),%edx
   1dfb0:	8b 12                	mov    (%edx),%edx
   1dfb2:	83 c2 01             	add    $0x1,%edx
   1dfb5:	ee                   	out    %al,(%dx)
	sti();
   1dfb6:	fb                   	sti    
}
   1dfb7:	90                   	nop
   1dfb8:	83 c4 10             	add    $0x10,%esp
   1dfbb:	c3                   	ret    

0001dfbc <rs1_interrupt>:
   1dfbc:	68 2c f5 02 00       	push   $0x2f52c
   1dfc1:	eb 06                	jmp    1dfc9 <rs_int>
   1dfc3:	90                   	nop

0001dfc4 <rs2_interrupt>:
   1dfc4:	68 34 f5 02 00       	push   $0x2f534

0001dfc9 <rs_int>:
   1dfc9:	52                   	push   %edx
   1dfca:	51                   	push   %ecx
   1dfcb:	53                   	push   %ebx
   1dfcc:	50                   	push   %eax
   1dfcd:	06                   	push   %es
   1dfce:	1e                   	push   %ds
   1dfcf:	6a 10                	push   $0x10
   1dfd1:	1f                   	pop    %ds
   1dfd2:	6a 10                	push   $0x10
   1dfd4:	07                   	pop    %es
   1dfd5:	8b 54 24 18          	mov    0x18(%esp),%edx
   1dfd9:	8b 12                	mov    (%edx),%edx
   1dfdb:	8b 12                	mov    (%edx),%edx
   1dfdd:	83 c2 02             	add    $0x2,%edx

0001dfe0 <rep_int>:
   1dfe0:	31 c0                	xor    %eax,%eax
   1dfe2:	ec                   	in     (%dx),%al
   1dfe3:	a8 01                	test   $0x1,%al
   1dfe5:	75 16                	jne    1dffd <end>
   1dfe7:	3c 06                	cmp    $0x6,%al
   1dfe9:	77 12                	ja     1dffd <end>
   1dfeb:	8b 4c 24 18          	mov    0x18(%esp),%ecx
   1dfef:	52                   	push   %edx
   1dff0:	83 ea 02             	sub    $0x2,%edx
   1dff3:	ff 14 45 0b e0 01 00 	call   *0x1e00b(,%eax,2)
   1dffa:	5a                   	pop    %edx
   1dffb:	eb e3                	jmp    1dfe0 <rep_int>

0001dffd <end>:
   1dffd:	b0 20                	mov    $0x20,%al
   1dfff:	e6 20                	out    %al,$0x20
   1e001:	1f                   	pop    %ds
   1e002:	07                   	pop    %es
   1e003:	58                   	pop    %eax
   1e004:	5b                   	pop    %ebx
   1e005:	59                   	pop    %ecx
   1e006:	5a                   	pop    %edx
   1e007:	83 c4 04             	add    $0x4,%esp
   1e00a:	cf                   	iret   

0001e00b <jmp_table>:
   1e00b:	1c e0                	sbb    $0xe0,%al
   1e00d:	01 00                	add    %eax,(%eax)
   1e00f:	60                   	pusha  
   1e010:	e0 01                	loopne 1e013 <jmp_table+0x8>
   1e012:	00 2c e0             	add    %ch,(%eax,%eiz,8)
   1e015:	01 00                	add    %eax,(%eax)
   1e017:	24 e0                	and    $0xe0,%al
   1e019:	01 00                	add    %eax,(%eax)
   1e01b:	90                   	nop

0001e01c <modem_status>:
   1e01c:	83 c2 06             	add    $0x6,%edx
   1e01f:	ec                   	in     (%dx),%al
   1e020:	c3                   	ret    
   1e021:	8d 76 00             	lea    0x0(%esi),%esi

0001e024 <line_status>:
   1e024:	83 c2 05             	add    $0x5,%edx
   1e027:	ec                   	in     (%dx),%al
   1e028:	c3                   	ret    
   1e029:	8d 76 00             	lea    0x0(%esi),%esi

0001e02c <read_char>:
   1e02c:	ec                   	in     (%dx),%al
   1e02d:	89 ca                	mov    %ecx,%edx
   1e02f:	81 ea 24 f5 02 00    	sub    $0x2f524,%edx
   1e035:	c1 ea 03             	shr    $0x3,%edx
   1e038:	8b 09                	mov    (%ecx),%ecx
   1e03a:	8b 59 04             	mov    0x4(%ecx),%ebx
   1e03d:	88 44 19 10          	mov    %al,0x10(%ecx,%ebx,1)
   1e041:	43                   	inc    %ebx
   1e042:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   1e048:	3b 59 08             	cmp    0x8(%ecx),%ebx
   1e04b:	74 03                	je     1e050 <read_char+0x24>
   1e04d:	89 59 04             	mov    %ebx,0x4(%ecx)
   1e050:	83 c2 3f             	add    $0x3f,%edx
   1e053:	52                   	push   %edx
   1e054:	e8 31 ba ff ff       	call   19a8a <do_tty_interrupt>
   1e059:	83 c4 04             	add    $0x4,%esp
   1e05c:	c3                   	ret    
   1e05d:	8d 76 00             	lea    0x0(%esi),%esi

0001e060 <write_char>:
   1e060:	8b 49 04             	mov    0x4(%ecx),%ecx
   1e063:	8b 59 04             	mov    0x4(%ecx),%ebx
   1e066:	2b 59 08             	sub    0x8(%ecx),%ebx
   1e069:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   1e06f:	74 2f                	je     1e0a0 <write_buffer_empty>
   1e071:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
   1e077:	77 0d                	ja     1e086 <write_char+0x26>
   1e079:	8b 59 0c             	mov    0xc(%ecx),%ebx
   1e07c:	85 db                	test   %ebx,%ebx
   1e07e:	74 06                	je     1e086 <write_char+0x26>
   1e080:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   1e086:	8b 59 08             	mov    0x8(%ecx),%ebx
   1e089:	8a 44 19 10          	mov    0x10(%ecx,%ebx,1),%al
   1e08d:	ee                   	out    %al,(%dx)
   1e08e:	43                   	inc    %ebx
   1e08f:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   1e095:	89 59 08             	mov    %ebx,0x8(%ecx)
   1e098:	3b 59 04             	cmp    0x4(%ecx),%ebx
   1e09b:	74 03                	je     1e0a0 <write_buffer_empty>
   1e09d:	c3                   	ret    
   1e09e:	66 90                	xchg   %ax,%ax

0001e0a0 <write_buffer_empty>:
   1e0a0:	8b 59 0c             	mov    0xc(%ecx),%ebx
   1e0a3:	85 db                	test   %ebx,%ebx
   1e0a5:	74 06                	je     1e0ad <write_buffer_empty+0xd>
   1e0a7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   1e0ad:	42                   	inc    %edx
   1e0ae:	ec                   	in     (%dx),%al
   1e0af:	eb 00                	jmp    1e0b1 <write_buffer_empty+0x11>
   1e0b1:	eb 00                	jmp    1e0b3 <write_buffer_empty+0x13>
   1e0b3:	24 0d                	and    $0xd,%al
   1e0b5:	ee                   	out    %al,(%dx)
   1e0b6:	c3                   	ret    

0001e0b7 <get_fs_byte>:
{
   1e0b7:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1e0b8:	8b 44 24 08          	mov    0x8(%esp),%eax
   1e0bc:	64 8a 00             	mov    %fs:(%eax),%al
   1e0bf:	89 c3                	mov    %eax,%ebx
	return _v;
   1e0c1:	89 d8                	mov    %ebx,%eax
}
   1e0c3:	5b                   	pop    %ebx
   1e0c4:	c3                   	ret    

0001e0c5 <get_fs_long>:
{
   1e0c5:	83 ec 10             	sub    $0x10,%esp
	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   1e0c8:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e0cc:	64 8b 00             	mov    %fs:(%eax),%eax
   1e0cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   1e0d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   1e0d7:	83 c4 10             	add    $0x10,%esp
   1e0da:	c3                   	ret    

0001e0db <put_fs_byte>:
{
   1e0db:	83 ec 04             	sub    $0x4,%esp
   1e0de:	8b 44 24 08          	mov    0x8(%esp),%eax
   1e0e2:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   1e0e5:	0f b6 04 24          	movzbl (%esp),%eax
   1e0e9:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e0ed:	64 88 02             	mov    %al,%fs:(%edx)
}
   1e0f0:	90                   	nop
   1e0f1:	83 c4 04             	add    $0x4,%esp
   1e0f4:	c3                   	ret    

0001e0f5 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   1e0f5:	8b 44 24 04          	mov    0x4(%esp),%eax
   1e0f9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1e0fd:	64 89 02             	mov    %eax,%fs:(%edx)
}
   1e100:	90                   	nop
   1e101:	c3                   	ret    

0001e102 <change_speed>:
// 修改传输波特率。
// 参数：tty - 终端对应的tty数据结构。
// 在除数锁存标志DLAB置位情况下，通过端口0x3f8和0x3f9向UART分别写入波特率因子低字节和高字节。写完后再复位DLAB
// 位。对于串口2,这两个端口分别是0x2f8和0x2f9。
static void change_speed(struct tty_struct * tty)
{
   1e102:	83 ec 10             	sub    $0x10,%esp

	// 函数首先检查参数tty指定的终端是否是串行终端，若不是则退出。对于串口终端的tty结构，其读缓冲队列data字段存放着
	// 串行端口基址（0x3f8或0x2f8），而一般控制台终端的tty结构的read_q.data字段值为0。然后从终端termios结构的控制
	// 模式标志集中取得已设置的波特率索引号，并据此从波特率因子数组quotient[]中取得对应的波特率因子值quot。CBAUD是
	// 控制模式标志集中波特率位屏蔽码。
	if (!(port = tty->read_q->data))
   1e105:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e109:	8b 40 34             	mov    0x34(%eax),%eax
   1e10c:	8b 00                	mov    (%eax),%eax
   1e10e:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
   1e113:	66 83 7c 24 0e 00    	cmpw   $0x0,0xe(%esp)
   1e119:	74 66                	je     1e181 <change_speed+0x7f>
		return;
	quot = quotient[tty->termios.c_cflag & CBAUD];
   1e11b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e11f:	8b 40 08             	mov    0x8(%eax),%eax
   1e122:	83 e0 0f             	and    $0xf,%eax
   1e125:	0f b7 84 00 60 f5 02 	movzwl 0x2f560(%eax,%eax,1),%eax
   1e12c:	00 
   1e12d:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	// 接着把波特率因子quot写入串行端口对应UART芯片的波特率因子锁存器中。在写之前我们先要把线路控制寄存器LCR的除数锁存
	// 访问位DLAB（位7）置1。然后把16位的波特率因子低、高字节分别写入端口0x3f8、0x3f9（分别对应波特率因子低、高字节
	// 锁存器）。最后再复位LCR的DLAB标志位。
	cli();
   1e132:	fa                   	cli    
	outb_p(0x80, port + 3);									/* set DLAB */          // 首先设置除数锁定标志DLAB。
   1e133:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
   1e138:	8d 50 03             	lea    0x3(%eax),%edx
   1e13b:	b8 80 00 00 00       	mov    $0x80,%eax
   1e140:	ee                   	out    %al,(%dx)
   1e141:	eb 00                	jmp    1e143 <change_speed+0x41>
   1e143:	eb 00                	jmp    1e145 <change_speed+0x43>
	outb_p(quot & 0xff, port);								/* LS of divisor */     // 输出因子低字节。
   1e145:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   1e14a:	0f b6 c0             	movzbl %al,%eax
   1e14d:	0f b7 54 24 0e       	movzwl 0xe(%esp),%edx
   1e152:	ee                   	out    %al,(%dx)
   1e153:	eb 00                	jmp    1e155 <change_speed+0x53>
   1e155:	eb 00                	jmp    1e157 <change_speed+0x55>
	outb_p(quot >> 8, port + 1);							/* MS of divisor */     // 输出因子高字节。
   1e157:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   1e15c:	66 c1 e8 08          	shr    $0x8,%ax
   1e160:	0f b7 c0             	movzwl %ax,%eax
   1e163:	0f b7 54 24 0e       	movzwl 0xe(%esp),%edx
   1e168:	83 c2 01             	add    $0x1,%edx
   1e16b:	ee                   	out    %al,(%dx)
   1e16c:	eb 00                	jmp    1e16e <change_speed+0x6c>
   1e16e:	eb 00                	jmp    1e170 <change_speed+0x6e>
	outb(0x03, port + 3);									/* reset DLAB */        // 复位DLAB。
   1e170:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
   1e175:	8d 50 03             	lea    0x3(%eax),%edx
   1e178:	b8 03 00 00 00       	mov    $0x3,%eax
   1e17d:	ee                   	out    %al,(%dx)
	sti();
   1e17e:	fb                   	sti    
   1e17f:	eb 01                	jmp    1e182 <change_speed+0x80>
		return;
   1e181:	90                   	nop
}
   1e182:	83 c4 10             	add    $0x10,%esp
   1e185:	c3                   	ret    

0001e186 <flush>:
// 刷新tty缓冲队列。
// 参数：queue - 指定的缓冲队列指针。
// 令缓冲队列的头指针等于尾指针，从而达到清空缓冲区的目的。
static void flush(struct tty_queue * queue)
{
	cli();
   1e186:	fa                   	cli    
	queue->head = queue->tail;
   1e187:	8b 44 24 04          	mov    0x4(%esp),%eax
   1e18b:	8b 50 08             	mov    0x8(%eax),%edx
   1e18e:	8b 44 24 04          	mov    0x4(%esp),%eax
   1e192:	89 50 04             	mov    %edx,0x4(%eax)
	sti();
   1e195:	fb                   	sti    
}
   1e196:	90                   	nop
   1e197:	c3                   	ret    

0001e198 <wait_until_sent>:

// 等待字符发送出去。
static void wait_until_sent(struct tty_struct * tty)
{
	/* do nothing - not implemented */      /* 什么都没做 - 还未实现 */
}
   1e198:	90                   	nop
   1e199:	c3                   	ret    

0001e19a <send_break>:

// 发送BREAK控制符。
static void send_break(struct tty_struct * tty)
{
	/* do nothing - not implemented */      /* 什么都没做 - 还未实现 */
}
   1e19a:	90                   	nop
   1e19b:	c3                   	ret    

0001e19c <get_termios>:

// 取终端termios结构信息。
// 参数：tty - 指定终端的tty结构指针；termios - 存放termios结构的用户缓冲区。
static int get_termios(struct tty_struct * tty, struct termios * termios)
{
   1e19c:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 首先验证用户缓冲区指针所指内存区容量是否足够，如不够则分配内存。然后复制指定终端的termios结构信息到用户缓冲区中。
	// 最后返回0.
	verify_area(termios, sizeof (*termios));
   1e19f:	83 ec 08             	sub    $0x8,%esp
   1e1a2:	6a 24                	push   $0x24
   1e1a4:	ff 74 24 30          	pushl  0x30(%esp)
   1e1a8:	e8 ee a1 fe ff       	call   839b <verify_area>
   1e1ad:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e1b0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1e1b7:	00 
   1e1b8:	eb 2c                	jmp    1e1e6 <get_termios+0x4a>
		put_fs_byte( ((char *) & tty->termios)[i] , i + (char *)termios );
   1e1ba:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e1be:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e1c2:	01 c2                	add    %eax,%edx
   1e1c4:	8b 4c 24 20          	mov    0x20(%esp),%ecx
   1e1c8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e1cc:	01 c8                	add    %ecx,%eax
   1e1ce:	0f b6 00             	movzbl (%eax),%eax
   1e1d1:	0f be c0             	movsbl %al,%eax
   1e1d4:	83 ec 08             	sub    $0x8,%esp
   1e1d7:	52                   	push   %edx
   1e1d8:	50                   	push   %eax
   1e1d9:	e8 fd fe ff ff       	call   1e0db <put_fs_byte>
   1e1de:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e1e1:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1e1e6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e1ea:	83 f8 23             	cmp    $0x23,%eax
   1e1ed:	76 cb                	jbe    1e1ba <get_termios+0x1e>
	return 0;
   1e1ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e1f4:	83 c4 1c             	add    $0x1c,%esp
   1e1f7:	c3                   	ret    

0001e1f8 <set_termios>:

// 设置终端termios结构信息。
// 参数：tty - 指定终端的tty结构指针；termios - 用户数据区termios结构指针。
static int set_termios(struct tty_struct * tty, struct termios * termios,
			int channel)
{
   1e1f8:	83 ec 1c             	sub    $0x1c,%esp
     * 如果试图设置终端的状态但此时终端不在前台，那么我们就需要发送一个SIGTTOU
     * 信号。如果该信号被进程屏蔽或者忽略了，就直接执行本次操作。POSIX 7.2 */
	// 如果当前进程使用的tty终端的进程组号与进程的进程组号不同，即当前进程终端不在前台，表示当前进程试图修改不受控制的终端
	// 的termios结构。因此根据POSIX标准的要求这里需要发送SIGTTOU信号让使用这个终端的进程暂时停止执行，让我们先修改termios
	// 结构。如果发送信号函数tty_signal()返回值是ERESTARTSYS或EINTR，则等一会儿再执行本次操作。
	if ((current->tty == channel) && (tty->pgrp != current->pgrp)) {
   1e1fb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e200:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e206:	39 44 24 28          	cmp    %eax,0x28(%esp)
   1e20a:	75 42                	jne    1e24e <set_termios+0x56>
   1e20c:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e210:	8b 50 24             	mov    0x24(%eax),%edx
   1e213:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e218:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   1e21e:	39 c2                	cmp    %eax,%edx
   1e220:	74 2c                	je     1e24e <set_termios+0x56>
		retsig = tty_signal(SIGTTOU, tty);
   1e222:	83 ec 08             	sub    $0x8,%esp
   1e225:	ff 74 24 28          	pushl  0x28(%esp)
   1e229:	6a 16                	push   $0x16
   1e22b:	e8 9d b0 ff ff       	call   192cd <tty_signal>
   1e230:	83 c4 10             	add    $0x10,%esp
   1e233:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (retsig == -ERESTARTSYS || retsig == -EINTR)
   1e237:	81 7c 24 08 00 fe ff 	cmpl   $0xfffffe00,0x8(%esp)
   1e23e:	ff 
   1e23f:	74 07                	je     1e248 <set_termios+0x50>
   1e241:	83 7c 24 08 fc       	cmpl   $0xfffffffc,0x8(%esp)
   1e246:	75 06                	jne    1e24e <set_termios+0x56>
			return retsig;
   1e248:	8b 44 24 08          	mov    0x8(%esp),%eax
   1e24c:	eb 52                	jmp    1e2a0 <set_termios+0xa8>
	}
	// 接着把用户数据区中termios结构信息复制到指定终端tty结构的termios结构中。因为用户有可能已修改了终端串行口传输波特率，
	// 所以这里再根据termios结构中的控制模式标志c_cflag中的波特率信息修改串行UART芯片内的传输波特率。最后返回0。
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e24e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1e255:	00 
   1e256:	eb 2b                	jmp    1e283 <set_termios+0x8b>
		((char *) & tty->termios)[i] = get_fs_byte(i + (char *)termios);
   1e258:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e25c:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e260:	01 d0                	add    %edx,%eax
   1e262:	83 ec 0c             	sub    $0xc,%esp
   1e265:	50                   	push   %eax
   1e266:	e8 4c fe ff ff       	call   1e0b7 <get_fs_byte>
   1e26b:	83 c4 10             	add    $0x10,%esp
   1e26e:	89 c1                	mov    %eax,%ecx
   1e270:	8b 54 24 20          	mov    0x20(%esp),%edx
   1e274:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e278:	01 d0                	add    %edx,%eax
   1e27a:	89 ca                	mov    %ecx,%edx
   1e27c:	88 10                	mov    %dl,(%eax)
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e27e:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1e283:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e287:	83 f8 23             	cmp    $0x23,%eax
   1e28a:	76 cc                	jbe    1e258 <set_termios+0x60>
	change_speed(tty);
   1e28c:	83 ec 0c             	sub    $0xc,%esp
   1e28f:	ff 74 24 2c          	pushl  0x2c(%esp)
   1e293:	e8 6a fe ff ff       	call   1e102 <change_speed>
   1e298:	83 c4 10             	add    $0x10,%esp
	return 0;
   1e29b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e2a0:	83 c4 1c             	add    $0x1c,%esp
   1e2a3:	c3                   	ret    

0001e2a4 <get_termio>:

// 读取termio结构中的信息。
// 参数：tty - 指定终端的tty结构指针；termio - 保存termio结构信息的用户缓冲区。
static int get_termio(struct tty_struct * tty, struct termio * termio)
{
   1e2a4:	83 ec 2c             	sub    $0x2c,%esp
	struct termio tmp_termio;

	// 首先验证用户的缓冲区指针所指内存区容量是否足够，如不够则分配内存。然后将termios结构的信息复制到临时termio结构中，
	// 这两个结构基本相同，输入、输出、控制和本地标志集数据类型不同。前者的是long，而后者的是short。因此先复制到临时
	// termio结构中目的是为了进行数据类型转换。
	verify_area(termio, sizeof (*termio));
   1e2a7:	83 ec 08             	sub    $0x8,%esp
   1e2aa:	6a 12                	push   $0x12
   1e2ac:	ff 74 24 40          	pushl  0x40(%esp)
   1e2b0:	e8 e6 a0 fe ff       	call   839b <verify_area>
   1e2b5:	83 c4 10             	add    $0x10,%esp
	tmp_termio.c_iflag = tty->termios.c_iflag;
   1e2b8:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e2bc:	8b 00                	mov    (%eax),%eax
   1e2be:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
	tmp_termio.c_oflag = tty->termios.c_oflag;
   1e2c3:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e2c7:	8b 40 04             	mov    0x4(%eax),%eax
   1e2ca:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	tmp_termio.c_cflag = tty->termios.c_cflag;
   1e2cf:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e2d3:	8b 40 08             	mov    0x8(%eax),%eax
   1e2d6:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	tmp_termio.c_lflag = tty->termios.c_lflag;
   1e2db:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e2df:	8b 40 0c             	mov    0xc(%eax),%eax
   1e2e2:	66 89 44 24 10       	mov    %ax,0x10(%esp)
	tmp_termio.c_line = tty->termios.c_line;
   1e2e7:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e2eb:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   1e2ef:	88 44 24 12          	mov    %al,0x12(%esp)
	for(i = 0 ; i < NCC ; i++)
   1e2f3:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e2fa:	00 
   1e2fb:	eb 21                	jmp    1e31e <get_termio+0x7a>
		tmp_termio.c_cc[i] = tty->termios.c_cc[i];
   1e2fd:	8b 54 24 30          	mov    0x30(%esp),%edx
   1e301:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e305:	01 d0                	add    %edx,%eax
   1e307:	83 c0 11             	add    $0x11,%eax
   1e30a:	0f b6 00             	movzbl (%eax),%eax
   1e30d:	8d 4c 24 13          	lea    0x13(%esp),%ecx
   1e311:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e315:	01 ca                	add    %ecx,%edx
   1e317:	88 02                	mov    %al,(%edx)
	for(i = 0 ; i < NCC ; i++)
   1e319:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e31e:	83 7c 24 1c 07       	cmpl   $0x7,0x1c(%esp)
   1e323:	7e d8                	jle    1e2fd <get_termio+0x59>
	// 然后逐字节地把临时termio结构中的信息复制到用户termio结构缓冲区中。并返回0。
	for (i = 0 ; i < (sizeof (*termio)) ; i++)
   1e325:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e32c:	00 
   1e32d:	eb 2c                	jmp    1e35b <get_termio+0xb7>
		put_fs_byte( ((char *) & tmp_termio)[i] , i + (char *)termio );
   1e32f:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e333:	8b 44 24 34          	mov    0x34(%esp),%eax
   1e337:	01 c2                	add    %eax,%edx
   1e339:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e33d:	8d 4c 24 0a          	lea    0xa(%esp),%ecx
   1e341:	01 c8                	add    %ecx,%eax
   1e343:	0f b6 00             	movzbl (%eax),%eax
   1e346:	0f be c0             	movsbl %al,%eax
   1e349:	83 ec 08             	sub    $0x8,%esp
   1e34c:	52                   	push   %edx
   1e34d:	50                   	push   %eax
   1e34e:	e8 88 fd ff ff       	call   1e0db <put_fs_byte>
   1e353:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < (sizeof (*termio)) ; i++)
   1e356:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e35b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e35f:	83 f8 11             	cmp    $0x11,%eax
   1e362:	76 cb                	jbe    1e32f <get_termio+0x8b>
	return 0;
   1e364:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e369:	83 c4 2c             	add    $0x2c,%esp
   1e36c:	c3                   	ret    

0001e36d <set_termio>:
// 设置终端termio结构信息。
// 参数：tty - 指定终端的tty结构指针；termio - 用户数据区中termio结构。
// 将用户缓冲区termio的信息复制到终端的termios结构中。返回0。
static int set_termio(struct tty_struct * tty, struct termio * termio,
			int channel)
{
   1e36d:	83 ec 2c             	sub    $0x2c,%esp

	// 与set_termios()一样，如果进程使用的终端的进程组号的进程组号与进程的进程组号不同，即当前进程终端不在前台，表示当前
	// 进程试图修改不受控制的终端的termios结构。因此根据POSIX标准的要求这里需要发送SIGTTOU信号让使用这个终端的进程先暂
	// 时停止执行，以让我们先修改termios结构。如果发送信号函数tty_signal()返回值是ERESTARTSYS或EINTR，则等一会再执行
	// 本次操作。
	if ((current->tty == channel) && (tty->pgrp != current->pgrp)) {
   1e370:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e375:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e37b:	39 44 24 38          	cmp    %eax,0x38(%esp)
   1e37f:	75 45                	jne    1e3c6 <set_termio+0x59>
   1e381:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e385:	8b 50 24             	mov    0x24(%eax),%edx
   1e388:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e38d:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   1e393:	39 c2                	cmp    %eax,%edx
   1e395:	74 2f                	je     1e3c6 <set_termio+0x59>
		retsig = tty_signal(SIGTTOU, tty);
   1e397:	83 ec 08             	sub    $0x8,%esp
   1e39a:	ff 74 24 38          	pushl  0x38(%esp)
   1e39e:	6a 16                	push   $0x16
   1e3a0:	e8 28 af ff ff       	call   192cd <tty_signal>
   1e3a5:	83 c4 10             	add    $0x10,%esp
   1e3a8:	89 44 24 18          	mov    %eax,0x18(%esp)
		if (retsig == -ERESTARTSYS || retsig == -EINTR)
   1e3ac:	81 7c 24 18 00 fe ff 	cmpl   $0xfffffe00,0x18(%esp)
   1e3b3:	ff 
   1e3b4:	74 07                	je     1e3bd <set_termio+0x50>
   1e3b6:	83 7c 24 18 fc       	cmpl   $0xfffffffc,0x18(%esp)
   1e3bb:	75 09                	jne    1e3c6 <set_termio+0x59>
			return retsig;
   1e3bd:	8b 44 24 18          	mov    0x18(%esp),%eax
   1e3c1:	e9 c9 00 00 00       	jmp    1e48f <set_termio+0x122>
	}
	// 接着复制用户数据区中termio结构信息到临时termio结构中。然后再将termio结构的信息复制到tty的termios结构中。这样做
	// 的目的是为了对其中模式标志集的类型进行转换，即从termio的短整数类型转换成termios的长整数类型。但两种结构的c_line和
	// c_cc[]字段是完全相同的。
	for (i = 0 ; i< (sizeof (*termio)) ; i++)
   1e3c6:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e3cd:	00 
   1e3ce:	eb 2b                	jmp    1e3fb <set_termio+0x8e>
		((char *)&tmp_termio)[i] = get_fs_byte(i + (char *)termio);
   1e3d0:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e3d4:	8b 44 24 34          	mov    0x34(%esp),%eax
   1e3d8:	01 d0                	add    %edx,%eax
   1e3da:	83 ec 0c             	sub    $0xc,%esp
   1e3dd:	50                   	push   %eax
   1e3de:	e8 d4 fc ff ff       	call   1e0b7 <get_fs_byte>
   1e3e3:	83 c4 10             	add    $0x10,%esp
   1e3e6:	89 c1                	mov    %eax,%ecx
   1e3e8:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e3ec:	8d 54 24 06          	lea    0x6(%esp),%edx
   1e3f0:	01 d0                	add    %edx,%eax
   1e3f2:	89 ca                	mov    %ecx,%edx
   1e3f4:	88 10                	mov    %dl,(%eax)
	for (i = 0 ; i< (sizeof (*termio)) ; i++)
   1e3f6:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e3fb:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e3ff:	83 f8 11             	cmp    $0x11,%eax
   1e402:	76 cc                	jbe    1e3d0 <set_termio+0x63>
	*(unsigned short *)&tty->termios.c_iflag = tmp_termio.c_iflag;
   1e404:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e408:	0f b7 54 24 06       	movzwl 0x6(%esp),%edx
   1e40d:	66 89 10             	mov    %dx,(%eax)
	*(unsigned short *)&tty->termios.c_oflag = tmp_termio.c_oflag;
   1e410:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e414:	8d 50 04             	lea    0x4(%eax),%edx
   1e417:	0f b7 44 24 08       	movzwl 0x8(%esp),%eax
   1e41c:	66 89 02             	mov    %ax,(%edx)
	*(unsigned short *)&tty->termios.c_cflag = tmp_termio.c_cflag;
   1e41f:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e423:	8d 50 08             	lea    0x8(%eax),%edx
   1e426:	0f b7 44 24 0a       	movzwl 0xa(%esp),%eax
   1e42b:	66 89 02             	mov    %ax,(%edx)
	*(unsigned short *)&tty->termios.c_lflag = tmp_termio.c_lflag;
   1e42e:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e432:	8d 50 0c             	lea    0xc(%eax),%edx
   1e435:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   1e43a:	66 89 02             	mov    %ax,(%edx)
	tty->termios.c_line = tmp_termio.c_line;
   1e43d:	0f b6 54 24 0e       	movzbl 0xe(%esp),%edx
   1e442:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e446:	88 50 10             	mov    %dl,0x10(%eax)
	for(i = 0 ; i < NCC ; i++)
   1e449:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e450:	00 
   1e451:	eb 21                	jmp    1e474 <set_termio+0x107>
		tty->termios.c_cc[i] = tmp_termio.c_cc[i];
   1e453:	8d 54 24 0f          	lea    0xf(%esp),%edx
   1e457:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e45b:	01 d0                	add    %edx,%eax
   1e45d:	0f b6 00             	movzbl (%eax),%eax
   1e460:	8b 4c 24 30          	mov    0x30(%esp),%ecx
   1e464:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e468:	01 ca                	add    %ecx,%edx
   1e46a:	83 c2 11             	add    $0x11,%edx
   1e46d:	88 02                	mov    %al,(%edx)
	for(i = 0 ; i < NCC ; i++)
   1e46f:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e474:	83 7c 24 1c 07       	cmpl   $0x7,0x1c(%esp)
   1e479:	7e d8                	jle    1e453 <set_termio+0xe6>
	// 最后因为用户有可能已修改了终端串行口传输波特率，所以这里再根据termios结构中的控制模式标志c_cflag中的波特率信息修改
	// 串行UART芯片内的传输波特率，并返回0。
	change_speed(tty);
   1e47b:	83 ec 0c             	sub    $0xc,%esp
   1e47e:	ff 74 24 3c          	pushl  0x3c(%esp)
   1e482:	e8 7b fc ff ff       	call   1e102 <change_speed>
   1e487:	83 c4 10             	add    $0x10,%esp
	return 0;
   1e48a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e48f:	83 c4 2c             	add    $0x2c,%esp
   1e492:	c3                   	ret    

0001e493 <tty_ioctl>:

// tty终端设备输入输出控制函数。
// 参数：dev - 设备号；cmd - ioctl命令；arg - 操作参数指针。
// 该函数首先根据参数给出的设备号找出对应终端的tty结构，然后根据控制命令cmd分别进行处理。
int tty_ioctl(int dev, int cmd, int arg)
{
   1e493:	83 ec 1c             	sub    $0x1c,%esp
	int	pgrp;

	// 首先根据设备号取得tty子设备号，从而取得终端的tty结构。若主设备号是5（控制终端），则进程的tty字段即是tty子设备
	// 号。此时如果进程的tty子设备号是负数，表明该进程没有控制终端，即不能发出该ioctl调用，于是显示出错信息并停机。如果
	// 主设备号不是5而是4,我们就可以从设备号中取出子设备号。子设备号可以是0（控制台终端）、1（串口1终端）、2（串口2终端）。
	if (MAJOR(dev) == 5) {
   1e496:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e49a:	c1 e8 08             	shr    $0x8,%eax
   1e49d:	83 f8 05             	cmp    $0x5,%eax
   1e4a0:	75 28                	jne    1e4ca <tty_ioctl+0x37>
		dev = current->tty;
   1e4a2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e4a7:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e4ad:	89 44 24 20          	mov    %eax,0x20(%esp)
		if (dev < 0)
   1e4b1:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1e4b6:	79 1a                	jns    1e4d2 <tty_ioctl+0x3f>
			panic("tty_ioctl: dev<0");
   1e4b8:	83 ec 0c             	sub    $0xc,%esp
   1e4bb:	68 00 57 02 00       	push   $0x25700
   1e4c0:	e8 3d a7 fe ff       	call   8c02 <panic>
   1e4c5:	83 c4 10             	add    $0x10,%esp
   1e4c8:	eb 08                	jmp    1e4d2 <tty_ioctl+0x3f>
	} else
		dev = MINOR(dev);
   1e4ca:	81 64 24 20 ff 00 00 	andl   $0xff,0x20(%esp)
   1e4d1:	00 
	// ioctl命令cmd进行分别处理。144行后半部分用于根据子设备号dev在tty_table[]表中选择对应的tty结构。如果dev = 0，表示
	// 正在使用前台终端，因此直接使用终端号fg_console作为tty_table[]项索引取tty结构。如果dev大于0,那么就要分两种情况考虑：
	// 1、dev是虚拟终端号；2、dev是串行终端号或者伪终端号。对于虚拟终端其tty结构在tty_table[]中索引项是dev-1（0--63）。
	// 对于其他类型终端，则它们的tty结构索引项就是dev。例如，如果dev = 64，表示是一个串行终端1,则其tty结构就是tty_table[dev]
	// 如果dev = 1，则对应终端的tty结构是tty_table[0]。
	tty = tty_table + (dev ? ((dev < 64)? dev - 1 : dev) : fg_console);
   1e4d2:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1e4d7:	74 26                	je     1e4ff <tty_ioctl+0x6c>
   1e4d9:	83 7c 24 20 3f       	cmpl   $0x3f,0x20(%esp)
   1e4de:	7f 11                	jg     1e4f1 <tty_ioctl+0x5e>
   1e4e0:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e4e4:	83 e8 01             	sub    $0x1,%eax
   1e4e7:	c1 e0 06             	shl    $0x6,%eax
   1e4ea:	05 20 28 04 00       	add    $0x42820,%eax
   1e4ef:	eb 1b                	jmp    1e50c <tty_ioctl+0x79>
   1e4f1:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e4f5:	c1 e0 06             	shl    $0x6,%eax
   1e4f8:	05 20 28 04 00       	add    $0x42820,%eax
   1e4fd:	eb 0d                	jmp    1e50c <tty_ioctl+0x79>
   1e4ff:	a1 80 22 03 00       	mov    0x32280,%eax
   1e504:	c1 e0 06             	shl    $0x6,%eax
   1e507:	05 20 28 04 00       	add    $0x42820,%eax
   1e50c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	switch (cmd) {
   1e510:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e514:	2d 01 54 00 00       	sub    $0x5401,%eax
   1e519:	83 f8 1a             	cmp    $0x1a,%eax
   1e51c:	0f 87 56 04 00 00    	ja     1e978 <tty_ioctl+0x4e5>
   1e522:	8b 04 85 14 57 02 00 	mov    0x25714(,%eax,4),%eax
   1e529:	ff e0                	jmp    *%eax
		// 取相应终端termios结构信息。此时参数arg是用户缓冲区指针。
		case TCGETS:
			return get_termios(tty, (struct termios *) arg);
   1e52b:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e52f:	83 ec 08             	sub    $0x8,%esp
   1e532:	50                   	push   %eax
   1e533:	ff 74 24 18          	pushl  0x18(%esp)
   1e537:	e8 60 fc ff ff       	call   1e19c <get_termios>
   1e53c:	83 c4 10             	add    $0x10,%esp
   1e53f:	e9 39 04 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
		// 在设置termios结构信息之前，需要先等待输出队列中所有数据处理完毕，并且刷新（清空）输入队列。再接着执行下面的设置终端termios
		// 结构的操作。
		case TCSETSF:
			flush(tty->read_q); 							/* fallthrough */
   1e544:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e548:	8b 40 34             	mov    0x34(%eax),%eax
   1e54b:	83 ec 0c             	sub    $0xc,%esp
   1e54e:	50                   	push   %eax
   1e54f:	e8 32 fc ff ff       	call   1e186 <flush>
   1e554:	83 c4 10             	add    $0x10,%esp
		// 在设置终端termios的信息之前，需要先等待输出队列中所有数据处理完（耗尽）。对于修改参数会影响输出的情况，就需要使用这种形式。
		case TCSETSW:
			wait_until_sent(tty); 							/* fallthrough */
   1e557:	83 ec 0c             	sub    $0xc,%esp
   1e55a:	ff 74 24 18          	pushl  0x18(%esp)
   1e55e:	e8 35 fc ff ff       	call   1e198 <wait_until_sent>
   1e563:	83 c4 10             	add    $0x10,%esp
		// 设置相应终端termios结构信息。此时参数arg是保存termios结构的用户缓冲区指针。
		case TCSETS:
			return set_termios(tty,(struct termios *) arg, dev);
   1e566:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e56a:	83 ec 04             	sub    $0x4,%esp
   1e56d:	ff 74 24 24          	pushl  0x24(%esp)
   1e571:	50                   	push   %eax
   1e572:	ff 74 24 18          	pushl  0x18(%esp)
   1e576:	e8 7d fc ff ff       	call   1e1f8 <set_termios>
   1e57b:	83 c4 10             	add    $0x10,%esp
   1e57e:	e9 fa 03 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
		// 取相应终端termio结构中的信息。此时参数arg是用户缓冲区指针。
		case TCGETA:
			return get_termio(tty,(struct termio *) arg);
   1e583:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e587:	83 ec 08             	sub    $0x8,%esp
   1e58a:	50                   	push   %eax
   1e58b:	ff 74 24 18          	pushl  0x18(%esp)
   1e58f:	e8 10 fd ff ff       	call   1e2a4 <get_termio>
   1e594:	83 c4 10             	add    $0x10,%esp
   1e597:	e9 e1 03 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
		// 在设置termio结构信息之前，需要先等待输出队列中所有数据处理完毕，并且刷新（清空）输入队列。再接着执行下面的设置终端termio
		// 结构的操作。
		case TCSETAF:
			flush(tty->read_q); 							/* fallthrough */
   1e59c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e5a0:	8b 40 34             	mov    0x34(%eax),%eax
   1e5a3:	83 ec 0c             	sub    $0xc,%esp
   1e5a6:	50                   	push   %eax
   1e5a7:	e8 da fb ff ff       	call   1e186 <flush>
   1e5ac:	83 c4 10             	add    $0x10,%esp
		// 在设置终端termios的信息之前，需要先等待输出队列中所有数据处理完（耗尽）。对于修改参数会影响输出的情况，就需要使用这种形式。
		case TCSETAW:
			wait_until_sent(tty); 							/* fallthrough */
   1e5af:	83 ec 0c             	sub    $0xc,%esp
   1e5b2:	ff 74 24 18          	pushl  0x18(%esp)
   1e5b6:	e8 dd fb ff ff       	call   1e198 <wait_until_sent>
   1e5bb:	83 c4 10             	add    $0x10,%esp
		// 设置相应终端termio结构信息。此时参数arg是保存termio结构的用户缓冲区指针。
		case TCSETA:
			return set_termio(tty,(struct termio *) arg, dev);
   1e5be:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e5c2:	83 ec 04             	sub    $0x4,%esp
   1e5c5:	ff 74 24 24          	pushl  0x24(%esp)
   1e5c9:	50                   	push   %eax
   1e5ca:	ff 74 24 18          	pushl  0x18(%esp)
   1e5ce:	e8 9a fd ff ff       	call   1e36d <set_termio>
   1e5d3:	83 c4 10             	add    $0x10,%esp
   1e5d6:	e9 a2 03 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
		// 如果参数arg值是0，则等待输出队列处理完毕（空），并发送一个break。
		case TCSBRK:
			if (!arg) {
   1e5db:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1e5e0:	75 1e                	jne    1e600 <tty_ioctl+0x16d>
				wait_until_sent(tty);
   1e5e2:	83 ec 0c             	sub    $0xc,%esp
   1e5e5:	ff 74 24 18          	pushl  0x18(%esp)
   1e5e9:	e8 aa fb ff ff       	call   1e198 <wait_until_sent>
   1e5ee:	83 c4 10             	add    $0x10,%esp
				send_break(tty);
   1e5f1:	83 ec 0c             	sub    $0xc,%esp
   1e5f4:	ff 74 24 18          	pushl  0x18(%esp)
   1e5f8:	e8 9d fb ff ff       	call   1e19a <send_break>
   1e5fd:	83 c4 10             	add    $0x10,%esp
			}
			return 0;
   1e600:	b8 00 00 00 00       	mov    $0x0,%eax
   1e605:	e9 73 03 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
   1e60a:	83 7c 24 28 01       	cmpl   $0x1,0x28(%esp)
   1e60f:	74 52                	je     1e663 <tty_ioctl+0x1d0>
   1e611:	83 7c 24 28 01       	cmpl   $0x1,0x28(%esp)
   1e616:	7f 0c                	jg     1e624 <tty_ioctl+0x191>
   1e618:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1e61d:	74 1c                	je     1e63b <tty_ioctl+0x1a8>
   1e61f:	e9 07 01 00 00       	jmp    1e72b <tty_ioctl+0x298>
   1e624:	83 7c 24 28 02       	cmpl   $0x2,0x28(%esp)
   1e629:	74 60                	je     1e68b <tty_ioctl+0x1f8>
   1e62b:	83 7c 24 28 03       	cmpl   $0x3,0x28(%esp)
   1e630:	0f 84 a5 00 00 00    	je     1e6db <tty_ioctl+0x248>
   1e636:	e9 f0 00 00 00       	jmp    1e72b <tty_ioctl+0x298>
		// 起或恢复输出同时需要把写队列中的字符输出，以加快用户交互响应速度。如果arg是TCIOFF（Terminal Control Input ON），则挂起
		// 输入；如果是TCION，则重新开启挂起的输入。
		case TCXONC:
			switch (arg) {
			case TCOOFF:
				tty->stopped = 1;       					// 停止终端输出。
   1e63b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e63f:	c7 40 2c 01 00 00 00 	movl   $0x1,0x2c(%eax)
				tty->write(tty);        					// 写缓冲队列输出。
   1e646:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e64a:	8b 40 30             	mov    0x30(%eax),%eax
   1e64d:	83 ec 0c             	sub    $0xc,%esp
   1e650:	ff 74 24 18          	pushl  0x18(%esp)
   1e654:	ff d0                	call   *%eax
   1e656:	83 c4 10             	add    $0x10,%esp
				return 0;
   1e659:	b8 00 00 00 00       	mov    $0x0,%eax
   1e65e:	e9 1a 03 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
			case TCOON:
				tty->stopped = 0;       					// 恢复终端输出。
   1e663:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e667:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
				tty->write(tty);
   1e66e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e672:	8b 40 30             	mov    0x30(%eax),%eax
   1e675:	83 ec 0c             	sub    $0xc,%esp
   1e678:	ff 74 24 18          	pushl  0x18(%esp)
   1e67c:	ff d0                	call   *%eax
   1e67e:	83 c4 10             	add    $0x10,%esp
				return 0;
   1e681:	b8 00 00 00 00       	mov    $0x0,%eax
   1e686:	e9 f2 02 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
			// 如果参数arg是TCIOFF，表示要求终端停止输入，于是我们往终端写队列放入STOP字符。当终端收到该字符时就会暂停输入。如果参数是
			// TCION，表示发送一个START字符，让终端恢复传输。STOP_CHAR(tty)字义为((tty)->termios.c_cc[VSTOP])，即取终端termios
			// 结构控制字符数组对应项值。若内核定义了_POSIX_VDISABLE(\0)，那么当某一项等于_POSIX_VDISABLE的值时，表示禁止使用相应的
			// 特殊字符。因此这里直接判断该值是否为0来确定要不要把停止控制字符放入终端写队列中。以下同。
			case TCIOFF:
				if (STOP_CHAR(tty))
   1e68b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e68f:	0f b6 40 1a          	movzbl 0x1a(%eax),%eax
   1e693:	84 c0                	test   %al,%al
   1e695:	74 3a                	je     1e6d1 <tty_ioctl+0x23e>
					PUTCH(STOP_CHAR(tty), tty->write_q);
   1e697:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e69b:	0f b6 48 1a          	movzbl 0x1a(%eax),%ecx
   1e69f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6a3:	8b 50 38             	mov    0x38(%eax),%edx
   1e6a6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6aa:	8b 40 38             	mov    0x38(%eax),%eax
   1e6ad:	8b 40 04             	mov    0x4(%eax),%eax
   1e6b0:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1e6b4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6b8:	8b 40 38             	mov    0x38(%eax),%eax
   1e6bb:	8b 40 04             	mov    0x4(%eax),%eax
   1e6be:	8d 50 01             	lea    0x1(%eax),%edx
   1e6c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6c5:	8b 40 38             	mov    0x38(%eax),%eax
   1e6c8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e6ce:	89 50 04             	mov    %edx,0x4(%eax)
				return 0;
   1e6d1:	b8 00 00 00 00       	mov    $0x0,%eax
   1e6d6:	e9 a2 02 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
			case TCION:
				if (START_CHAR(tty))
   1e6db:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6df:	0f b6 40 19          	movzbl 0x19(%eax),%eax
   1e6e3:	84 c0                	test   %al,%al
   1e6e5:	74 3a                	je     1e721 <tty_ioctl+0x28e>
					PUTCH(START_CHAR(tty), tty->write_q);
   1e6e7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6eb:	0f b6 48 19          	movzbl 0x19(%eax),%ecx
   1e6ef:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6f3:	8b 50 38             	mov    0x38(%eax),%edx
   1e6f6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6fa:	8b 40 38             	mov    0x38(%eax),%eax
   1e6fd:	8b 40 04             	mov    0x4(%eax),%eax
   1e700:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1e704:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e708:	8b 40 38             	mov    0x38(%eax),%eax
   1e70b:	8b 40 04             	mov    0x4(%eax),%eax
   1e70e:	8d 50 01             	lea    0x1(%eax),%edx
   1e711:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e715:	8b 40 38             	mov    0x38(%eax),%eax
   1e718:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e71e:	89 50 04             	mov    %edx,0x4(%eax)
				return 0;
   1e721:	b8 00 00 00 00       	mov    $0x0,%eax
   1e726:	e9 52 02 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
			}
			return -EINVAL; 								/* not implemented */
   1e72b:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e730:	e9 48 02 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
		// 刷新已写输出但还没有发送、或已接收但还没有读的数据。如果参数arg是0，则刷新（清空）输入队列；如果是1，则刷新输出队列；如果
		// 2，则刷新输入和输出队列。
		case TCFLSH:
			if (arg == 0)
   1e735:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1e73a:	75 15                	jne    1e751 <tty_ioctl+0x2be>
				flush(tty->read_q);
   1e73c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e740:	8b 40 34             	mov    0x34(%eax),%eax
   1e743:	83 ec 0c             	sub    $0xc,%esp
   1e746:	50                   	push   %eax
   1e747:	e8 3a fa ff ff       	call   1e186 <flush>
   1e74c:	83 c4 10             	add    $0x10,%esp
   1e74f:	eb 55                	jmp    1e7a6 <tty_ioctl+0x313>
			else if (arg == 1)
   1e751:	83 7c 24 28 01       	cmpl   $0x1,0x28(%esp)
   1e756:	75 15                	jne    1e76d <tty_ioctl+0x2da>
				flush(tty->write_q);
   1e758:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e75c:	8b 40 38             	mov    0x38(%eax),%eax
   1e75f:	83 ec 0c             	sub    $0xc,%esp
   1e762:	50                   	push   %eax
   1e763:	e8 1e fa ff ff       	call   1e186 <flush>
   1e768:	83 c4 10             	add    $0x10,%esp
   1e76b:	eb 39                	jmp    1e7a6 <tty_ioctl+0x313>
			else if (arg == 2) {
   1e76d:	83 7c 24 28 02       	cmpl   $0x2,0x28(%esp)
   1e772:	75 28                	jne    1e79c <tty_ioctl+0x309>
				flush(tty->read_q);
   1e774:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e778:	8b 40 34             	mov    0x34(%eax),%eax
   1e77b:	83 ec 0c             	sub    $0xc,%esp
   1e77e:	50                   	push   %eax
   1e77f:	e8 02 fa ff ff       	call   1e186 <flush>
   1e784:	83 c4 10             	add    $0x10,%esp
				flush(tty->write_q);
   1e787:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e78b:	8b 40 38             	mov    0x38(%eax),%eax
   1e78e:	83 ec 0c             	sub    $0xc,%esp
   1e791:	50                   	push   %eax
   1e792:	e8 ef f9 ff ff       	call   1e186 <flush>
   1e797:	83 c4 10             	add    $0x10,%esp
   1e79a:	eb 0a                	jmp    1e7a6 <tty_ioctl+0x313>
			} else
				return -EINVAL;
   1e79c:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e7a1:	e9 d7 01 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
			return 0;
   1e7a6:	b8 00 00 00 00       	mov    $0x0,%eax
   1e7ab:	e9 cd 01 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
		// 设置终端串行线路专用模式。
		case TIOCEXCL:
			return -EINVAL; 							/* not implemented */   /* 未实现 */
   1e7b0:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e7b5:	e9 c3 01 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
		// 复位终端串行线路专用模式。
		case TIOCNXCL:
			return -EINVAL; 							/* not implemented */
   1e7ba:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e7bf:	e9 b9 01 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
		// 设置tty为控制终端。（TIOCNOTTY - 不要控制终端）。
		case TIOCSCTTY:
			return -EINVAL; 							/* set controlling term NI */
   1e7c4:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e7c9:	e9 af 01 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
		// 读取终端进程组号（即读取前台进程组号）。首先验证用户缓冲区长度，然后复制终端tty的pgrp字段到用户缓冲区。此时参数arg是用户
		// 缓冲区指针。
		case TIOCGPGRP:
			verify_area((void *) arg, 4);            	// 实现库函数tcgetpgrp()。
   1e7ce:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e7d2:	83 ec 08             	sub    $0x8,%esp
   1e7d5:	6a 04                	push   $0x4
   1e7d7:	50                   	push   %eax
   1e7d8:	e8 be 9b fe ff       	call   839b <verify_area>
   1e7dd:	83 c4 10             	add    $0x10,%esp
			put_fs_long(tty->pgrp, (unsigned long *) arg);
   1e7e0:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e7e4:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e7e8:	8b 52 24             	mov    0x24(%edx),%edx
   1e7eb:	83 ec 08             	sub    $0x8,%esp
   1e7ee:	50                   	push   %eax
   1e7ef:	52                   	push   %edx
   1e7f0:	e8 00 f9 ff ff       	call   1e0f5 <put_fs_long>
   1e7f5:	83 c4 10             	add    $0x10,%esp
			return 0;
   1e7f8:	b8 00 00 00 00       	mov    $0x0,%eax
   1e7fd:	e9 7b 01 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
		// 设置终端进程组号pgrp（即设置前台进程组号）。此时参数arg是用户缓冲区中进程组号pgrp的指针。执行该命令的前提条件是进程必须
		// 有控制终端。如果当前进程没有控制终端，或者dev不是其控制终端，或者控制终端现在的确是正在处理的终端dev，但进程的会话号与该
		// 终端dev的会话号不同，则返回无终端错误信息。
		case TIOCSPGRP:                                 // 实现库函数tcsetpgrp()。
			if ((current->tty < 0) ||
   1e802:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e807:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e80d:	85 c0                	test   %eax,%eax
   1e80f:	78 27                	js     1e838 <tty_ioctl+0x3a5>
			    (current->tty != dev) ||
   1e811:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e816:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
			if ((current->tty < 0) ||
   1e81c:	39 44 24 20          	cmp    %eax,0x20(%esp)
   1e820:	75 16                	jne    1e838 <tty_ioctl+0x3a5>
			    (tty->session != current->session))
   1e822:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e826:	8b 50 28             	mov    0x28(%eax),%edx
   1e829:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e82e:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
			    (current->tty != dev) ||
   1e834:	39 c2                	cmp    %eax,%edx
   1e836:	74 0a                	je     1e842 <tty_ioctl+0x3af>
				return -ENOTTY;
   1e838:	b8 e7 ff ff ff       	mov    $0xffffffe7,%eax
   1e83d:	e9 3b 01 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
			// 然后我们就从用户缓冲区中取得欲设置的进程号，并对该组号的有效性进行验证。如果组号pgrp小于0,则返回无效组号错误信息；如果pgrp
			// 的会话号与当前进程的不同，则返回许可错误信息。否则我们可以设置终端进程组号为pgrp。此时pgrp成为前台进程组。
			pgrp = get_fs_long((unsigned long *) arg);
   1e842:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e846:	83 ec 0c             	sub    $0xc,%esp
   1e849:	50                   	push   %eax
   1e84a:	e8 76 f8 ff ff       	call   1e0c5 <get_fs_long>
   1e84f:	83 c4 10             	add    $0x10,%esp
   1e852:	89 44 24 08          	mov    %eax,0x8(%esp)
			if (pgrp < 0)
   1e856:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1e85b:	79 0a                	jns    1e867 <tty_ioctl+0x3d4>
				return -EINVAL;
   1e85d:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e862:	e9 16 01 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
			if (session_of_pgrp(pgrp) != current->session)
   1e867:	83 ec 0c             	sub    $0xc,%esp
   1e86a:	ff 74 24 14          	pushl  0x14(%esp)
   1e86e:	e8 f0 c1 fe ff       	call   aa63 <session_of_pgrp>
   1e873:	83 c4 10             	add    $0x10,%esp
   1e876:	89 c2                	mov    %eax,%edx
   1e878:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e87d:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
   1e883:	39 c2                	cmp    %eax,%edx
   1e885:	74 0a                	je     1e891 <tty_ioctl+0x3fe>
				return -EPERM;
   1e887:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1e88c:	e9 ec 00 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
			tty->pgrp = pgrp;
   1e891:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e895:	8b 54 24 08          	mov    0x8(%esp),%edx
   1e899:	89 50 24             	mov    %edx,0x24(%eax)
			return 0;
   1e89c:	b8 00 00 00 00       	mov    $0x0,%eax
   1e8a1:	e9 d7 00 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
		// 返回输出队列中还未送出的字符数。首先验证用户缓冲区长度，然后复制队列中字符数给用户。此时参数arg是用户缓冲区指针。
		case TIOCOUTQ:
			verify_area((void *) arg, 4);
   1e8a6:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e8aa:	83 ec 08             	sub    $0x8,%esp
   1e8ad:	6a 04                	push   $0x4
   1e8af:	50                   	push   %eax
   1e8b0:	e8 e6 9a fe ff       	call   839b <verify_area>
   1e8b5:	83 c4 10             	add    $0x10,%esp
			put_fs_long(CHARS(tty->write_q), (unsigned long *) arg);
   1e8b8:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e8bc:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e8c0:	8b 52 38             	mov    0x38(%edx),%edx
   1e8c3:	8b 4a 04             	mov    0x4(%edx),%ecx
   1e8c6:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e8ca:	8b 52 38             	mov    0x38(%edx),%edx
   1e8cd:	8b 52 08             	mov    0x8(%edx),%edx
   1e8d0:	29 d1                	sub    %edx,%ecx
   1e8d2:	89 ca                	mov    %ecx,%edx
   1e8d4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e8da:	83 ec 08             	sub    $0x8,%esp
   1e8dd:	50                   	push   %eax
   1e8de:	52                   	push   %edx
   1e8df:	e8 11 f8 ff ff       	call   1e0f5 <put_fs_long>
   1e8e4:	83 c4 10             	add    $0x10,%esp
			return 0;
   1e8e7:	b8 00 00 00 00       	mov    $0x0,%eax
   1e8ec:	e9 8c 00 00 00       	jmp    1e97d <tty_ioctl+0x4ea>
		// 返回输入队列中还未读取的字符数。首先验证用户缓冲区长度，然后复制队列中字符数给用户。此时参数arg是用户缓冲区指针。
		case TIOCINQ:
			verify_area((void *) arg, 4);
   1e8f1:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e8f5:	83 ec 08             	sub    $0x8,%esp
   1e8f8:	6a 04                	push   $0x4
   1e8fa:	50                   	push   %eax
   1e8fb:	e8 9b 9a fe ff       	call   839b <verify_area>
   1e900:	83 c4 10             	add    $0x10,%esp
			put_fs_long(CHARS(tty->secondary),
   1e903:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e907:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e90b:	8b 52 3c             	mov    0x3c(%edx),%edx
   1e90e:	8b 4a 04             	mov    0x4(%edx),%ecx
   1e911:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e915:	8b 52 3c             	mov    0x3c(%edx),%edx
   1e918:	8b 52 08             	mov    0x8(%edx),%edx
   1e91b:	29 d1                	sub    %edx,%ecx
   1e91d:	89 ca                	mov    %ecx,%edx
   1e91f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e925:	83 ec 08             	sub    $0x8,%esp
   1e928:	50                   	push   %eax
   1e929:	52                   	push   %edx
   1e92a:	e8 c6 f7 ff ff       	call   1e0f5 <put_fs_long>
   1e92f:	83 c4 10             	add    $0x10,%esp
				(unsigned long *) arg);
			return 0;
   1e932:	b8 00 00 00 00       	mov    $0x0,%eax
   1e937:	eb 44                	jmp    1e97d <tty_ioctl+0x4ea>
		// 模拟终端输入操作。该命令以一个指向字符的指针作为参数，并假设该字符是在终端上键入的。用户终须在该控制终端上具有超级
		// 用户权限或具有读许可权限。
		case TIOCSTI:
			return -EINVAL; 							/* not implemented */
   1e939:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e93e:	eb 3d                	jmp    1e97d <tty_ioctl+0x4ea>
		// 读取终端设备窗口大小信息（参见termios.h中的winsize结构）。
		case TIOCGWINSZ:
			return -EINVAL; 							/* not implemented */
   1e940:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e945:	eb 36                	jmp    1e97d <tty_ioctl+0x4ea>
		// 设置终端设备窗口大小信息（参见winsize结构）。
		case TIOCSWINSZ:
			return -EINVAL; 							/* not implemented */
   1e947:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e94c:	eb 2f                	jmp    1e97d <tty_ioctl+0x4ea>
		// 返回MODEM状态控制引线的当前状态位标志集（参见termios.h）。
		case TIOCMGET:
			return -EINVAL; 							/* not implemented */
   1e94e:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e953:	eb 28                	jmp    1e97d <tty_ioctl+0x4ea>
		// 设置单个modem状态控制引线的状态（true或false）。
		case TIOCMBIS:
			return -EINVAL; 							/* not implemented */
   1e955:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e95a:	eb 21                	jmp    1e97d <tty_ioctl+0x4ea>
		// 复位ujwhMODEM状态控制引线的状态。
		case TIOCMBIC:
			return -EINVAL; 							/* not implemented */
   1e95c:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e961:	eb 1a                	jmp    1e97d <tty_ioctl+0x4ea>
		// 设置MODEM状态引线的状态。如果某一位置位，则modem对应的状态引线将为有效。
		case TIOCMSET:
			return -EINVAL; 							/* not implemented */
   1e963:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e968:	eb 13                	jmp    1e97d <tty_ioctl+0x4ea>
		// 读取软件载波检测标志（1 - 开启；0 - 关闭）。
		case TIOCGSOFTCAR:
			return -EINVAL; 							/* not implemented */
   1e96a:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e96f:	eb 0c                	jmp    1e97d <tty_ioctl+0x4ea>
		// 设置软件载波检测标志（1 - 开启；0 - 关闭）。
		case TIOCSSOFTCAR:
			return -EINVAL; 							/* not implemented */
   1e971:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e976:	eb 05                	jmp    1e97d <tty_ioctl+0x4ea>
		default:
			return -EINVAL;
   1e978:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
        }
}
   1e97d:	83 c4 1c             	add    $0x1c,%esp
   1e980:	c3                   	ret    

0001e981 <pty_copy>:
#include <asm/io.h>

// 伪终端写函数。
// 参数：from - 源伪终端结构；to - 目的伪终端结构。
static inline void pty_copy(struct tty_struct * from, struct tty_struct * to)
{
   1e981:	83 ec 1c             	sub    $0x1c,%esp
	char c;

	// 判断源终端是否停止或源终端写队列是否为空。如果源终端未停止，并且源终端写队列不为空，则循环处理之。
	while (!from->stopped && !EMPTY(from->write_q)) {
   1e984:	e9 e9 00 00 00       	jmp    1ea72 <pty_copy+0xf1>
		// 判断目的终端读队列是否已满，如果已满则先调用copy_to_cooked函数处理目的终端读队列，然后重新循环处理。
		if (FULL(to->read_q)) {
   1e989:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e98d:	8b 40 34             	mov    0x34(%eax),%eax
   1e990:	8b 50 08             	mov    0x8(%eax),%edx
   1e993:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e997:	8b 40 34             	mov    0x34(%eax),%eax
   1e99a:	8b 40 04             	mov    0x4(%eax),%eax
   1e99d:	29 c2                	sub    %eax,%edx
   1e99f:	89 d0                	mov    %edx,%eax
   1e9a1:	83 e8 01             	sub    $0x1,%eax
   1e9a4:	25 ff 03 00 00       	and    $0x3ff,%eax
   1e9a9:	85 c0                	test   %eax,%eax
   1e9ab:	75 3c                	jne    1e9e9 <pty_copy+0x68>
			// 判断目的终端辅助队列是否已满，如果已满则直接退出循环，不再处理源终端写队列中的数据。
			if (FULL(to->secondary))
   1e9ad:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e9b1:	8b 40 3c             	mov    0x3c(%eax),%eax
   1e9b4:	8b 50 08             	mov    0x8(%eax),%edx
   1e9b7:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e9bb:	8b 40 3c             	mov    0x3c(%eax),%eax
   1e9be:	8b 40 04             	mov    0x4(%eax),%eax
   1e9c1:	29 c2                	sub    %eax,%edx
   1e9c3:	89 d0                	mov    %edx,%eax
   1e9c5:	83 e8 01             	sub    $0x1,%eax
   1e9c8:	25 ff 03 00 00       	and    $0x3ff,%eax
   1e9cd:	85 c0                	test   %eax,%eax
   1e9cf:	0f 84 c6 00 00 00    	je     1ea9b <pty_copy+0x11a>
				break;
			copy_to_cooked(to);     						// 把读队列中的字符处理成成规范模式字符序列放入辅助队列。
   1e9d5:	83 ec 0c             	sub    $0xc,%esp
   1e9d8:	ff 74 24 30          	pushl  0x30(%esp)
   1e9dc:	e8 79 a1 ff ff       	call   18b5a <copy_to_cooked>
   1e9e1:	83 c4 10             	add    $0x10,%esp
			continue;
   1e9e4:	e9 89 00 00 00       	jmp    1ea72 <pty_copy+0xf1>
		}
		GETCH(from->write_q, c);         					// 从源终端写队列中取一个字符，放入c，
   1e9e9:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e9ed:	8b 50 38             	mov    0x38(%eax),%edx
   1e9f0:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e9f4:	8b 40 38             	mov    0x38(%eax),%eax
   1e9f7:	8b 40 08             	mov    0x8(%eax),%eax
   1e9fa:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   1e9ff:	88 44 24 0f          	mov    %al,0xf(%esp)
   1ea03:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea07:	8b 40 38             	mov    0x38(%eax),%eax
   1ea0a:	8b 40 08             	mov    0x8(%eax),%eax
   1ea0d:	8d 50 01             	lea    0x1(%eax),%edx
   1ea10:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea14:	8b 40 38             	mov    0x38(%eax),%eax
   1ea17:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1ea1d:	89 50 08             	mov    %edx,0x8(%eax)
		PUTCH(c, to->read_q);            					// 然后把c中的字符放入目的终端读队列中。
   1ea20:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea24:	8b 50 34             	mov    0x34(%eax),%edx
   1ea27:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea2b:	8b 40 34             	mov    0x34(%eax),%eax
   1ea2e:	8b 40 04             	mov    0x4(%eax),%eax
   1ea31:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   1ea36:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1ea3a:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea3e:	8b 40 34             	mov    0x34(%eax),%eax
   1ea41:	8b 40 04             	mov    0x4(%eax),%eax
   1ea44:	8d 50 01             	lea    0x1(%eax),%edx
   1ea47:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea4b:	8b 40 34             	mov    0x34(%eax),%eax
   1ea4e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1ea54:	89 50 04             	mov    %edx,0x4(%eax)
		// 判断当前进程是否有信号需要处理，如果有，则退出循环。
		if (current->signal & ~current->blocked)
   1ea57:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ea5c:	8b 50 0c             	mov    0xc(%eax),%edx
   1ea5f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ea64:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   1ea6a:	f7 d0                	not    %eax
   1ea6c:	21 d0                	and    %edx,%eax
   1ea6e:	85 c0                	test   %eax,%eax
   1ea70:	75 2c                	jne    1ea9e <pty_copy+0x11d>
	while (!from->stopped && !EMPTY(from->write_q)) {
   1ea72:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea76:	8b 40 2c             	mov    0x2c(%eax),%eax
   1ea79:	85 c0                	test   %eax,%eax
   1ea7b:	75 22                	jne    1ea9f <pty_copy+0x11e>
   1ea7d:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea81:	8b 40 38             	mov    0x38(%eax),%eax
   1ea84:	8b 50 04             	mov    0x4(%eax),%edx
   1ea87:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea8b:	8b 40 38             	mov    0x38(%eax),%eax
   1ea8e:	8b 40 08             	mov    0x8(%eax),%eax
   1ea91:	39 c2                	cmp    %eax,%edx
   1ea93:	0f 85 f0 fe ff ff    	jne    1e989 <pty_copy+0x8>
   1ea99:	eb 04                	jmp    1ea9f <pty_copy+0x11e>
				break;
   1ea9b:	90                   	nop
   1ea9c:	eb 01                	jmp    1ea9f <pty_copy+0x11e>
			break;
   1ea9e:	90                   	nop
	}
	copy_to_cooked(to);     								// 把读队列中的字符处理成成规范模式字符序列放入辅助队列。
   1ea9f:	83 ec 0c             	sub    $0xc,%esp
   1eaa2:	ff 74 24 30          	pushl  0x30(%esp)
   1eaa6:	e8 af a0 ff ff       	call   18b5a <copy_to_cooked>
   1eaab:	83 c4 10             	add    $0x10,%esp
	wake_up(&from->write_q->proc_list);     				// 唤醒等待源终端写队列的进程，如果有。
   1eaae:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eab2:	8b 40 38             	mov    0x38(%eax),%eax
   1eab5:	83 c0 0c             	add    $0xc,%eax
   1eab8:	83 ec 0c             	sub    $0xc,%esp
   1eabb:	50                   	push   %eax
   1eabc:	e8 8c 86 fe ff       	call   714d <wake_up>
   1eac1:	83 c4 10             	add    $0x10,%esp
}
   1eac4:	90                   	nop
   1eac5:	83 c4 1c             	add    $0x1c,%esp
   1eac8:	c3                   	ret    

0001eac9 <mpty_write>:
 * 这个函数被调用时，tty_write函数已经把一些字符放到写队列write_queue中。它将复制这些输入到它的从伪终端的
 * 输出队列中。
 */
// 主伪终端写函数。
void mpty_write(struct tty_struct * tty)
{
   1eac9:	83 ec 1c             	sub    $0x1c,%esp
	int nr = tty - tty_table;       						// 获取终端号
   1eacc:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ead0:	2d 20 28 04 00       	sub    $0x42820,%eax
   1ead5:	c1 f8 06             	sar    $0x6,%eax
   1ead8:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 终端号除以64取整如果为2则是“主伪终端”，否则显示出错信息。
	if ((nr >> 6) != 2)
   1eadc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1eae0:	c1 f8 06             	sar    $0x6,%eax
   1eae3:	83 f8 02             	cmp    $0x2,%eax
   1eae6:	74 12                	je     1eafa <mpty_write+0x31>
		printk("bad mpty\n\r");
   1eae8:	83 ec 0c             	sub    $0xc,%esp
   1eaeb:	68 80 57 02 00       	push   $0x25780
   1eaf0:	e8 4c a1 fe ff       	call   8c41 <printk>
   1eaf5:	83 c4 10             	add    $0x10,%esp
	else
		pty_copy(tty, tty + 64);   							// 调用伪终端写函数。
}
   1eaf8:	eb 19                	jmp    1eb13 <mpty_write+0x4a>
		pty_copy(tty, tty + 64);   							// 调用伪终端写函数。
   1eafa:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eafe:	05 00 10 00 00       	add    $0x1000,%eax
   1eb03:	83 ec 08             	sub    $0x8,%esp
   1eb06:	50                   	push   %eax
   1eb07:	ff 74 24 2c          	pushl  0x2c(%esp)
   1eb0b:	e8 71 fe ff ff       	call   1e981 <pty_copy>
   1eb10:	83 c4 10             	add    $0x10,%esp
}
   1eb13:	90                   	nop
   1eb14:	83 c4 1c             	add    $0x1c,%esp
   1eb17:	c3                   	ret    

0001eb18 <spty_write>:

// 从伪终端写函数。
void spty_write(struct tty_struct * tty)
{
   1eb18:	83 ec 1c             	sub    $0x1c,%esp
	int nr = tty - tty_table;       						// 获取终端号
   1eb1b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eb1f:	2d 20 28 04 00       	sub    $0x42820,%eax
   1eb24:	c1 f8 06             	sar    $0x6,%eax
   1eb27:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 终端号除以64取整如果为3则是“从伪终端”，否则显示出错信息。
	if ((nr >> 6) != 3)
   1eb2b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1eb2f:	c1 f8 06             	sar    $0x6,%eax
   1eb32:	83 f8 03             	cmp    $0x3,%eax
   1eb35:	74 12                	je     1eb49 <spty_write+0x31>
		printk("bad spty\n\r");
   1eb37:	83 ec 0c             	sub    $0xc,%esp
   1eb3a:	68 8b 57 02 00       	push   $0x2578b
   1eb3f:	e8 fd a0 fe ff       	call   8c41 <printk>
   1eb44:	83 c4 10             	add    $0x10,%esp
	else
		pty_copy(tty, tty - 64);   							// 调用伪终端写函数。
}
   1eb47:	eb 19                	jmp    1eb62 <spty_write+0x4a>
		pty_copy(tty, tty - 64);   							// 调用伪终端写函数。
   1eb49:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eb4d:	2d 00 10 00 00       	sub    $0x1000,%eax
   1eb52:	83 ec 08             	sub    $0x8,%esp
   1eb55:	50                   	push   %eax
   1eb56:	ff 74 24 2c          	pushl  0x2c(%esp)
   1eb5a:	e8 22 fe ff ff       	call   1e981 <pty_copy>
   1eb5f:	83 c4 10             	add    $0x10,%esp
}
   1eb62:	90                   	nop
   1eb63:	83 c4 1c             	add    $0x1c,%esp
   1eb66:	c3                   	ret    

0001eb67 <get_fs_word>:
//// 读取fs段中指定地址处的字.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的字.
static inline unsigned short get_fs_word(const unsigned short *addr)
{
   1eb67:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;

	__asm__ ("movw %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1eb6a:	8b 44 24 14          	mov    0x14(%esp),%eax
   1eb6e:	64 66 8b 00          	mov    %fs:(%eax),%ax
   1eb72:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   1eb77:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   1eb7c:	83 c4 10             	add    $0x10,%esp
   1eb7f:	c3                   	ret    

0001eb80 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   1eb80:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   1eb83:	8b 44 24 14          	mov    0x14(%esp),%eax
   1eb87:	64 8b 00             	mov    %fs:(%eax),%eax
   1eb8a:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   1eb8e:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   1eb92:	83 c4 10             	add    $0x10,%esp
   1eb95:	c3                   	ret    

0001eb96 <put_fs_word>:

//// 将一字存放在fs段中指定内存地址处.
// 参数:val - 字值;addr - 内存地址.
// %0 - 寄存器(字值val);%1 - (内存地址addr).
static inline void put_fs_word(short val,short * addr)
{
   1eb96:	83 ec 04             	sub    $0x4,%esp
   1eb99:	8b 44 24 08          	mov    0x8(%esp),%eax
   1eb9d:	66 89 04 24          	mov    %ax,(%esp)
__asm__ ("movw %0,%%fs:%1"::"q" (val),"m" (*addr));
   1eba1:	0f b7 04 24          	movzwl (%esp),%eax
   1eba5:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1eba9:	64 66 89 02          	mov    %ax,%fs:(%edx)
}
   1ebad:	90                   	nop
   1ebae:	83 c4 04             	add    $0x4,%esp
   1ebb1:	c3                   	ret    

0001ebb2 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   1ebb2:	8b 44 24 04          	mov    0x4(%esp),%eax
   1ebb6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ebba:	64 89 02             	mov    %eax,%fs:(%edx)
}
   1ebbd:	90                   	nop
   1ebbe:	c3                   	ret    

0001ebbf <do_emu>:
// 该函数首先检测仿真的I387结构状态字寄存器中是否有未屏蔽的异常标志置位。若有则对状态字中忙标志B进行设置。然后把指令指针
// 保存起来，并取出代码指针EIP处的2字节浮点指令代码code。接着分析代码code，并根据其含义进行处理。针对不同代码类型值，Linus
// 使用了几个不同的switch程序块进行仿真处理。
// 参数是info结构指针。
static void do_emu(struct info * info)
{
   1ebbf:	53                   	push   %ebx
   1ebc0:	83 ec 28             	sub    $0x28,%esp
	char * address;

// 该函数首先检测仿真的I387结构状态字寄存器中是否有未屏蔽的异常标志置位。若有就设置状态字中忙标志B（位15），否则复位B标
// 志。然后我们把指令指针保存起来。再看看执行本函数的代码是不是用户代码。如是不是，即调用者的代码段选择符不等于0x0f，则
// 说明内核中有代码使用了浮点指令。于是在显示出浮点指令处的CS、EIP值和信息“内核中需要数学仿真”后停机。
	if (I387.cwd & I387.swd & 0x3f)
   1ebc3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ebc8:	8b 90 18 04 00 00    	mov    0x418(%eax),%edx
   1ebce:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ebd3:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   1ebd9:	21 d0                	and    %edx,%eax
   1ebdb:	83 e0 3f             	and    $0x3f,%eax
   1ebde:	85 c0                	test   %eax,%eax
   1ebe0:	74 1b                	je     1ebfd <do_emu+0x3e>
		I387.swd |= 0x8000;             // 设置忙标志B。
   1ebe2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ebe7:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   1ebed:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ebf2:	80 ce 80             	or     $0x80,%dh
   1ebf5:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
   1ebfb:	eb 1c                	jmp    1ec19 <do_emu+0x5a>
	else
		I387.swd &= 0x7fff;             // 清忙标志B。
   1ebfd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ec02:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   1ec08:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ec0d:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
   1ec13:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	ORIG_EIP = EIP;                         // 保存浮点指令指针。
   1ec19:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec1d:	8b 50 38             	mov    0x38(%eax),%edx
   1ec20:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec24:	89 50 04             	mov    %edx,0x4(%eax)
/* 0x0007 means user code space */
	if (CS != 0x000F) {                     // 不是用户代码则停机。
   1ec27:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec2b:	83 c0 3c             	add    $0x3c,%eax
   1ec2e:	0f b7 00             	movzwl (%eax),%eax
   1ec31:	66 83 f8 0f          	cmp    $0xf,%ax
   1ec35:	74 36                	je     1ec6d <do_emu+0xae>
		printk("math_emulate: %04x:%08x\n\r",CS,EIP);
   1ec37:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec3b:	8b 50 38             	mov    0x38(%eax),%edx
   1ec3e:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec42:	83 c0 3c             	add    $0x3c,%eax
   1ec45:	0f b7 00             	movzwl (%eax),%eax
   1ec48:	0f b7 c0             	movzwl %ax,%eax
   1ec4b:	83 ec 04             	sub    $0x4,%esp
   1ec4e:	52                   	push   %edx
   1ec4f:	50                   	push   %eax
   1ec50:	68 98 57 02 00       	push   $0x25798
   1ec55:	e8 e7 9f fe ff       	call   8c41 <printk>
   1ec5a:	83 c4 10             	add    $0x10,%esp
		panic("Math emulation needed in kernel");
   1ec5d:	83 ec 0c             	sub    $0xc,%esp
   1ec60:	68 b4 57 02 00       	push   $0x257b4
   1ec65:	e8 98 9f fe ff       	call   8c02 <panic>
   1ec6a:	83 c4 10             	add    $0x10,%esp
// 然后我们取出代码指针EIP处的2字节浮点指令代码code。由于Inter CPU存储数据时是“小头”（Little endian）在前的，此时取出
// 的代码正好与指令第1、第2字节顺序颠倒。因此我们需要交换一下code中两个字节的顺序。然后再屏蔽掉第1个代码字节中的ESC位（二
// 进制11011）。接着把浮点指令指针EIP保存到TSS段i387结构中的fip字段中，而CS保存到fcs字段中，同时把略微处理过的浮点指令
// 代码code放到fcs字段的高16位中。保存这些值是为了在出现仿真的处理器异常时程序可以像使用真实的协处理器一样进行处理。最后
// 让EIP指向随后的浮点指令或操作数。
	code = get_fs_word((unsigned short *) EIP);     // 取2字节的浮点指令或操作数。
   1ec6d:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec71:	8b 40 38             	mov    0x38(%eax),%eax
   1ec74:	83 ec 0c             	sub    $0xc,%esp
   1ec77:	50                   	push   %eax
   1ec78:	e8 ea fe ff ff       	call   1eb67 <get_fs_word>
   1ec7d:	83 c4 10             	add    $0x10,%esp
   1ec80:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
	bswapw(code);                                   // 交换高低字节。
   1ec85:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ec8a:	86 c4                	xchg   %al,%ah
   1ec8c:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
	code &= 0x7ff;                                  // 屏蔽代码中的ESC码。
   1ec91:	66 81 64 24 1e ff 07 	andw   $0x7ff,0x1e(%esp)
	I387.fip = EIP;                                 // 保存指令指针。
   1ec98:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ec9d:	8b 54 24 30          	mov    0x30(%esp),%edx
   1eca1:	8b 52 38             	mov    0x38(%edx),%edx
   1eca4:	89 90 24 04 00 00    	mov    %edx,0x424(%eax)
	*(unsigned short *) &I387.fcs = CS;             // 保存代码段选择符。
   1ecaa:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ecae:	83 c0 3c             	add    $0x3c,%eax
   1ecb1:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   1ecb7:	81 c2 28 04 00 00    	add    $0x428,%edx
   1ecbd:	0f b7 00             	movzwl (%eax),%eax
   1ecc0:	66 89 02             	mov    %ax,(%edx)
	*(1+(unsigned short *) &I387.fcs) = code;       // 保存代码。
   1ecc3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ecc8:	05 28 04 00 00       	add    $0x428,%eax
   1eccd:	8d 50 02             	lea    0x2(%eax),%edx
   1ecd0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ecd5:	66 89 02             	mov    %ax,(%edx)
	EIP += 2;                                       // 指令指针指向下一个字节。
   1ecd8:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ecdc:	8b 40 38             	mov    0x38(%eax),%eax
   1ecdf:	8d 50 02             	lea    0x2(%eax),%edx
   1ece2:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ece6:	89 50 38             	mov    %edx,0x38(%eax)
        switch (code) {
   1ece9:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ecee:	3d eb 01 00 00       	cmp    $0x1eb,%eax
   1ecf3:	0f 84 a6 02 00 00    	je     1ef9f <do_emu+0x3e0>
   1ecf9:	3d eb 01 00 00       	cmp    $0x1eb,%eax
   1ecfe:	0f 8f 97 00 00 00    	jg     1ed9b <do_emu+0x1dc>
   1ed04:	3d e3 01 00 00       	cmp    $0x1e3,%eax
   1ed09:	7f 48                	jg     1ed53 <do_emu+0x194>
   1ed0b:	3d e2 01 00 00       	cmp    $0x1e2,%eax
   1ed10:	0f 8d 8c 01 00 00    	jge    1eea2 <do_emu+0x2e3>
   1ed16:	3d d7 01 00 00       	cmp    $0x1d7,%eax
   1ed1b:	7f 1b                	jg     1ed38 <do_emu+0x179>
   1ed1d:	3d d1 01 00 00       	cmp    $0x1d1,%eax
   1ed22:	0f 8d 2b 01 00 00    	jge    1ee53 <do_emu+0x294>
   1ed28:	3d d0 01 00 00       	cmp    $0x1d0,%eax
   1ed2d:	0f 84 e4 1b 00 00    	je     20917 <do_emu+0x1d58>
   1ed33:	e9 51 04 00 00       	jmp    1f189 <do_emu+0x5ca>
   1ed38:	3d e0 01 00 00       	cmp    $0x1e0,%eax
   1ed3d:	0f 84 21 01 00 00    	je     1ee64 <do_emu+0x2a5>
   1ed43:	3d e1 01 00 00       	cmp    $0x1e1,%eax
   1ed48:	0f 84 35 01 00 00    	je     1ee83 <do_emu+0x2c4>
   1ed4e:	e9 36 04 00 00       	jmp    1f189 <do_emu+0x5ca>
   1ed53:	3d e7 01 00 00       	cmp    $0x1e7,%eax
   1ed58:	7f 26                	jg     1ed80 <do_emu+0x1c1>
   1ed5a:	3d e6 01 00 00       	cmp    $0x1e6,%eax
   1ed5f:	0f 8d 8d 01 00 00    	jge    1eef2 <do_emu+0x333>
   1ed65:	3d e4 01 00 00       	cmp    $0x1e4,%eax
   1ed6a:	0f 84 43 01 00 00    	je     1eeb3 <do_emu+0x2f4>
   1ed70:	3d e5 01 00 00       	cmp    $0x1e5,%eax
   1ed75:	0f 84 56 01 00 00    	je     1eed1 <do_emu+0x312>
   1ed7b:	e9 09 04 00 00       	jmp    1f189 <do_emu+0x5ca>
   1ed80:	3d e9 01 00 00       	cmp    $0x1e9,%eax
   1ed85:	0f 84 ac 01 00 00    	je     1ef37 <do_emu+0x378>
   1ed8b:	3d e9 01 00 00       	cmp    $0x1e9,%eax
   1ed90:	0f 8f d5 01 00 00    	jg     1ef6b <do_emu+0x3ac>
   1ed96:	e9 68 01 00 00       	jmp    1ef03 <do_emu+0x344>
   1ed9b:	3d e9 02 00 00       	cmp    $0x2e9,%eax
   1eda0:	0f 84 06 03 00 00    	je     1f0ac <do_emu+0x4ed>
   1eda6:	3d e9 02 00 00       	cmp    $0x2e9,%eax
   1edab:	7f 48                	jg     1edf5 <do_emu+0x236>
   1edad:	3d ee 01 00 00       	cmp    $0x1ee,%eax
   1edb2:	0f 84 83 02 00 00    	je     1f03b <do_emu+0x47c>
   1edb8:	3d ee 01 00 00       	cmp    $0x1ee,%eax
   1edbd:	7f 1b                	jg     1edda <do_emu+0x21b>
   1edbf:	3d ec 01 00 00       	cmp    $0x1ec,%eax
   1edc4:	0f 84 09 02 00 00    	je     1efd3 <do_emu+0x414>
   1edca:	3d ed 01 00 00       	cmp    $0x1ed,%eax
   1edcf:	0f 84 32 02 00 00    	je     1f007 <do_emu+0x448>
   1edd5:	e9 af 03 00 00       	jmp    1f189 <do_emu+0x5ca>
   1edda:	3d ef 01 00 00       	cmp    $0x1ef,%eax
   1eddf:	0f 84 8a 02 00 00    	je     1f06f <do_emu+0x4b0>
   1ede5:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   1edea:	0f 8f 99 03 00 00    	jg     1f189 <do_emu+0x5ca>
   1edf0:	e9 8b 02 00 00       	jmp    1f080 <do_emu+0x4c1>
   1edf5:	3d e3 03 00 00       	cmp    $0x3e3,%eax
   1edfa:	0f 84 05 03 00 00    	je     1f105 <do_emu+0x546>
   1ee00:	3d e3 03 00 00       	cmp    $0x3e3,%eax
   1ee05:	7f 26                	jg     1ee2d <do_emu+0x26e>
   1ee07:	3d d0 03 00 00       	cmp    $0x3d0,%eax
   1ee0c:	0f 8c 77 03 00 00    	jl     1f189 <do_emu+0x5ca>
   1ee12:	3d d1 03 00 00       	cmp    $0x3d1,%eax
   1ee17:	0f 8e fd 1a 00 00    	jle    2091a <do_emu+0x1d5b>
   1ee1d:	3d e2 03 00 00       	cmp    $0x3e2,%eax
   1ee22:	0f 84 bc 02 00 00    	je     1f0e4 <do_emu+0x525>
   1ee28:	e9 5c 03 00 00       	jmp    1f189 <do_emu+0x5ca>
   1ee2d:	3d d9 06 00 00       	cmp    $0x6d9,%eax
   1ee32:	0f 84 ff 02 00 00    	je     1f137 <do_emu+0x578>
   1ee38:	3d e0 07 00 00       	cmp    $0x7e0,%eax
   1ee3d:	0f 84 2c 03 00 00    	je     1f16f <do_emu+0x5b0>
   1ee43:	3d e4 03 00 00       	cmp    $0x3e4,%eax
   1ee48:	0f 84 cf 1a 00 00    	je     2091d <do_emu+0x1d5e>
   1ee4e:	e9 36 03 00 00       	jmp    1f189 <do_emu+0x5ca>
		case 0x1d0: /* fnop */          // 空操作指令FNOP
			return;
		case 0x1d1: case 0x1d2: case 0x1d3:     // 无效指令代码。必信号，退出。
		case 0x1d4: case 0x1d5: case 0x1d6: case 0x1d7:
			math_abort(info,1<<(SIGILL-1));
   1ee53:	83 ec 08             	sub    $0x8,%esp
   1ee56:	6a 08                	push   $0x8
   1ee58:	ff 74 24 3c          	pushl  0x3c(%esp)
   1ee5c:	e8 26 1b 00 00       	call   20987 <__math_abort>
   1ee61:	83 c4 10             	add    $0x10,%esp
		case 0x1e0:                     // FCHS - 改变ST符号位。即ST = -ST。
			ST(0).exponent ^= 0x8000;
   1ee64:	83 ec 0c             	sub    $0xc,%esp
   1ee67:	6a 00                	push   $0x0
   1ee69:	e8 78 1c 00 00       	call   20ae6 <__st>
   1ee6e:	83 c4 10             	add    $0x10,%esp
   1ee71:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1ee75:	66 81 f2 00 80       	xor    $0x8000,%dx
   1ee7a:	66 89 50 08          	mov    %dx,0x8(%eax)
			return;
   1ee7e:	e9 9b 1a 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1e1:                     // FABS - 取绝对值。即ST = |ST|。
			ST(0).exponent &= 0x7fff;
   1ee83:	83 ec 0c             	sub    $0xc,%esp
   1ee86:	6a 00                	push   $0x0
   1ee88:	e8 59 1c 00 00       	call   20ae6 <__st>
   1ee8d:	83 c4 10             	add    $0x10,%esp
   1ee90:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1ee94:	66 81 e2 ff 7f       	and    $0x7fff,%dx
   1ee99:	66 89 50 08          	mov    %dx,0x8(%eax)
			return;
   1ee9d:	e9 7c 1a 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1e2: case 0x1e3:         // 无效指令代码。发信号，退出。
			math_abort(info,1<<(SIGILL-1));
   1eea2:	83 ec 08             	sub    $0x8,%esp
   1eea5:	6a 08                	push   $0x8
   1eea7:	ff 74 24 3c          	pushl  0x3c(%esp)
   1eeab:	e8 d7 1a 00 00       	call   20987 <__math_abort>
   1eeb0:	83 c4 10             	add    $0x10,%esp
		case 0x1e4:                     // FTST - 测试TS，同时设置状态字中Cn。
			ftst(PST(0));
   1eeb3:	83 ec 0c             	sub    $0xc,%esp
   1eeb6:	6a 00                	push   $0x0
   1eeb8:	e8 29 1c 00 00       	call   20ae6 <__st>
   1eebd:	83 c4 10             	add    $0x10,%esp
   1eec0:	83 ec 0c             	sub    $0xc,%esp
   1eec3:	50                   	push   %eax
   1eec4:	e8 67 30 00 00       	call   21f30 <ftst>
   1eec9:	83 c4 10             	add    $0x10,%esp
			return;
   1eecc:	e9 4d 1a 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1e5:                     // FXAM - 检查TS值，同时修改状态字中Cn。
			printk("fxam not implemented\n\r");     // 未实现。发信号退出。
   1eed1:	83 ec 0c             	sub    $0xc,%esp
   1eed4:	68 d4 57 02 00       	push   $0x257d4
   1eed9:	e8 63 9d fe ff       	call   8c41 <printk>
   1eede:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1eee1:	83 ec 08             	sub    $0x8,%esp
   1eee4:	6a 08                	push   $0x8
   1eee6:	ff 74 24 3c          	pushl  0x3c(%esp)
   1eeea:	e8 98 1a 00 00       	call   20987 <__math_abort>
   1eeef:	83 c4 10             	add    $0x10,%esp
		case 0x1e6: case 0x1e7:         // 无效指令代码。发信号，退出。
			math_abort(info,1<<(SIGILL-1));
   1eef2:	83 ec 08             	sub    $0x8,%esp
   1eef5:	6a 08                	push   $0x8
   1eef7:	ff 74 24 3c          	pushl  0x3c(%esp)
   1eefb:	e8 87 1a 00 00       	call   20987 <__math_abort>
   1ef00:	83 c4 10             	add    $0x10,%esp
		case 0x1e8:                     // FLD1 - 加载常数1.0到累加器ST。
			fpush();
   1ef03:	e8 1a 1b 00 00       	call   20a22 <fpush>
			ST(0) = CONST1;
   1ef08:	83 ec 0c             	sub    $0xc,%esp
   1ef0b:	6a 00                	push   $0x0
   1ef0d:	e8 d4 1b 00 00       	call   20ae6 <__st>
   1ef12:	83 c4 10             	add    $0x10,%esp
   1ef15:	66 c7 00 00 00       	movw   $0x0,(%eax)
   1ef1a:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
   1ef20:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   1ef26:	66 c7 40 06 00 80    	movw   $0x8000,0x6(%eax)
   1ef2c:	66 c7 40 08 ff 3f    	movw   $0x3fff,0x8(%eax)
			return;
   1ef32:	e9 e7 19 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1e9:                     // FLDL2T - 加载常数Log2(10)到累加器ST。
			fpush();
   1ef37:	e8 e6 1a 00 00       	call   20a22 <fpush>
			ST(0) = CONSTL2T;
   1ef3c:	83 ec 0c             	sub    $0xc,%esp
   1ef3f:	6a 00                	push   $0x0
   1ef41:	e8 a0 1b 00 00       	call   20ae6 <__st>
   1ef46:	83 c4 10             	add    $0x10,%esp
   1ef49:	66 c7 00 fe 8a       	movw   $0x8afe,(%eax)
   1ef4e:	66 c7 40 02 1b cd    	movw   $0xcd1b,0x2(%eax)
   1ef54:	66 c7 40 04 4b 78    	movw   $0x784b,0x4(%eax)
   1ef5a:	66 c7 40 06 9a d4    	movw   $0xd49a,0x6(%eax)
   1ef60:	66 c7 40 08 00 40    	movw   $0x4000,0x8(%eax)
			return;
   1ef66:	e9 b3 19 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1ea:                     // FLDL2E - 加载常数Log2(e)到累加器ST。
			fpush();
   1ef6b:	e8 b2 1a 00 00       	call   20a22 <fpush>
			ST(0) = CONSTL2E;
   1ef70:	83 ec 0c             	sub    $0xc,%esp
   1ef73:	6a 00                	push   $0x0
   1ef75:	e8 6c 1b 00 00       	call   20ae6 <__st>
   1ef7a:	83 c4 10             	add    $0x10,%esp
   1ef7d:	66 c7 00 bc f0       	movw   $0xf0bc,(%eax)
   1ef82:	66 c7 40 02 17 5c    	movw   $0x5c17,0x2(%eax)
   1ef88:	66 c7 40 04 29 3b    	movw   $0x3b29,0x4(%eax)
   1ef8e:	66 c7 40 06 aa b8    	movw   $0xb8aa,0x6(%eax)
   1ef94:	66 c7 40 08 ff 3f    	movw   $0x3fff,0x8(%eax)
			return;
   1ef9a:	e9 7f 19 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1eb:                     // FLDPI - 加载常数Pi到累加器ST。
			fpush();
   1ef9f:	e8 7e 1a 00 00       	call   20a22 <fpush>
			ST(0) = CONSTPI;
   1efa4:	83 ec 0c             	sub    $0xc,%esp
   1efa7:	6a 00                	push   $0x0
   1efa9:	e8 38 1b 00 00       	call   20ae6 <__st>
   1efae:	83 c4 10             	add    $0x10,%esp
   1efb1:	66 c7 00 35 c2       	movw   $0xc235,(%eax)
   1efb6:	66 c7 40 02 68 21    	movw   $0x2168,0x2(%eax)
   1efbc:	66 c7 40 04 a2 da    	movw   $0xdaa2,0x4(%eax)
   1efc2:	66 c7 40 06 0f c9    	movw   $0xc90f,0x6(%eax)
   1efc8:	66 c7 40 08 00 40    	movw   $0x4000,0x8(%eax)
			return;
   1efce:	e9 4b 19 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1ec:                     // FLDLG2 - 加载常数Log10(2)到累加器ST。
			fpush();
   1efd3:	e8 4a 1a 00 00       	call   20a22 <fpush>
			ST(0) = CONSTLG2;
   1efd8:	83 ec 0c             	sub    $0xc,%esp
   1efdb:	6a 00                	push   $0x0
   1efdd:	e8 04 1b 00 00       	call   20ae6 <__st>
   1efe2:	83 c4 10             	add    $0x10,%esp
   1efe5:	66 c7 00 99 f7       	movw   $0xf799,(%eax)
   1efea:	66 c7 40 02 cf fb    	movw   $0xfbcf,0x2(%eax)
   1eff0:	66 c7 40 04 84 9a    	movw   $0x9a84,0x4(%eax)
   1eff6:	66 c7 40 06 20 9a    	movw   $0x9a20,0x6(%eax)
   1effc:	66 c7 40 08 fd 3f    	movw   $0x3ffd,0x8(%eax)
			return;
   1f002:	e9 17 19 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1ed:                     // FLDLN2 - 加载常数Loge(2)到累加器ST。
			fpush();
   1f007:	e8 16 1a 00 00       	call   20a22 <fpush>
			ST(0) = CONSTLN2;
   1f00c:	83 ec 0c             	sub    $0xc,%esp
   1f00f:	6a 00                	push   $0x0
   1f011:	e8 d0 1a 00 00       	call   20ae6 <__st>
   1f016:	83 c4 10             	add    $0x10,%esp
   1f019:	66 c7 00 ac 79       	movw   $0x79ac,(%eax)
   1f01e:	66 c7 40 02 cf d1    	movw   $0xd1cf,0x2(%eax)
   1f024:	66 c7 40 04 f7 17    	movw   $0x17f7,0x4(%eax)
   1f02a:	66 c7 40 06 72 b1    	movw   $0xb172,0x6(%eax)
   1f030:	66 c7 40 08 fe 3f    	movw   $0x3ffe,0x8(%eax)
			return;
   1f036:	e9 e3 18 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1ee:                     // FLDZ - 加载常数0.0到累加器ST。
			fpush();
   1f03b:	e8 e2 19 00 00       	call   20a22 <fpush>
			ST(0) = CONSTZ;
   1f040:	83 ec 0c             	sub    $0xc,%esp
   1f043:	6a 00                	push   $0x0
   1f045:	e8 9c 1a 00 00       	call   20ae6 <__st>
   1f04a:	83 c4 10             	add    $0x10,%esp
   1f04d:	66 c7 00 00 00       	movw   $0x0,(%eax)
   1f052:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
   1f058:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   1f05e:	66 c7 40 06 00 00    	movw   $0x0,0x6(%eax)
   1f064:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
			return;
   1f06a:	e9 af 18 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1ef:                     // 无效和未实现仿真指令代码。发信号，退出。
			math_abort(info,1<<(SIGILL-1));
   1f06f:	83 ec 08             	sub    $0x8,%esp
   1f072:	6a 08                	push   $0x8
   1f074:	ff 74 24 3c          	pushl  0x3c(%esp)
   1f078:	e8 0a 19 00 00       	call   20987 <__math_abort>
   1f07d:	83 c4 10             	add    $0x10,%esp
		case 0x1f0: case 0x1f1: case 0x1f2: case 0x1f3:
		case 0x1f4: case 0x1f5: case 0x1f6: case 0x1f7:
		case 0x1f8: case 0x1f9: case 0x1fa: case 0x1fb:
		case 0x1fc: case 0x1fd: case 0x1fe: case 0x1ff:
			printk("%04x fxxx not implemented\n\r",code + 0xc800);
   1f080:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f085:	05 00 c8 00 00       	add    $0xc800,%eax
   1f08a:	83 ec 08             	sub    $0x8,%esp
   1f08d:	50                   	push   %eax
   1f08e:	68 eb 57 02 00       	push   $0x257eb
   1f093:	e8 a9 9b fe ff       	call   8c41 <printk>
   1f098:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1f09b:	83 ec 08             	sub    $0x8,%esp
   1f09e:	6a 08                	push   $0x8
   1f0a0:	ff 74 24 3c          	pushl  0x3c(%esp)
   1f0a4:	e8 de 18 00 00       	call   20987 <__math_abort>
   1f0a9:	83 c4 10             	add    $0x10,%esp
		case 0x2e9:                     // FUCOMPP - 无次序比较。
			fucom(PST(1),PST(0));
   1f0ac:	83 ec 0c             	sub    $0xc,%esp
   1f0af:	6a 00                	push   $0x0
   1f0b1:	e8 30 1a 00 00       	call   20ae6 <__st>
   1f0b6:	83 c4 10             	add    $0x10,%esp
   1f0b9:	89 c3                	mov    %eax,%ebx
   1f0bb:	83 ec 0c             	sub    $0xc,%esp
   1f0be:	6a 01                	push   $0x1
   1f0c0:	e8 21 1a 00 00       	call   20ae6 <__st>
   1f0c5:	83 c4 10             	add    $0x10,%esp
   1f0c8:	83 ec 08             	sub    $0x8,%esp
   1f0cb:	53                   	push   %ebx
   1f0cc:	50                   	push   %eax
   1f0cd:	e8 53 2f 00 00       	call   22025 <fucom>
   1f0d2:	83 c4 10             	add    $0x10,%esp
			fpop(); fpop();
   1f0d5:	e8 da 18 00 00       	call   209b4 <fpop>
   1f0da:	e8 d5 18 00 00       	call   209b4 <fpop>
			return;
   1f0df:	e9 3a 18 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x3d0: case 0x3d1:         // FNOP - 对387。！！应该是0x3e0，0x3e1。
			return;
		case 0x3e2:                     // FCLEX - 清状态字中异常标志。
			I387.swd &= 0x7f00;
   1f0e4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1f0e9:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   1f0ef:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1f0f4:	81 e2 00 7f 00 00    	and    $0x7f00,%edx
   1f0fa:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
			return;
   1f100:	e9 19 18 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x3e3:                     // FINIT - 初始化协处理器。
			I387.cwd = 0x037f;
   1f105:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1f10a:	c7 80 18 04 00 00 7f 	movl   $0x37f,0x418(%eax)
   1f111:	03 00 00 
			I387.swd = 0x0000;
   1f114:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1f119:	c7 80 1c 04 00 00 00 	movl   $0x0,0x41c(%eax)
   1f120:	00 00 00 
			I387.twd = 0x0000;
   1f123:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1f128:	c7 80 20 04 00 00 00 	movl   $0x0,0x420(%eax)
   1f12f:	00 00 00 
			return;
   1f132:	e9 e7 17 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x3e4:                     // FNOP - 对80387。
			return;
		case 0x6d9:                     // FCOMPP - ST(i)与ST比较，出栈操作两次。
			fcom(PST(1),PST(0));
   1f137:	83 ec 0c             	sub    $0xc,%esp
   1f13a:	6a 00                	push   $0x0
   1f13c:	e8 a5 19 00 00       	call   20ae6 <__st>
   1f141:	83 c4 10             	add    $0x10,%esp
   1f144:	89 c3                	mov    %eax,%ebx
   1f146:	83 ec 0c             	sub    $0xc,%esp
   1f149:	6a 01                	push   $0x1
   1f14b:	e8 96 19 00 00       	call   20ae6 <__st>
   1f150:	83 c4 10             	add    $0x10,%esp
   1f153:	83 ec 08             	sub    $0x8,%esp
   1f156:	53                   	push   %ebx
   1f157:	50                   	push   %eax
   1f158:	e8 71 2e 00 00       	call   21fce <fcom>
   1f15d:	83 c4 10             	add    $0x10,%esp
			fpop(); fpop();
   1f160:	e8 4f 18 00 00       	call   209b4 <fpop>
   1f165:	e8 4a 18 00 00       	call   209b4 <fpop>
			return;
   1f16a:	e9 af 17 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x7e0:                     // FSTSW AX - 保存当前状态字到AX寄存器中。
			*(short *) &EAX = I387.swd;
   1f16f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1f174:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   1f17a:	8b 44 24 30          	mov    0x30(%esp),%eax
   1f17e:	83 c0 18             	add    $0x18,%eax
   1f181:	66 89 10             	mov    %dx,(%eax)
			return;
   1f184:	e9 95 17 00 00       	jmp    2091e <do_emu+0x1d5f>
	}
// 下面开始处理第2字节最后3位是REG的指令。即11011,XXXXXXXX，REG形式的代码。
	switch (code >> 3) {
   1f189:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f18e:	66 c1 e8 03          	shr    $0x3,%ax
   1f192:	0f b7 c0             	movzwl %ax,%eax
   1f195:	83 e8 18             	sub    $0x18,%eax
   1f198:	3d e3 00 00 00       	cmp    $0xe3,%eax
   1f19d:	0f 87 c3 0d 00 00    	ja     1ff66 <do_emu+0x13a7>
   1f1a3:	8b 04 85 74 58 02 00 	mov    0x25874(,%eax,4),%eax
   1f1aa:	ff e0                	jmp    *%eax
		case 0x18:                      // FADD ST, ST(i)。
			fadd(PST(0),PST(code & 7),&tmp);
   1f1ac:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f1b1:	83 e0 07             	and    $0x7,%eax
   1f1b4:	83 ec 0c             	sub    $0xc,%esp
   1f1b7:	50                   	push   %eax
   1f1b8:	e8 29 19 00 00       	call   20ae6 <__st>
   1f1bd:	83 c4 10             	add    $0x10,%esp
   1f1c0:	89 c3                	mov    %eax,%ebx
   1f1c2:	83 ec 0c             	sub    $0xc,%esp
   1f1c5:	6a 00                	push   $0x0
   1f1c7:	e8 1a 19 00 00       	call   20ae6 <__st>
   1f1cc:	83 c4 10             	add    $0x10,%esp
   1f1cf:	89 c2                	mov    %eax,%edx
   1f1d1:	83 ec 04             	sub    $0x4,%esp
   1f1d4:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f1d8:	50                   	push   %eax
   1f1d9:	53                   	push   %ebx
   1f1da:	52                   	push   %edx
   1f1db:	e8 16 26 00 00       	call   217f6 <fadd>
   1f1e0:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f1e3:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f1e7:	83 ec 0c             	sub    $0xc,%esp
   1f1ea:	6a 00                	push   $0x0
   1f1ec:	e8 f5 18 00 00       	call   20ae6 <__st>
   1f1f1:	83 c4 10             	add    $0x10,%esp
   1f1f4:	89 c1                	mov    %eax,%ecx
   1f1f6:	8b 03                	mov    (%ebx),%eax
   1f1f8:	8b 53 04             	mov    0x4(%ebx),%edx
   1f1fb:	89 01                	mov    %eax,(%ecx)
   1f1fd:	89 51 04             	mov    %edx,0x4(%ecx)
   1f200:	83 ec 0c             	sub    $0xc,%esp
   1f203:	6a 00                	push   $0x0
   1f205:	e8 dc 18 00 00       	call   20ae6 <__st>
   1f20a:	83 c4 10             	add    $0x10,%esp
   1f20d:	89 c2                	mov    %eax,%edx
   1f20f:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f214:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f218:	e9 01 17 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x19:                      // FMUL ST, ST(i)。
			fmul(PST(0),PST(code & 7),&tmp);
   1f21d:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f222:	83 e0 07             	and    $0x7,%eax
   1f225:	83 ec 0c             	sub    $0xc,%esp
   1f228:	50                   	push   %eax
   1f229:	e8 b8 18 00 00       	call   20ae6 <__st>
   1f22e:	83 c4 10             	add    $0x10,%esp
   1f231:	89 c3                	mov    %eax,%ebx
   1f233:	83 ec 0c             	sub    $0xc,%esp
   1f236:	6a 00                	push   $0x0
   1f238:	e8 a9 18 00 00       	call   20ae6 <__st>
   1f23d:	83 c4 10             	add    $0x10,%esp
   1f240:	89 c2                	mov    %eax,%edx
   1f242:	83 ec 04             	sub    $0x4,%esp
   1f245:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f249:	50                   	push   %eax
   1f24a:	53                   	push   %ebx
   1f24b:	52                   	push   %edx
   1f24c:	e8 6f 27 00 00       	call   219c0 <fmul>
   1f251:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f254:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f258:	83 ec 0c             	sub    $0xc,%esp
   1f25b:	6a 00                	push   $0x0
   1f25d:	e8 84 18 00 00       	call   20ae6 <__st>
   1f262:	83 c4 10             	add    $0x10,%esp
   1f265:	89 c1                	mov    %eax,%ecx
   1f267:	8b 03                	mov    (%ebx),%eax
   1f269:	8b 53 04             	mov    0x4(%ebx),%edx
   1f26c:	89 01                	mov    %eax,(%ecx)
   1f26e:	89 51 04             	mov    %edx,0x4(%ecx)
   1f271:	83 ec 0c             	sub    $0xc,%esp
   1f274:	6a 00                	push   $0x0
   1f276:	e8 6b 18 00 00       	call   20ae6 <__st>
   1f27b:	83 c4 10             	add    $0x10,%esp
   1f27e:	89 c2                	mov    %eax,%edx
   1f280:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f285:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f289:	e9 90 16 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1a:                      // FCOM ST(i)。
			fcom(PST(code & 7),&tmp);
   1f28e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f293:	83 e0 07             	and    $0x7,%eax
   1f296:	83 ec 0c             	sub    $0xc,%esp
   1f299:	50                   	push   %eax
   1f29a:	e8 47 18 00 00       	call   20ae6 <__st>
   1f29f:	83 c4 10             	add    $0x10,%esp
   1f2a2:	89 c2                	mov    %eax,%edx
   1f2a4:	83 ec 08             	sub    $0x8,%esp
   1f2a7:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f2ab:	50                   	push   %eax
   1f2ac:	52                   	push   %edx
   1f2ad:	e8 1c 2d 00 00       	call   21fce <fcom>
   1f2b2:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f2b5:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f2b9:	83 ec 0c             	sub    $0xc,%esp
   1f2bc:	6a 00                	push   $0x0
   1f2be:	e8 23 18 00 00       	call   20ae6 <__st>
   1f2c3:	83 c4 10             	add    $0x10,%esp
   1f2c6:	89 c1                	mov    %eax,%ecx
   1f2c8:	8b 03                	mov    (%ebx),%eax
   1f2ca:	8b 53 04             	mov    0x4(%ebx),%edx
   1f2cd:	89 01                	mov    %eax,(%ecx)
   1f2cf:	89 51 04             	mov    %edx,0x4(%ecx)
   1f2d2:	83 ec 0c             	sub    $0xc,%esp
   1f2d5:	6a 00                	push   $0x0
   1f2d7:	e8 0a 18 00 00       	call   20ae6 <__st>
   1f2dc:	83 c4 10             	add    $0x10,%esp
   1f2df:	89 c2                	mov    %eax,%edx
   1f2e1:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f2e6:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f2ea:	e9 2f 16 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1b:                      // FCOMP ST(i)。
			fcom(PST(code & 7),&tmp);
   1f2ef:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f2f4:	83 e0 07             	and    $0x7,%eax
   1f2f7:	83 ec 0c             	sub    $0xc,%esp
   1f2fa:	50                   	push   %eax
   1f2fb:	e8 e6 17 00 00       	call   20ae6 <__st>
   1f300:	83 c4 10             	add    $0x10,%esp
   1f303:	89 c2                	mov    %eax,%edx
   1f305:	83 ec 08             	sub    $0x8,%esp
   1f308:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f30c:	50                   	push   %eax
   1f30d:	52                   	push   %edx
   1f30e:	e8 bb 2c 00 00       	call   21fce <fcom>
   1f313:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f316:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f31a:	83 ec 0c             	sub    $0xc,%esp
   1f31d:	6a 00                	push   $0x0
   1f31f:	e8 c2 17 00 00       	call   20ae6 <__st>
   1f324:	83 c4 10             	add    $0x10,%esp
   1f327:	89 c1                	mov    %eax,%ecx
   1f329:	8b 03                	mov    (%ebx),%eax
   1f32b:	8b 53 04             	mov    0x4(%ebx),%edx
   1f32e:	89 01                	mov    %eax,(%ecx)
   1f330:	89 51 04             	mov    %edx,0x4(%ecx)
   1f333:	83 ec 0c             	sub    $0xc,%esp
   1f336:	6a 00                	push   $0x0
   1f338:	e8 a9 17 00 00       	call   20ae6 <__st>
   1f33d:	83 c4 10             	add    $0x10,%esp
   1f340:	89 c2                	mov    %eax,%edx
   1f342:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f347:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1f34b:	e8 64 16 00 00       	call   209b4 <fpop>
			return;
   1f350:	e9 c9 15 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1c:                      // FSUB ST, ST(i)。
			real_to_real(&ST(code & 7),&tmp);
   1f355:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f35a:	83 e0 07             	and    $0x7,%eax
   1f35d:	83 ec 0c             	sub    $0xc,%esp
   1f360:	50                   	push   %eax
   1f361:	e8 80 17 00 00       	call   20ae6 <__st>
   1f366:	83 c4 10             	add    $0x10,%esp
   1f369:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
   1f36d:	8b 50 04             	mov    0x4(%eax),%edx
   1f370:	8b 00                	mov    (%eax),%eax
   1f372:	89 01                	mov    %eax,(%ecx)
   1f374:	89 51 04             	mov    %edx,0x4(%ecx)
   1f377:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f37c:	83 e0 07             	and    $0x7,%eax
   1f37f:	83 ec 0c             	sub    $0xc,%esp
   1f382:	50                   	push   %eax
   1f383:	e8 5e 17 00 00       	call   20ae6 <__st>
   1f388:	83 c4 10             	add    $0x10,%esp
   1f38b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1f38f:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			tmp.exponent ^= 0x8000;
   1f394:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f399:	66 35 00 80          	xor    $0x8000,%ax
   1f39d:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(PST(0),&tmp,&tmp);
   1f3a2:	83 ec 0c             	sub    $0xc,%esp
   1f3a5:	6a 00                	push   $0x0
   1f3a7:	e8 3a 17 00 00       	call   20ae6 <__st>
   1f3ac:	83 c4 10             	add    $0x10,%esp
   1f3af:	89 c2                	mov    %eax,%edx
   1f3b1:	83 ec 04             	sub    $0x4,%esp
   1f3b4:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f3b8:	50                   	push   %eax
   1f3b9:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f3bd:	50                   	push   %eax
   1f3be:	52                   	push   %edx
   1f3bf:	e8 32 24 00 00       	call   217f6 <fadd>
   1f3c4:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f3c7:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f3cb:	83 ec 0c             	sub    $0xc,%esp
   1f3ce:	6a 00                	push   $0x0
   1f3d0:	e8 11 17 00 00       	call   20ae6 <__st>
   1f3d5:	83 c4 10             	add    $0x10,%esp
   1f3d8:	89 c1                	mov    %eax,%ecx
   1f3da:	8b 03                	mov    (%ebx),%eax
   1f3dc:	8b 53 04             	mov    0x4(%ebx),%edx
   1f3df:	89 01                	mov    %eax,(%ecx)
   1f3e1:	89 51 04             	mov    %edx,0x4(%ecx)
   1f3e4:	83 ec 0c             	sub    $0xc,%esp
   1f3e7:	6a 00                	push   $0x0
   1f3e9:	e8 f8 16 00 00       	call   20ae6 <__st>
   1f3ee:	83 c4 10             	add    $0x10,%esp
   1f3f1:	89 c2                	mov    %eax,%edx
   1f3f3:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f3f8:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f3fc:	e9 1d 15 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1d:                      // FSUBR ST, ST(i)。
			ST(0).exponent ^= 0x8000;
   1f401:	83 ec 0c             	sub    $0xc,%esp
   1f404:	6a 00                	push   $0x0
   1f406:	e8 db 16 00 00       	call   20ae6 <__st>
   1f40b:	83 c4 10             	add    $0x10,%esp
   1f40e:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1f412:	66 81 f2 00 80       	xor    $0x8000,%dx
   1f417:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(PST(0),PST(code & 7),&tmp);
   1f41b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f420:	83 e0 07             	and    $0x7,%eax
   1f423:	83 ec 0c             	sub    $0xc,%esp
   1f426:	50                   	push   %eax
   1f427:	e8 ba 16 00 00       	call   20ae6 <__st>
   1f42c:	83 c4 10             	add    $0x10,%esp
   1f42f:	89 c3                	mov    %eax,%ebx
   1f431:	83 ec 0c             	sub    $0xc,%esp
   1f434:	6a 00                	push   $0x0
   1f436:	e8 ab 16 00 00       	call   20ae6 <__st>
   1f43b:	83 c4 10             	add    $0x10,%esp
   1f43e:	89 c2                	mov    %eax,%edx
   1f440:	83 ec 04             	sub    $0x4,%esp
   1f443:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f447:	50                   	push   %eax
   1f448:	53                   	push   %ebx
   1f449:	52                   	push   %edx
   1f44a:	e8 a7 23 00 00       	call   217f6 <fadd>
   1f44f:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f452:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f456:	83 ec 0c             	sub    $0xc,%esp
   1f459:	6a 00                	push   $0x0
   1f45b:	e8 86 16 00 00       	call   20ae6 <__st>
   1f460:	83 c4 10             	add    $0x10,%esp
   1f463:	89 c1                	mov    %eax,%ecx
   1f465:	8b 03                	mov    (%ebx),%eax
   1f467:	8b 53 04             	mov    0x4(%ebx),%edx
   1f46a:	89 01                	mov    %eax,(%ecx)
   1f46c:	89 51 04             	mov    %edx,0x4(%ecx)
   1f46f:	83 ec 0c             	sub    $0xc,%esp
   1f472:	6a 00                	push   $0x0
   1f474:	e8 6d 16 00 00       	call   20ae6 <__st>
   1f479:	83 c4 10             	add    $0x10,%esp
   1f47c:	89 c2                	mov    %eax,%edx
   1f47e:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f483:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f487:	e9 92 14 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1e:                      // FDIV ST, ST(i)。
			fdiv(PST(0),PST(code & 7),&tmp);
   1f48c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f491:	83 e0 07             	and    $0x7,%eax
   1f494:	83 ec 0c             	sub    $0xc,%esp
   1f497:	50                   	push   %eax
   1f498:	e8 49 16 00 00       	call   20ae6 <__st>
   1f49d:	83 c4 10             	add    $0x10,%esp
   1f4a0:	89 c3                	mov    %eax,%ebx
   1f4a2:	83 ec 0c             	sub    $0xc,%esp
   1f4a5:	6a 00                	push   $0x0
   1f4a7:	e8 3a 16 00 00       	call   20ae6 <__st>
   1f4ac:	83 c4 10             	add    $0x10,%esp
   1f4af:	89 c2                	mov    %eax,%edx
   1f4b1:	83 ec 04             	sub    $0x4,%esp
   1f4b4:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f4b8:	50                   	push   %eax
   1f4b9:	53                   	push   %ebx
   1f4ba:	52                   	push   %edx
   1f4bb:	e8 8d 27 00 00       	call   21c4d <fdiv>
   1f4c0:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f4c3:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f4c7:	83 ec 0c             	sub    $0xc,%esp
   1f4ca:	6a 00                	push   $0x0
   1f4cc:	e8 15 16 00 00       	call   20ae6 <__st>
   1f4d1:	83 c4 10             	add    $0x10,%esp
   1f4d4:	89 c1                	mov    %eax,%ecx
   1f4d6:	8b 03                	mov    (%ebx),%eax
   1f4d8:	8b 53 04             	mov    0x4(%ebx),%edx
   1f4db:	89 01                	mov    %eax,(%ecx)
   1f4dd:	89 51 04             	mov    %edx,0x4(%ecx)
   1f4e0:	83 ec 0c             	sub    $0xc,%esp
   1f4e3:	6a 00                	push   $0x0
   1f4e5:	e8 fc 15 00 00       	call   20ae6 <__st>
   1f4ea:	83 c4 10             	add    $0x10,%esp
   1f4ed:	89 c2                	mov    %eax,%edx
   1f4ef:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f4f4:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f4f8:	e9 21 14 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x1f:                      // FDIVR ST, ST(i)。
			fdiv(PST(code & 7),PST(0),&tmp);
   1f4fd:	83 ec 0c             	sub    $0xc,%esp
   1f500:	6a 00                	push   $0x0
   1f502:	e8 df 15 00 00       	call   20ae6 <__st>
   1f507:	83 c4 10             	add    $0x10,%esp
   1f50a:	89 c3                	mov    %eax,%ebx
   1f50c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f511:	83 e0 07             	and    $0x7,%eax
   1f514:	83 ec 0c             	sub    $0xc,%esp
   1f517:	50                   	push   %eax
   1f518:	e8 c9 15 00 00       	call   20ae6 <__st>
   1f51d:	83 c4 10             	add    $0x10,%esp
   1f520:	89 c2                	mov    %eax,%edx
   1f522:	83 ec 04             	sub    $0x4,%esp
   1f525:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f529:	50                   	push   %eax
   1f52a:	53                   	push   %ebx
   1f52b:	52                   	push   %edx
   1f52c:	e8 1c 27 00 00       	call   21c4d <fdiv>
   1f531:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f534:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f538:	83 ec 0c             	sub    $0xc,%esp
   1f53b:	6a 00                	push   $0x0
   1f53d:	e8 a4 15 00 00       	call   20ae6 <__st>
   1f542:	83 c4 10             	add    $0x10,%esp
   1f545:	89 c1                	mov    %eax,%ecx
   1f547:	8b 03                	mov    (%ebx),%eax
   1f549:	8b 53 04             	mov    0x4(%ebx),%edx
   1f54c:	89 01                	mov    %eax,(%ecx)
   1f54e:	89 51 04             	mov    %edx,0x4(%ecx)
   1f551:	83 ec 0c             	sub    $0xc,%esp
   1f554:	6a 00                	push   $0x0
   1f556:	e8 8b 15 00 00       	call   20ae6 <__st>
   1f55b:	83 c4 10             	add    $0x10,%esp
   1f55e:	89 c2                	mov    %eax,%edx
   1f560:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f565:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f569:	e9 b0 13 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x38:                      // FLD ST(i)。
			fpush();
   1f56e:	e8 af 14 00 00       	call   20a22 <fpush>
			ST(0) = ST((code & 7)+1);
   1f573:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f578:	83 e0 07             	and    $0x7,%eax
   1f57b:	83 c0 01             	add    $0x1,%eax
   1f57e:	83 ec 0c             	sub    $0xc,%esp
   1f581:	50                   	push   %eax
   1f582:	e8 5f 15 00 00       	call   20ae6 <__st>
   1f587:	83 c4 10             	add    $0x10,%esp
   1f58a:	89 c3                	mov    %eax,%ebx
   1f58c:	83 ec 0c             	sub    $0xc,%esp
   1f58f:	6a 00                	push   $0x0
   1f591:	e8 50 15 00 00       	call   20ae6 <__st>
   1f596:	83 c4 10             	add    $0x10,%esp
   1f599:	8b 13                	mov    (%ebx),%edx
   1f59b:	89 10                	mov    %edx,(%eax)
   1f59d:	8b 53 04             	mov    0x4(%ebx),%edx
   1f5a0:	89 50 04             	mov    %edx,0x4(%eax)
   1f5a3:	0f b7 53 08          	movzwl 0x8(%ebx),%edx
   1f5a7:	66 89 50 08          	mov    %dx,0x8(%eax)
			return;
   1f5ab:	e9 6e 13 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x39:                      // FXCH ST(i)。
			fxchg(&ST(0),&ST(code & 7));
   1f5b0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f5b5:	83 e0 07             	and    $0x7,%eax
   1f5b8:	83 ec 0c             	sub    $0xc,%esp
   1f5bb:	50                   	push   %eax
   1f5bc:	e8 25 15 00 00       	call   20ae6 <__st>
   1f5c1:	83 c4 10             	add    $0x10,%esp
   1f5c4:	89 c3                	mov    %eax,%ebx
   1f5c6:	83 ec 0c             	sub    $0xc,%esp
   1f5c9:	6a 00                	push   $0x0
   1f5cb:	e8 16 15 00 00       	call   20ae6 <__st>
   1f5d0:	83 c4 10             	add    $0x10,%esp
   1f5d3:	83 ec 08             	sub    $0x8,%esp
   1f5d6:	53                   	push   %ebx
   1f5d7:	50                   	push   %eax
   1f5d8:	e8 b3 14 00 00       	call   20a90 <fxchg>
   1f5dd:	83 c4 10             	add    $0x10,%esp
			return;
   1f5e0:	e9 39 13 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x3b:                      // FSTP ST(i)。
			ST(code & 7) = ST(0);
   1f5e5:	83 ec 0c             	sub    $0xc,%esp
   1f5e8:	6a 00                	push   $0x0
   1f5ea:	e8 f7 14 00 00       	call   20ae6 <__st>
   1f5ef:	83 c4 10             	add    $0x10,%esp
   1f5f2:	89 c3                	mov    %eax,%ebx
   1f5f4:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f5f9:	83 e0 07             	and    $0x7,%eax
   1f5fc:	83 ec 0c             	sub    $0xc,%esp
   1f5ff:	50                   	push   %eax
   1f600:	e8 e1 14 00 00       	call   20ae6 <__st>
   1f605:	83 c4 10             	add    $0x10,%esp
   1f608:	8b 13                	mov    (%ebx),%edx
   1f60a:	89 10                	mov    %edx,(%eax)
   1f60c:	8b 53 04             	mov    0x4(%ebx),%edx
   1f60f:	89 50 04             	mov    %edx,0x4(%eax)
   1f612:	0f b7 53 08          	movzwl 0x8(%ebx),%edx
   1f616:	66 89 50 08          	mov    %dx,0x8(%eax)
			fpop();
   1f61a:	e8 95 13 00 00       	call   209b4 <fpop>
			return;
   1f61f:	e9 fa 12 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x98:                      // FADD ST(i)， ST。
			fadd(PST(0),PST(code & 7),&tmp);
   1f624:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f629:	83 e0 07             	and    $0x7,%eax
   1f62c:	83 ec 0c             	sub    $0xc,%esp
   1f62f:	50                   	push   %eax
   1f630:	e8 b1 14 00 00       	call   20ae6 <__st>
   1f635:	83 c4 10             	add    $0x10,%esp
   1f638:	89 c3                	mov    %eax,%ebx
   1f63a:	83 ec 0c             	sub    $0xc,%esp
   1f63d:	6a 00                	push   $0x0
   1f63f:	e8 a2 14 00 00       	call   20ae6 <__st>
   1f644:	83 c4 10             	add    $0x10,%esp
   1f647:	89 c2                	mov    %eax,%edx
   1f649:	83 ec 04             	sub    $0x4,%esp
   1f64c:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f650:	50                   	push   %eax
   1f651:	53                   	push   %ebx
   1f652:	52                   	push   %edx
   1f653:	e8 9e 21 00 00       	call   217f6 <fadd>
   1f658:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f65b:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f65f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f664:	83 e0 07             	and    $0x7,%eax
   1f667:	83 ec 0c             	sub    $0xc,%esp
   1f66a:	50                   	push   %eax
   1f66b:	e8 76 14 00 00       	call   20ae6 <__st>
   1f670:	83 c4 10             	add    $0x10,%esp
   1f673:	89 c1                	mov    %eax,%ecx
   1f675:	8b 03                	mov    (%ebx),%eax
   1f677:	8b 53 04             	mov    0x4(%ebx),%edx
   1f67a:	89 01                	mov    %eax,(%ecx)
   1f67c:	89 51 04             	mov    %edx,0x4(%ecx)
   1f67f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f684:	83 e0 07             	and    $0x7,%eax
   1f687:	83 ec 0c             	sub    $0xc,%esp
   1f68a:	50                   	push   %eax
   1f68b:	e8 56 14 00 00       	call   20ae6 <__st>
   1f690:	83 c4 10             	add    $0x10,%esp
   1f693:	89 c2                	mov    %eax,%edx
   1f695:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f69a:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f69e:	e9 7b 12 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x99:                      // FMUL ST(i)， ST。
			fmul(PST(0),PST(code & 7),&tmp);
   1f6a3:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f6a8:	83 e0 07             	and    $0x7,%eax
   1f6ab:	83 ec 0c             	sub    $0xc,%esp
   1f6ae:	50                   	push   %eax
   1f6af:	e8 32 14 00 00       	call   20ae6 <__st>
   1f6b4:	83 c4 10             	add    $0x10,%esp
   1f6b7:	89 c3                	mov    %eax,%ebx
   1f6b9:	83 ec 0c             	sub    $0xc,%esp
   1f6bc:	6a 00                	push   $0x0
   1f6be:	e8 23 14 00 00       	call   20ae6 <__st>
   1f6c3:	83 c4 10             	add    $0x10,%esp
   1f6c6:	89 c2                	mov    %eax,%edx
   1f6c8:	83 ec 04             	sub    $0x4,%esp
   1f6cb:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f6cf:	50                   	push   %eax
   1f6d0:	53                   	push   %ebx
   1f6d1:	52                   	push   %edx
   1f6d2:	e8 e9 22 00 00       	call   219c0 <fmul>
   1f6d7:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f6da:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f6de:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f6e3:	83 e0 07             	and    $0x7,%eax
   1f6e6:	83 ec 0c             	sub    $0xc,%esp
   1f6e9:	50                   	push   %eax
   1f6ea:	e8 f7 13 00 00       	call   20ae6 <__st>
   1f6ef:	83 c4 10             	add    $0x10,%esp
   1f6f2:	89 c1                	mov    %eax,%ecx
   1f6f4:	8b 03                	mov    (%ebx),%eax
   1f6f6:	8b 53 04             	mov    0x4(%ebx),%edx
   1f6f9:	89 01                	mov    %eax,(%ecx)
   1f6fb:	89 51 04             	mov    %edx,0x4(%ecx)
   1f6fe:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f703:	83 e0 07             	and    $0x7,%eax
   1f706:	83 ec 0c             	sub    $0xc,%esp
   1f709:	50                   	push   %eax
   1f70a:	e8 d7 13 00 00       	call   20ae6 <__st>
   1f70f:	83 c4 10             	add    $0x10,%esp
   1f712:	89 c2                	mov    %eax,%edx
   1f714:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f719:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f71d:	e9 fc 11 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x9a:                      // FCOM ST(i)。
			fcom(PST(code & 7),PST(0));
   1f722:	83 ec 0c             	sub    $0xc,%esp
   1f725:	6a 00                	push   $0x0
   1f727:	e8 ba 13 00 00       	call   20ae6 <__st>
   1f72c:	83 c4 10             	add    $0x10,%esp
   1f72f:	89 c3                	mov    %eax,%ebx
   1f731:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f736:	83 e0 07             	and    $0x7,%eax
   1f739:	83 ec 0c             	sub    $0xc,%esp
   1f73c:	50                   	push   %eax
   1f73d:	e8 a4 13 00 00       	call   20ae6 <__st>
   1f742:	83 c4 10             	add    $0x10,%esp
   1f745:	83 ec 08             	sub    $0x8,%esp
   1f748:	53                   	push   %ebx
   1f749:	50                   	push   %eax
   1f74a:	e8 7f 28 00 00       	call   21fce <fcom>
   1f74f:	83 c4 10             	add    $0x10,%esp
			return;
   1f752:	e9 c7 11 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x9b:                      // FCOMP ST(i)。
			fcom(PST(code & 7),PST(0));
   1f757:	83 ec 0c             	sub    $0xc,%esp
   1f75a:	6a 00                	push   $0x0
   1f75c:	e8 85 13 00 00       	call   20ae6 <__st>
   1f761:	83 c4 10             	add    $0x10,%esp
   1f764:	89 c3                	mov    %eax,%ebx
   1f766:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f76b:	83 e0 07             	and    $0x7,%eax
   1f76e:	83 ec 0c             	sub    $0xc,%esp
   1f771:	50                   	push   %eax
   1f772:	e8 6f 13 00 00       	call   20ae6 <__st>
   1f777:	83 c4 10             	add    $0x10,%esp
   1f77a:	83 ec 08             	sub    $0x8,%esp
   1f77d:	53                   	push   %ebx
   1f77e:	50                   	push   %eax
   1f77f:	e8 4a 28 00 00       	call   21fce <fcom>
   1f784:	83 c4 10             	add    $0x10,%esp
			fpop();
   1f787:	e8 28 12 00 00       	call   209b4 <fpop>
			return;			
   1f78c:	e9 8d 11 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x9c:                      // FSUBR ST(i), ST。
			ST(code & 7).exponent ^= 0x8000;
   1f791:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f796:	83 e0 07             	and    $0x7,%eax
   1f799:	83 ec 0c             	sub    $0xc,%esp
   1f79c:	50                   	push   %eax
   1f79d:	e8 44 13 00 00       	call   20ae6 <__st>
   1f7a2:	83 c4 10             	add    $0x10,%esp
   1f7a5:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1f7a9:	66 81 f2 00 80       	xor    $0x8000,%dx
   1f7ae:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(PST(0),PST(code & 7),&tmp);
   1f7b2:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f7b7:	83 e0 07             	and    $0x7,%eax
   1f7ba:	83 ec 0c             	sub    $0xc,%esp
   1f7bd:	50                   	push   %eax
   1f7be:	e8 23 13 00 00       	call   20ae6 <__st>
   1f7c3:	83 c4 10             	add    $0x10,%esp
   1f7c6:	89 c3                	mov    %eax,%ebx
   1f7c8:	83 ec 0c             	sub    $0xc,%esp
   1f7cb:	6a 00                	push   $0x0
   1f7cd:	e8 14 13 00 00       	call   20ae6 <__st>
   1f7d2:	83 c4 10             	add    $0x10,%esp
   1f7d5:	89 c2                	mov    %eax,%edx
   1f7d7:	83 ec 04             	sub    $0x4,%esp
   1f7da:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f7de:	50                   	push   %eax
   1f7df:	53                   	push   %ebx
   1f7e0:	52                   	push   %edx
   1f7e1:	e8 10 20 00 00       	call   217f6 <fadd>
   1f7e6:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f7e9:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f7ed:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f7f2:	83 e0 07             	and    $0x7,%eax
   1f7f5:	83 ec 0c             	sub    $0xc,%esp
   1f7f8:	50                   	push   %eax
   1f7f9:	e8 e8 12 00 00       	call   20ae6 <__st>
   1f7fe:	83 c4 10             	add    $0x10,%esp
   1f801:	89 c1                	mov    %eax,%ecx
   1f803:	8b 03                	mov    (%ebx),%eax
   1f805:	8b 53 04             	mov    0x4(%ebx),%edx
   1f808:	89 01                	mov    %eax,(%ecx)
   1f80a:	89 51 04             	mov    %edx,0x4(%ecx)
   1f80d:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f812:	83 e0 07             	and    $0x7,%eax
   1f815:	83 ec 0c             	sub    $0xc,%esp
   1f818:	50                   	push   %eax
   1f819:	e8 c8 12 00 00       	call   20ae6 <__st>
   1f81e:	83 c4 10             	add    $0x10,%esp
   1f821:	89 c2                	mov    %eax,%edx
   1f823:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f828:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f82c:	e9 ed 10 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x9d:                      // FSUB ST(i), ST。
			real_to_real(&ST(0),&tmp);
   1f831:	83 ec 0c             	sub    $0xc,%esp
   1f834:	6a 00                	push   $0x0
   1f836:	e8 ab 12 00 00       	call   20ae6 <__st>
   1f83b:	83 c4 10             	add    $0x10,%esp
   1f83e:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
   1f842:	8b 50 04             	mov    0x4(%eax),%edx
   1f845:	8b 00                	mov    (%eax),%eax
   1f847:	89 01                	mov    %eax,(%ecx)
   1f849:	89 51 04             	mov    %edx,0x4(%ecx)
   1f84c:	83 ec 0c             	sub    $0xc,%esp
   1f84f:	6a 00                	push   $0x0
   1f851:	e8 90 12 00 00       	call   20ae6 <__st>
   1f856:	83 c4 10             	add    $0x10,%esp
   1f859:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1f85d:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			tmp.exponent ^= 0x8000;
   1f862:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f867:	66 35 00 80          	xor    $0x8000,%ax
   1f86b:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(PST(code & 7),&tmp,&tmp);
   1f870:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f875:	83 e0 07             	and    $0x7,%eax
   1f878:	83 ec 0c             	sub    $0xc,%esp
   1f87b:	50                   	push   %eax
   1f87c:	e8 65 12 00 00       	call   20ae6 <__st>
   1f881:	83 c4 10             	add    $0x10,%esp
   1f884:	89 c2                	mov    %eax,%edx
   1f886:	83 ec 04             	sub    $0x4,%esp
   1f889:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f88d:	50                   	push   %eax
   1f88e:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f892:	50                   	push   %eax
   1f893:	52                   	push   %edx
   1f894:	e8 5d 1f 00 00       	call   217f6 <fadd>
   1f899:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f89c:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f8a0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f8a5:	83 e0 07             	and    $0x7,%eax
   1f8a8:	83 ec 0c             	sub    $0xc,%esp
   1f8ab:	50                   	push   %eax
   1f8ac:	e8 35 12 00 00       	call   20ae6 <__st>
   1f8b1:	83 c4 10             	add    $0x10,%esp
   1f8b4:	89 c1                	mov    %eax,%ecx
   1f8b6:	8b 03                	mov    (%ebx),%eax
   1f8b8:	8b 53 04             	mov    0x4(%ebx),%edx
   1f8bb:	89 01                	mov    %eax,(%ecx)
   1f8bd:	89 51 04             	mov    %edx,0x4(%ecx)
   1f8c0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f8c5:	83 e0 07             	and    $0x7,%eax
   1f8c8:	83 ec 0c             	sub    $0xc,%esp
   1f8cb:	50                   	push   %eax
   1f8cc:	e8 15 12 00 00       	call   20ae6 <__st>
   1f8d1:	83 c4 10             	add    $0x10,%esp
   1f8d4:	89 c2                	mov    %eax,%edx
   1f8d6:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f8db:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f8df:	e9 3a 10 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x9e:                      // FDIVR ST(i), ST。
			fdiv(PST(0),PST(code & 7),&tmp);
   1f8e4:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f8e9:	83 e0 07             	and    $0x7,%eax
   1f8ec:	83 ec 0c             	sub    $0xc,%esp
   1f8ef:	50                   	push   %eax
   1f8f0:	e8 f1 11 00 00       	call   20ae6 <__st>
   1f8f5:	83 c4 10             	add    $0x10,%esp
   1f8f8:	89 c3                	mov    %eax,%ebx
   1f8fa:	83 ec 0c             	sub    $0xc,%esp
   1f8fd:	6a 00                	push   $0x0
   1f8ff:	e8 e2 11 00 00       	call   20ae6 <__st>
   1f904:	83 c4 10             	add    $0x10,%esp
   1f907:	89 c2                	mov    %eax,%edx
   1f909:	83 ec 04             	sub    $0x4,%esp
   1f90c:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f910:	50                   	push   %eax
   1f911:	53                   	push   %ebx
   1f912:	52                   	push   %edx
   1f913:	e8 35 23 00 00       	call   21c4d <fdiv>
   1f918:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f91b:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f91f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f924:	83 e0 07             	and    $0x7,%eax
   1f927:	83 ec 0c             	sub    $0xc,%esp
   1f92a:	50                   	push   %eax
   1f92b:	e8 b6 11 00 00       	call   20ae6 <__st>
   1f930:	83 c4 10             	add    $0x10,%esp
   1f933:	89 c1                	mov    %eax,%ecx
   1f935:	8b 03                	mov    (%ebx),%eax
   1f937:	8b 53 04             	mov    0x4(%ebx),%edx
   1f93a:	89 01                	mov    %eax,(%ecx)
   1f93c:	89 51 04             	mov    %edx,0x4(%ecx)
   1f93f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f944:	83 e0 07             	and    $0x7,%eax
   1f947:	83 ec 0c             	sub    $0xc,%esp
   1f94a:	50                   	push   %eax
   1f94b:	e8 96 11 00 00       	call   20ae6 <__st>
   1f950:	83 c4 10             	add    $0x10,%esp
   1f953:	89 c2                	mov    %eax,%edx
   1f955:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f95a:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f95e:	e9 bb 0f 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x9f:                      // FDIV ST(i), ST。
			fdiv(PST(code & 7),PST(0),&tmp);
   1f963:	83 ec 0c             	sub    $0xc,%esp
   1f966:	6a 00                	push   $0x0
   1f968:	e8 79 11 00 00       	call   20ae6 <__st>
   1f96d:	83 c4 10             	add    $0x10,%esp
   1f970:	89 c3                	mov    %eax,%ebx
   1f972:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f977:	83 e0 07             	and    $0x7,%eax
   1f97a:	83 ec 0c             	sub    $0xc,%esp
   1f97d:	50                   	push   %eax
   1f97e:	e8 63 11 00 00       	call   20ae6 <__st>
   1f983:	83 c4 10             	add    $0x10,%esp
   1f986:	89 c2                	mov    %eax,%edx
   1f988:	83 ec 04             	sub    $0x4,%esp
   1f98b:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f98f:	50                   	push   %eax
   1f990:	53                   	push   %ebx
   1f991:	52                   	push   %edx
   1f992:	e8 b6 22 00 00       	call   21c4d <fdiv>
   1f997:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f99a:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f99e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f9a3:	83 e0 07             	and    $0x7,%eax
   1f9a6:	83 ec 0c             	sub    $0xc,%esp
   1f9a9:	50                   	push   %eax
   1f9aa:	e8 37 11 00 00       	call   20ae6 <__st>
   1f9af:	83 c4 10             	add    $0x10,%esp
   1f9b2:	89 c1                	mov    %eax,%ecx
   1f9b4:	8b 03                	mov    (%ebx),%eax
   1f9b6:	8b 53 04             	mov    0x4(%ebx),%edx
   1f9b9:	89 01                	mov    %eax,(%ecx)
   1f9bb:	89 51 04             	mov    %edx,0x4(%ecx)
   1f9be:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f9c3:	83 e0 07             	and    $0x7,%eax
   1f9c6:	83 ec 0c             	sub    $0xc,%esp
   1f9c9:	50                   	push   %eax
   1f9ca:	e8 17 11 00 00       	call   20ae6 <__st>
   1f9cf:	83 c4 10             	add    $0x10,%esp
   1f9d2:	89 c2                	mov    %eax,%edx
   1f9d4:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f9d9:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f9dd:	e9 3c 0f 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xb8:                      // FFREE ST(i), ST。未实现。
			printk("ffree not implemented\n\r");
   1f9e2:	83 ec 0c             	sub    $0xc,%esp
   1f9e5:	68 07 58 02 00       	push   $0x25807
   1f9ea:	e8 52 92 fe ff       	call   8c41 <printk>
   1f9ef:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1f9f2:	83 ec 08             	sub    $0x8,%esp
   1f9f5:	6a 08                	push   $0x8
   1f9f7:	ff 74 24 3c          	pushl  0x3c(%esp)
   1f9fb:	e8 87 0f 00 00       	call   20987 <__math_abort>
   1fa00:	83 c4 10             	add    $0x10,%esp
		case 0xb9:                      // FXCH ST(i)。
			fxchg(&ST(0),&ST(code & 7));
   1fa03:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa08:	83 e0 07             	and    $0x7,%eax
   1fa0b:	83 ec 0c             	sub    $0xc,%esp
   1fa0e:	50                   	push   %eax
   1fa0f:	e8 d2 10 00 00       	call   20ae6 <__st>
   1fa14:	83 c4 10             	add    $0x10,%esp
   1fa17:	89 c3                	mov    %eax,%ebx
   1fa19:	83 ec 0c             	sub    $0xc,%esp
   1fa1c:	6a 00                	push   $0x0
   1fa1e:	e8 c3 10 00 00       	call   20ae6 <__st>
   1fa23:	83 c4 10             	add    $0x10,%esp
   1fa26:	83 ec 08             	sub    $0x8,%esp
   1fa29:	53                   	push   %ebx
   1fa2a:	50                   	push   %eax
   1fa2b:	e8 60 10 00 00       	call   20a90 <fxchg>
   1fa30:	83 c4 10             	add    $0x10,%esp
			return;
   1fa33:	e9 e6 0e 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xba:                      // FST ST(i)。
			ST(code & 7) = ST(0);
   1fa38:	83 ec 0c             	sub    $0xc,%esp
   1fa3b:	6a 00                	push   $0x0
   1fa3d:	e8 a4 10 00 00       	call   20ae6 <__st>
   1fa42:	83 c4 10             	add    $0x10,%esp
   1fa45:	89 c3                	mov    %eax,%ebx
   1fa47:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa4c:	83 e0 07             	and    $0x7,%eax
   1fa4f:	83 ec 0c             	sub    $0xc,%esp
   1fa52:	50                   	push   %eax
   1fa53:	e8 8e 10 00 00       	call   20ae6 <__st>
   1fa58:	83 c4 10             	add    $0x10,%esp
   1fa5b:	8b 13                	mov    (%ebx),%edx
   1fa5d:	89 10                	mov    %edx,(%eax)
   1fa5f:	8b 53 04             	mov    0x4(%ebx),%edx
   1fa62:	89 50 04             	mov    %edx,0x4(%eax)
   1fa65:	0f b7 53 08          	movzwl 0x8(%ebx),%edx
   1fa69:	66 89 50 08          	mov    %dx,0x8(%eax)
			return;
   1fa6d:	e9 ac 0e 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xbb:                      // FSTP ST(i)。
			ST(code & 7) = ST(0);
   1fa72:	83 ec 0c             	sub    $0xc,%esp
   1fa75:	6a 00                	push   $0x0
   1fa77:	e8 6a 10 00 00       	call   20ae6 <__st>
   1fa7c:	83 c4 10             	add    $0x10,%esp
   1fa7f:	89 c3                	mov    %eax,%ebx
   1fa81:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa86:	83 e0 07             	and    $0x7,%eax
   1fa89:	83 ec 0c             	sub    $0xc,%esp
   1fa8c:	50                   	push   %eax
   1fa8d:	e8 54 10 00 00       	call   20ae6 <__st>
   1fa92:	83 c4 10             	add    $0x10,%esp
   1fa95:	8b 13                	mov    (%ebx),%edx
   1fa97:	89 10                	mov    %edx,(%eax)
   1fa99:	8b 53 04             	mov    0x4(%ebx),%edx
   1fa9c:	89 50 04             	mov    %edx,0x4(%eax)
   1fa9f:	0f b7 53 08          	movzwl 0x8(%ebx),%edx
   1faa3:	66 89 50 08          	mov    %dx,0x8(%eax)
			fpop();
   1faa7:	e8 08 0f 00 00       	call   209b4 <fpop>
			return;
   1faac:	e9 6d 0e 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xbc:                      // FUCOM ST(i)。
			fucom(PST(code & 7),PST(0));
   1fab1:	83 ec 0c             	sub    $0xc,%esp
   1fab4:	6a 00                	push   $0x0
   1fab6:	e8 2b 10 00 00       	call   20ae6 <__st>
   1fabb:	83 c4 10             	add    $0x10,%esp
   1fabe:	89 c3                	mov    %eax,%ebx
   1fac0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fac5:	83 e0 07             	and    $0x7,%eax
   1fac8:	83 ec 0c             	sub    $0xc,%esp
   1facb:	50                   	push   %eax
   1facc:	e8 15 10 00 00       	call   20ae6 <__st>
   1fad1:	83 c4 10             	add    $0x10,%esp
   1fad4:	83 ec 08             	sub    $0x8,%esp
   1fad7:	53                   	push   %ebx
   1fad8:	50                   	push   %eax
   1fad9:	e8 47 25 00 00       	call   22025 <fucom>
   1fade:	83 c4 10             	add    $0x10,%esp
			return;
   1fae1:	e9 38 0e 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xbd:                      // FUCOMP ST(i)。
			fucom(PST(code & 7),PST(0));
   1fae6:	83 ec 0c             	sub    $0xc,%esp
   1fae9:	6a 00                	push   $0x0
   1faeb:	e8 f6 0f 00 00       	call   20ae6 <__st>
   1faf0:	83 c4 10             	add    $0x10,%esp
   1faf3:	89 c3                	mov    %eax,%ebx
   1faf5:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fafa:	83 e0 07             	and    $0x7,%eax
   1fafd:	83 ec 0c             	sub    $0xc,%esp
   1fb00:	50                   	push   %eax
   1fb01:	e8 e0 0f 00 00       	call   20ae6 <__st>
   1fb06:	83 c4 10             	add    $0x10,%esp
   1fb09:	83 ec 08             	sub    $0x8,%esp
   1fb0c:	53                   	push   %ebx
   1fb0d:	50                   	push   %eax
   1fb0e:	e8 12 25 00 00       	call   22025 <fucom>
   1fb13:	83 c4 10             	add    $0x10,%esp
			fpop();
   1fb16:	e8 99 0e 00 00       	call   209b4 <fpop>
			return;
   1fb1b:	e9 fe 0d 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xd8:                      // FADDP ST(i), ST。
			fadd(PST(code & 7),PST(0),&tmp);
   1fb20:	83 ec 0c             	sub    $0xc,%esp
   1fb23:	6a 00                	push   $0x0
   1fb25:	e8 bc 0f 00 00       	call   20ae6 <__st>
   1fb2a:	83 c4 10             	add    $0x10,%esp
   1fb2d:	89 c3                	mov    %eax,%ebx
   1fb2f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb34:	83 e0 07             	and    $0x7,%eax
   1fb37:	83 ec 0c             	sub    $0xc,%esp
   1fb3a:	50                   	push   %eax
   1fb3b:	e8 a6 0f 00 00       	call   20ae6 <__st>
   1fb40:	83 c4 10             	add    $0x10,%esp
   1fb43:	89 c2                	mov    %eax,%edx
   1fb45:	83 ec 04             	sub    $0x4,%esp
   1fb48:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fb4c:	50                   	push   %eax
   1fb4d:	53                   	push   %ebx
   1fb4e:	52                   	push   %edx
   1fb4f:	e8 a2 1c 00 00       	call   217f6 <fadd>
   1fb54:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fb57:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fb5b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb60:	83 e0 07             	and    $0x7,%eax
   1fb63:	83 ec 0c             	sub    $0xc,%esp
   1fb66:	50                   	push   %eax
   1fb67:	e8 7a 0f 00 00       	call   20ae6 <__st>
   1fb6c:	83 c4 10             	add    $0x10,%esp
   1fb6f:	89 c1                	mov    %eax,%ecx
   1fb71:	8b 03                	mov    (%ebx),%eax
   1fb73:	8b 53 04             	mov    0x4(%ebx),%edx
   1fb76:	89 01                	mov    %eax,(%ecx)
   1fb78:	89 51 04             	mov    %edx,0x4(%ecx)
   1fb7b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb80:	83 e0 07             	and    $0x7,%eax
   1fb83:	83 ec 0c             	sub    $0xc,%esp
   1fb86:	50                   	push   %eax
   1fb87:	e8 5a 0f 00 00       	call   20ae6 <__st>
   1fb8c:	83 c4 10             	add    $0x10,%esp
   1fb8f:	89 c2                	mov    %eax,%edx
   1fb91:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fb96:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fb9a:	e8 15 0e 00 00       	call   209b4 <fpop>
			return;
   1fb9f:	e9 7a 0d 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xd9:                      // FMULP ST(i), ST。
			fmul(PST(code & 7),PST(0),&tmp);
   1fba4:	83 ec 0c             	sub    $0xc,%esp
   1fba7:	6a 00                	push   $0x0
   1fba9:	e8 38 0f 00 00       	call   20ae6 <__st>
   1fbae:	83 c4 10             	add    $0x10,%esp
   1fbb1:	89 c3                	mov    %eax,%ebx
   1fbb3:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fbb8:	83 e0 07             	and    $0x7,%eax
   1fbbb:	83 ec 0c             	sub    $0xc,%esp
   1fbbe:	50                   	push   %eax
   1fbbf:	e8 22 0f 00 00       	call   20ae6 <__st>
   1fbc4:	83 c4 10             	add    $0x10,%esp
   1fbc7:	89 c2                	mov    %eax,%edx
   1fbc9:	83 ec 04             	sub    $0x4,%esp
   1fbcc:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fbd0:	50                   	push   %eax
   1fbd1:	53                   	push   %ebx
   1fbd2:	52                   	push   %edx
   1fbd3:	e8 e8 1d 00 00       	call   219c0 <fmul>
   1fbd8:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fbdb:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fbdf:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fbe4:	83 e0 07             	and    $0x7,%eax
   1fbe7:	83 ec 0c             	sub    $0xc,%esp
   1fbea:	50                   	push   %eax
   1fbeb:	e8 f6 0e 00 00       	call   20ae6 <__st>
   1fbf0:	83 c4 10             	add    $0x10,%esp
   1fbf3:	89 c1                	mov    %eax,%ecx
   1fbf5:	8b 03                	mov    (%ebx),%eax
   1fbf7:	8b 53 04             	mov    0x4(%ebx),%edx
   1fbfa:	89 01                	mov    %eax,(%ecx)
   1fbfc:	89 51 04             	mov    %edx,0x4(%ecx)
   1fbff:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc04:	83 e0 07             	and    $0x7,%eax
   1fc07:	83 ec 0c             	sub    $0xc,%esp
   1fc0a:	50                   	push   %eax
   1fc0b:	e8 d6 0e 00 00       	call   20ae6 <__st>
   1fc10:	83 c4 10             	add    $0x10,%esp
   1fc13:	89 c2                	mov    %eax,%edx
   1fc15:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fc1a:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fc1e:	e8 91 0d 00 00       	call   209b4 <fpop>
			return;
   1fc23:	e9 f6 0c 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xda:                      // FCOMP ST(i)。
			fcom(PST(code & 7),PST(0));
   1fc28:	83 ec 0c             	sub    $0xc,%esp
   1fc2b:	6a 00                	push   $0x0
   1fc2d:	e8 b4 0e 00 00       	call   20ae6 <__st>
   1fc32:	83 c4 10             	add    $0x10,%esp
   1fc35:	89 c3                	mov    %eax,%ebx
   1fc37:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc3c:	83 e0 07             	and    $0x7,%eax
   1fc3f:	83 ec 0c             	sub    $0xc,%esp
   1fc42:	50                   	push   %eax
   1fc43:	e8 9e 0e 00 00       	call   20ae6 <__st>
   1fc48:	83 c4 10             	add    $0x10,%esp
   1fc4b:	83 ec 08             	sub    $0x8,%esp
   1fc4e:	53                   	push   %ebx
   1fc4f:	50                   	push   %eax
   1fc50:	e8 79 23 00 00       	call   21fce <fcom>
   1fc55:	83 c4 10             	add    $0x10,%esp
			fpop();
   1fc58:	e8 57 0d 00 00       	call   209b4 <fpop>
			return;
   1fc5d:	e9 bc 0c 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xdc:                      // FSUBRP ST(i)。
			ST(code & 7).exponent ^= 0x8000;
   1fc62:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc67:	83 e0 07             	and    $0x7,%eax
   1fc6a:	83 ec 0c             	sub    $0xc,%esp
   1fc6d:	50                   	push   %eax
   1fc6e:	e8 73 0e 00 00       	call   20ae6 <__st>
   1fc73:	83 c4 10             	add    $0x10,%esp
   1fc76:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1fc7a:	66 81 f2 00 80       	xor    $0x8000,%dx
   1fc7f:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(PST(0),PST(code & 7),&tmp);
   1fc83:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc88:	83 e0 07             	and    $0x7,%eax
   1fc8b:	83 ec 0c             	sub    $0xc,%esp
   1fc8e:	50                   	push   %eax
   1fc8f:	e8 52 0e 00 00       	call   20ae6 <__st>
   1fc94:	83 c4 10             	add    $0x10,%esp
   1fc97:	89 c3                	mov    %eax,%ebx
   1fc99:	83 ec 0c             	sub    $0xc,%esp
   1fc9c:	6a 00                	push   $0x0
   1fc9e:	e8 43 0e 00 00       	call   20ae6 <__st>
   1fca3:	83 c4 10             	add    $0x10,%esp
   1fca6:	89 c2                	mov    %eax,%edx
   1fca8:	83 ec 04             	sub    $0x4,%esp
   1fcab:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fcaf:	50                   	push   %eax
   1fcb0:	53                   	push   %ebx
   1fcb1:	52                   	push   %edx
   1fcb2:	e8 3f 1b 00 00       	call   217f6 <fadd>
   1fcb7:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fcba:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fcbe:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fcc3:	83 e0 07             	and    $0x7,%eax
   1fcc6:	83 ec 0c             	sub    $0xc,%esp
   1fcc9:	50                   	push   %eax
   1fcca:	e8 17 0e 00 00       	call   20ae6 <__st>
   1fccf:	83 c4 10             	add    $0x10,%esp
   1fcd2:	89 c1                	mov    %eax,%ecx
   1fcd4:	8b 03                	mov    (%ebx),%eax
   1fcd6:	8b 53 04             	mov    0x4(%ebx),%edx
   1fcd9:	89 01                	mov    %eax,(%ecx)
   1fcdb:	89 51 04             	mov    %edx,0x4(%ecx)
   1fcde:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fce3:	83 e0 07             	and    $0x7,%eax
   1fce6:	83 ec 0c             	sub    $0xc,%esp
   1fce9:	50                   	push   %eax
   1fcea:	e8 f7 0d 00 00       	call   20ae6 <__st>
   1fcef:	83 c4 10             	add    $0x10,%esp
   1fcf2:	89 c2                	mov    %eax,%edx
   1fcf4:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fcf9:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fcfd:	e8 b2 0c 00 00       	call   209b4 <fpop>
			return;
   1fd02:	e9 17 0c 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xdd:                      // FSUBP ST(I), ST。
			real_to_real(&ST(0),&tmp);
   1fd07:	83 ec 0c             	sub    $0xc,%esp
   1fd0a:	6a 00                	push   $0x0
   1fd0c:	e8 d5 0d 00 00       	call   20ae6 <__st>
   1fd11:	83 c4 10             	add    $0x10,%esp
   1fd14:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
   1fd18:	8b 50 04             	mov    0x4(%eax),%edx
   1fd1b:	8b 00                	mov    (%eax),%eax
   1fd1d:	89 01                	mov    %eax,(%ecx)
   1fd1f:	89 51 04             	mov    %edx,0x4(%ecx)
   1fd22:	83 ec 0c             	sub    $0xc,%esp
   1fd25:	6a 00                	push   $0x0
   1fd27:	e8 ba 0d 00 00       	call   20ae6 <__st>
   1fd2c:	83 c4 10             	add    $0x10,%esp
   1fd2f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1fd33:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			tmp.exponent ^= 0x8000;
   1fd38:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fd3d:	66 35 00 80          	xor    $0x8000,%ax
   1fd41:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(PST(code & 7),&tmp,&tmp);
   1fd46:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fd4b:	83 e0 07             	and    $0x7,%eax
   1fd4e:	83 ec 0c             	sub    $0xc,%esp
   1fd51:	50                   	push   %eax
   1fd52:	e8 8f 0d 00 00       	call   20ae6 <__st>
   1fd57:	83 c4 10             	add    $0x10,%esp
   1fd5a:	89 c2                	mov    %eax,%edx
   1fd5c:	83 ec 04             	sub    $0x4,%esp
   1fd5f:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fd63:	50                   	push   %eax
   1fd64:	8d 44 24 14          	lea    0x14(%esp),%eax
   1fd68:	50                   	push   %eax
   1fd69:	52                   	push   %edx
   1fd6a:	e8 87 1a 00 00       	call   217f6 <fadd>
   1fd6f:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fd72:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fd76:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fd7b:	83 e0 07             	and    $0x7,%eax
   1fd7e:	83 ec 0c             	sub    $0xc,%esp
   1fd81:	50                   	push   %eax
   1fd82:	e8 5f 0d 00 00       	call   20ae6 <__st>
   1fd87:	83 c4 10             	add    $0x10,%esp
   1fd8a:	89 c1                	mov    %eax,%ecx
   1fd8c:	8b 03                	mov    (%ebx),%eax
   1fd8e:	8b 53 04             	mov    0x4(%ebx),%edx
   1fd91:	89 01                	mov    %eax,(%ecx)
   1fd93:	89 51 04             	mov    %edx,0x4(%ecx)
   1fd96:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fd9b:	83 e0 07             	and    $0x7,%eax
   1fd9e:	83 ec 0c             	sub    $0xc,%esp
   1fda1:	50                   	push   %eax
   1fda2:	e8 3f 0d 00 00       	call   20ae6 <__st>
   1fda7:	83 c4 10             	add    $0x10,%esp
   1fdaa:	89 c2                	mov    %eax,%edx
   1fdac:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fdb1:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fdb5:	e8 fa 0b 00 00       	call   209b4 <fpop>
			return;
   1fdba:	e9 5f 0b 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xde:                      // FDIVRP ST(i), ST。
			fdiv(PST(0),PST(code & 7),&tmp);
   1fdbf:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fdc4:	83 e0 07             	and    $0x7,%eax
   1fdc7:	83 ec 0c             	sub    $0xc,%esp
   1fdca:	50                   	push   %eax
   1fdcb:	e8 16 0d 00 00       	call   20ae6 <__st>
   1fdd0:	83 c4 10             	add    $0x10,%esp
   1fdd3:	89 c3                	mov    %eax,%ebx
   1fdd5:	83 ec 0c             	sub    $0xc,%esp
   1fdd8:	6a 00                	push   $0x0
   1fdda:	e8 07 0d 00 00       	call   20ae6 <__st>
   1fddf:	83 c4 10             	add    $0x10,%esp
   1fde2:	89 c2                	mov    %eax,%edx
   1fde4:	83 ec 04             	sub    $0x4,%esp
   1fde7:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fdeb:	50                   	push   %eax
   1fdec:	53                   	push   %ebx
   1fded:	52                   	push   %edx
   1fdee:	e8 5a 1e 00 00       	call   21c4d <fdiv>
   1fdf3:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fdf6:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fdfa:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fdff:	83 e0 07             	and    $0x7,%eax
   1fe02:	83 ec 0c             	sub    $0xc,%esp
   1fe05:	50                   	push   %eax
   1fe06:	e8 db 0c 00 00       	call   20ae6 <__st>
   1fe0b:	83 c4 10             	add    $0x10,%esp
   1fe0e:	89 c1                	mov    %eax,%ecx
   1fe10:	8b 03                	mov    (%ebx),%eax
   1fe12:	8b 53 04             	mov    0x4(%ebx),%edx
   1fe15:	89 01                	mov    %eax,(%ecx)
   1fe17:	89 51 04             	mov    %edx,0x4(%ecx)
   1fe1a:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe1f:	83 e0 07             	and    $0x7,%eax
   1fe22:	83 ec 0c             	sub    $0xc,%esp
   1fe25:	50                   	push   %eax
   1fe26:	e8 bb 0c 00 00       	call   20ae6 <__st>
   1fe2b:	83 c4 10             	add    $0x10,%esp
   1fe2e:	89 c2                	mov    %eax,%edx
   1fe30:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fe35:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fe39:	e8 76 0b 00 00       	call   209b4 <fpop>
			return;
   1fe3e:	e9 db 0a 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xdf:                      // FDIVP ST(i), ST。
			fdiv(PST(code & 7),PST(0),&tmp);
   1fe43:	83 ec 0c             	sub    $0xc,%esp
   1fe46:	6a 00                	push   $0x0
   1fe48:	e8 99 0c 00 00       	call   20ae6 <__st>
   1fe4d:	83 c4 10             	add    $0x10,%esp
   1fe50:	89 c3                	mov    %eax,%ebx
   1fe52:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe57:	83 e0 07             	and    $0x7,%eax
   1fe5a:	83 ec 0c             	sub    $0xc,%esp
   1fe5d:	50                   	push   %eax
   1fe5e:	e8 83 0c 00 00       	call   20ae6 <__st>
   1fe63:	83 c4 10             	add    $0x10,%esp
   1fe66:	89 c2                	mov    %eax,%edx
   1fe68:	83 ec 04             	sub    $0x4,%esp
   1fe6b:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fe6f:	50                   	push   %eax
   1fe70:	53                   	push   %ebx
   1fe71:	52                   	push   %edx
   1fe72:	e8 d6 1d 00 00       	call   21c4d <fdiv>
   1fe77:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fe7a:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fe7e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe83:	83 e0 07             	and    $0x7,%eax
   1fe86:	83 ec 0c             	sub    $0xc,%esp
   1fe89:	50                   	push   %eax
   1fe8a:	e8 57 0c 00 00       	call   20ae6 <__st>
   1fe8f:	83 c4 10             	add    $0x10,%esp
   1fe92:	89 c1                	mov    %eax,%ecx
   1fe94:	8b 03                	mov    (%ebx),%eax
   1fe96:	8b 53 04             	mov    0x4(%ebx),%edx
   1fe99:	89 01                	mov    %eax,(%ecx)
   1fe9b:	89 51 04             	mov    %edx,0x4(%ecx)
   1fe9e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fea3:	83 e0 07             	and    $0x7,%eax
   1fea6:	83 ec 0c             	sub    $0xc,%esp
   1fea9:	50                   	push   %eax
   1feaa:	e8 37 0c 00 00       	call   20ae6 <__st>
   1feaf:	83 c4 10             	add    $0x10,%esp
   1feb2:	89 c2                	mov    %eax,%edx
   1feb4:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1feb9:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1febd:	e8 f2 0a 00 00       	call   209b4 <fpop>
			return;
   1fec2:	e9 57 0a 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xf8:                      // FFREE ST(i)。未实现。
			printk("ffree not implemented\n\r");
   1fec7:	83 ec 0c             	sub    $0xc,%esp
   1feca:	68 07 58 02 00       	push   $0x25807
   1fecf:	e8 6d 8d fe ff       	call   8c41 <printk>
   1fed4:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1fed7:	83 ec 08             	sub    $0x8,%esp
   1feda:	6a 08                	push   $0x8
   1fedc:	ff 74 24 3c          	pushl  0x3c(%esp)
   1fee0:	e8 a2 0a 00 00       	call   20987 <__math_abort>
   1fee5:	83 c4 10             	add    $0x10,%esp
			fpop();
   1fee8:	e8 c7 0a 00 00       	call   209b4 <fpop>
			return;
   1feed:	e9 2c 0a 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xf9:                      // FXCH ST(i)。
			fxchg(&ST(0),&ST(code & 7));
   1fef2:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fef7:	83 e0 07             	and    $0x7,%eax
   1fefa:	83 ec 0c             	sub    $0xc,%esp
   1fefd:	50                   	push   %eax
   1fefe:	e8 e3 0b 00 00       	call   20ae6 <__st>
   1ff03:	83 c4 10             	add    $0x10,%esp
   1ff06:	89 c3                	mov    %eax,%ebx
   1ff08:	83 ec 0c             	sub    $0xc,%esp
   1ff0b:	6a 00                	push   $0x0
   1ff0d:	e8 d4 0b 00 00       	call   20ae6 <__st>
   1ff12:	83 c4 10             	add    $0x10,%esp
   1ff15:	83 ec 08             	sub    $0x8,%esp
   1ff18:	53                   	push   %ebx
   1ff19:	50                   	push   %eax
   1ff1a:	e8 71 0b 00 00       	call   20a90 <fxchg>
   1ff1f:	83 c4 10             	add    $0x10,%esp
			return;
   1ff22:	e9 f7 09 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xfa:                      // FSTP ST(i)。
		case 0xfb:                      // FSTP ST(i)。
			ST(code & 7) = ST(0);
   1ff27:	83 ec 0c             	sub    $0xc,%esp
   1ff2a:	6a 00                	push   $0x0
   1ff2c:	e8 b5 0b 00 00       	call   20ae6 <__st>
   1ff31:	83 c4 10             	add    $0x10,%esp
   1ff34:	89 c3                	mov    %eax,%ebx
   1ff36:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ff3b:	83 e0 07             	and    $0x7,%eax
   1ff3e:	83 ec 0c             	sub    $0xc,%esp
   1ff41:	50                   	push   %eax
   1ff42:	e8 9f 0b 00 00       	call   20ae6 <__st>
   1ff47:	83 c4 10             	add    $0x10,%esp
   1ff4a:	8b 13                	mov    (%ebx),%edx
   1ff4c:	89 10                	mov    %edx,(%eax)
   1ff4e:	8b 53 04             	mov    0x4(%ebx),%edx
   1ff51:	89 50 04             	mov    %edx,0x4(%eax)
   1ff54:	0f b7 53 08          	movzwl 0x8(%ebx),%edx
   1ff58:	66 89 50 08          	mov    %dx,0x8(%eax)
			fpop();
   1ff5c:	e8 53 0a 00 00       	call   209b4 <fpop>
			return;
   1ff61:	e9 b8 09 00 00       	jmp    2091e <do_emu+0x1d5f>
	}
// 处理第2个字节位7--6是MOD、位2--0是R/M的指令，即11011,XXX，MOD，XXX，R/M形式的代码。MOD在各子程序中处理，因此这里首先
// 让代码与上0xe7（0b11100111）屏蔽掉MOD。
	switch ((code>>3) & 0xe7) {
   1ff66:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ff6b:	66 c1 e8 03          	shr    $0x3,%ax
   1ff6f:	0f b7 c0             	movzwl %ax,%eax
   1ff72:	25 e7 00 00 00       	and    $0xe7,%eax
   1ff77:	83 e8 22             	sub    $0x22,%eax
   1ff7a:	3d c5 00 00 00       	cmp    $0xc5,%eax
   1ff7f:	0f 87 a2 05 00 00    	ja     20527 <do_emu+0x1968>
   1ff85:	8b 04 85 04 5c 02 00 	mov    0x25c04(,%eax,4),%eax
   1ff8c:	ff e0                	jmp    *%eax
		case 0x22:
//			put_short_real(PST(0),info,code);
                    panic("kernel/math/math_emulate.c->do_emu(),394");
   1ff8e:	83 ec 0c             	sub    $0xc,%esp
   1ff91:	68 20 58 02 00       	push   $0x25820
   1ff96:	e8 67 8c fe ff       	call   8c02 <panic>
   1ff9b:	83 c4 10             	add    $0x10,%esp
			return;
   1ff9e:	e9 7b 09 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x23:                      // FSTP - 保存单精度实数（短实数）。
			put_short_real(PST(0),info,code);
   1ffa3:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   1ffa8:	83 ec 0c             	sub    $0xc,%esp
   1ffab:	6a 00                	push   $0x0
   1ffad:	e8 34 0b 00 00       	call   20ae6 <__st>
   1ffb2:	83 c4 10             	add    $0x10,%esp
   1ffb5:	83 ec 04             	sub    $0x4,%esp
   1ffb8:	53                   	push   %ebx
   1ffb9:	ff 74 24 38          	pushl  0x38(%esp)
   1ffbd:	50                   	push   %eax
   1ffbe:	e8 dc 12 00 00       	call   2129f <put_short_real>
   1ffc3:	83 c4 10             	add    $0x10,%esp
			fpop();
   1ffc6:	e8 e9 09 00 00       	call   209b4 <fpop>
			return;
   1ffcb:	e9 4e 09 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x24:                      // FLDENV - 加载协处理器状态和控制寄存器等。
			address = ea(info,code);
   1ffd0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ffd5:	83 ec 08             	sub    $0x8,%esp
   1ffd8:	50                   	push   %eax
   1ffd9:	ff 74 24 3c          	pushl  0x3c(%esp)
   1ffdd:	e8 b2 0c 00 00       	call   20c94 <ea>
   1ffe2:	83 c4 10             	add    $0x10,%esp
   1ffe5:	89 44 24 18          	mov    %eax,0x18(%esp)
			for (code = 0 ; code < 7 ; code++) {
   1ffe9:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   1fff0:	eb 3c                	jmp    2002e <do_emu+0x146f>
				((long *) & I387)[code] =
				   get_fs_long((unsigned long *) address);
   1fff2:	83 ec 0c             	sub    $0xc,%esp
   1fff5:	ff 74 24 24          	pushl  0x24(%esp)
   1fff9:	e8 82 eb ff ff       	call   1eb80 <get_fs_long>
   1fffe:	83 c4 10             	add    $0x10,%esp
   20001:	89 c1                	mov    %eax,%ecx
				((long *) & I387)[code] =
   20003:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20008:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   2000e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20013:	c1 e0 02             	shl    $0x2,%eax
   20016:	01 d0                	add    %edx,%eax
				   get_fs_long((unsigned long *) address);
   20018:	89 ca                	mov    %ecx,%edx
				((long *) & I387)[code] =
   2001a:	89 10                	mov    %edx,(%eax)
				address += 4;
   2001c:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			for (code = 0 ; code < 7 ; code++) {
   20021:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20026:	83 c0 01             	add    $0x1,%eax
   20029:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   2002e:	66 83 7c 24 1e 06    	cmpw   $0x6,0x1e(%esp)
   20034:	76 bc                	jbe    1fff2 <do_emu+0x1433>
			}
			return;
   20036:	e9 e3 08 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x25:                      // FLDCW - 加载控制字。
			address = ea(info,code);
   2003b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20040:	83 ec 08             	sub    $0x8,%esp
   20043:	50                   	push   %eax
   20044:	ff 74 24 3c          	pushl  0x3c(%esp)
   20048:	e8 47 0c 00 00       	call   20c94 <ea>
   2004d:	83 c4 10             	add    $0x10,%esp
   20050:	89 44 24 18          	mov    %eax,0x18(%esp)
			*(unsigned short *) &I387.cwd =
   20054:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20059:	8d 98 18 04 00 00    	lea    0x418(%eax),%ebx
				get_fs_word((unsigned short *) address);
   2005f:	83 ec 0c             	sub    $0xc,%esp
   20062:	ff 74 24 24          	pushl  0x24(%esp)
   20066:	e8 fc ea ff ff       	call   1eb67 <get_fs_word>
   2006b:	83 c4 10             	add    $0x10,%esp
			*(unsigned short *) &I387.cwd =
   2006e:	66 89 03             	mov    %ax,(%ebx)
			return;
   20071:	e9 a8 08 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x26:                      // FSTENV - 储存协处理器状态和控制寄存器等。
			address = ea(info,code);
   20076:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2007b:	83 ec 08             	sub    $0x8,%esp
   2007e:	50                   	push   %eax
   2007f:	ff 74 24 3c          	pushl  0x3c(%esp)
   20083:	e8 0c 0c 00 00       	call   20c94 <ea>
   20088:	83 c4 10             	add    $0x10,%esp
   2008b:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,28);
   2008f:	83 ec 08             	sub    $0x8,%esp
   20092:	6a 1c                	push   $0x1c
   20094:	ff 74 24 24          	pushl  0x24(%esp)
   20098:	e8 fe 82 fe ff       	call   839b <verify_area>
   2009d:	83 c4 10             	add    $0x10,%esp
			for (code = 0 ; code < 7 ; code++) {
   200a0:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   200a7:	eb 39                	jmp    200e2 <do_emu+0x1523>
				put_fs_long( ((long *) & I387)[code],
   200a9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   200ae:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   200b4:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   200b9:	c1 e0 02             	shl    $0x2,%eax
   200bc:	01 d0                	add    %edx,%eax
   200be:	8b 00                	mov    (%eax),%eax
   200c0:	83 ec 08             	sub    $0x8,%esp
   200c3:	ff 74 24 20          	pushl  0x20(%esp)
   200c7:	50                   	push   %eax
   200c8:	e8 e5 ea ff ff       	call   1ebb2 <put_fs_long>
   200cd:	83 c4 10             	add    $0x10,%esp
					(unsigned long *) address);
				address += 4;
   200d0:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			for (code = 0 ; code < 7 ; code++) {
   200d5:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   200da:	83 c0 01             	add    $0x1,%eax
   200dd:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   200e2:	66 83 7c 24 1e 06    	cmpw   $0x6,0x1e(%esp)
   200e8:	76 bf                	jbe    200a9 <do_emu+0x14ea>
			}
			return;
   200ea:	e9 2f 08 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x27:                      // FSTCW - 存储控制字。
			address = ea(info,code);
   200ef:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   200f4:	83 ec 08             	sub    $0x8,%esp
   200f7:	50                   	push   %eax
   200f8:	ff 74 24 3c          	pushl  0x3c(%esp)
   200fc:	e8 93 0b 00 00       	call   20c94 <ea>
   20101:	83 c4 10             	add    $0x10,%esp
   20104:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,2);
   20108:	83 ec 08             	sub    $0x8,%esp
   2010b:	6a 02                	push   $0x2
   2010d:	ff 74 24 24          	pushl  0x24(%esp)
   20111:	e8 85 82 fe ff       	call   839b <verify_area>
   20116:	83 c4 10             	add    $0x10,%esp
			put_fs_word(I387.cwd,(short *) address);
   20119:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2011e:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   20124:	98                   	cwtl   
   20125:	83 ec 08             	sub    $0x8,%esp
   20128:	ff 74 24 20          	pushl  0x20(%esp)
   2012c:	50                   	push   %eax
   2012d:	e8 64 ea ff ff       	call   1eb96 <put_fs_word>
   20132:	83 c4 10             	add    $0x10,%esp
			return;
   20135:	e9 e4 07 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x62:                      // FIST - 存储短整形数。
			put_long_int(PST(0),info,code);
   2013a:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   2013f:	83 ec 0c             	sub    $0xc,%esp
   20142:	6a 00                	push   $0x0
   20144:	e8 9d 09 00 00       	call   20ae6 <__st>
   20149:	83 c4 10             	add    $0x10,%esp
   2014c:	83 ec 04             	sub    $0x4,%esp
   2014f:	53                   	push   %ebx
   20150:	ff 74 24 38          	pushl  0x38(%esp)
   20154:	50                   	push   %eax
   20155:	e8 24 13 00 00       	call   2147e <put_long_int>
   2015a:	83 c4 10             	add    $0x10,%esp
			return;
   2015d:	e9 bc 07 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x63:                      // FISTP - 存储短整型数。
			put_long_int(PST(0),info,code);
   20162:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20167:	83 ec 0c             	sub    $0xc,%esp
   2016a:	6a 00                	push   $0x0
   2016c:	e8 75 09 00 00       	call   20ae6 <__st>
   20171:	83 c4 10             	add    $0x10,%esp
   20174:	83 ec 04             	sub    $0x4,%esp
   20177:	53                   	push   %ebx
   20178:	ff 74 24 38          	pushl  0x38(%esp)
   2017c:	50                   	push   %eax
   2017d:	e8 fc 12 00 00       	call   2147e <put_long_int>
   20182:	83 c4 10             	add    $0x10,%esp
			fpop();
   20185:	e8 2a 08 00 00       	call   209b4 <fpop>
			return;
   2018a:	e9 8f 07 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x65:                      // FLD - 加载扩展（临时）实数。
			fpush();
   2018f:	e8 8e 08 00 00       	call   20a22 <fpush>
			get_temp_real(&tmp,info,code);
   20194:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20199:	83 ec 04             	sub    $0x4,%esp
   2019c:	50                   	push   %eax
   2019d:	ff 74 24 38          	pushl  0x38(%esp)
   201a1:	8d 44 24 18          	lea    0x18(%esp),%eax
   201a5:	50                   	push   %eax
   201a6:	e8 b1 0d 00 00       	call   20f5c <get_temp_real>
   201ab:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   201ae:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   201b2:	83 ec 0c             	sub    $0xc,%esp
   201b5:	6a 00                	push   $0x0
   201b7:	e8 2a 09 00 00       	call   20ae6 <__st>
   201bc:	83 c4 10             	add    $0x10,%esp
   201bf:	89 c1                	mov    %eax,%ecx
   201c1:	8b 03                	mov    (%ebx),%eax
   201c3:	8b 53 04             	mov    0x4(%ebx),%edx
   201c6:	89 01                	mov    %eax,(%ecx)
   201c8:	89 51 04             	mov    %edx,0x4(%ecx)
   201cb:	83 ec 0c             	sub    $0xc,%esp
   201ce:	6a 00                	push   $0x0
   201d0:	e8 11 09 00 00       	call   20ae6 <__st>
   201d5:	83 c4 10             	add    $0x10,%esp
   201d8:	89 c2                	mov    %eax,%edx
   201da:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   201df:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   201e3:	e9 36 07 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0x67:                      // FSTP - 储存扩展实数。
			put_temp_real(PST(0),info,code);
   201e8:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   201ed:	83 ec 0c             	sub    $0xc,%esp
   201f0:	6a 00                	push   $0x0
   201f2:	e8 ef 08 00 00       	call   20ae6 <__st>
   201f7:	83 c4 10             	add    $0x10,%esp
   201fa:	83 ec 04             	sub    $0x4,%esp
   201fd:	53                   	push   %ebx
   201fe:	ff 74 24 38          	pushl  0x38(%esp)
   20202:	50                   	push   %eax
   20203:	e8 75 11 00 00       	call   2137d <put_temp_real>
   20208:	83 c4 10             	add    $0x10,%esp
			fpop();
   2020b:	e8 a4 07 00 00       	call   209b4 <fpop>
			return;
   20210:	e9 09 07 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xa2:                      // FST - 储存双精度实数。
			put_long_real(PST(0),info,code);
   20215:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   2021a:	83 ec 0c             	sub    $0xc,%esp
   2021d:	6a 00                	push   $0x0
   2021f:	e8 c2 08 00 00       	call   20ae6 <__st>
   20224:	83 c4 10             	add    $0x10,%esp
   20227:	83 ec 04             	sub    $0x4,%esp
   2022a:	53                   	push   %ebx
   2022b:	ff 74 24 38          	pushl  0x38(%esp)
   2022f:	50                   	push   %eax
   20230:	e8 cd 10 00 00       	call   21302 <put_long_real>
   20235:	83 c4 10             	add    $0x10,%esp
			return;
   20238:	e9 e1 06 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xa3:                      // FSTP - 存储双精度实数。
			put_long_real(PST(0),info,code);
   2023d:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20242:	83 ec 0c             	sub    $0xc,%esp
   20245:	6a 00                	push   $0x0
   20247:	e8 9a 08 00 00       	call   20ae6 <__st>
   2024c:	83 c4 10             	add    $0x10,%esp
   2024f:	83 ec 04             	sub    $0x4,%esp
   20252:	53                   	push   %ebx
   20253:	ff 74 24 38          	pushl  0x38(%esp)
   20257:	50                   	push   %eax
   20258:	e8 a5 10 00 00       	call   21302 <put_long_real>
   2025d:	83 c4 10             	add    $0x10,%esp
			fpop();
   20260:	e8 4f 07 00 00       	call   209b4 <fpop>
			return;
   20265:	e9 b4 06 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xa4:                      // FRSTOR - 恢复所有108字节的寄存器内容。
			address = ea(info,code);
   2026a:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2026f:	83 ec 08             	sub    $0x8,%esp
   20272:	50                   	push   %eax
   20273:	ff 74 24 3c          	pushl  0x3c(%esp)
   20277:	e8 18 0a 00 00       	call   20c94 <ea>
   2027c:	83 c4 10             	add    $0x10,%esp
   2027f:	89 44 24 18          	mov    %eax,0x18(%esp)
			for (code = 0 ; code < 27 ; code++) {
   20283:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   2028a:	eb 3c                	jmp    202c8 <do_emu+0x1709>
				((long *) & I387)[code] =
				   get_fs_long((unsigned long *) address);
   2028c:	83 ec 0c             	sub    $0xc,%esp
   2028f:	ff 74 24 24          	pushl  0x24(%esp)
   20293:	e8 e8 e8 ff ff       	call   1eb80 <get_fs_long>
   20298:	83 c4 10             	add    $0x10,%esp
   2029b:	89 c1                	mov    %eax,%ecx
				((long *) & I387)[code] =
   2029d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   202a2:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   202a8:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   202ad:	c1 e0 02             	shl    $0x2,%eax
   202b0:	01 d0                	add    %edx,%eax
				   get_fs_long((unsigned long *) address);
   202b2:	89 ca                	mov    %ecx,%edx
				((long *) & I387)[code] =
   202b4:	89 10                	mov    %edx,(%eax)
				address += 4;
   202b6:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			for (code = 0 ; code < 27 ; code++) {
   202bb:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   202c0:	83 c0 01             	add    $0x1,%eax
   202c3:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   202c8:	66 83 7c 24 1e 1a    	cmpw   $0x1a,0x1e(%esp)
   202ce:	76 bc                	jbe    2028c <do_emu+0x16cd>
			}
			return;
   202d0:	e9 49 06 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xa6:                      // FSAVE - 保存所有108字节寄存器内容。
			address = ea(info,code);
   202d5:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   202da:	83 ec 08             	sub    $0x8,%esp
   202dd:	50                   	push   %eax
   202de:	ff 74 24 3c          	pushl  0x3c(%esp)
   202e2:	e8 ad 09 00 00       	call   20c94 <ea>
   202e7:	83 c4 10             	add    $0x10,%esp
   202ea:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,108);
   202ee:	83 ec 08             	sub    $0x8,%esp
   202f1:	6a 6c                	push   $0x6c
   202f3:	ff 74 24 24          	pushl  0x24(%esp)
   202f7:	e8 9f 80 fe ff       	call   839b <verify_area>
   202fc:	83 c4 10             	add    $0x10,%esp
			for (code = 0 ; code < 27 ; code++) {
   202ff:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   20306:	eb 39                	jmp    20341 <do_emu+0x1782>
				put_fs_long( ((long *) & I387)[code],
   20308:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2030d:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   20313:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20318:	c1 e0 02             	shl    $0x2,%eax
   2031b:	01 d0                	add    %edx,%eax
   2031d:	8b 00                	mov    (%eax),%eax
   2031f:	83 ec 08             	sub    $0x8,%esp
   20322:	ff 74 24 20          	pushl  0x20(%esp)
   20326:	50                   	push   %eax
   20327:	e8 86 e8 ff ff       	call   1ebb2 <put_fs_long>
   2032c:	83 c4 10             	add    $0x10,%esp
					(unsigned long *) address);
				address += 4;
   2032f:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			for (code = 0 ; code < 27 ; code++) {
   20334:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20339:	83 c0 01             	add    $0x1,%eax
   2033c:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   20341:	66 83 7c 24 1e 1a    	cmpw   $0x1a,0x1e(%esp)
   20347:	76 bf                	jbe    20308 <do_emu+0x1749>
			}
			I387.cwd = 0x037f;
   20349:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2034e:	c7 80 18 04 00 00 7f 	movl   $0x37f,0x418(%eax)
   20355:	03 00 00 
			I387.swd = 0x0000;
   20358:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2035d:	c7 80 1c 04 00 00 00 	movl   $0x0,0x41c(%eax)
   20364:	00 00 00 
			I387.twd = 0x0000;
   20367:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2036c:	c7 80 20 04 00 00 00 	movl   $0x0,0x420(%eax)
   20373:	00 00 00 
			return;
   20376:	e9 a3 05 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xa7:                      // FSTSW - 保存状态状态字。
			address = ea(info,code);
   2037b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20380:	83 ec 08             	sub    $0x8,%esp
   20383:	50                   	push   %eax
   20384:	ff 74 24 3c          	pushl  0x3c(%esp)
   20388:	e8 07 09 00 00       	call   20c94 <ea>
   2038d:	83 c4 10             	add    $0x10,%esp
   20390:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,2);
   20394:	83 ec 08             	sub    $0x8,%esp
   20397:	6a 02                	push   $0x2
   20399:	ff 74 24 24          	pushl  0x24(%esp)
   2039d:	e8 f9 7f fe ff       	call   839b <verify_area>
   203a2:	83 c4 10             	add    $0x10,%esp
			put_fs_word(I387.swd,(short *) address);
   203a5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   203aa:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   203b0:	98                   	cwtl   
   203b1:	83 ec 08             	sub    $0x8,%esp
   203b4:	ff 74 24 20          	pushl  0x20(%esp)
   203b8:	50                   	push   %eax
   203b9:	e8 d8 e7 ff ff       	call   1eb96 <put_fs_word>
   203be:	83 c4 10             	add    $0x10,%esp
			return;
   203c1:	e9 58 05 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xe2:                      // FIST - 保存短整型数。
			put_short_int(PST(0),info,code);
   203c6:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   203cb:	83 ec 0c             	sub    $0xc,%esp
   203ce:	6a 00                	push   $0x0
   203d0:	e8 11 07 00 00       	call   20ae6 <__st>
   203d5:	83 c4 10             	add    $0x10,%esp
   203d8:	83 ec 04             	sub    $0x4,%esp
   203db:	53                   	push   %ebx
   203dc:	ff 74 24 38          	pushl  0x38(%esp)
   203e0:	50                   	push   %eax
   203e1:	e8 20 10 00 00       	call   21406 <put_short_int>
   203e6:	83 c4 10             	add    $0x10,%esp
			return;
   203e9:	e9 30 05 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xe3:                      // FISTP - 保存短整型数。
			put_short_int(PST(0),info,code);
   203ee:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   203f3:	83 ec 0c             	sub    $0xc,%esp
   203f6:	6a 00                	push   $0x0
   203f8:	e8 e9 06 00 00       	call   20ae6 <__st>
   203fd:	83 c4 10             	add    $0x10,%esp
   20400:	83 ec 04             	sub    $0x4,%esp
   20403:	53                   	push   %ebx
   20404:	ff 74 24 38          	pushl  0x38(%esp)
   20408:	50                   	push   %eax
   20409:	e8 f8 0f 00 00       	call   21406 <put_short_int>
   2040e:	83 c4 10             	add    $0x10,%esp
			fpop();
   20411:	e8 9e 05 00 00       	call   209b4 <fpop>
			return;
   20416:	e9 03 05 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xe4:                      // FBLD - 加载BCD类型数。
			fpush();
   2041b:	e8 02 06 00 00       	call   20a22 <fpush>
			get_BCD(&tmp,info,code);
   20420:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20425:	83 ec 04             	sub    $0x4,%esp
   20428:	50                   	push   %eax
   20429:	ff 74 24 38          	pushl  0x38(%esp)
   2042d:	8d 44 24 18          	lea    0x18(%esp),%eax
   20431:	50                   	push   %eax
   20432:	e8 33 0d 00 00       	call   2116a <get_BCD>
   20437:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   2043a:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   2043e:	83 ec 0c             	sub    $0xc,%esp
   20441:	6a 00                	push   $0x0
   20443:	e8 9e 06 00 00       	call   20ae6 <__st>
   20448:	83 c4 10             	add    $0x10,%esp
   2044b:	89 c1                	mov    %eax,%ecx
   2044d:	8b 03                	mov    (%ebx),%eax
   2044f:	8b 53 04             	mov    0x4(%ebx),%edx
   20452:	89 01                	mov    %eax,(%ecx)
   20454:	89 51 04             	mov    %edx,0x4(%ecx)
   20457:	83 ec 0c             	sub    $0xc,%esp
   2045a:	6a 00                	push   $0x0
   2045c:	e8 85 06 00 00       	call   20ae6 <__st>
   20461:	83 c4 10             	add    $0x10,%esp
   20464:	89 c2                	mov    %eax,%edx
   20466:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2046b:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   2046f:	e9 aa 04 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xe5:                      // FILD - 加载长整型数。
			fpush();
   20474:	e8 a9 05 00 00       	call   20a22 <fpush>
			get_longlong_int(&tmp,info,code);
   20479:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2047e:	83 ec 04             	sub    $0x4,%esp
   20481:	50                   	push   %eax
   20482:	ff 74 24 38          	pushl  0x38(%esp)
   20486:	8d 44 24 18          	lea    0x18(%esp),%eax
   2048a:	50                   	push   %eax
   2048b:	e8 3f 0c 00 00       	call   210cf <get_longlong_int>
   20490:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20493:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   20497:	83 ec 0c             	sub    $0xc,%esp
   2049a:	6a 00                	push   $0x0
   2049c:	e8 45 06 00 00       	call   20ae6 <__st>
   204a1:	83 c4 10             	add    $0x10,%esp
   204a4:	89 c1                	mov    %eax,%ecx
   204a6:	8b 03                	mov    (%ebx),%eax
   204a8:	8b 53 04             	mov    0x4(%ebx),%edx
   204ab:	89 01                	mov    %eax,(%ecx)
   204ad:	89 51 04             	mov    %edx,0x4(%ecx)
   204b0:	83 ec 0c             	sub    $0xc,%esp
   204b3:	6a 00                	push   $0x0
   204b5:	e8 2c 06 00 00       	call   20ae6 <__st>
   204ba:	83 c4 10             	add    $0x10,%esp
   204bd:	89 c2                	mov    %eax,%edx
   204bf:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   204c4:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   204c8:	e9 51 04 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xe6:                      // FBSTP - 保存BCD类型数。
			put_BCD(PST(0),info,code);
   204cd:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   204d2:	83 ec 0c             	sub    $0xc,%esp
   204d5:	6a 00                	push   $0x0
   204d7:	e8 0a 06 00 00       	call   20ae6 <__st>
   204dc:	83 c4 10             	add    $0x10,%esp
   204df:	83 ec 04             	sub    $0x4,%esp
   204e2:	53                   	push   %ebx
   204e3:	ff 74 24 38          	pushl  0x38(%esp)
   204e7:	50                   	push   %eax
   204e8:	e8 a7 10 00 00       	call   21594 <put_BCD>
   204ed:	83 c4 10             	add    $0x10,%esp
			fpop();
   204f0:	e8 bf 04 00 00       	call   209b4 <fpop>
			return;
   204f5:	e9 24 04 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 0xe7:                      // BISTP - 保存长整型数。
			put_longlong_int(PST(0),info,code);
   204fa:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   204ff:	83 ec 0c             	sub    $0xc,%esp
   20502:	6a 00                	push   $0x0
   20504:	e8 dd 05 00 00       	call   20ae6 <__st>
   20509:	83 c4 10             	add    $0x10,%esp
   2050c:	83 ec 04             	sub    $0x4,%esp
   2050f:	53                   	push   %ebx
   20510:	ff 74 24 38          	pushl  0x38(%esp)
   20514:	50                   	push   %eax
   20515:	e8 db 0f 00 00       	call   214f5 <put_longlong_int>
   2051a:	83 c4 10             	add    $0x10,%esp
			fpop();
   2051d:	e8 92 04 00 00       	call   209b4 <fpop>
			return;
   20522:	e9 f7 03 00 00       	jmp    2091e <do_emu+0x1d5f>
	}
// 下面处理第2类浮点指令。首先根据指令代码的位10--9的MF值取指定类型的数，然后根据OPA和OPB的组合值进行分别处理。即处理11011，
// MF，000,XXX，R/M形式的指令代码。
	switch (code >> 9) {
   20527:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2052c:	66 c1 e8 09          	shr    $0x9,%ax
   20530:	0f b7 c0             	movzwl %ax,%eax
   20533:	83 f8 01             	cmp    $0x1,%eax
   20536:	74 33                	je     2056b <do_emu+0x19ac>
   20538:	83 f8 01             	cmp    $0x1,%eax
   2053b:	7f 06                	jg     20543 <do_emu+0x1984>
   2053d:	85 c0                	test   %eax,%eax
   2053f:	74 0e                	je     2054f <do_emu+0x1990>
   20541:	eb 7a                	jmp    205bd <do_emu+0x19fe>
   20543:	83 f8 02             	cmp    $0x2,%eax
   20546:	74 3f                	je     20587 <do_emu+0x19c8>
   20548:	83 f8 04             	cmp    $0x4,%eax
   2054b:	74 56                	je     205a3 <do_emu+0x19e4>
   2054d:	eb 6e                	jmp    205bd <do_emu+0x19fe>
		case 0:                 // MF = 00，短实数（32位整数）。
			get_short_real(&tmp,info,code);
   2054f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20554:	83 ec 04             	sub    $0x4,%esp
   20557:	50                   	push   %eax
   20558:	ff 74 24 38          	pushl  0x38(%esp)
   2055c:	8d 44 24 18          	lea    0x18(%esp),%eax
   20560:	50                   	push   %eax
   20561:	e8 3d 09 00 00       	call   20ea3 <get_short_real>
   20566:	83 c4 10             	add    $0x10,%esp
			break;
   20569:	eb 52                	jmp    205bd <do_emu+0x19fe>
		case 1:                 // MF = 01，短整数（32位整数）。
			get_long_int(&tmp,info,code);
   2056b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20570:	83 ec 04             	sub    $0x4,%esp
   20573:	50                   	push   %eax
   20574:	ff 74 24 38          	pushl  0x38(%esp)
   20578:	8d 44 24 18          	lea    0x18(%esp),%eax
   2057c:	50                   	push   %eax
   2057d:	e8 d1 0a 00 00       	call   21053 <get_long_int>
   20582:	83 c4 10             	add    $0x10,%esp
			break;
   20585:	eb 36                	jmp    205bd <do_emu+0x19fe>
		case 2:                 // MF = 10，长实数（64位实数）。
			get_long_real(&tmp,info,code);
   20587:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2058c:	83 ec 04             	sub    $0x4,%esp
   2058f:	50                   	push   %eax
   20590:	ff 74 24 38          	pushl  0x38(%esp)
   20594:	8d 44 24 18          	lea    0x18(%esp),%eax
   20598:	50                   	push   %eax
   20599:	e8 56 09 00 00       	call   20ef4 <get_long_real>
   2059e:	83 c4 10             	add    $0x10,%esp
			break;
   205a1:	eb 1a                	jmp    205bd <do_emu+0x19fe>
		case 4:                 // MF = 11，长整数（64位整数）！应该是case 3。
			get_short_int(&tmp,info,code);
   205a3:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   205a8:	83 ec 04             	sub    $0x4,%esp
   205ab:	50                   	push   %eax
   205ac:	ff 74 24 38          	pushl  0x38(%esp)
   205b0:	8d 44 24 18          	lea    0x18(%esp),%eax
   205b4:	50                   	push   %eax
   205b5:	e8 1c 0a 00 00       	call   20fd6 <get_short_int>
   205ba:	83 c4 10             	add    $0x10,%esp
	}
	switch ((code>>3) & 0x27) {
   205bd:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   205c2:	66 c1 e8 03          	shr    $0x3,%ax
   205c6:	0f b7 c0             	movzwl %ax,%eax
   205c9:	83 e0 27             	and    $0x27,%eax
   205cc:	83 f8 07             	cmp    $0x7,%eax
   205cf:	0f 87 b6 02 00 00    	ja     2088b <do_emu+0x1ccc>
   205d5:	8b 04 85 1c 5f 02 00 	mov    0x25f1c(,%eax,4),%eax
   205dc:	ff e0                	jmp    *%eax
		case 0:                 // FADD。
			fadd(&tmp,PST(0),&tmp);
   205de:	83 ec 0c             	sub    $0xc,%esp
   205e1:	6a 00                	push   $0x0
   205e3:	e8 fe 04 00 00       	call   20ae6 <__st>
   205e8:	83 c4 10             	add    $0x10,%esp
   205eb:	89 c2                	mov    %eax,%edx
   205ed:	83 ec 04             	sub    $0x4,%esp
   205f0:	8d 44 24 10          	lea    0x10(%esp),%eax
   205f4:	50                   	push   %eax
   205f5:	52                   	push   %edx
   205f6:	8d 44 24 18          	lea    0x18(%esp),%eax
   205fa:	50                   	push   %eax
   205fb:	e8 f6 11 00 00       	call   217f6 <fadd>
   20600:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20603:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   20607:	83 ec 0c             	sub    $0xc,%esp
   2060a:	6a 00                	push   $0x0
   2060c:	e8 d5 04 00 00       	call   20ae6 <__st>
   20611:	83 c4 10             	add    $0x10,%esp
   20614:	89 c1                	mov    %eax,%ecx
   20616:	8b 03                	mov    (%ebx),%eax
   20618:	8b 53 04             	mov    0x4(%ebx),%edx
   2061b:	89 01                	mov    %eax,(%ecx)
   2061d:	89 51 04             	mov    %edx,0x4(%ecx)
   20620:	83 ec 0c             	sub    $0xc,%esp
   20623:	6a 00                	push   $0x0
   20625:	e8 bc 04 00 00       	call   20ae6 <__st>
   2062a:	83 c4 10             	add    $0x10,%esp
   2062d:	89 c2                	mov    %eax,%edx
   2062f:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   20634:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20638:	e9 e1 02 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 1:                 // FMUL。
			fmul(&tmp,PST(0),&tmp);
   2063d:	83 ec 0c             	sub    $0xc,%esp
   20640:	6a 00                	push   $0x0
   20642:	e8 9f 04 00 00       	call   20ae6 <__st>
   20647:	83 c4 10             	add    $0x10,%esp
   2064a:	89 c2                	mov    %eax,%edx
   2064c:	83 ec 04             	sub    $0x4,%esp
   2064f:	8d 44 24 10          	lea    0x10(%esp),%eax
   20653:	50                   	push   %eax
   20654:	52                   	push   %edx
   20655:	8d 44 24 18          	lea    0x18(%esp),%eax
   20659:	50                   	push   %eax
   2065a:	e8 61 13 00 00       	call   219c0 <fmul>
   2065f:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20662:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   20666:	83 ec 0c             	sub    $0xc,%esp
   20669:	6a 00                	push   $0x0
   2066b:	e8 76 04 00 00       	call   20ae6 <__st>
   20670:	83 c4 10             	add    $0x10,%esp
   20673:	89 c1                	mov    %eax,%ecx
   20675:	8b 03                	mov    (%ebx),%eax
   20677:	8b 53 04             	mov    0x4(%ebx),%edx
   2067a:	89 01                	mov    %eax,(%ecx)
   2067c:	89 51 04             	mov    %edx,0x4(%ecx)
   2067f:	83 ec 0c             	sub    $0xc,%esp
   20682:	6a 00                	push   $0x0
   20684:	e8 5d 04 00 00       	call   20ae6 <__st>
   20689:	83 c4 10             	add    $0x10,%esp
   2068c:	89 c2                	mov    %eax,%edx
   2068e:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   20693:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20697:	e9 82 02 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 2:                 // FCOM。
			fcom(&tmp,PST(0));
   2069c:	83 ec 0c             	sub    $0xc,%esp
   2069f:	6a 00                	push   $0x0
   206a1:	e8 40 04 00 00       	call   20ae6 <__st>
   206a6:	83 c4 10             	add    $0x10,%esp
   206a9:	83 ec 08             	sub    $0x8,%esp
   206ac:	50                   	push   %eax
   206ad:	8d 44 24 18          	lea    0x18(%esp),%eax
   206b1:	50                   	push   %eax
   206b2:	e8 17 19 00 00       	call   21fce <fcom>
   206b7:	83 c4 10             	add    $0x10,%esp
			return;
   206ba:	e9 5f 02 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 3:                 // FCOMP。
			fcom(&tmp,PST(0));
   206bf:	83 ec 0c             	sub    $0xc,%esp
   206c2:	6a 00                	push   $0x0
   206c4:	e8 1d 04 00 00       	call   20ae6 <__st>
   206c9:	83 c4 10             	add    $0x10,%esp
   206cc:	83 ec 08             	sub    $0x8,%esp
   206cf:	50                   	push   %eax
   206d0:	8d 44 24 18          	lea    0x18(%esp),%eax
   206d4:	50                   	push   %eax
   206d5:	e8 f4 18 00 00       	call   21fce <fcom>
   206da:	83 c4 10             	add    $0x10,%esp
			fpop();
   206dd:	e8 d2 02 00 00       	call   209b4 <fpop>
			return;
   206e2:	e9 37 02 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 4:                 // FSUB。
			tmp.exponent ^= 0x8000;
   206e7:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   206ec:	66 35 00 80          	xor    $0x8000,%ax
   206f0:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(&tmp,PST(0),&tmp);
   206f5:	83 ec 0c             	sub    $0xc,%esp
   206f8:	6a 00                	push   $0x0
   206fa:	e8 e7 03 00 00       	call   20ae6 <__st>
   206ff:	83 c4 10             	add    $0x10,%esp
   20702:	89 c2                	mov    %eax,%edx
   20704:	83 ec 04             	sub    $0x4,%esp
   20707:	8d 44 24 10          	lea    0x10(%esp),%eax
   2070b:	50                   	push   %eax
   2070c:	52                   	push   %edx
   2070d:	8d 44 24 18          	lea    0x18(%esp),%eax
   20711:	50                   	push   %eax
   20712:	e8 df 10 00 00       	call   217f6 <fadd>
   20717:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   2071a:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   2071e:	83 ec 0c             	sub    $0xc,%esp
   20721:	6a 00                	push   $0x0
   20723:	e8 be 03 00 00       	call   20ae6 <__st>
   20728:	83 c4 10             	add    $0x10,%esp
   2072b:	89 c1                	mov    %eax,%ecx
   2072d:	8b 03                	mov    (%ebx),%eax
   2072f:	8b 53 04             	mov    0x4(%ebx),%edx
   20732:	89 01                	mov    %eax,(%ecx)
   20734:	89 51 04             	mov    %edx,0x4(%ecx)
   20737:	83 ec 0c             	sub    $0xc,%esp
   2073a:	6a 00                	push   $0x0
   2073c:	e8 a5 03 00 00       	call   20ae6 <__st>
   20741:	83 c4 10             	add    $0x10,%esp
   20744:	89 c2                	mov    %eax,%edx
   20746:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2074b:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   2074f:	e9 ca 01 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 5:                 // FSUBR。
			ST(0).exponent ^= 0x8000;
   20754:	83 ec 0c             	sub    $0xc,%esp
   20757:	6a 00                	push   $0x0
   20759:	e8 88 03 00 00       	call   20ae6 <__st>
   2075e:	83 c4 10             	add    $0x10,%esp
   20761:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   20765:	66 81 f2 00 80       	xor    $0x8000,%dx
   2076a:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(&tmp,PST(0),&tmp);
   2076e:	83 ec 0c             	sub    $0xc,%esp
   20771:	6a 00                	push   $0x0
   20773:	e8 6e 03 00 00       	call   20ae6 <__st>
   20778:	83 c4 10             	add    $0x10,%esp
   2077b:	89 c2                	mov    %eax,%edx
   2077d:	83 ec 04             	sub    $0x4,%esp
   20780:	8d 44 24 10          	lea    0x10(%esp),%eax
   20784:	50                   	push   %eax
   20785:	52                   	push   %edx
   20786:	8d 44 24 18          	lea    0x18(%esp),%eax
   2078a:	50                   	push   %eax
   2078b:	e8 66 10 00 00       	call   217f6 <fadd>
   20790:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20793:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   20797:	83 ec 0c             	sub    $0xc,%esp
   2079a:	6a 00                	push   $0x0
   2079c:	e8 45 03 00 00       	call   20ae6 <__st>
   207a1:	83 c4 10             	add    $0x10,%esp
   207a4:	89 c1                	mov    %eax,%ecx
   207a6:	8b 03                	mov    (%ebx),%eax
   207a8:	8b 53 04             	mov    0x4(%ebx),%edx
   207ab:	89 01                	mov    %eax,(%ecx)
   207ad:	89 51 04             	mov    %edx,0x4(%ecx)
   207b0:	83 ec 0c             	sub    $0xc,%esp
   207b3:	6a 00                	push   $0x0
   207b5:	e8 2c 03 00 00       	call   20ae6 <__st>
   207ba:	83 c4 10             	add    $0x10,%esp
   207bd:	89 c2                	mov    %eax,%edx
   207bf:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   207c4:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   207c8:	e9 51 01 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 6:                 // FDIV。
			fdiv(PST(0),&tmp,&tmp);
   207cd:	83 ec 0c             	sub    $0xc,%esp
   207d0:	6a 00                	push   $0x0
   207d2:	e8 0f 03 00 00       	call   20ae6 <__st>
   207d7:	83 c4 10             	add    $0x10,%esp
   207da:	89 c2                	mov    %eax,%edx
   207dc:	83 ec 04             	sub    $0x4,%esp
   207df:	8d 44 24 10          	lea    0x10(%esp),%eax
   207e3:	50                   	push   %eax
   207e4:	8d 44 24 14          	lea    0x14(%esp),%eax
   207e8:	50                   	push   %eax
   207e9:	52                   	push   %edx
   207ea:	e8 5e 14 00 00       	call   21c4d <fdiv>
   207ef:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   207f2:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   207f6:	83 ec 0c             	sub    $0xc,%esp
   207f9:	6a 00                	push   $0x0
   207fb:	e8 e6 02 00 00       	call   20ae6 <__st>
   20800:	83 c4 10             	add    $0x10,%esp
   20803:	89 c1                	mov    %eax,%ecx
   20805:	8b 03                	mov    (%ebx),%eax
   20807:	8b 53 04             	mov    0x4(%ebx),%edx
   2080a:	89 01                	mov    %eax,(%ecx)
   2080c:	89 51 04             	mov    %edx,0x4(%ecx)
   2080f:	83 ec 0c             	sub    $0xc,%esp
   20812:	6a 00                	push   $0x0
   20814:	e8 cd 02 00 00       	call   20ae6 <__st>
   20819:	83 c4 10             	add    $0x10,%esp
   2081c:	89 c2                	mov    %eax,%edx
   2081e:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   20823:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20827:	e9 f2 00 00 00       	jmp    2091e <do_emu+0x1d5f>
		case 7:                 // FDIVR。
			fdiv(&tmp,PST(0),&tmp);
   2082c:	83 ec 0c             	sub    $0xc,%esp
   2082f:	6a 00                	push   $0x0
   20831:	e8 b0 02 00 00       	call   20ae6 <__st>
   20836:	83 c4 10             	add    $0x10,%esp
   20839:	89 c2                	mov    %eax,%edx
   2083b:	83 ec 04             	sub    $0x4,%esp
   2083e:	8d 44 24 10          	lea    0x10(%esp),%eax
   20842:	50                   	push   %eax
   20843:	52                   	push   %edx
   20844:	8d 44 24 18          	lea    0x18(%esp),%eax
   20848:	50                   	push   %eax
   20849:	e8 ff 13 00 00       	call   21c4d <fdiv>
   2084e:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20851:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   20855:	83 ec 0c             	sub    $0xc,%esp
   20858:	6a 00                	push   $0x0
   2085a:	e8 87 02 00 00       	call   20ae6 <__st>
   2085f:	83 c4 10             	add    $0x10,%esp
   20862:	89 c1                	mov    %eax,%ecx
   20864:	8b 03                	mov    (%ebx),%eax
   20866:	8b 53 04             	mov    0x4(%ebx),%edx
   20869:	89 01                	mov    %eax,(%ecx)
   2086b:	89 51 04             	mov    %edx,0x4(%ecx)
   2086e:	83 ec 0c             	sub    $0xc,%esp
   20871:	6a 00                	push   $0x0
   20873:	e8 6e 02 00 00       	call   20ae6 <__st>
   20878:	83 c4 10             	add    $0x10,%esp
   2087b:	89 c2                	mov    %eax,%edx
   2087d:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   20882:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20886:	e9 93 00 00 00       	jmp    2091e <do_emu+0x1d5f>
	}
// 处理形如11011,XX,1,XX，000,R/M的指令代码。
	if ((code & 0x138) == 0x100) {
   2088b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20890:	25 38 01 00 00       	and    $0x138,%eax
   20895:	3d 00 01 00 00       	cmp    $0x100,%eax
   2089a:	75 3c                	jne    208d8 <do_emu+0x1d19>
			fpush();
   2089c:	e8 81 01 00 00       	call   20a22 <fpush>
			real_to_real(&tmp,&ST(0));
   208a1:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   208a5:	83 ec 0c             	sub    $0xc,%esp
   208a8:	6a 00                	push   $0x0
   208aa:	e8 37 02 00 00       	call   20ae6 <__st>
   208af:	83 c4 10             	add    $0x10,%esp
   208b2:	89 c1                	mov    %eax,%ecx
   208b4:	8b 03                	mov    (%ebx),%eax
   208b6:	8b 53 04             	mov    0x4(%ebx),%edx
   208b9:	89 01                	mov    %eax,(%ecx)
   208bb:	89 51 04             	mov    %edx,0x4(%ecx)
   208be:	83 ec 0c             	sub    $0xc,%esp
   208c1:	6a 00                	push   $0x0
   208c3:	e8 1e 02 00 00       	call   20ae6 <__st>
   208c8:	83 c4 10             	add    $0x10,%esp
   208cb:	89 c2                	mov    %eax,%edx
   208cd:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   208d2:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   208d6:	eb 46                	jmp    2091e <do_emu+0x1d5f>
	}
// 其余均为无效指令。
	printk("Unknown math-insns: %04x:%08x %04x\n\r",CS,EIP,code);
   208d8:	0f b7 4c 24 1e       	movzwl 0x1e(%esp),%ecx
   208dd:	8b 44 24 30          	mov    0x30(%esp),%eax
   208e1:	8b 50 38             	mov    0x38(%eax),%edx
   208e4:	8b 44 24 30          	mov    0x30(%esp),%eax
   208e8:	83 c0 3c             	add    $0x3c,%eax
   208eb:	0f b7 00             	movzwl (%eax),%eax
   208ee:	0f b7 c0             	movzwl %ax,%eax
   208f1:	51                   	push   %ecx
   208f2:	52                   	push   %edx
   208f3:	50                   	push   %eax
   208f4:	68 4c 58 02 00       	push   $0x2584c
   208f9:	e8 43 83 fe ff       	call   8c41 <printk>
   208fe:	83 c4 10             	add    $0x10,%esp
	math_abort(info,1<<(SIGFPE-1));
   20901:	83 ec 08             	sub    $0x8,%esp
   20904:	68 80 00 00 00       	push   $0x80
   20909:	ff 74 24 3c          	pushl  0x3c(%esp)
   2090d:	e8 75 00 00 00       	call   20987 <__math_abort>
   20912:	83 c4 10             	add    $0x10,%esp
   20915:	eb 07                	jmp    2091e <do_emu+0x1d5f>
			return;
   20917:	90                   	nop
   20918:	eb 04                	jmp    2091e <do_emu+0x1d5f>
			return;
   2091a:	90                   	nop
   2091b:	eb 01                	jmp    2091e <do_emu+0x1d5f>
			return;
   2091d:	90                   	nop
}
   2091e:	83 c4 28             	add    $0x28,%esp
   20921:	5b                   	pop    %ebx
   20922:	c3                   	ret    

00020923 <math_emulate>:
// CPU异常中断int 7调用的80387仿真接口函数。
// 若当前进程没有使用过协处理器，就设置使用协处理器标志used_math，然后初始化80387的控制字、状态字和特征字。最后使用中断
// int 7调用本函数的返回地址指针作为参数调用浮点指令仿真主函数do_emu()。
// 参数____false是_orig_eip。
void math_emulate(long ___false)
{
   20923:	83 ec 0c             	sub    $0xc,%esp
	if (!current->used_math) {
   20926:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2092b:	0f b7 80 28 03 00 00 	movzwl 0x328(%eax),%eax
   20932:	66 85 c0             	test   %ax,%ax
   20935:	75 3b                	jne    20972 <math_emulate+0x4f>
		current->used_math = 1;
   20937:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2093c:	66 c7 80 28 03 00 00 	movw   $0x1,0x328(%eax)
   20943:	01 00 
		I387.cwd = 0x037f;
   20945:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2094a:	c7 80 18 04 00 00 7f 	movl   $0x37f,0x418(%eax)
   20951:	03 00 00 
		I387.swd = 0x0000;
   20954:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20959:	c7 80 1c 04 00 00 00 	movl   $0x0,0x41c(%eax)
   20960:	00 00 00 
		I387.twd = 0x0000;
   20963:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20968:	c7 80 20 04 00 00 00 	movl   $0x0,0x420(%eax)
   2096f:	00 00 00 
	}
/* &___false points to info->___orig_eip, so subtract 1 to get info */
	do_emu((struct info *) ((&___false) - 1));
   20972:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20976:	83 ec 0c             	sub    $0xc,%esp
   20979:	50                   	push   %eax
   2097a:	e8 40 e2 ff ff       	call   1ebbf <do_emu>
   2097f:	83 c4 10             	add    $0x10,%esp
}
   20982:	90                   	nop
   20983:	83 c4 0c             	add    $0xc,%esp
   20986:	c3                   	ret    

00020987 <__math_abort>:
// 终止仿真操作。
// 当处理到无效指令代码或者未实现的指令代码时，该函数首先恢复程序的原EIP，并发送指定信号给当前进程。最后将栈指针指向中断
// int 7处理过程调用本函数的返回地址，直接返回到中断处理过程中。
void __math_abort(struct info * info, unsigned int signal)
{
	EIP = ORIG_EIP;
   20987:	8b 44 24 04          	mov    0x4(%esp),%eax
   2098b:	8b 50 04             	mov    0x4(%eax),%edx
   2098e:	8b 44 24 04          	mov    0x4(%esp),%eax
   20992:	89 50 38             	mov    %edx,0x38(%eax)
	current->signal |= signal;
   20995:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2099a:	8b 40 0c             	mov    0xc(%eax),%eax
   2099d:	0b 44 24 08          	or     0x8(%esp),%eax
   209a1:	89 c2                	mov    %eax,%edx
   209a3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   209a8:	89 50 0c             	mov    %edx,0xc(%eax)
	__asm__("movl %0,%%esp ; ret"::"g" ((long) info));
   209ab:	8b 44 24 04          	mov    0x4(%esp),%eax
   209af:	89 c4                	mov    %eax,%esp
   209b1:	c3                   	ret    
}
   209b2:	90                   	nop
   209b3:	c3                   	ret    

000209b4 <fpop>:

// 累加器栈弹出操作。
// 将状态字TOP字段值加1，并以7取模。
static void fpop(void)
{
   209b4:	83 ec 10             	sub    $0x10,%esp
	unsigned long tmp;

	tmp = I387.swd & 0xffffc7ff;
   209b7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   209bc:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   209c2:	80 e4 c7             	and    $0xc7,%ah
   209c5:	89 44 24 0c          	mov    %eax,0xc(%esp)
	I387.swd += 0x00000800;
   209c9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   209ce:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   209d4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   209d9:	81 c2 00 08 00 00    	add    $0x800,%edx
   209df:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd &= 0x00003800;
   209e5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   209ea:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   209f0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   209f5:	81 e2 00 38 00 00    	and    $0x3800,%edx
   209fb:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd |= tmp;
   20a01:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a06:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20a0c:	0b 44 24 0c          	or     0xc(%esp),%eax
   20a10:	89 c2                	mov    %eax,%edx
   20a12:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a17:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
}
   20a1d:	90                   	nop
   20a1e:	83 c4 10             	add    $0x10,%esp
   20a21:	c3                   	ret    

00020a22 <fpush>:

// 累加器栈入栈操作。
// 将状态字TOP字段减1（即加7），并以7取模。
static void fpush(void)
{
   20a22:	83 ec 10             	sub    $0x10,%esp
	unsigned long tmp;

	tmp = I387.swd & 0xffffc7ff;
   20a25:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a2a:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20a30:	80 e4 c7             	and    $0xc7,%ah
   20a33:	89 44 24 0c          	mov    %eax,0xc(%esp)
	I387.swd += 0x00003800;
   20a37:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a3c:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   20a42:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a47:	81 c2 00 38 00 00    	add    $0x3800,%edx
   20a4d:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd &= 0x00003800;
   20a53:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a58:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   20a5e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a63:	81 e2 00 38 00 00    	and    $0x3800,%edx
   20a69:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd |= tmp;
   20a6f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a74:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20a7a:	0b 44 24 0c          	or     0xc(%esp),%eax
   20a7e:	89 c2                	mov    %eax,%edx
   20a80:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a85:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
}
   20a8b:	90                   	nop
   20a8c:	83 c4 10             	add    $0x10,%esp
   20a8f:	c3                   	ret    

00020a90 <fxchg>:

// 交换两个累加器的值。
static void fxchg(temp_real_unaligned * a, temp_real_unaligned * b)
{
   20a90:	83 ec 10             	sub    $0x10,%esp
	temp_real_unaligned c;

	c = *a;
   20a93:	8b 44 24 14          	mov    0x14(%esp),%eax
   20a97:	8b 10                	mov    (%eax),%edx
   20a99:	89 54 24 06          	mov    %edx,0x6(%esp)
   20a9d:	8b 50 04             	mov    0x4(%eax),%edx
   20aa0:	89 54 24 0a          	mov    %edx,0xa(%esp)
   20aa4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   20aa8:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	*a = *b;
   20aad:	8b 44 24 14          	mov    0x14(%esp),%eax
   20ab1:	8b 54 24 18          	mov    0x18(%esp),%edx
   20ab5:	8b 0a                	mov    (%edx),%ecx
   20ab7:	89 08                	mov    %ecx,(%eax)
   20ab9:	8b 4a 04             	mov    0x4(%edx),%ecx
   20abc:	89 48 04             	mov    %ecx,0x4(%eax)
   20abf:	0f b7 52 08          	movzwl 0x8(%edx),%edx
   20ac3:	66 89 50 08          	mov    %dx,0x8(%eax)
	*b = c;
   20ac7:	8b 44 24 18          	mov    0x18(%esp),%eax
   20acb:	8b 54 24 06          	mov    0x6(%esp),%edx
   20acf:	89 10                	mov    %edx,(%eax)
   20ad1:	8b 54 24 0a          	mov    0xa(%esp),%edx
   20ad5:	89 50 04             	mov    %edx,0x4(%eax)
   20ad8:	0f b7 54 24 0e       	movzwl 0xe(%esp),%edx
   20add:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   20ae1:	90                   	nop
   20ae2:	83 c4 10             	add    $0x10,%esp
   20ae5:	c3                   	ret    

00020ae6 <__st>:

// 取ST(i)的内存指针。
// 取状态字中TOP字段值。加上指定的物理数据寄存器号并取模，最后返回ST(i)对应的指针。
static temp_real_unaligned * __st(int i)
{
	i += I387.swd >> 11;            // 取状态字中TOP字段值。
   20ae6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20aeb:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20af1:	c1 f8 0b             	sar    $0xb,%eax
   20af4:	01 44 24 04          	add    %eax,0x4(%esp)
	i &= 7;
   20af8:	83 64 24 04 07       	andl   $0x7,0x4(%esp)
	return (temp_real_unaligned *) (i*10 + (char *)(I387.st_space));
   20afd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20b02:	8d 88 34 04 00 00    	lea    0x434(%eax),%ecx
   20b08:	8b 54 24 04          	mov    0x4(%esp),%edx
   20b0c:	89 d0                	mov    %edx,%eax
   20b0e:	c1 e0 02             	shl    $0x2,%eax
   20b11:	01 d0                	add    %edx,%eax
   20b13:	01 c0                	add    %eax,%eax
   20b15:	01 c8                	add    %ecx,%eax
   20b17:	c3                   	ret    

00020b18 <math_error>:
// 协处理器错误中断int 16调用的处理函数。
// 当协处理器检测到自己发生错误时，就会通过ERROR引脚通知CPU。下面代码用于处理协处理器发出的出错信号。并跳转去执行math_error()
// 返回后将跳转到标号ret_from_sys_call处继续执行。
void math_error(void)
{
	__asm__("fnclex");              // 让80387清除状态字中所有异常标志位和忙位。
   20b18:	db e2                	fnclex 
	if (last_task_used_math)        // 若使用了协处理器，则设置协处理器出错信号。
   20b1a:	a1 0c fb 02 00       	mov    0x2fb0c,%eax
   20b1f:	85 c0                	test   %eax,%eax
   20b21:	74 13                	je     20b36 <math_error+0x1e>
		last_task_used_math->signal |= 1<<(SIGFPE-1);
   20b23:	a1 0c fb 02 00       	mov    0x2fb0c,%eax
   20b28:	8b 50 0c             	mov    0xc(%eax),%edx
   20b2b:	a1 0c fb 02 00       	mov    0x2fb0c,%eax
   20b30:	80 ca 80             	or     $0x80,%dl
   20b33:	89 50 0c             	mov    %edx,0xc(%eax)
}
   20b36:	90                   	nop
   20b37:	c3                   	ret    

00020b38 <get_fs_byte>:
{
   20b38:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   20b39:	8b 44 24 08          	mov    0x8(%esp),%eax
   20b3d:	64 8a 00             	mov    %fs:(%eax),%al
   20b40:	89 c3                	mov    %eax,%ebx
	return _v;
   20b42:	89 d8                	mov    %ebx,%eax
}
   20b44:	5b                   	pop    %ebx
   20b45:	c3                   	ret    

00020b46 <get_fs_long>:
{
   20b46:	83 ec 10             	sub    $0x10,%esp
	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   20b49:	8b 44 24 14          	mov    0x14(%esp),%eax
   20b4d:	64 8b 00             	mov    %fs:(%eax),%eax
   20b50:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   20b54:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   20b58:	83 c4 10             	add    $0x10,%esp
   20b5b:	c3                   	ret    

00020b5c <sib>:
// 取info结构中指定位置处寄存器内容。
#define REG(x) (*(long *)(__regoffset[(x)]+(char *) info))

// 求2字节寻址模式中第2操作数指示字节SIB（Scale, Index, Base）的值。
static char * sib(struct info * info, int mod)
{
   20b5c:	83 ec 10             	sub    $0x10,%esp
	unsigned char ss,index,base;
	long offset = 0;
   20b5f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   20b66:	00 

// 首先从用户代码段中取得SIB字节，然后取出各个字段位值。
	base = get_fs_byte((char *) EIP);
   20b67:	8b 44 24 14          	mov    0x14(%esp),%eax
   20b6b:	8b 40 38             	mov    0x38(%eax),%eax
   20b6e:	50                   	push   %eax
   20b6f:	e8 c4 ff ff ff       	call   20b38 <get_fs_byte>
   20b74:	83 c4 04             	add    $0x4,%esp
   20b77:	88 44 24 0b          	mov    %al,0xb(%esp)
	EIP++;
   20b7b:	8b 44 24 14          	mov    0x14(%esp),%eax
   20b7f:	8b 40 38             	mov    0x38(%eax),%eax
   20b82:	8d 50 01             	lea    0x1(%eax),%edx
   20b85:	8b 44 24 14          	mov    0x14(%esp),%eax
   20b89:	89 50 38             	mov    %edx,0x38(%eax)
	ss = base >> 6;                 // 比例因子大小ss。
   20b8c:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   20b91:	c0 e8 06             	shr    $0x6,%al
   20b94:	88 44 24 0a          	mov    %al,0xa(%esp)
	index = (base >> 3) & 7;        // 索引值索引代号index。
   20b98:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   20b9d:	c0 e8 03             	shr    $0x3,%al
   20ba0:	83 e0 07             	and    $0x7,%eax
   20ba3:	88 44 24 09          	mov    %al,0x9(%esp)
	base &= 7;                      // 基地址代号base。
   20ba7:	80 64 24 0b 07       	andb   $0x7,0xb(%esp)
// 如果索引代号为0b100，表示无索引偏移值。否则索引偏移值offset=对应寄存器内容×比例因子。
	if (index == 4)
   20bac:	80 7c 24 09 04       	cmpb   $0x4,0x9(%esp)
   20bb1:	75 0a                	jne    20bbd <sib+0x61>
		offset = 0;
   20bb3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   20bba:	00 
   20bbb:	eb 1a                	jmp    20bd7 <sib+0x7b>
	else
		offset = REG(index);
   20bbd:	0f b6 44 24 09       	movzbl 0x9(%esp),%eax
   20bc2:	8b 04 85 80 f5 02 00 	mov    0x2f580(,%eax,4),%eax
   20bc9:	89 c2                	mov    %eax,%edx
   20bcb:	8b 44 24 14          	mov    0x14(%esp),%eax
   20bcf:	01 d0                	add    %edx,%eax
   20bd1:	8b 00                	mov    (%eax),%eax
   20bd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	offset <<= ss;
   20bd7:	0f b6 44 24 0a       	movzbl 0xa(%esp),%eax
   20bdc:	89 c1                	mov    %eax,%ecx
   20bde:	d3 64 24 0c          	shll   %cl,0xc(%esp)
// 如果上一MODRM字节中的MOD不为零，或者Base不等于0b101，则表示有偏移值在base指定的寄存器中。因此偏移offset需要再加上base
// 对应寄存器中的内容。
	if (mod || base != 5)
   20be2:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   20be7:	75 07                	jne    20bf0 <sib+0x94>
   20be9:	80 7c 24 0b 05       	cmpb   $0x5,0xb(%esp)
   20bee:	74 1a                	je     20c0a <sib+0xae>
		offset += REG(base);
   20bf0:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   20bf5:	8b 04 85 80 f5 02 00 	mov    0x2f580(,%eax,4),%eax
   20bfc:	89 c2                	mov    %eax,%edx
   20bfe:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c02:	01 d0                	add    %edx,%eax
   20c04:	8b 00                	mov    (%eax),%eax
   20c06:	01 44 24 0c          	add    %eax,0xc(%esp)
// 如果MOD=1，则表示偏移值为1字节。否则，若MOD=2，或者base=0b101，则偏移值为4字节。
	if (mod == 1) {
   20c0a:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   20c0f:	75 2a                	jne    20c3b <sib+0xdf>
		offset += (signed char) get_fs_byte((char *) EIP);
   20c11:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c15:	8b 40 38             	mov    0x38(%eax),%eax
   20c18:	50                   	push   %eax
   20c19:	e8 1a ff ff ff       	call   20b38 <get_fs_byte>
   20c1e:	83 c4 04             	add    $0x4,%esp
   20c21:	0f be c0             	movsbl %al,%eax
   20c24:	01 44 24 0c          	add    %eax,0xc(%esp)
		EIP++;
   20c28:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c2c:	8b 40 38             	mov    0x38(%eax),%eax
   20c2f:	8d 50 01             	lea    0x1(%eax),%edx
   20c32:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c36:	89 50 38             	mov    %edx,0x38(%eax)
   20c39:	eb 33                	jmp    20c6e <sib+0x112>
	} else if (mod == 2 || base == 5) {
   20c3b:	83 7c 24 18 02       	cmpl   $0x2,0x18(%esp)
   20c40:	74 07                	je     20c49 <sib+0xed>
   20c42:	80 7c 24 0b 05       	cmpb   $0x5,0xb(%esp)
   20c47:	75 25                	jne    20c6e <sib+0x112>
		offset += (signed) get_fs_long((unsigned long *) EIP);
   20c49:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c4d:	8b 40 38             	mov    0x38(%eax),%eax
   20c50:	50                   	push   %eax
   20c51:	e8 f0 fe ff ff       	call   20b46 <get_fs_long>
   20c56:	83 c4 04             	add    $0x4,%esp
   20c59:	01 44 24 0c          	add    %eax,0xc(%esp)
		EIP += 4;
   20c5d:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c61:	8b 40 38             	mov    0x38(%eax),%eax
   20c64:	8d 50 04             	lea    0x4(%eax),%edx
   20c67:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c6b:	89 50 38             	mov    %edx,0x38(%eax)
	}
// 最后保存并返回偏移值。
	I387.foo = offset;
   20c6e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20c73:	8b 54 24 0c          	mov    0xc(%esp),%edx
   20c77:	89 90 2c 04 00 00    	mov    %edx,0x42c(%eax)
	I387.fos = 0x17;
   20c7d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20c82:	c7 80 30 04 00 00 17 	movl   $0x17,0x430(%eax)
   20c89:	00 00 00 
	return (char *) offset;
   20c8c:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   20c90:	83 c4 10             	add    $0x10,%esp
   20c93:	c3                   	ret    

00020c94 <ea>:

// 根据指令中寻址模式字节计算有效地址值。
char * ea(struct info * info, unsigned short code)
{
   20c94:	83 ec 2c             	sub    $0x2c,%esp
   20c97:	8b 44 24 34          	mov    0x34(%esp),%eax
   20c9b:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	unsigned char mod,rm;
	long * tmp = &EAX;
   20ca0:	8b 44 24 30          	mov    0x30(%esp),%eax
   20ca4:	83 c0 18             	add    $0x18,%eax
   20ca7:	89 44 24 18          	mov    %eax,0x18(%esp)
	int offset = 0;
   20cab:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   20cb2:	00 

// 首先取代码中的MOD字段和R/M字段值。如果MOD=0b11，表示是单字节指令，没有偏移字段。如果R/M字段=0b100，并且MOD不为0b11，
// 表示是2字节地址模式寻址，因此调用sib()求出偏移值并返回即可。
	mod = (code >> 6) & 3;          // MOD字段。
   20cb3:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20cb8:	66 c1 e8 06          	shr    $0x6,%ax
   20cbc:	83 e0 03             	and    $0x3,%eax
   20cbf:	88 44 24 17          	mov    %al,0x17(%esp)
	rm = code & 7;                  // R/M字段。
   20cc3:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20cc8:	83 e0 07             	and    $0x7,%eax
   20ccb:	88 44 24 16          	mov    %al,0x16(%esp)
	if (rm == 4 && mod != 3)
   20ccf:	80 7c 24 16 04       	cmpb   $0x4,0x16(%esp)
   20cd4:	75 1e                	jne    20cf4 <ea+0x60>
   20cd6:	80 7c 24 17 03       	cmpb   $0x3,0x17(%esp)
   20cdb:	74 17                	je     20cf4 <ea+0x60>
		return sib(info,mod);
   20cdd:	0f b6 44 24 17       	movzbl 0x17(%esp),%eax
   20ce2:	50                   	push   %eax
   20ce3:	ff 74 24 34          	pushl  0x34(%esp)
   20ce7:	e8 70 fe ff ff       	call   20b5c <sib>
   20cec:	83 c4 08             	add    $0x8,%esp
   20cef:	e9 2b 01 00 00       	jmp    20e1f <ea+0x18b>
// 如果R/M字段为0b101，并且MOD为0，表示是单字节地址模式编码且后随32字节偏移值。于是取出用户代码中4字节偏移值，保存并返回
// 之。
	if (rm == 5 && !mod) {
   20cf4:	80 7c 24 16 05       	cmpb   $0x5,0x16(%esp)
   20cf9:	75 53                	jne    20d4e <ea+0xba>
   20cfb:	80 7c 24 17 00       	cmpb   $0x0,0x17(%esp)
   20d00:	75 4c                	jne    20d4e <ea+0xba>
		offset = get_fs_long((unsigned long *) EIP);
   20d02:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d06:	8b 40 38             	mov    0x38(%eax),%eax
   20d09:	50                   	push   %eax
   20d0a:	e8 37 fe ff ff       	call   20b46 <get_fs_long>
   20d0f:	83 c4 04             	add    $0x4,%esp
   20d12:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		EIP += 4;
   20d16:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d1a:	8b 40 38             	mov    0x38(%eax),%eax
   20d1d:	8d 50 04             	lea    0x4(%eax),%edx
   20d20:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d24:	89 50 38             	mov    %edx,0x38(%eax)
		I387.foo = offset;
   20d27:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20d2c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   20d30:	89 90 2c 04 00 00    	mov    %edx,0x42c(%eax)
		I387.fos = 0x17;
   20d36:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20d3b:	c7 80 30 04 00 00 17 	movl   $0x17,0x430(%eax)
   20d42:	00 00 00 
		return (char *) offset;
   20d45:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20d49:	e9 d1 00 00 00       	jmp    20e1f <ea+0x18b>
	}
// 对于其余情况，则根据MOD进行处理。首先取出R/M代码对应寄存器内容的值作为指针tmp。对于MOD=0，无偏移值。对于MOD=1，代码后
// 随1字节偏移值。对于MOD=2，代码后有4字节偏移值。最后保存并返回有效地址值。
	tmp = & REG(rm);
   20d4e:	0f b6 44 24 16       	movzbl 0x16(%esp),%eax
   20d53:	8b 04 85 80 f5 02 00 	mov    0x2f580(,%eax,4),%eax
   20d5a:	89 c2                	mov    %eax,%edx
   20d5c:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d60:	01 d0                	add    %edx,%eax
   20d62:	89 44 24 18          	mov    %eax,0x18(%esp)
	switch (mod) {
   20d66:	0f b6 44 24 17       	movzbl 0x17(%esp),%eax
   20d6b:	83 f8 01             	cmp    $0x1,%eax
   20d6e:	74 21                	je     20d91 <ea+0xfd>
   20d70:	83 f8 01             	cmp    $0x1,%eax
   20d73:	7f 06                	jg     20d7b <ea+0xe7>
   20d75:	85 c0                	test   %eax,%eax
   20d77:	74 0e                	je     20d87 <ea+0xf3>
   20d79:	eb 78                	jmp    20df3 <ea+0x15f>
   20d7b:	83 f8 02             	cmp    $0x2,%eax
   20d7e:	74 3b                	je     20dbb <ea+0x127>
   20d80:	83 f8 03             	cmp    $0x3,%eax
   20d83:	74 5d                	je     20de2 <ea+0x14e>
   20d85:	eb 6c                	jmp    20df3 <ea+0x15f>
		case 0: offset = 0; break;
   20d87:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   20d8e:	00 
   20d8f:	eb 62                	jmp    20df3 <ea+0x15f>
		case 1:
			offset = (signed char) get_fs_byte((char *) EIP);
   20d91:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d95:	8b 40 38             	mov    0x38(%eax),%eax
   20d98:	50                   	push   %eax
   20d99:	e8 9a fd ff ff       	call   20b38 <get_fs_byte>
   20d9e:	83 c4 04             	add    $0x4,%esp
   20da1:	0f be c0             	movsbl %al,%eax
   20da4:	89 44 24 1c          	mov    %eax,0x1c(%esp)
			EIP++;
   20da8:	8b 44 24 30          	mov    0x30(%esp),%eax
   20dac:	8b 40 38             	mov    0x38(%eax),%eax
   20daf:	8d 50 01             	lea    0x1(%eax),%edx
   20db2:	8b 44 24 30          	mov    0x30(%esp),%eax
   20db6:	89 50 38             	mov    %edx,0x38(%eax)
			break;
   20db9:	eb 38                	jmp    20df3 <ea+0x15f>
		case 2:
			offset = (signed) get_fs_long((unsigned long *) EIP);
   20dbb:	8b 44 24 30          	mov    0x30(%esp),%eax
   20dbf:	8b 40 38             	mov    0x38(%eax),%eax
   20dc2:	50                   	push   %eax
   20dc3:	e8 7e fd ff ff       	call   20b46 <get_fs_long>
   20dc8:	83 c4 04             	add    $0x4,%esp
   20dcb:	89 44 24 1c          	mov    %eax,0x1c(%esp)
			EIP += 4;
   20dcf:	8b 44 24 30          	mov    0x30(%esp),%eax
   20dd3:	8b 40 38             	mov    0x38(%eax),%eax
   20dd6:	8d 50 04             	lea    0x4(%eax),%edx
   20dd9:	8b 44 24 30          	mov    0x30(%esp),%eax
   20ddd:	89 50 38             	mov    %edx,0x38(%eax)
			break;
   20de0:	eb 11                	jmp    20df3 <ea+0x15f>
		case 3:
			math_abort(info,1<<(SIGILL-1));
   20de2:	83 ec 08             	sub    $0x8,%esp
   20de5:	6a 08                	push   $0x8
   20de7:	ff 74 24 3c          	pushl  0x3c(%esp)
   20deb:	e8 97 fb ff ff       	call   20987 <__math_abort>
   20df0:	83 c4 10             	add    $0x10,%esp
	}
	I387.foo = offset;
   20df3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20df8:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   20dfc:	89 90 2c 04 00 00    	mov    %edx,0x42c(%eax)
	I387.fos = 0x17;
   20e02:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20e07:	c7 80 30 04 00 00 17 	movl   $0x17,0x430(%eax)
   20e0e:	00 00 00 
	return offset + (char *) *tmp;
   20e11:	8b 44 24 18          	mov    0x18(%esp),%eax
   20e15:	8b 00                	mov    (%eax),%eax
   20e17:	89 c2                	mov    %eax,%edx
   20e19:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20e1d:	01 d0                	add    %edx,%eax
}
   20e1f:	83 c4 2c             	add    $0x2c,%esp
   20e22:	c3                   	ret    

00020e23 <get_fs_byte>:
{
   20e23:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   20e24:	8b 44 24 08          	mov    0x8(%esp),%eax
   20e28:	64 8a 00             	mov    %fs:(%eax),%al
   20e2b:	89 c3                	mov    %eax,%ebx
	return _v;
   20e2d:	89 d8                	mov    %ebx,%eax
}
   20e2f:	5b                   	pop    %ebx
   20e30:	c3                   	ret    

00020e31 <get_fs_word>:
{
   20e31:	83 ec 10             	sub    $0x10,%esp
	__asm__ ("movw %%fs:%1,%0":"=q" (_v):"m" (*addr));
   20e34:	8b 44 24 14          	mov    0x14(%esp),%eax
   20e38:	64 66 8b 00          	mov    %fs:(%eax),%ax
   20e3c:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   20e41:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   20e46:	83 c4 10             	add    $0x10,%esp
   20e49:	c3                   	ret    

00020e4a <get_fs_long>:
{
   20e4a:	83 ec 10             	sub    $0x10,%esp
	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   20e4d:	8b 44 24 14          	mov    0x14(%esp),%eax
   20e51:	64 8b 00             	mov    %fs:(%eax),%eax
   20e54:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   20e58:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   20e5c:	83 c4 10             	add    $0x10,%esp
   20e5f:	c3                   	ret    

00020e60 <put_fs_byte>:
{
   20e60:	83 ec 04             	sub    $0x4,%esp
   20e63:	8b 44 24 08          	mov    0x8(%esp),%eax
   20e67:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   20e6a:	0f b6 04 24          	movzbl (%esp),%eax
   20e6e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   20e72:	64 88 02             	mov    %al,%fs:(%edx)
}
   20e75:	90                   	nop
   20e76:	83 c4 04             	add    $0x4,%esp
   20e79:	c3                   	ret    

00020e7a <put_fs_word>:
{
   20e7a:	83 ec 04             	sub    $0x4,%esp
   20e7d:	8b 44 24 08          	mov    0x8(%esp),%eax
   20e81:	66 89 04 24          	mov    %ax,(%esp)
__asm__ ("movw %0,%%fs:%1"::"q" (val),"m" (*addr));
   20e85:	0f b7 04 24          	movzwl (%esp),%eax
   20e89:	8b 54 24 0c          	mov    0xc(%esp),%edx
   20e8d:	64 66 89 02          	mov    %ax,%fs:(%edx)
}
   20e91:	90                   	nop
   20e92:	83 c4 04             	add    $0x4,%esp
   20e95:	c3                   	ret    

00020e96 <put_fs_long>:
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   20e96:	8b 44 24 04          	mov    0x4(%esp),%eax
   20e9a:	8b 54 24 08          	mov    0x8(%esp),%edx
   20e9e:	64 89 02             	mov    %eax,%fs:(%edx)
}
   20ea1:	90                   	nop
   20ea2:	c3                   	ret    

00020ea3 <get_short_real>:
// 根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得短实数所在有效地址（math/ea.c），然后从用户
// 数据区读取相应实数值。最后把用户短实数转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_short_real(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20ea3:	83 ec 2c             	sub    $0x2c,%esp
   20ea6:	8b 44 24 38          	mov    0x38(%esp),%eax
   20eaa:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	short_real sr;

	addr = ea(info,code);                           // 计算有效地址。
   20eaf:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20eb4:	83 ec 08             	sub    $0x8,%esp
   20eb7:	50                   	push   %eax
   20eb8:	ff 74 24 40          	pushl  0x40(%esp)
   20ebc:	e8 d3 fd ff ff       	call   20c94 <ea>
   20ec1:	83 c4 10             	add    $0x10,%esp
   20ec4:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	sr = get_fs_long((unsigned long *) addr);       // 取用户数据区中的值。
   20ec8:	83 ec 0c             	sub    $0xc,%esp
   20ecb:	ff 74 24 28          	pushl  0x28(%esp)
   20ecf:	e8 76 ff ff ff       	call   20e4a <get_fs_long>
   20ed4:	83 c4 10             	add    $0x10,%esp
   20ed7:	89 44 24 18          	mov    %eax,0x18(%esp)
	short_to_temp(&sr,tmp);                         // 转换成临时实数格式。
   20edb:	83 ec 08             	sub    $0x8,%esp
   20ede:	ff 74 24 38          	pushl  0x38(%esp)
   20ee2:	8d 44 24 24          	lea    0x24(%esp),%eax
   20ee6:	50                   	push   %eax
   20ee7:	e8 54 11 00 00       	call   22040 <short_to_temp>
   20eec:	83 c4 10             	add    $0x10,%esp
}
   20eef:	90                   	nop
   20ef0:	83 c4 2c             	add    $0x2c,%esp
   20ef3:	c3                   	ret    

00020ef4 <get_long_real>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得长实数所在有效地址（math/ec.c），然后从
// 用户数据区读取相应实数值。最后把用户实数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_long_real(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20ef4:	83 ec 2c             	sub    $0x2c,%esp
   20ef7:	8b 44 24 38          	mov    0x38(%esp),%eax
   20efb:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	long_real lr;

	addr = ea(info,code);                           // 取指令中的有效地址。
   20f00:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20f05:	83 ec 08             	sub    $0x8,%esp
   20f08:	50                   	push   %eax
   20f09:	ff 74 24 40          	pushl  0x40(%esp)
   20f0d:	e8 82 fd ff ff       	call   20c94 <ea>
   20f12:	83 c4 10             	add    $0x10,%esp
   20f15:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	lr.a = get_fs_long((unsigned long *) addr);     // 取长8字节实数。
   20f19:	83 ec 0c             	sub    $0xc,%esp
   20f1c:	ff 74 24 28          	pushl  0x28(%esp)
   20f20:	e8 25 ff ff ff       	call   20e4a <get_fs_long>
   20f25:	83 c4 10             	add    $0x10,%esp
   20f28:	89 44 24 14          	mov    %eax,0x14(%esp)
	lr.b = get_fs_long(1 + (unsigned long *) addr); // 转换成临时实数格式。
   20f2c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20f30:	83 c0 04             	add    $0x4,%eax
   20f33:	83 ec 0c             	sub    $0xc,%esp
   20f36:	50                   	push   %eax
   20f37:	e8 0e ff ff ff       	call   20e4a <get_fs_long>
   20f3c:	83 c4 10             	add    $0x10,%esp
   20f3f:	89 44 24 18          	mov    %eax,0x18(%esp)
	long_to_temp(&lr,tmp);
   20f43:	83 ec 08             	sub    $0x8,%esp
   20f46:	ff 74 24 38          	pushl  0x38(%esp)
   20f4a:	8d 44 24 20          	lea    0x20(%esp),%eax
   20f4e:	50                   	push   %eax
   20f4f:	e8 8f 11 00 00       	call   220e3 <long_to_temp>
   20f54:	83 c4 10             	add    $0x10,%esp
}
   20f57:	90                   	nop
   20f58:	83 c4 2c             	add    $0x2c,%esp
   20f5b:	c3                   	ret    

00020f5c <get_temp_real>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得临时实数所在有效地址（math/ea.c），然后
// 从用户数据区读取相应临时实数值。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_temp_real(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20f5c:	83 ec 2c             	sub    $0x2c,%esp
   20f5f:	8b 44 24 38          	mov    0x38(%esp),%eax
   20f63:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;

	addr = ea(info,code);           // 取指令中的有效地址值。
   20f68:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20f6d:	83 ec 08             	sub    $0x8,%esp
   20f70:	50                   	push   %eax
   20f71:	ff 74 24 40          	pushl  0x40(%esp)
   20f75:	e8 1a fd ff ff       	call   20c94 <ea>
   20f7a:	83 c4 10             	add    $0x10,%esp
   20f7d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	tmp->a = get_fs_long((unsigned long *) addr);
   20f81:	83 ec 0c             	sub    $0xc,%esp
   20f84:	ff 74 24 28          	pushl  0x28(%esp)
   20f88:	e8 bd fe ff ff       	call   20e4a <get_fs_long>
   20f8d:	83 c4 10             	add    $0x10,%esp
   20f90:	89 c2                	mov    %eax,%edx
   20f92:	8b 44 24 30          	mov    0x30(%esp),%eax
   20f96:	89 10                	mov    %edx,(%eax)
	tmp->b = get_fs_long(1 + (unsigned long *) addr);
   20f98:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20f9c:	83 c0 04             	add    $0x4,%eax
   20f9f:	83 ec 0c             	sub    $0xc,%esp
   20fa2:	50                   	push   %eax
   20fa3:	e8 a2 fe ff ff       	call   20e4a <get_fs_long>
   20fa8:	83 c4 10             	add    $0x10,%esp
   20fab:	89 c2                	mov    %eax,%edx
   20fad:	8b 44 24 30          	mov    0x30(%esp),%eax
   20fb1:	89 50 04             	mov    %edx,0x4(%eax)
	tmp->exponent = get_fs_word(4 + (unsigned short *) addr);
   20fb4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20fb8:	83 c0 08             	add    $0x8,%eax
   20fbb:	83 ec 0c             	sub    $0xc,%esp
   20fbe:	50                   	push   %eax
   20fbf:	e8 6d fe ff ff       	call   20e31 <get_fs_word>
   20fc4:	83 c4 10             	add    $0x10,%esp
   20fc7:	89 c2                	mov    %eax,%edx
   20fc9:	8b 44 24 30          	mov    0x30(%esp),%eax
   20fcd:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   20fd1:	90                   	nop
   20fd2:	83 c4 2c             	add    $0x2c,%esp
   20fd5:	c3                   	ret    

00020fd6 <get_short_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得短整数所在有效地址（math/ea.c）
// 然后从用户数据区读取相应整数值，并保存为临时整数格式。最后把临时整数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_short_int(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20fd6:	83 ec 2c             	sub    $0x2c,%esp
   20fd9:	8b 44 24 38          	mov    0x38(%esp),%eax
   20fdd:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取指令中的有效地址值。
   20fe2:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20fe7:	83 ec 08             	sub    $0x8,%esp
   20fea:	50                   	push   %eax
   20feb:	ff 74 24 40          	pushl  0x40(%esp)
   20fef:	e8 a0 fc ff ff       	call   20c94 <ea>
   20ff4:	83 c4 10             	add    $0x10,%esp
   20ff7:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	ti.a = (signed short) get_fs_word((unsigned short *) addr);
   20ffb:	83 ec 0c             	sub    $0xc,%esp
   20ffe:	ff 74 24 28          	pushl  0x28(%esp)
   21002:	e8 2a fe ff ff       	call   20e31 <get_fs_word>
   21007:	83 c4 10             	add    $0x10,%esp
   2100a:	98                   	cwtl   
   2100b:	89 44 24 10          	mov    %eax,0x10(%esp)
	ti.b = 0;
   2100f:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   21016:	00 
	if (ti.sign = (ti.a < 0))       // 若是负数，则设置临时整数符号位。
   21017:	8b 44 24 10          	mov    0x10(%esp),%eax
   2101b:	c1 e8 1f             	shr    $0x1f,%eax
   2101e:	0f b6 c0             	movzbl %al,%eax
   21021:	66 89 44 24 18       	mov    %ax,0x18(%esp)
   21026:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   2102b:	66 85 c0             	test   %ax,%ax
   2102e:	74 0a                	je     2103a <get_short_int+0x64>
		ti.a = - ti.a;          // 临时整数“尾数”部分为无符号数。
   21030:	8b 44 24 10          	mov    0x10(%esp),%eax
   21034:	f7 d8                	neg    %eax
   21036:	89 44 24 10          	mov    %eax,0x10(%esp)
	int_to_real(&ti,tmp);           // 把临时整数转换成临时实数格式。
   2103a:	83 ec 08             	sub    $0x8,%esp
   2103d:	ff 74 24 38          	pushl  0x38(%esp)
   21041:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   21045:	50                   	push   %eax
   21046:	e8 42 16 00 00       	call   2268d <int_to_real>
   2104b:	83 c4 10             	add    $0x10,%esp
}
   2104e:	90                   	nop
   2104f:	83 c4 2c             	add    $0x2c,%esp
   21052:	c3                   	ret    

00021053 <get_long_int>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得长整数所在有效地址（math/ea.c），然后从
// 用户数据区读取相应整数值，并保存为临时整数格式。最后把临时整数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_long_int(temp_real * tmp,
	struct info * info, unsigned short code)
{
   21053:	83 ec 2c             	sub    $0x2c,%esp
   21056:	8b 44 24 38          	mov    0x38(%esp),%eax
   2105a:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取指令中的有效地址值。
   2105f:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21064:	83 ec 08             	sub    $0x8,%esp
   21067:	50                   	push   %eax
   21068:	ff 74 24 40          	pushl  0x40(%esp)
   2106c:	e8 23 fc ff ff       	call   20c94 <ea>
   21071:	83 c4 10             	add    $0x10,%esp
   21074:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	ti.a = get_fs_long((unsigned long *) addr);
   21078:	83 ec 0c             	sub    $0xc,%esp
   2107b:	ff 74 24 28          	pushl  0x28(%esp)
   2107f:	e8 c6 fd ff ff       	call   20e4a <get_fs_long>
   21084:	83 c4 10             	add    $0x10,%esp
   21087:	89 44 24 10          	mov    %eax,0x10(%esp)
	ti.b = 0;
   2108b:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   21092:	00 
	if (ti.sign = (ti.a < 0))       // 若是负数，则设置临时整数符号位。
   21093:	8b 44 24 10          	mov    0x10(%esp),%eax
   21097:	c1 e8 1f             	shr    $0x1f,%eax
   2109a:	0f b6 c0             	movzbl %al,%eax
   2109d:	66 89 44 24 18       	mov    %ax,0x18(%esp)
   210a2:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   210a7:	66 85 c0             	test   %ax,%ax
   210aa:	74 0a                	je     210b6 <get_long_int+0x63>
		ti.a = - ti.a;          // 临时整数“尾数”部分为无符号数。
   210ac:	8b 44 24 10          	mov    0x10(%esp),%eax
   210b0:	f7 d8                	neg    %eax
   210b2:	89 44 24 10          	mov    %eax,0x10(%esp)
	int_to_real(&ti,tmp);           // 把临时整数转换成临时实数格式。
   210b6:	83 ec 08             	sub    $0x8,%esp
   210b9:	ff 74 24 38          	pushl  0x38(%esp)
   210bd:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   210c1:	50                   	push   %eax
   210c2:	e8 c6 15 00 00       	call   2268d <int_to_real>
   210c7:	83 c4 10             	add    $0x10,%esp
}
   210ca:	90                   	nop
   210cb:	83 c4 2c             	add    $0x2c,%esp
   210ce:	c3                   	ret    

000210cf <get_longlong_int>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得64位长整数所有有效地址（math/ea.c），
// 然后从用户数据区读取相应整数值，并保存为临时整数格式。最后再把临时整数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_longlong_int(temp_real * tmp,
	struct info * info, unsigned short code)
{
   210cf:	83 ec 2c             	sub    $0x2c,%esp
   210d2:	8b 44 24 38          	mov    0x38(%esp),%eax
   210d6:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);                           // 取指令中的有效地址值。
   210db:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   210e0:	83 ec 08             	sub    $0x8,%esp
   210e3:	50                   	push   %eax
   210e4:	ff 74 24 40          	pushl  0x40(%esp)
   210e8:	e8 a7 fb ff ff       	call   20c94 <ea>
   210ed:	83 c4 10             	add    $0x10,%esp
   210f0:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	ti.a = get_fs_long((unsigned long *) addr);     // 取用户64位长整数。
   210f4:	83 ec 0c             	sub    $0xc,%esp
   210f7:	ff 74 24 28          	pushl  0x28(%esp)
   210fb:	e8 4a fd ff ff       	call   20e4a <get_fs_long>
   21100:	83 c4 10             	add    $0x10,%esp
   21103:	89 44 24 10          	mov    %eax,0x10(%esp)
	ti.b = get_fs_long(1 + (unsigned long *) addr);
   21107:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2110b:	83 c0 04             	add    $0x4,%eax
   2110e:	83 ec 0c             	sub    $0xc,%esp
   21111:	50                   	push   %eax
   21112:	e8 33 fd ff ff       	call   20e4a <get_fs_long>
   21117:	83 c4 10             	add    $0x10,%esp
   2111a:	89 44 24 14          	mov    %eax,0x14(%esp)
	if (ti.sign = (ti.b < 0))                       // 若是负数则设置临时整数符号位。
   2111e:	8b 44 24 14          	mov    0x14(%esp),%eax
   21122:	c1 e8 1f             	shr    $0x1f,%eax
   21125:	0f b6 c0             	movzbl %al,%eax
   21128:	66 89 44 24 18       	mov    %ax,0x18(%esp)
   2112d:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   21132:	66 85 c0             	test   %ax,%ax
   21135:	74 1a                	je     21151 <get_longlong_int+0x82>
		__asm__("notl %0 ; notl %1\n\t"         // 同时取反加1和进位调整。
			"addl $1,%0 ; adcl $0,%1"
			:"=r" (ti.a),"=r" (ti.b)
			:"0" (ti.a),"1" (ti.b));
   21137:	8b 54 24 10          	mov    0x10(%esp),%edx
   2113b:	8b 44 24 14          	mov    0x14(%esp),%eax
		__asm__("notl %0 ; notl %1\n\t"         // 同时取反加1和进位调整。
   2113f:	f7 d2                	not    %edx
   21141:	f7 d0                	not    %eax
   21143:	83 c2 01             	add    $0x1,%edx
   21146:	83 d0 00             	adc    $0x0,%eax
   21149:	89 54 24 10          	mov    %edx,0x10(%esp)
   2114d:	89 44 24 14          	mov    %eax,0x14(%esp)
	int_to_real(&ti,tmp);                           // 把临时整数转换成临时实数格式。
   21151:	83 ec 08             	sub    $0x8,%esp
   21154:	ff 74 24 38          	pushl  0x38(%esp)
   21158:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   2115c:	50                   	push   %eax
   2115d:	e8 2b 15 00 00       	call   2268d <int_to_real>
   21162:	83 c4 10             	add    $0x10,%esp
}
   21165:	90                   	nop
   21166:	83 c4 2c             	add    $0x2c,%esp
   21169:	c3                   	ret    

0002116a <get_BCD>:
// 取用户内存中的BCD码数值并转换成临时实数格式。
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得BCD码所在有效地址（math/ea.c），
// 然后从用户数据区读取10字节相应BCD码值（其中1字节用于符号），同时转换成临时整数形式。最后把临时整数值转换成临时实数。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_BCD(temp_real * tmp, struct info * info, unsigned short code)
{
   2116a:	53                   	push   %ebx
   2116b:	83 ec 38             	sub    $0x38,%esp
   2116e:	8b 44 24 48          	mov    0x48(%esp),%eax
   21172:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	unsigned char c;

// 取得BCD码数值所在内存有效地址。然后从最后1个BCD码字节（最高有效位）开始处理。
// 先取得BCD码数值的符号位，并设置临时整数的符号位。然后把9字节的BCD码值转换成临时整数格式，最后把临时整数值转换成临时
// 实数。
	addr = ea(info,code);                   // 取有效地址。
   21177:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   2117c:	83 ec 08             	sub    $0x8,%esp
   2117f:	50                   	push   %eax
   21180:	ff 74 24 50          	pushl  0x50(%esp)
   21184:	e8 0b fb ff ff       	call   20c94 <ea>
   21189:	83 c4 10             	add    $0x10,%esp
   2118c:	89 44 24 28          	mov    %eax,0x28(%esp)
	addr += 9;                              // 指向最后一个（第10个）字节。
   21190:	83 44 24 28 09       	addl   $0x9,0x28(%esp)
	i.sign = 0x80 & get_fs_byte(addr--);    // 取其中符号位。
   21195:	8b 44 24 28          	mov    0x28(%esp),%eax
   21199:	8d 50 ff             	lea    -0x1(%eax),%edx
   2119c:	89 54 24 28          	mov    %edx,0x28(%esp)
   211a0:	83 ec 0c             	sub    $0xc,%esp
   211a3:	50                   	push   %eax
   211a4:	e8 7a fc ff ff       	call   20e23 <get_fs_byte>
   211a9:	83 c4 10             	add    $0x10,%esp
   211ac:	0f b6 c0             	movzbl %al,%eax
   211af:	66 25 80 00          	and    $0x80,%ax
   211b3:	66 89 44 24 20       	mov    %ax,0x20(%esp)
	i.a = i.b = 0;
   211b8:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   211bf:	00 
   211c0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   211c4:	89 44 24 18          	mov    %eax,0x18(%esp)
	for (k = 0; k < 9; k++) {               // 转换成临时整数格式。
   211c8:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   211cf:	00 
   211d0:	e9 a5 00 00 00       	jmp    2127a <get_BCD+0x110>
		c = get_fs_byte(addr--);
   211d5:	8b 44 24 28          	mov    0x28(%esp),%eax
   211d9:	8d 50 ff             	lea    -0x1(%eax),%edx
   211dc:	89 54 24 28          	mov    %edx,0x28(%esp)
   211e0:	83 ec 0c             	sub    $0xc,%esp
   211e3:	50                   	push   %eax
   211e4:	e8 3a fc ff ff       	call   20e23 <get_fs_byte>
   211e9:	83 c4 10             	add    $0x10,%esp
   211ec:	88 44 24 27          	mov    %al,0x27(%esp)
		MUL10(i.a, i.b);
   211f0:	8b 44 24 18          	mov    0x18(%esp),%eax
   211f4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   211f8:	01 c0                	add    %eax,%eax
   211fa:	11 d2                	adc    %edx,%edx
   211fc:	89 c1                	mov    %eax,%ecx
   211fe:	89 d3                	mov    %edx,%ebx
   21200:	01 c0                	add    %eax,%eax
   21202:	11 d2                	adc    %edx,%edx
   21204:	01 c0                	add    %eax,%eax
   21206:	11 d2                	adc    %edx,%edx
   21208:	01 c8                	add    %ecx,%eax
   2120a:	11 da                	adc    %ebx,%edx
   2120c:	89 44 24 18          	mov    %eax,0x18(%esp)
   21210:	89 54 24 1c          	mov    %edx,0x1c(%esp)
		ADD64((c>>4), i.a, i.b);
   21214:	8b 54 24 18          	mov    0x18(%esp),%edx
   21218:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2121c:	0f b6 4c 24 27       	movzbl 0x27(%esp),%ecx
   21221:	c0 e9 04             	shr    $0x4,%cl
   21224:	0f b6 c9             	movzbl %cl,%ecx
   21227:	01 ca                	add    %ecx,%edx
   21229:	83 d0 00             	adc    $0x0,%eax
   2122c:	89 54 24 18          	mov    %edx,0x18(%esp)
   21230:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		MUL10(i.a, i.b);
   21234:	8b 44 24 18          	mov    0x18(%esp),%eax
   21238:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   2123c:	01 c0                	add    %eax,%eax
   2123e:	11 d2                	adc    %edx,%edx
   21240:	89 c1                	mov    %eax,%ecx
   21242:	89 d3                	mov    %edx,%ebx
   21244:	01 c0                	add    %eax,%eax
   21246:	11 d2                	adc    %edx,%edx
   21248:	01 c0                	add    %eax,%eax
   2124a:	11 d2                	adc    %edx,%edx
   2124c:	01 c8                	add    %ecx,%eax
   2124e:	11 da                	adc    %ebx,%edx
   21250:	89 44 24 18          	mov    %eax,0x18(%esp)
   21254:	89 54 24 1c          	mov    %edx,0x1c(%esp)
		ADD64((c&0xf), i.a, i.b);
   21258:	8b 54 24 18          	mov    0x18(%esp),%edx
   2125c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21260:	0f b6 4c 24 27       	movzbl 0x27(%esp),%ecx
   21265:	83 e1 0f             	and    $0xf,%ecx
   21268:	01 ca                	add    %ecx,%edx
   2126a:	83 d0 00             	adc    $0x0,%eax
   2126d:	89 54 24 18          	mov    %edx,0x18(%esp)
   21271:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	for (k = 0; k < 9; k++) {               // 转换成临时整数格式。
   21275:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   2127a:	83 7c 24 2c 08       	cmpl   $0x8,0x2c(%esp)
   2127f:	0f 8e 50 ff ff ff    	jle    211d5 <get_BCD+0x6b>
	}
	int_to_real(&i,tmp);                    // 转换成临时实数格式。
   21285:	83 ec 08             	sub    $0x8,%esp
   21288:	ff 74 24 48          	pushl  0x48(%esp)
   2128c:	8d 44 24 24          	lea    0x24(%esp),%eax
   21290:	50                   	push   %eax
   21291:	e8 f7 13 00 00       	call   2268d <int_to_real>
   21296:	83 c4 10             	add    $0x10,%esp
}
   21299:	90                   	nop
   2129a:	83 c4 38             	add    $0x38,%esp
   2129d:	5b                   	pop    %ebx
   2129e:	c3                   	ret    

0002129f <put_short_real>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时实
// 数格式的结果转换成短实数格式并存储到有效地址addr处。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_short_real(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   2129f:	83 ec 2c             	sub    $0x2c,%esp
   212a2:	8b 44 24 38          	mov    0x38(%esp),%eax
   212a6:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	short_real sr;

	addr = ea(info,code);                           // 取有效地址。
   212ab:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   212b0:	83 ec 08             	sub    $0x8,%esp
   212b3:	50                   	push   %eax
   212b4:	ff 74 24 40          	pushl  0x40(%esp)
   212b8:	e8 d7 f9 ff ff       	call   20c94 <ea>
   212bd:	83 c4 10             	add    $0x10,%esp
   212c0:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	verify_area(addr,4);                            // 为保存结果验证或分配内存。
   212c4:	83 ec 08             	sub    $0x8,%esp
   212c7:	6a 04                	push   $0x4
   212c9:	ff 74 24 28          	pushl  0x28(%esp)
   212cd:	e8 c9 70 fe ff       	call   839b <verify_area>
   212d2:	83 c4 10             	add    $0x10,%esp
	temp_to_short(tmp,&sr);                         // 结果转换成短实数格式。
   212d5:	83 ec 08             	sub    $0x8,%esp
   212d8:	8d 44 24 20          	lea    0x20(%esp),%eax
   212dc:	50                   	push   %eax
   212dd:	ff 74 24 3c          	pushl  0x3c(%esp)
   212e1:	e8 c4 0e 00 00       	call   221aa <temp_to_short>
   212e6:	83 c4 10             	add    $0x10,%esp
	put_fs_long(sr,(unsigned long *) addr);         // 存储数据到用户内存区。
   212e9:	8b 44 24 18          	mov    0x18(%esp),%eax
   212ed:	83 ec 08             	sub    $0x8,%esp
   212f0:	ff 74 24 24          	pushl  0x24(%esp)
   212f4:	50                   	push   %eax
   212f5:	e8 9c fb ff ff       	call   20e96 <put_fs_long>
   212fa:	83 c4 10             	add    $0x10,%esp
}
   212fd:	90                   	nop
   212fe:	83 c4 2c             	add    $0x2c,%esp
   21301:	c3                   	ret    

00021302 <put_long_real>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时
// 实数格式的结果转换成长实数格式，并存储到有效地址addr处。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_long_real(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   21302:	83 ec 2c             	sub    $0x2c,%esp
   21305:	8b 44 24 38          	mov    0x38(%esp),%eax
   21309:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	long_real lr;

	addr = ea(info,code);                           // 取有效地址。
   2130e:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21313:	83 ec 08             	sub    $0x8,%esp
   21316:	50                   	push   %eax
   21317:	ff 74 24 40          	pushl  0x40(%esp)
   2131b:	e8 74 f9 ff ff       	call   20c94 <ea>
   21320:	83 c4 10             	add    $0x10,%esp
   21323:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	verify_area(addr,8);                            // 为保存结果验证或分配内存。
   21327:	83 ec 08             	sub    $0x8,%esp
   2132a:	6a 08                	push   $0x8
   2132c:	ff 74 24 28          	pushl  0x28(%esp)
   21330:	e8 66 70 fe ff       	call   839b <verify_area>
   21335:	83 c4 10             	add    $0x10,%esp
	temp_to_long(tmp,&lr);                          // 结果转换成长实数格式。
   21338:	83 ec 08             	sub    $0x8,%esp
   2133b:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   2133f:	50                   	push   %eax
   21340:	ff 74 24 3c          	pushl  0x3c(%esp)
   21344:	e8 92 0f 00 00       	call   222db <temp_to_long>
   21349:	83 c4 10             	add    $0x10,%esp
	put_fs_long(lr.a, (unsigned long *) addr);      // 存储数据到用户内存区。
   2134c:	8b 44 24 14          	mov    0x14(%esp),%eax
   21350:	83 ec 08             	sub    $0x8,%esp
   21353:	ff 74 24 24          	pushl  0x24(%esp)
   21357:	50                   	push   %eax
   21358:	e8 39 fb ff ff       	call   20e96 <put_fs_long>
   2135d:	83 c4 10             	add    $0x10,%esp
	put_fs_long(lr.b, 1 + (unsigned long *) addr);
   21360:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21364:	83 c0 04             	add    $0x4,%eax
   21367:	8b 54 24 18          	mov    0x18(%esp),%edx
   2136b:	83 ec 08             	sub    $0x8,%esp
   2136e:	50                   	push   %eax
   2136f:	52                   	push   %edx
   21370:	e8 21 fb ff ff       	call   20e96 <put_fs_long>
   21375:	83 c4 10             	add    $0x10,%esp
}
   21378:	90                   	nop
   21379:	83 c4 2c             	add    $0x2c,%esp
   2137c:	c3                   	ret    

0002137d <put_temp_real>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临
// 时实数存储到有效地址addr处。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_temp_real(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   2137d:	83 ec 2c             	sub    $0x2c,%esp
   21380:	8b 44 24 38          	mov    0x38(%esp),%eax
   21384:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;

	addr = ea(info,code);                           // 取有效地址。
   21389:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   2138e:	83 ec 08             	sub    $0x8,%esp
   21391:	50                   	push   %eax
   21392:	ff 74 24 40          	pushl  0x40(%esp)
   21396:	e8 f9 f8 ff ff       	call   20c94 <ea>
   2139b:	83 c4 10             	add    $0x10,%esp
   2139e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	verify_area(addr,10);                           // 为保存结果验证或分配内存。
   213a2:	83 ec 08             	sub    $0x8,%esp
   213a5:	6a 0a                	push   $0xa
   213a7:	ff 74 24 28          	pushl  0x28(%esp)
   213ab:	e8 eb 6f fe ff       	call   839b <verify_area>
   213b0:	83 c4 10             	add    $0x10,%esp
	put_fs_long(tmp->a, (unsigned long *) addr);    // 存储数据到用户内存区。
   213b3:	8b 44 24 30          	mov    0x30(%esp),%eax
   213b7:	8b 00                	mov    (%eax),%eax
   213b9:	83 ec 08             	sub    $0x8,%esp
   213bc:	ff 74 24 24          	pushl  0x24(%esp)
   213c0:	50                   	push   %eax
   213c1:	e8 d0 fa ff ff       	call   20e96 <put_fs_long>
   213c6:	83 c4 10             	add    $0x10,%esp
	put_fs_long(tmp->b, 1 + (unsigned long *) addr);
   213c9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   213cd:	8d 50 04             	lea    0x4(%eax),%edx
   213d0:	8b 44 24 30          	mov    0x30(%esp),%eax
   213d4:	8b 40 04             	mov    0x4(%eax),%eax
   213d7:	83 ec 08             	sub    $0x8,%esp
   213da:	52                   	push   %edx
   213db:	50                   	push   %eax
   213dc:	e8 b5 fa ff ff       	call   20e96 <put_fs_long>
   213e1:	83 c4 10             	add    $0x10,%esp
	put_fs_word(tmp->exponent, 4 + (short *) addr);
   213e4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   213e8:	8d 50 08             	lea    0x8(%eax),%edx
   213eb:	8b 44 24 30          	mov    0x30(%esp),%eax
   213ef:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   213f3:	98                   	cwtl   
   213f4:	83 ec 08             	sub    $0x8,%esp
   213f7:	52                   	push   %edx
   213f8:	50                   	push   %eax
   213f9:	e8 7c fa ff ff       	call   20e7a <put_fs_word>
   213fe:	83 c4 10             	add    $0x10,%esp
}
   21401:	90                   	nop
   21402:	83 c4 2c             	add    $0x2c,%esp
   21405:	c3                   	ret    

00021406 <put_short_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临
// 时实数格式的结果转换成临时整数格式。如果是负数则设置整数符号位。最后把整数保存到用户内存中。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_short_int(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   21406:	83 ec 2c             	sub    $0x2c,%esp
   21409:	8b 44 24 38          	mov    0x38(%esp),%eax
   2140d:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取有效地址。
   21412:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21417:	83 ec 08             	sub    $0x8,%esp
   2141a:	50                   	push   %eax
   2141b:	ff 74 24 40          	pushl  0x40(%esp)
   2141f:	e8 70 f8 ff ff       	call   20c94 <ea>
   21424:	83 c4 10             	add    $0x10,%esp
   21427:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	real_to_int(tmp,&ti);           // 转换成临时整数格式。
   2142b:	83 ec 08             	sub    $0x8,%esp
   2142e:	8d 44 24 18          	lea    0x18(%esp),%eax
   21432:	50                   	push   %eax
   21433:	ff 74 24 3c          	pushl  0x3c(%esp)
   21437:	e8 46 10 00 00       	call   22482 <real_to_int>
   2143c:	83 c4 10             	add    $0x10,%esp
	verify_area(addr,2);            // 验证或分配存储内存。
   2143f:	83 ec 08             	sub    $0x8,%esp
   21442:	6a 02                	push   $0x2
   21444:	ff 74 24 28          	pushl  0x28(%esp)
   21448:	e8 4e 6f fe ff       	call   839b <verify_area>
   2144d:	83 c4 10             	add    $0x10,%esp
	if (ti.sign)                    // 若有符号位，则取负数值。
   21450:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   21455:	66 85 c0             	test   %ax,%ax
   21458:	74 0a                	je     21464 <put_short_int+0x5e>
		ti.a = -ti.a;
   2145a:	8b 44 24 10          	mov    0x10(%esp),%eax
   2145e:	f7 d8                	neg    %eax
   21460:	89 44 24 10          	mov    %eax,0x10(%esp)
	put_fs_word(ti.a,(short *) addr);       // 存储到用户数据区中。
   21464:	8b 44 24 10          	mov    0x10(%esp),%eax
   21468:	98                   	cwtl   
   21469:	83 ec 08             	sub    $0x8,%esp
   2146c:	ff 74 24 24          	pushl  0x24(%esp)
   21470:	50                   	push   %eax
   21471:	e8 04 fa ff ff       	call   20e7a <put_fs_word>
   21476:	83 c4 10             	add    $0x10,%esp
}
   21479:	90                   	nop
   2147a:	83 c4 2c             	add    $0x2c,%esp
   2147d:	c3                   	ret    

0002147e <put_long_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时
// 实数格式的结果转换成临时整数格式。如果是负数则设置整数符号位。最后把整数保存到用户内存中。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_long_int(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   2147e:	83 ec 2c             	sub    $0x2c,%esp
   21481:	8b 44 24 38          	mov    0x38(%esp),%eax
   21485:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);                           // 取有效地址值。
   2148a:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   2148f:	83 ec 08             	sub    $0x8,%esp
   21492:	50                   	push   %eax
   21493:	ff 74 24 40          	pushl  0x40(%esp)
   21497:	e8 f8 f7 ff ff       	call   20c94 <ea>
   2149c:	83 c4 10             	add    $0x10,%esp
   2149f:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	real_to_int(tmp,&ti);                           // 转换成临时整数格式。
   214a3:	83 ec 08             	sub    $0x8,%esp
   214a6:	8d 44 24 18          	lea    0x18(%esp),%eax
   214aa:	50                   	push   %eax
   214ab:	ff 74 24 3c          	pushl  0x3c(%esp)
   214af:	e8 ce 0f 00 00       	call   22482 <real_to_int>
   214b4:	83 c4 10             	add    $0x10,%esp
	verify_area(addr,4);                            // 验证或分配存储内存。
   214b7:	83 ec 08             	sub    $0x8,%esp
   214ba:	6a 04                	push   $0x4
   214bc:	ff 74 24 28          	pushl  0x28(%esp)
   214c0:	e8 d6 6e fe ff       	call   839b <verify_area>
   214c5:	83 c4 10             	add    $0x10,%esp
	if (ti.sign)                                    // 若有符号位，则取负数值。
   214c8:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   214cd:	66 85 c0             	test   %ax,%ax
   214d0:	74 0a                	je     214dc <put_long_int+0x5e>
		ti.a = -ti.a;
   214d2:	8b 44 24 10          	mov    0x10(%esp),%eax
   214d6:	f7 d8                	neg    %eax
   214d8:	89 44 24 10          	mov    %eax,0x10(%esp)
	put_fs_long(ti.a,(unsigned long *) addr);       // 存储到用户数据区中。
   214dc:	8b 44 24 10          	mov    0x10(%esp),%eax
   214e0:	83 ec 08             	sub    $0x8,%esp
   214e3:	ff 74 24 24          	pushl  0x24(%esp)
   214e7:	50                   	push   %eax
   214e8:	e8 a9 f9 ff ff       	call   20e96 <put_fs_long>
   214ed:	83 c4 10             	add    $0x10,%esp
}
   214f0:	90                   	nop
   214f1:	83 c4 2c             	add    $0x2c,%esp
   214f4:	c3                   	ret    

000214f5 <put_longlong_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时
// 实数格式的结果转换成临时整数格式。如果是负数则设置整数符号位。最后把整数保存到用户内存中。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_longlong_int(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   214f5:	83 ec 2c             	sub    $0x2c,%esp
   214f8:	8b 44 24 38          	mov    0x38(%esp),%eax
   214fc:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取有效地址。
   21501:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21506:	83 ec 08             	sub    $0x8,%esp
   21509:	50                   	push   %eax
   2150a:	ff 74 24 40          	pushl  0x40(%esp)
   2150e:	e8 81 f7 ff ff       	call   20c94 <ea>
   21513:	83 c4 10             	add    $0x10,%esp
   21516:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	real_to_int(tmp,&ti);           // 转换成临时整数格式。
   2151a:	83 ec 08             	sub    $0x8,%esp
   2151d:	8d 44 24 18          	lea    0x18(%esp),%eax
   21521:	50                   	push   %eax
   21522:	ff 74 24 3c          	pushl  0x3c(%esp)
   21526:	e8 57 0f 00 00       	call   22482 <real_to_int>
   2152b:	83 c4 10             	add    $0x10,%esp
	verify_area(addr,8);            // 验证存储区域。
   2152e:	83 ec 08             	sub    $0x8,%esp
   21531:	6a 08                	push   $0x8
   21533:	ff 74 24 28          	pushl  0x28(%esp)
   21537:	e8 5f 6e fe ff       	call   839b <verify_area>
   2153c:	83 c4 10             	add    $0x10,%esp
	if (ti.sign)                    // 若是负数，则取反加1。
   2153f:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   21544:	66 85 c0             	test   %ax,%ax
   21547:	74 1a                	je     21563 <put_longlong_int+0x6e>
		__asm__("notl %0 ; notl %1\n\t"
			"addl $1,%0 ; adcl $0,%1"
			:"=r" (ti.a),"=r" (ti.b)
			:"0" (ti.a),"1" (ti.b));
   21549:	8b 54 24 10          	mov    0x10(%esp),%edx
   2154d:	8b 44 24 14          	mov    0x14(%esp),%eax
		__asm__("notl %0 ; notl %1\n\t"
   21551:	f7 d2                	not    %edx
   21553:	f7 d0                	not    %eax
   21555:	83 c2 01             	add    $0x1,%edx
   21558:	83 d0 00             	adc    $0x0,%eax
   2155b:	89 54 24 10          	mov    %edx,0x10(%esp)
   2155f:	89 44 24 14          	mov    %eax,0x14(%esp)
	put_fs_long(ti.a,(unsigned long *) addr);       // 存储到用户数据区中。
   21563:	8b 44 24 10          	mov    0x10(%esp),%eax
   21567:	83 ec 08             	sub    $0x8,%esp
   2156a:	ff 74 24 24          	pushl  0x24(%esp)
   2156e:	50                   	push   %eax
   2156f:	e8 22 f9 ff ff       	call   20e96 <put_fs_long>
   21574:	83 c4 10             	add    $0x10,%esp
	put_fs_long(ti.b,1 + (unsigned long *) addr);
   21577:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2157b:	83 c0 04             	add    $0x4,%eax
   2157e:	8b 54 24 14          	mov    0x14(%esp),%edx
   21582:	83 ec 08             	sub    $0x8,%esp
   21585:	50                   	push   %eax
   21586:	52                   	push   %edx
   21587:	e8 0a f9 ff ff       	call   20e96 <put_fs_long>
   2158c:	83 c4 10             	add    $0x10,%esp
}
   2158f:	90                   	nop
   21590:	83 c4 2c             	add    $0x2c,%esp
   21593:	c3                   	ret    

00021594 <put_BCD>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，并验证保
// 存10字节BCD码的用户空间。然后把临时实数格式的结果转换成BCD码格式的数据并保存到用户内存中。如果是负数则设置最高存储字
// 节的最高有效位。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_BCD(const temp_real * tmp,struct info * info, unsigned short code)
{
   21594:	56                   	push   %esi
   21595:	53                   	push   %ebx
   21596:	83 ec 34             	sub    $0x34,%esp
   21599:	8b 44 24 48          	mov    0x48(%esp),%eax
   2159d:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	int k,rem;
	char * addr;
	temp_int i;
	unsigned char c;

	addr = ea(info,code);                   // 取有效地址。
   215a2:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   215a7:	83 ec 08             	sub    $0x8,%esp
   215aa:	50                   	push   %eax
   215ab:	ff 74 24 50          	pushl  0x50(%esp)
   215af:	e8 e0 f6 ff ff       	call   20c94 <ea>
   215b4:	83 c4 10             	add    $0x10,%esp
   215b7:	89 44 24 28          	mov    %eax,0x28(%esp)
	verify_area(addr,10);                   // 验证存储空间容量。
   215bb:	83 ec 08             	sub    $0x8,%esp
   215be:	6a 0a                	push   $0xa
   215c0:	ff 74 24 34          	pushl  0x34(%esp)
   215c4:	e8 d2 6d fe ff       	call   839b <verify_area>
   215c9:	83 c4 10             	add    $0x10,%esp
	real_to_int(tmp,&i);                    // 转换成临时整数格式。
   215cc:	83 ec 08             	sub    $0x8,%esp
   215cf:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   215d3:	50                   	push   %eax
   215d4:	ff 74 24 4c          	pushl  0x4c(%esp)
   215d8:	e8 a5 0e 00 00       	call   22482 <real_to_int>
   215dd:	83 c4 10             	add    $0x10,%esp
	if (i.sign)                             // 若是负数，则设置符号字节最高有效位。
   215e0:	0f b7 44 24 1c       	movzwl 0x1c(%esp),%eax
   215e5:	66 85 c0             	test   %ax,%ax
   215e8:	74 17                	je     21601 <put_BCD+0x6d>
		put_fs_byte(0x80, addr+9);
   215ea:	8b 44 24 28          	mov    0x28(%esp),%eax
   215ee:	83 c0 09             	add    $0x9,%eax
   215f1:	83 ec 08             	sub    $0x8,%esp
   215f4:	50                   	push   %eax
   215f5:	6a 80                	push   $0xffffff80
   215f7:	e8 64 f8 ff ff       	call   20e60 <put_fs_byte>
   215fc:	83 c4 10             	add    $0x10,%esp
   215ff:	eb 15                	jmp    21616 <put_BCD+0x82>
	else                                    // 否则符号字节设置为0。
		put_fs_byte(0, addr+9);
   21601:	8b 44 24 28          	mov    0x28(%esp),%eax
   21605:	83 c0 09             	add    $0x9,%eax
   21608:	83 ec 08             	sub    $0x8,%esp
   2160b:	50                   	push   %eax
   2160c:	6a 00                	push   $0x0
   2160e:	e8 4d f8 ff ff       	call   20e60 <put_fs_byte>
   21613:	83 c4 10             	add    $0x10,%esp
	for (k = 0; k < 9; k++) {               // 临时整数转换成BCD码并保存。
   21616:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   2161d:	00 
   2161e:	e9 86 00 00 00       	jmp    216a9 <put_BCD+0x115>
		DIV10(i.a,i.b,rem);
   21623:	8b 44 24 18          	mov    0x18(%esp),%eax
   21627:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   2162b:	ba 00 00 00 00       	mov    $0x0,%edx
   21630:	be 0a 00 00 00       	mov    $0xa,%esi
   21635:	89 cb                	mov    %ecx,%ebx
   21637:	89 f1                	mov    %esi,%ecx
   21639:	f7 f1                	div    %ecx
   2163b:	93                   	xchg   %eax,%ebx
   2163c:	f7 f1                	div    %ecx
   2163e:	89 54 24 24          	mov    %edx,0x24(%esp)
   21642:	89 44 24 14          	mov    %eax,0x14(%esp)
   21646:	89 5c 24 18          	mov    %ebx,0x18(%esp)
		c = rem;
   2164a:	8b 44 24 24          	mov    0x24(%esp),%eax
   2164e:	88 44 24 23          	mov    %al,0x23(%esp)
		DIV10(i.a,i.b,rem);
   21652:	8b 44 24 18          	mov    0x18(%esp),%eax
   21656:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   2165a:	ba 00 00 00 00       	mov    $0x0,%edx
   2165f:	be 0a 00 00 00       	mov    $0xa,%esi
   21664:	89 cb                	mov    %ecx,%ebx
   21666:	89 f1                	mov    %esi,%ecx
   21668:	f7 f1                	div    %ecx
   2166a:	93                   	xchg   %eax,%ebx
   2166b:	f7 f1                	div    %ecx
   2166d:	89 54 24 24          	mov    %edx,0x24(%esp)
   21671:	89 44 24 14          	mov    %eax,0x14(%esp)
   21675:	89 5c 24 18          	mov    %ebx,0x18(%esp)
		c += rem<<4;
   21679:	8b 44 24 24          	mov    0x24(%esp),%eax
   2167d:	c1 e0 04             	shl    $0x4,%eax
   21680:	00 44 24 23          	add    %al,0x23(%esp)
		put_fs_byte(c,addr++);
   21684:	8b 44 24 28          	mov    0x28(%esp),%eax
   21688:	8d 50 01             	lea    0x1(%eax),%edx
   2168b:	89 54 24 28          	mov    %edx,0x28(%esp)
   2168f:	0f b6 54 24 23       	movzbl 0x23(%esp),%edx
   21694:	0f be d2             	movsbl %dl,%edx
   21697:	83 ec 08             	sub    $0x8,%esp
   2169a:	50                   	push   %eax
   2169b:	52                   	push   %edx
   2169c:	e8 bf f7 ff ff       	call   20e60 <put_fs_byte>
   216a1:	83 c4 10             	add    $0x10,%esp
	for (k = 0; k < 9; k++) {               // 临时整数转换成BCD码并保存。
   216a4:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   216a9:	83 7c 24 2c 08       	cmpl   $0x8,0x2c(%esp)
   216ae:	0f 8e 6f ff ff ff    	jle    21623 <put_BCD+0x8f>
	}
   216b4:	90                   	nop
   216b5:	83 c4 34             	add    $0x34,%esp
   216b8:	5b                   	pop    %ebx
   216b9:	5e                   	pop    %esi
   216ba:	c3                   	ret    

000216bb <signify>:
{
// 把64位二进制尾数右移2位（因此指数需要加2）。因为指针字段exponent的最高位是符号位，所以若指数值小于零，说明该数是负数。
// 于是则把尾数用补码表示（取负）。然后把指数取正值。此时尾数中不仅包含移过2位的有效数，而且还包含数值的符号位。
// 30行上：%0 - a->a；%1 - a->b。汇编指令“shrdl $2, %1, %0”执行双精度（64位）右移，即把组合尾数<b,a>右移2位。由于
// 该移动操作不会改变%1（a->b）中的值，因此还需要单独对其右移2位。
	a->exponent += 2;
   216bb:	8b 44 24 04          	mov    0x4(%esp),%eax
   216bf:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   216c3:	83 c0 02             	add    $0x2,%eax
   216c6:	89 c2                	mov    %eax,%edx
   216c8:	8b 44 24 04          	mov    0x4(%esp),%eax
   216cc:	66 89 50 08          	mov    %dx,0x8(%eax)
	__asm__("shrdl $2,%1,%0 ; shrl $2,%1"   // 使用双精度指令把尾数右移2位。
		:"=r" (a->a),"=r" (a->b)
		:"0" (a->a),"1" (a->b));
   216d0:	8b 44 24 04          	mov    0x4(%esp),%eax
   216d4:	8b 10                	mov    (%eax),%edx
   216d6:	8b 44 24 04          	mov    0x4(%esp),%eax
   216da:	8b 40 04             	mov    0x4(%eax),%eax
	__asm__("shrdl $2,%1,%0 ; shrl $2,%1"   // 使用双精度指令把尾数右移2位。
   216dd:	0f ac c2 02          	shrd   $0x2,%eax,%edx
   216e1:	c1 e8 02             	shr    $0x2,%eax
   216e4:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   216e8:	89 11                	mov    %edx,(%ecx)
   216ea:	8b 54 24 04          	mov    0x4(%esp),%edx
   216ee:	89 42 04             	mov    %eax,0x4(%edx)
	if (a->exponent < 0)                    // 是负数，则尾数用补码表示（取负值）。
   216f1:	8b 44 24 04          	mov    0x4(%esp),%eax
   216f5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   216f9:	66 85 c0             	test   %ax,%ax
   216fc:	79 24                	jns    21722 <signify+0x67>
		NEGINT(a);
   216fe:	8b 44 24 04          	mov    0x4(%esp),%eax
   21702:	8b 10                	mov    (%eax),%edx
   21704:	8b 44 24 04          	mov    0x4(%esp),%eax
   21708:	8b 40 04             	mov    0x4(%eax),%eax
   2170b:	f7 d2                	not    %edx
   2170d:	f7 d0                	not    %eax
   2170f:	83 c2 01             	add    $0x1,%edx
   21712:	83 d0 00             	adc    $0x0,%eax
   21715:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   21719:	89 11                	mov    %edx,(%ecx)
   2171b:	8b 54 24 04          	mov    0x4(%esp),%edx
   2171f:	89 42 04             	mov    %eax,0x4(%edx)
	a->exponent &= 0x7fff;                  // 去掉符号位（若有）。
   21722:	8b 44 24 04          	mov    0x4(%esp),%eax
   21726:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2172a:	66 25 ff 7f          	and    $0x7fff,%ax
   2172e:	89 c2                	mov    %eax,%edx
   21730:	8b 44 24 04          	mov    0x4(%esp),%eax
   21734:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   21738:	90                   	nop
   21739:	c3                   	ret    

0002173a <unsignify>:
static void unsignify(temp_real * a)
{
// 对于值为0的数不用处理，直接返回。否则，我们先复位临时实数格式的符号位。然后判断尾数的高位long字段a->b是否带有符号位。
// 若有，则在exponent字段添加符号位，同时把尾数用无符号数形式表示（取补）。最后对尾数进行规格化处理，同时指数值作相应递
// 减。即执行左移操作，使得尾数最高有效位不为0（最后a->b值表现为负值）。
	if (!(a->a || a->b)) {                          // 若值为0就返回。
   2173a:	8b 44 24 04          	mov    0x4(%esp),%eax
   2173e:	8b 00                	mov    (%eax),%eax
   21740:	85 c0                	test   %eax,%eax
   21742:	75 16                	jne    2175a <unsignify+0x20>
   21744:	8b 44 24 04          	mov    0x4(%esp),%eax
   21748:	8b 40 04             	mov    0x4(%eax),%eax
   2174b:	85 c0                	test   %eax,%eax
   2174d:	75 0b                	jne    2175a <unsignify+0x20>
		a->exponent = 0;
   2174f:	8b 44 24 04          	mov    0x4(%esp),%eax
   21753:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   21759:	c3                   	ret    
	}
	a->exponent &= 0x7fff;                          // 去掉符号位（若有）。
   2175a:	8b 44 24 04          	mov    0x4(%esp),%eax
   2175e:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21762:	66 25 ff 7f          	and    $0x7fff,%ax
   21766:	89 c2                	mov    %eax,%edx
   21768:	8b 44 24 04          	mov    0x4(%esp),%eax
   2176c:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (a->b < 0) {                                 // 去负数，则尾数取正值。
   21770:	8b 44 24 04          	mov    0x4(%esp),%eax
   21774:	8b 40 04             	mov    0x4(%eax),%eax
   21777:	85 c0                	test   %eax,%eax
   21779:	79 6f                	jns    217ea <unsignify+0xb0>
		NEGINT(a);
   2177b:	8b 44 24 04          	mov    0x4(%esp),%eax
   2177f:	8b 10                	mov    (%eax),%edx
   21781:	8b 44 24 04          	mov    0x4(%esp),%eax
   21785:	8b 40 04             	mov    0x4(%eax),%eax
   21788:	f7 d2                	not    %edx
   2178a:	f7 d0                	not    %eax
   2178c:	83 c2 01             	add    $0x1,%edx
   2178f:	83 d0 00             	adc    $0x0,%eax
   21792:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   21796:	89 11                	mov    %edx,(%ecx)
   21798:	8b 54 24 04          	mov    0x4(%esp),%edx
   2179c:	89 42 04             	mov    %eax,0x4(%edx)
		a->exponent |= 0x8000;                  // 临时实数添加置符号位。
   2179f:	8b 44 24 04          	mov    0x4(%esp),%eax
   217a3:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   217a7:	66 0d 00 80          	or     $0x8000,%ax
   217ab:	89 c2                	mov    %eax,%edx
   217ad:	8b 44 24 04          	mov    0x4(%esp),%eax
   217b1:	66 89 50 08          	mov    %dx,0x8(%eax)
	}
	while (a->b >= 0) {                             // 对尾数进行规格化处理。
   217b5:	eb 33                	jmp    217ea <unsignify+0xb0>
		a->exponent--;
   217b7:	8b 44 24 04          	mov    0x4(%esp),%eax
   217bb:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   217bf:	83 e8 01             	sub    $0x1,%eax
   217c2:	89 c2                	mov    %eax,%edx
   217c4:	8b 44 24 04          	mov    0x4(%esp),%eax
   217c8:	66 89 50 08          	mov    %dx,0x8(%eax)
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (a->a),"=r" (a->b)
			:"0" (a->a),"1" (a->b));
   217cc:	8b 44 24 04          	mov    0x4(%esp),%eax
   217d0:	8b 10                	mov    (%eax),%edx
   217d2:	8b 44 24 04          	mov    0x4(%esp),%eax
   217d6:	8b 40 04             	mov    0x4(%eax),%eax
		__asm__("addl %0,%0 ; adcl %1,%1"
   217d9:	01 d2                	add    %edx,%edx
   217db:	11 c0                	adc    %eax,%eax
   217dd:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   217e1:	89 11                	mov    %edx,(%ecx)
   217e3:	8b 54 24 04          	mov    0x4(%esp),%edx
   217e7:	89 42 04             	mov    %eax,0x4(%edx)
	while (a->b >= 0) {                             // 对尾数进行规格化处理。
   217ea:	8b 44 24 04          	mov    0x4(%esp),%eax
   217ee:	8b 40 04             	mov    0x4(%eax),%eax
   217f1:	85 c0                	test   %eax,%eax
   217f3:	79 c2                	jns    217b7 <unsignify+0x7d>
	}
}
   217f5:	c3                   	ret    

000217f6 <fadd>:

// 仿真浮点加法指令运算。
// 临时实数参数src1 + src2 -> result。
void fadd(const temp_real * src1, const temp_real * src2, temp_real * result)
{
   217f6:	53                   	push   %ebx
   217f7:	83 ec 30             	sub    $0x30,%esp
	temp_real a,b;
	int x1,x2,shift;

// 首先取两个数的指数值x1、x2（去掉符号位）。然后让变量a等于基中最大值，shift为指数差值（即相差2的倍数值）。
	x1 = src1->exponent & 0x7fff;
   217fa:	8b 44 24 38          	mov    0x38(%esp),%eax
   217fe:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21802:	98                   	cwtl   
   21803:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21808:	89 44 24 28          	mov    %eax,0x28(%esp)
	x2 = src2->exponent & 0x7fff;
   2180c:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   21810:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21814:	98                   	cwtl   
   21815:	25 ff 7f 00 00       	and    $0x7fff,%eax
   2181a:	89 44 24 24          	mov    %eax,0x24(%esp)
	if (x1 > x2) {
   2181e:	8b 44 24 28          	mov    0x28(%esp),%eax
   21822:	3b 44 24 24          	cmp    0x24(%esp),%eax
   21826:	7e 3e                	jle    21866 <fadd+0x70>
		a = *src1;
   21828:	8b 44 24 38          	mov    0x38(%esp),%eax
   2182c:	8b 10                	mov    (%eax),%edx
   2182e:	89 54 24 18          	mov    %edx,0x18(%esp)
   21832:	8b 50 04             	mov    0x4(%eax),%edx
   21835:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   21839:	8b 40 08             	mov    0x8(%eax),%eax
   2183c:	89 44 24 20          	mov    %eax,0x20(%esp)
		b = *src2;
   21840:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   21844:	8b 10                	mov    (%eax),%edx
   21846:	89 54 24 0c          	mov    %edx,0xc(%esp)
   2184a:	8b 50 04             	mov    0x4(%eax),%edx
   2184d:	89 54 24 10          	mov    %edx,0x10(%esp)
   21851:	8b 40 08             	mov    0x8(%eax),%eax
   21854:	89 44 24 14          	mov    %eax,0x14(%esp)
		shift = x1-x2;
   21858:	8b 44 24 28          	mov    0x28(%esp),%eax
   2185c:	2b 44 24 24          	sub    0x24(%esp),%eax
   21860:	89 44 24 2c          	mov    %eax,0x2c(%esp)
   21864:	eb 3c                	jmp    218a2 <fadd+0xac>
	} else {
		a = *src2;
   21866:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   2186a:	8b 10                	mov    (%eax),%edx
   2186c:	89 54 24 18          	mov    %edx,0x18(%esp)
   21870:	8b 50 04             	mov    0x4(%eax),%edx
   21873:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   21877:	8b 40 08             	mov    0x8(%eax),%eax
   2187a:	89 44 24 20          	mov    %eax,0x20(%esp)
		b = *src1;
   2187e:	8b 44 24 38          	mov    0x38(%esp),%eax
   21882:	8b 10                	mov    (%eax),%edx
   21884:	89 54 24 0c          	mov    %edx,0xc(%esp)
   21888:	8b 50 04             	mov    0x4(%eax),%edx
   2188b:	89 54 24 10          	mov    %edx,0x10(%esp)
   2188f:	8b 40 08             	mov    0x8(%eax),%eax
   21892:	89 44 24 14          	mov    %eax,0x14(%esp)
		shift = x2-x1;
   21896:	8b 44 24 24          	mov    0x24(%esp),%eax
   2189a:	2b 44 24 28          	sub    0x28(%esp),%eax
   2189e:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	}
// 若两者相差太大，大于等于2的64次方，则我们可以忽略小的那个数，即b值。于是直接返回a值即可。否则，若相差大于等于2的32次
// 方，那么我们可以忽略小值b中的低32位值。于是我们把b的高long字段值b.b右移32位，即放到b.a中。然后把b的指数值相应地增加
// 32次方。即指数差值减去32。这样调整之后，相加的两个数的尾数基本上落在相同区域中。
	if (shift >= 64) {
   218a2:	83 7c 24 2c 3f       	cmpl   $0x3f,0x2c(%esp)
   218a7:	7e 1d                	jle    218c6 <fadd+0xd0>
		*result = a;
   218a9:	8b 44 24 40          	mov    0x40(%esp),%eax
   218ad:	8b 54 24 18          	mov    0x18(%esp),%edx
   218b1:	89 10                	mov    %edx,(%eax)
   218b3:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   218b7:	89 50 04             	mov    %edx,0x4(%eax)
   218ba:	8b 54 24 20          	mov    0x20(%esp),%edx
   218be:	89 50 08             	mov    %edx,0x8(%eax)
   218c1:	e9 90 00 00 00       	jmp    21956 <fadd+0x160>
		return;
	}
	if (shift >= 32) {
   218c6:	83 7c 24 2c 1f       	cmpl   $0x1f,0x2c(%esp)
   218cb:	7e 15                	jle    218e2 <fadd+0xec>
		b.a = b.b;
   218cd:	8b 44 24 10          	mov    0x10(%esp),%eax
   218d1:	89 44 24 0c          	mov    %eax,0xc(%esp)
		b.b = 0;
   218d5:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   218dc:	00 
		shift -= 32;
   218dd:	83 6c 24 2c 20       	subl   $0x20,0x2c(%esp)
	}
// 接着再进行细致的调整，以将相加两者调整成相同。调整方法是把小值b的尾数右移shift各位。这样两者的指数相同，处于同一个数量级。
// 我们就要以对尾数进行相加运算了。相加之前我们需要先把它们转换成仿真运算格式。在加法运算后再变换回临时实数格式。
	__asm__("shrdl %4,%1,%0 ; shrl %4,%1"                   // 双精度（64位）右移。
		:"=r" (b.a),"=r" (b.b)
		:"0" (b.a),"1" (b.b),"c" ((char) shift));
   218e2:	8b 54 24 0c          	mov    0xc(%esp),%edx
   218e6:	8b 44 24 10          	mov    0x10(%esp),%eax
   218ea:	8b 4c 24 2c          	mov    0x2c(%esp),%ecx
	__asm__("shrdl %4,%1,%0 ; shrl %4,%1"                   // 双精度（64位）右移。
   218ee:	0f ad c2             	shrd   %cl,%eax,%edx
   218f1:	d3 e8                	shr    %cl,%eax
   218f3:	89 54 24 0c          	mov    %edx,0xc(%esp)
   218f7:	89 44 24 10          	mov    %eax,0x10(%esp)
	signify(&a);                                            // 变换格式。
   218fb:	8d 44 24 18          	lea    0x18(%esp),%eax
   218ff:	50                   	push   %eax
   21900:	e8 b6 fd ff ff       	call   216bb <signify>
   21905:	83 c4 04             	add    $0x4,%esp
	signify(&b);
   21908:	8d 44 24 0c          	lea    0xc(%esp),%eax
   2190c:	50                   	push   %eax
   2190d:	e8 a9 fd ff ff       	call   216bb <signify>
   21912:	83 c4 04             	add    $0x4,%esp
	__asm__("addl %4,%0 ; adcl %5,%1"                       // 执行加法运算。
		:"=r" (a.a),"=r" (a.b)
		:"0" (a.a),"1" (a.b),"g" (b.a),"g" (b.b));
   21915:	8b 54 24 18          	mov    0x18(%esp),%edx
   21919:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2191d:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   21921:	8b 5c 24 10          	mov    0x10(%esp),%ebx
	__asm__("addl %4,%0 ; adcl %5,%1"                       // 执行加法运算。
   21925:	01 ca                	add    %ecx,%edx
   21927:	11 d8                	adc    %ebx,%eax
   21929:	89 54 24 18          	mov    %edx,0x18(%esp)
   2192d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	unsignify(&a);                                          // 再变换回临时实数格式。
   21931:	8d 44 24 18          	lea    0x18(%esp),%eax
   21935:	50                   	push   %eax
   21936:	e8 ff fd ff ff       	call   2173a <unsignify>
   2193b:	83 c4 04             	add    $0x4,%esp
	*result = a;
   2193e:	8b 44 24 40          	mov    0x40(%esp),%eax
   21942:	8b 54 24 18          	mov    0x18(%esp),%edx
   21946:	89 10                	mov    %edx,(%eax)
   21948:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   2194c:	89 50 04             	mov    %edx,0x4(%eax)
   2194f:	8b 54 24 20          	mov    0x20(%esp),%edx
   21953:	89 50 08             	mov    %edx,0x8(%eax)
}
   21956:	83 c4 30             	add    $0x30,%esp
   21959:	5b                   	pop    %ebx
   2195a:	c3                   	ret    

0002195b <shift>:
{
	__asm__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
		"movl 4(%0),%%eax ; adcl %%eax,4(%0)\n\t"
		"movl 8(%0),%%eax ; adcl %%eax,8(%0)\n\t"
		"movl 12(%0),%%eax ; adcl %%eax,12(%0)"
		::"r" ((long) c):"ax");
   2195b:	8b 54 24 04          	mov    0x4(%esp),%edx
	__asm__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
   2195f:	8b 02                	mov    (%edx),%eax
   21961:	01 02                	add    %eax,(%edx)
   21963:	8b 42 04             	mov    0x4(%edx),%eax
   21966:	11 42 04             	adc    %eax,0x4(%edx)
   21969:	8b 42 08             	mov    0x8(%edx),%eax
   2196c:	11 42 08             	adc    %eax,0x8(%edx)
   2196f:	8b 42 0c             	mov    0xc(%edx),%eax
   21972:	11 42 0c             	adc    %eax,0xc(%edx)
}
   21975:	90                   	nop
   21976:	c3                   	ret    

00021977 <mul64>:

// 2个临时实数相乘，结果放在c指针处（16字节）。
static void mul64(const temp_real * a, const temp_real * b, int * c)
{
   21977:	57                   	push   %edi
   21978:	56                   	push   %esi
   21979:	53                   	push   %ebx
		"movl 4(%0),%%eax\n\t"          // 取a->b的值到eax。
		"mull (%1)\n\t"                 // 与b->a的值相乘。
		"addl %%eax,4(%2)\n\t"          // 乘积的低位与c[1]相加放入c[1]。
		"adcl %%edx,8(%2)\n\t"          // 乘积的高位与c[2]相加再加进位，然后放入a[2]。
		"adcl $0,12(%2)"                // 把0与c[3]相加再加进位，然后放入c[3]。
		::"b" ((long) a),"c" ((long) b),"D" ((long) c)
   2197a:	8b 5c 24 10          	mov    0x10(%esp),%ebx
   2197e:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   21982:	8b 74 24 18          	mov    0x18(%esp),%esi
	__asm__("movl (%0),%%eax\n\t"           // 取a->a的值到eax。
   21986:	89 f7                	mov    %esi,%edi
   21988:	8b 03                	mov    (%ebx),%eax
   2198a:	f7 21                	mull   (%ecx)
   2198c:	89 07                	mov    %eax,(%edi)
   2198e:	89 57 04             	mov    %edx,0x4(%edi)
   21991:	8b 43 04             	mov    0x4(%ebx),%eax
   21994:	f7 61 04             	mull   0x4(%ecx)
   21997:	89 47 08             	mov    %eax,0x8(%edi)
   2199a:	89 57 0c             	mov    %edx,0xc(%edi)
   2199d:	8b 03                	mov    (%ebx),%eax
   2199f:	f7 61 04             	mull   0x4(%ecx)
   219a2:	01 47 04             	add    %eax,0x4(%edi)
   219a5:	11 57 08             	adc    %edx,0x8(%edi)
   219a8:	83 57 0c 00          	adcl   $0x0,0xc(%edi)
   219ac:	8b 43 04             	mov    0x4(%ebx),%eax
   219af:	f7 21                	mull   (%ecx)
   219b1:	01 47 04             	add    %eax,0x4(%edi)
   219b4:	11 57 08             	adc    %edx,0x8(%edi)
   219b7:	83 57 0c 00          	adcl   $0x0,0xc(%edi)
		:"ax","dx");
}
   219bb:	90                   	nop
   219bc:	5b                   	pop    %ebx
   219bd:	5e                   	pop    %esi
   219be:	5f                   	pop    %edi
   219bf:	c3                   	ret    

000219c0 <fmul>:

// 仿真浮点指令FMUL。
// 临时实数src1 * src2 -> result处。
void fmul(const temp_real * src1, const temp_real * src2, temp_real * result)
{
   219c0:	83 ec 20             	sub    $0x20,%esp
	int i,sign;
	int tmp[4] = {0,0,0,0};
   219c3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   219ca:	00 
   219cb:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   219d2:	00 
   219d3:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   219da:	00 
   219db:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   219e2:	00 

// 首先确定两数相乘的符号。符号值等于两者符号位异或值。然后计算乘后的指数值。相乘时指数值需要相加。但是由于指数使用偏置
// 格式保存，两个数的指数相加时偏置量也被加了两次，因此需要减掉一个偏置量值（临时实数的偏置量是16383）。
	sign = (src1->exponent ^ src2->exponent) & 0x8000;
   219e3:	8b 44 24 24          	mov    0x24(%esp),%eax
   219e7:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   219eb:	8b 44 24 28          	mov    0x28(%esp),%eax
   219ef:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   219f3:	31 d0                	xor    %edx,%eax
   219f5:	98                   	cwtl   
   219f6:	25 00 80 00 00       	and    $0x8000,%eax
   219fb:	89 44 24 18          	mov    %eax,0x18(%esp)
	i = (src1->exponent & 0x7fff) + (src2->exponent & 0x7fff) - 16383 + 1;
   219ff:	8b 44 24 24          	mov    0x24(%esp),%eax
   21a03:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21a07:	98                   	cwtl   
   21a08:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21a0d:	89 c2                	mov    %eax,%edx
   21a0f:	8b 44 24 28          	mov    0x28(%esp),%eax
   21a13:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21a17:	98                   	cwtl   
   21a18:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21a1d:	01 d0                	add    %edx,%eax
   21a1f:	2d fe 3f 00 00       	sub    $0x3ffe,%eax
   21a24:	89 44 24 1c          	mov    %eax,0x1c(%esp)
// 如果结果指数变成了负值，表示两数相乘后产生下溢。于是直接返回带符号的零值。如果结果指数大于0x7fff，表示产生上溢，于是
// 设置状态字溢出异常标志位，并返回。
	if (i<0) {
   21a28:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   21a2d:	79 2b                	jns    21a5a <fmul+0x9a>
		result->exponent = sign;
   21a2f:	8b 44 24 18          	mov    0x18(%esp),%eax
   21a33:	89 c2                	mov    %eax,%edx
   21a35:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21a39:	66 89 50 08          	mov    %dx,0x8(%eax)
		result->a = result->b = 0;
   21a3d:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21a41:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   21a48:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21a4c:	8b 50 04             	mov    0x4(%eax),%edx
   21a4f:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21a53:	89 10                	mov    %edx,(%eax)
		return;
   21a55:	e9 b6 00 00 00       	jmp    21b10 <fmul+0x150>
	}
	if (i>0x7fff) {
   21a5a:	81 7c 24 1c ff 7f 00 	cmpl   $0x7fff,0x1c(%esp)
   21a61:	00 
   21a62:	7e 1e                	jle    21a82 <fmul+0xc2>
		set_OE();       // 置位溢出标志位。
   21a64:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21a69:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21a6f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21a74:	83 ca 08             	or     $0x8,%edx
   21a77:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   21a7d:	e9 8e 00 00 00       	jmp    21b10 <fmul+0x150>
	}
// 如果两数尾数相乘后结果不为0，则对结果尾数进行规格化处理。即左移结果尾数值，使得最高有效位为1。同时相应地调整指数值。如果
// 两数相乘后16字节的结尾数为0，则也设置指数值为0。最后把相乘结果保存在临时实数变量result中。
	mul64(src1,src2,tmp);
   21a82:	8d 44 24 08          	lea    0x8(%esp),%eax
   21a86:	50                   	push   %eax
   21a87:	ff 74 24 2c          	pushl  0x2c(%esp)
   21a8b:	ff 74 24 2c          	pushl  0x2c(%esp)
   21a8f:	e8 e3 fe ff ff       	call   21977 <mul64>
   21a94:	83 c4 0c             	add    $0xc,%esp
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
   21a97:	8b 44 24 08          	mov    0x8(%esp),%eax
   21a9b:	85 c0                	test   %eax,%eax
   21a9d:	75 2c                	jne    21acb <fmul+0x10b>
   21a9f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21aa3:	85 c0                	test   %eax,%eax
   21aa5:	75 24                	jne    21acb <fmul+0x10b>
   21aa7:	8b 44 24 10          	mov    0x10(%esp),%eax
   21aab:	85 c0                	test   %eax,%eax
   21aad:	75 1c                	jne    21acb <fmul+0x10b>
   21aaf:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ab3:	85 c0                	test   %eax,%eax
   21ab5:	74 25                	je     21adc <fmul+0x11c>
		while (i && tmp[3] >= 0) {
   21ab7:	eb 12                	jmp    21acb <fmul+0x10b>
			i--;
   21ab9:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
			shift(tmp);
   21abe:	8d 44 24 08          	lea    0x8(%esp),%eax
   21ac2:	50                   	push   %eax
   21ac3:	e8 93 fe ff ff       	call   2195b <shift>
   21ac8:	83 c4 04             	add    $0x4,%esp
		while (i && tmp[3] >= 0) {
   21acb:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   21ad0:	74 14                	je     21ae6 <fmul+0x126>
   21ad2:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ad6:	85 c0                	test   %eax,%eax
   21ad8:	79 df                	jns    21ab9 <fmul+0xf9>
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
   21ada:	eb 0a                	jmp    21ae6 <fmul+0x126>
		}
	else
		i = 0;
   21adc:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21ae3:	00 
   21ae4:	eb 01                	jmp    21ae7 <fmul+0x127>
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
   21ae6:	90                   	nop
	result->exponent = i | sign;
   21ae7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21aeb:	89 c2                	mov    %eax,%edx
   21aed:	8b 44 24 18          	mov    0x18(%esp),%eax
   21af1:	09 c2                	or     %eax,%edx
   21af3:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21af7:	66 89 50 08          	mov    %dx,0x8(%eax)
	result->a = tmp[2];
   21afb:	8b 54 24 10          	mov    0x10(%esp),%edx
   21aff:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21b03:	89 10                	mov    %edx,(%eax)
	result->b = tmp[3];
   21b05:	8b 54 24 14          	mov    0x14(%esp),%edx
   21b09:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21b0d:	89 50 04             	mov    %edx,0x4(%eax)
}
   21b10:	83 c4 20             	add    $0x20,%esp
   21b13:	c3                   	ret    

00021b14 <shift_left>:
{
	__asm__ __volatile__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
		"movl 4(%0),%%eax ; adcl %%eax,4(%0)\n\t"
		"movl 8(%0),%%eax ; adcl %%eax,8(%0)\n\t"
		"movl 12(%0),%%eax ; adcl %%eax,12(%0)"
		::"r" ((long) c):"ax");
   21b14:	8b 54 24 04          	mov    0x4(%esp),%edx
	__asm__ __volatile__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
   21b18:	8b 02                	mov    (%edx),%eax
   21b1a:	01 02                	add    %eax,(%edx)
   21b1c:	8b 42 04             	mov    0x4(%edx),%eax
   21b1f:	11 42 04             	adc    %eax,0x4(%edx)
   21b22:	8b 42 08             	mov    0x8(%edx),%eax
   21b25:	11 42 08             	adc    %eax,0x8(%edx)
   21b28:	8b 42 0c             	mov    0xc(%edx),%eax
   21b2b:	11 42 0c             	adc    %eax,0xc(%edx)
}
   21b2e:	90                   	nop
   21b2f:	c3                   	ret    

00021b30 <shift_right>:

// 将指针c指向的4字节中内容右移1位。
static void shift_right(int * c)
{
	__asm__("shrl $1,12(%0) ; rcrl $1,8(%0) ; rcrl $1,4(%0) ; rcrl $1,(%0)"
		::"r" ((long) c));
   21b30:	8b 44 24 04          	mov    0x4(%esp),%eax
	__asm__("shrl $1,12(%0) ; rcrl $1,8(%0) ; rcrl $1,4(%0) ; rcrl $1,(%0)"
   21b34:	d1 68 0c             	shrl   0xc(%eax)
   21b37:	d1 58 08             	rcrl   0x8(%eax)
   21b3a:	d1 58 04             	rcrl   0x4(%eax)
   21b3d:	d1 18                	rcrl   (%eax)
}
   21b3f:	90                   	nop
   21b40:	c3                   	ret    

00021b41 <try_sub>:

// 减法运算。
// 16字节减法运算，b-a ->a。最后根据是否有借位（CF=1）设置OK。若无借位（CF=0）则ok = 1。否则ok = 0。
static int try_sub(int * a, int * b)
{
   21b41:	83 ec 10             	sub    $0x10,%esp

	__asm__ __volatile__("movl (%1),%%eax ; subl %%eax,(%2)\n\t"
		"movl 4(%1),%%eax ; sbbl %%eax,4(%2)\n\t"
		"movl 8(%1),%%eax ; sbbl %%eax,8(%2)\n\t"
		"movl 12(%1),%%eax ; sbbl %%eax,12(%2)\n\t"
		"setae %%al":"=a" (ok):"c" ((long) a),"d" ((long) b));
   21b44:	8b 44 24 14          	mov    0x14(%esp),%eax
   21b48:	8b 54 24 18          	mov    0x18(%esp),%edx
	__asm__ __volatile__("movl (%1),%%eax ; subl %%eax,(%2)\n\t"
   21b4c:	89 c1                	mov    %eax,%ecx
   21b4e:	8b 01                	mov    (%ecx),%eax
   21b50:	29 02                	sub    %eax,(%edx)
   21b52:	8b 41 04             	mov    0x4(%ecx),%eax
   21b55:	19 42 04             	sbb    %eax,0x4(%edx)
   21b58:	8b 41 08             	mov    0x8(%ecx),%eax
   21b5b:	19 42 08             	sbb    %eax,0x8(%edx)
   21b5e:	8b 41 0c             	mov    0xc(%ecx),%eax
   21b61:	19 42 0c             	sbb    %eax,0xc(%edx)
   21b64:	0f 93 c0             	setae  %al
   21b67:	88 44 24 0f          	mov    %al,0xf(%esp)
	return ok;
   21b6b:	0f be 44 24 0f       	movsbl 0xf(%esp),%eax
}
   21b70:	83 c4 10             	add    $0x10,%esp
   21b73:	c3                   	ret    

00021b74 <div64>:

// 16字节除法。
// 参数a/b -> c。利用减法模拟多字节除法。
static void div64(int * a, int * b, int * c)
{
   21b74:	83 ec 20             	sub    $0x20,%esp
	int tmp[4];     // 余数变量。
	int i;
	unsigned int mask = 0;  // 操作位。
   21b77:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   21b7e:	00 

	c += 4;
   21b7f:	83 44 24 2c 10       	addl   $0x10,0x2c(%esp)
// 16字节共64位。
	for (i = 0 ; i<64 ; i++) {
   21b84:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21b8b:	00 
   21b8c:	e9 ac 00 00 00       	jmp    21c3d <div64+0xc9>
		if (!(mask >>= 1)) {
   21b91:	d1 6c 24 18          	shrl   0x18(%esp)
   21b95:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   21b9a:	75 0d                	jne    21ba9 <div64+0x35>
			c--;
   21b9c:	83 6c 24 2c 04       	subl   $0x4,0x2c(%esp)
			mask = 0x80000000;
   21ba1:	c7 44 24 18 00 00 00 	movl   $0x80000000,0x18(%esp)
   21ba8:	80 
		}
// 把余数值tmp初始化为a值。
		tmp[0] = a[0]; tmp[1] = a[1];
   21ba9:	8b 44 24 24          	mov    0x24(%esp),%eax
   21bad:	8b 00                	mov    (%eax),%eax
   21baf:	89 44 24 08          	mov    %eax,0x8(%esp)
   21bb3:	8b 44 24 24          	mov    0x24(%esp),%eax
   21bb7:	8b 40 04             	mov    0x4(%eax),%eax
   21bba:	89 44 24 0c          	mov    %eax,0xc(%esp)
		tmp[2] = a[2]; tmp[3] = a[3];
   21bbe:	8b 44 24 24          	mov    0x24(%esp),%eax
   21bc2:	8b 40 08             	mov    0x8(%eax),%eax
   21bc5:	89 44 24 10          	mov    %eax,0x10(%esp)
   21bc9:	8b 44 24 24          	mov    0x24(%esp),%eax
   21bcd:	8b 40 0c             	mov    0xc(%eax),%eax
   21bd0:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (try_sub(b,tmp)) {           // 是否有借位。
   21bd4:	8d 44 24 08          	lea    0x8(%esp),%eax
   21bd8:	50                   	push   %eax
   21bd9:	ff 74 24 2c          	pushl  0x2c(%esp)
   21bdd:	e8 5f ff ff ff       	call   21b41 <try_sub>
   21be2:	83 c4 08             	add    $0x8,%esp
   21be5:	85 c0                	test   %eax,%eax
   21be7:	74 43                	je     21c2c <div64+0xb8>
			*c |= mask;             // 如果无借位，置当前操作位，把余数存入a，用于下次操作。
   21be9:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21bed:	8b 00                	mov    (%eax),%eax
   21bef:	0b 44 24 18          	or     0x18(%esp),%eax
   21bf3:	89 c2                	mov    %eax,%edx
   21bf5:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21bf9:	89 10                	mov    %edx,(%eax)
			a[0] = tmp[0]; a[1] = tmp[1];
   21bfb:	8b 54 24 08          	mov    0x8(%esp),%edx
   21bff:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c03:	89 10                	mov    %edx,(%eax)
   21c05:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c09:	8d 50 04             	lea    0x4(%eax),%edx
   21c0c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21c10:	89 02                	mov    %eax,(%edx)
			a[2] = tmp[2]; a[3] = tmp[3];
   21c12:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c16:	8d 50 08             	lea    0x8(%eax),%edx
   21c19:	8b 44 24 10          	mov    0x10(%esp),%eax
   21c1d:	89 02                	mov    %eax,(%edx)
   21c1f:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c23:	8d 50 0c             	lea    0xc(%eax),%edx
   21c26:	8b 44 24 14          	mov    0x14(%esp),%eax
   21c2a:	89 02                	mov    %eax,(%edx)
		}
		shift_right(b);         // 右移一位，使b的值与值数处于同一级别。
   21c2c:	ff 74 24 28          	pushl  0x28(%esp)
   21c30:	e8 fb fe ff ff       	call   21b30 <shift_right>
   21c35:	83 c4 04             	add    $0x4,%esp
	for (i = 0 ; i<64 ; i++) {
   21c38:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   21c3d:	83 7c 24 1c 3f       	cmpl   $0x3f,0x1c(%esp)
   21c42:	0f 8e 49 ff ff ff    	jle    21b91 <div64+0x1d>
	}
}
   21c48:	90                   	nop
   21c49:	83 c4 20             	add    $0x20,%esp
   21c4c:	c3                   	ret    

00021c4d <fdiv>:

// 仿真浮点指令FDIV。
// 临时实数src1 / src2 -> result处。
void fdiv(const temp_real * src1, const temp_real * src2, temp_real * result)
{
   21c4d:	83 ec 40             	sub    $0x40,%esp
	int i,sign;
	int a[4],b[4],tmp[4] = {0,0,0,0};
   21c50:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   21c57:	00 
   21c58:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   21c5f:	00 
   21c60:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   21c67:	00 
   21c68:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   21c6f:	00 

// 首先确定两个数相除的符号。符号值等于两者符号位异或值。然后判断除数src2值是否为0，如果是，则置被零除异常。
	sign = (src1->exponent ^ src2->exponent) & 0x8000;
   21c70:	8b 44 24 44          	mov    0x44(%esp),%eax
   21c74:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   21c78:	8b 44 24 48          	mov    0x48(%esp),%eax
   21c7c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21c80:	31 d0                	xor    %edx,%eax
   21c82:	98                   	cwtl   
   21c83:	25 00 80 00 00       	and    $0x8000,%eax
   21c88:	89 44 24 38          	mov    %eax,0x38(%esp)
	if (!(src2->a || src2->b)) {
   21c8c:	8b 44 24 48          	mov    0x48(%esp),%eax
   21c90:	8b 00                	mov    (%eax),%eax
   21c92:	85 c0                	test   %eax,%eax
   21c94:	75 29                	jne    21cbf <fdiv+0x72>
   21c96:	8b 44 24 48          	mov    0x48(%esp),%eax
   21c9a:	8b 40 04             	mov    0x4(%eax),%eax
   21c9d:	85 c0                	test   %eax,%eax
   21c9f:	75 1e                	jne    21cbf <fdiv+0x72>
		set_ZE();               // 置被零除异常。
   21ca1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21ca6:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21cac:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21cb1:	83 ca 04             	or     $0x4,%edx
   21cb4:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   21cba:	e9 d8 01 00 00       	jmp    21e97 <fdiv+0x24a>
	}
// 然后计算除后的指数值。相除时指数值需要相减。但是由于指数使用偏置格式保存，两个数的指数相减时偏置量也被减去了，因此需
// 要加上偏置量值（临时实数的偏置量是16383）。
        i = (src1->exponent & 0x7fff) - (src2->exponent & 0x7fff) + 16383;
   21cbf:	8b 44 24 44          	mov    0x44(%esp),%eax
   21cc3:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21cc7:	98                   	cwtl   
   21cc8:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21ccd:	89 c2                	mov    %eax,%edx
   21ccf:	8b 44 24 48          	mov    0x48(%esp),%eax
   21cd3:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21cd7:	98                   	cwtl   
   21cd8:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21cdd:	29 c2                	sub    %eax,%edx
   21cdf:	89 d0                	mov    %edx,%eax
   21ce1:	05 ff 3f 00 00       	add    $0x3fff,%eax
   21ce6:	89 44 24 3c          	mov    %eax,0x3c(%esp)
// 如果结果指数变成了负值，表示两数相除后产生下溢。于是直接返回带符号的零值。
	if (i<0) {
   21cea:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   21cef:	79 44                	jns    21d35 <fdiv+0xe8>
		set_UE();
   21cf1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21cf6:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21cfc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21d01:	83 ca 10             	or     $0x10,%edx
   21d04:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		result->exponent = sign;        // 设置符号位。
   21d0a:	8b 44 24 38          	mov    0x38(%esp),%eax
   21d0e:	89 c2                	mov    %eax,%edx
   21d10:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21d14:	66 89 50 08          	mov    %dx,0x8(%eax)
		result->a = result->b = 0;      // 设置返回值为0。
   21d18:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21d1c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   21d23:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21d27:	8b 50 04             	mov    0x4(%eax),%edx
   21d2a:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21d2e:	89 10                	mov    %edx,(%eax)
		return;
   21d30:	e9 62 01 00 00       	jmp    21e97 <fdiv+0x24a>
	}
// 把临时实数src1、src2有效数放入整型数组a和b。
	a[0] = a[1] = 0;
   21d35:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   21d3c:	00 
   21d3d:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21d41:	89 44 24 28          	mov    %eax,0x28(%esp)
	a[2] = src1->a;
   21d45:	8b 44 24 44          	mov    0x44(%esp),%eax
   21d49:	8b 00                	mov    (%eax),%eax
   21d4b:	89 44 24 30          	mov    %eax,0x30(%esp)
	a[3] = src1->b;
   21d4f:	8b 44 24 44          	mov    0x44(%esp),%eax
   21d53:	8b 40 04             	mov    0x4(%eax),%eax
   21d56:	89 44 24 34          	mov    %eax,0x34(%esp)
	b[0] = b[1] = 0;
   21d5a:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21d61:	00 
   21d62:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21d66:	89 44 24 18          	mov    %eax,0x18(%esp)
	b[2] = src2->a;
   21d6a:	8b 44 24 48          	mov    0x48(%esp),%eax
   21d6e:	8b 00                	mov    (%eax),%eax
   21d70:	89 44 24 20          	mov    %eax,0x20(%esp)
	b[3] = src2->b;
   21d74:	8b 44 24 48          	mov    0x48(%esp),%eax
   21d78:	8b 40 04             	mov    0x4(%eax),%eax
   21d7b:	89 44 24 24          	mov    %eax,0x24(%esp)
// 如果b[3]大于等于0，则进行规格化处理，即对b进行左移调整b[3]为负数。
	while (b[3] >= 0) {
   21d7f:	eb 12                	jmp    21d93 <fdiv+0x146>
		i++;
   21d81:	83 44 24 3c 01       	addl   $0x1,0x3c(%esp)
		shift_left(b);
   21d86:	8d 44 24 18          	lea    0x18(%esp),%eax
   21d8a:	50                   	push   %eax
   21d8b:	e8 84 fd ff ff       	call   21b14 <shift_left>
   21d90:	83 c4 04             	add    $0x4,%esp
	while (b[3] >= 0) {
   21d93:	8b 44 24 24          	mov    0x24(%esp),%eax
   21d97:	85 c0                	test   %eax,%eax
   21d99:	79 e6                	jns    21d81 <fdiv+0x134>
	}
// 进行64位除法操作。
	div64(a,b,tmp);
   21d9b:	8d 44 24 08          	lea    0x8(%esp),%eax
   21d9f:	50                   	push   %eax
   21da0:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   21da4:	50                   	push   %eax
   21da5:	8d 44 24 30          	lea    0x30(%esp),%eax
   21da9:	50                   	push   %eax
   21daa:	e8 c5 fd ff ff       	call   21b74 <div64>
   21daf:	83 c4 0c             	add    $0xc,%esp
// 如果除结果tmp[0]、tmp[1]、tmp[2]和tmp[3]都为0的话，说明结果为0,则设置指数i为0。否则进行规格化处理。
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3]) {
   21db2:	8b 44 24 08          	mov    0x8(%esp),%eax
   21db6:	85 c0                	test   %eax,%eax
   21db8:	75 2c                	jne    21de6 <fdiv+0x199>
   21dba:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21dbe:	85 c0                	test   %eax,%eax
   21dc0:	75 24                	jne    21de6 <fdiv+0x199>
   21dc2:	8b 44 24 10          	mov    0x10(%esp),%eax
   21dc6:	85 c0                	test   %eax,%eax
   21dc8:	75 1c                	jne    21de6 <fdiv+0x199>
   21dca:	8b 44 24 14          	mov    0x14(%esp),%eax
   21dce:	85 c0                	test   %eax,%eax
   21dd0:	74 46                	je     21e18 <fdiv+0x1cb>
		while (i && tmp[3] >= 0) {      // 进行规格化处理。
   21dd2:	eb 12                	jmp    21de6 <fdiv+0x199>
			i--;
   21dd4:	83 6c 24 3c 01       	subl   $0x1,0x3c(%esp)
			shift_left(tmp);
   21dd9:	8d 44 24 08          	lea    0x8(%esp),%eax
   21ddd:	50                   	push   %eax
   21dde:	e8 31 fd ff ff       	call   21b14 <shift_left>
   21de3:	83 c4 04             	add    $0x4,%esp
		while (i && tmp[3] >= 0) {      // 进行规格化处理。
   21de6:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   21deb:	74 08                	je     21df5 <fdiv+0x1a8>
   21ded:	8b 44 24 14          	mov    0x14(%esp),%eax
   21df1:	85 c0                	test   %eax,%eax
   21df3:	79 df                	jns    21dd4 <fdiv+0x187>
		}
		if (tmp[3] >= 0)                // 如果tmp[3]大于等于0，设置状态字非格式化异常标志位。
   21df5:	8b 44 24 14          	mov    0x14(%esp),%eax
   21df9:	85 c0                	test   %eax,%eax
   21dfb:	78 23                	js     21e20 <fdiv+0x1d3>
			set_DE();
   21dfd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21e02:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21e08:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21e0d:	83 ca 02             	or     $0x2,%edx
   21e10:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		if (tmp[3] >= 0)                // 如果tmp[3]大于等于0，设置状态字非格式化异常标志位。
   21e16:	eb 08                	jmp    21e20 <fdiv+0x1d3>
	} else
		i = 0;          // 设置结果指数为0。
   21e18:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%esp)
   21e1f:	00 
// 如果结果指数大于0x7fff，表示产生上溢，于是设置状态字溢出异常标志位，并返回。
	if (i>0x7fff) {
   21e20:	81 7c 24 3c ff 7f 00 	cmpl   $0x7fff,0x3c(%esp)
   21e27:	00 
   21e28:	7e 1b                	jle    21e45 <fdiv+0x1f8>
		set_OE();
   21e2a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21e2f:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21e35:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21e3a:	83 ca 08             	or     $0x8,%edx
   21e3d:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   21e43:	eb 52                	jmp    21e97 <fdiv+0x24a>
	}
// 如果tmp[0]或tmp[1]不为0，则设置状态字精度异常标志位
	if (tmp[0] || tmp[1])
   21e45:	8b 44 24 08          	mov    0x8(%esp),%eax
   21e49:	85 c0                	test   %eax,%eax
   21e4b:	75 08                	jne    21e55 <fdiv+0x208>
   21e4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21e51:	85 c0                	test   %eax,%eax
   21e53:	74 19                	je     21e6e <fdiv+0x221>
		set_PE();
   21e55:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21e5a:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21e60:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21e65:	83 ca 20             	or     $0x20,%edx
   21e68:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	result->exponent = i | sign;            // 设置返回临时实数的符号位和指数值。
   21e6e:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   21e72:	89 c2                	mov    %eax,%edx
   21e74:	8b 44 24 38          	mov    0x38(%esp),%eax
   21e78:	09 c2                	or     %eax,%edx
   21e7a:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21e7e:	66 89 50 08          	mov    %dx,0x8(%eax)
	result->a = tmp[2];                     // 设置返回临时实数的有效值。
   21e82:	8b 54 24 10          	mov    0x10(%esp),%edx
   21e86:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21e8a:	89 10                	mov    %edx,(%eax)
	result->b = tmp[3];
   21e8c:	8b 54 24 14          	mov    0x14(%esp),%edx
   21e90:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21e94:	89 50 04             	mov    %edx,0x4(%eax)
}
   21e97:	83 c4 40             	add    $0x40,%esp
   21e9a:	c3                   	ret    

00021e9b <normalize>:
#define clear_Cx() (I387.swd &= ~0x4500)

// 对临时实数a进行规格化处理。即表示成指数、有效数形式。
// 例如：102.345表示成1.02345 X 10^2。0.0001234表示成1.234 X 10^-1。当然，函数中是二进制表示。
static void normalize(temp_real * a)
{
   21e9b:	83 ec 10             	sub    $0x10,%esp
	int i = a->exponent & 0x7fff;           // 取指数值（略去符号位）。
   21e9e:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ea2:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21ea6:	98                   	cwtl   
   21ea7:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21eac:	89 44 24 0c          	mov    %eax,0xc(%esp)
	int sign = a->exponent & 0x8000;        // 取符号位。
   21eb0:	8b 44 24 14          	mov    0x14(%esp),%eax
   21eb4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21eb8:	98                   	cwtl   
   21eb9:	25 00 80 00 00       	and    $0x8000,%eax
   21ebe:	89 44 24 08          	mov    %eax,0x8(%esp)

// 如果临时实数a的64位有效数（尾数）为0，那么说明a等于0。于是清a的指数，返回。
	if (!(a->a || a->b)) {
   21ec2:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ec6:	8b 00                	mov    (%eax),%eax
   21ec8:	85 c0                	test   %eax,%eax
   21eca:	75 3a                	jne    21f06 <normalize+0x6b>
   21ecc:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ed0:	8b 40 04             	mov    0x4(%eax),%eax
   21ed3:	85 c0                	test   %eax,%eax
   21ed5:	75 2f                	jne    21f06 <normalize+0x6b>
		a->exponent = 0;
   21ed7:	8b 44 24 14          	mov    0x14(%esp),%eax
   21edb:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   21ee1:	eb 49                	jmp    21f2c <normalize+0x91>
	}
// 如果a的尾数最左端有0值位，那么将尾数左移，同时调整指数值（递减）。直到尾数的b字段最高有效位MSB是1位置（此时b表现为负值）
// 最后再添加符号位。
	while (i && a->b >= 0) {
		i--;
   21ee3:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (a->a),"=r" (a->b)
			:"0" (a->a),"1" (a->b));
   21ee8:	8b 44 24 14          	mov    0x14(%esp),%eax
   21eec:	8b 10                	mov    (%eax),%edx
   21eee:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ef2:	8b 40 04             	mov    0x4(%eax),%eax
		__asm__("addl %0,%0 ; adcl %1,%1"
   21ef5:	01 d2                	add    %edx,%edx
   21ef7:	11 c0                	adc    %eax,%eax
   21ef9:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   21efd:	89 11                	mov    %edx,(%ecx)
   21eff:	8b 54 24 14          	mov    0x14(%esp),%edx
   21f03:	89 42 04             	mov    %eax,0x4(%edx)
	while (i && a->b >= 0) {
   21f06:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   21f0b:	74 0b                	je     21f18 <normalize+0x7d>
   21f0d:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f11:	8b 40 04             	mov    0x4(%eax),%eax
   21f14:	85 c0                	test   %eax,%eax
   21f16:	79 cb                	jns    21ee3 <normalize+0x48>
	}
	a->exponent = i | sign;
   21f18:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21f1c:	89 c2                	mov    %eax,%edx
   21f1e:	8b 44 24 08          	mov    0x8(%esp),%eax
   21f22:	09 c2                	or     %eax,%edx
   21f24:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f28:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   21f2c:	83 c4 10             	add    $0x10,%esp
   21f2f:	c3                   	ret    

00021f30 <ftst>:

// 仿真浮点指令FTST。
// 即栈定累加器ST(0)与0比较，并根据比较结果设置条件位。若ST > 0.0，则C3，C2，C0分别为000；若ST < 0.0，则条件位为001；若
// ST == 0.0，则条件位是100；若不可比较，则条件位为111。
void ftst(const temp_real * a)
{
   21f30:	83 ec 10             	sub    $0x10,%esp
	temp_real b;

// 首先清状态字中条件标志位，并对比较值b（ST）进行规格化处理。若b不等于零并且设置了符号位（是负数），则设置条件位C0。否则设置
// 条件位C3。
	clear_Cx();
   21f33:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21f38:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21f3e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21f43:	80 e6 ba             	and    $0xba,%dh
   21f46:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	b = *a;
   21f4c:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f50:	8b 10                	mov    (%eax),%edx
   21f52:	89 54 24 04          	mov    %edx,0x4(%esp)
   21f56:	8b 50 04             	mov    0x4(%eax),%edx
   21f59:	89 54 24 08          	mov    %edx,0x8(%esp)
   21f5d:	8b 40 08             	mov    0x8(%eax),%eax
   21f60:	89 44 24 0c          	mov    %eax,0xc(%esp)
	normalize(&b);
   21f64:	8d 44 24 04          	lea    0x4(%esp),%eax
   21f68:	50                   	push   %eax
   21f69:	e8 2d ff ff ff       	call   21e9b <normalize>
   21f6e:	83 c4 04             	add    $0x4,%esp
	if (b.a || b.b || b.exponent) {
   21f71:	8b 44 24 04          	mov    0x4(%esp),%eax
   21f75:	85 c0                	test   %eax,%eax
   21f77:	75 12                	jne    21f8b <ftst+0x5b>
   21f79:	8b 44 24 08          	mov    0x8(%esp),%eax
   21f7d:	85 c0                	test   %eax,%eax
   21f7f:	75 0a                	jne    21f8b <ftst+0x5b>
   21f81:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21f86:	66 85 c0             	test   %ax,%ax
   21f89:	74 25                	je     21fb0 <ftst+0x80>
		if (b.exponent < 0)
   21f8b:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21f90:	66 85 c0             	test   %ax,%ax
   21f93:	79 34                	jns    21fc9 <ftst+0x99>
			set_C0();
   21f95:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21f9a:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21fa0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21fa5:	80 ce 01             	or     $0x1,%dh
   21fa8:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		if (b.exponent < 0)
   21fae:	eb 19                	jmp    21fc9 <ftst+0x99>
	} else
		set_C3();
   21fb0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21fb5:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21fbb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21fc0:	80 ce 40             	or     $0x40,%dh
   21fc3:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
}
   21fc9:	90                   	nop
   21fca:	83 c4 10             	add    $0x10,%esp
   21fcd:	c3                   	ret    

00021fce <fcom>:

// 仿真浮点指令FCOM。
// 比较两个参数src1、src2。并根据比较结果设置条件位。若src1 > src2，则C3，C2，C0分别为000；若src1 < src2，则条件位为
// 001；若两者相等，则条件位是100。
void fcom(const temp_real * src1, const temp_real * src2)
{
   21fce:	83 ec 1c             	sub    $0x1c,%esp
	temp_real a;

	a = *src1;
   21fd1:	8b 44 24 20          	mov    0x20(%esp),%eax
   21fd5:	8b 10                	mov    (%eax),%edx
   21fd7:	89 54 24 04          	mov    %edx,0x4(%esp)
   21fdb:	8b 50 04             	mov    0x4(%eax),%edx
   21fde:	89 54 24 08          	mov    %edx,0x8(%esp)
   21fe2:	8b 40 08             	mov    0x8(%eax),%eax
   21fe5:	89 44 24 0c          	mov    %eax,0xc(%esp)
	a.exponent ^= 0x8000;           // 符号位取反。
   21fe9:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21fee:	66 35 00 80          	xor    $0x8000,%ax
   21ff2:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	fadd(&a,src2,&a);               // 两者相加（即相减）。
   21ff7:	83 ec 04             	sub    $0x4,%esp
   21ffa:	8d 44 24 08          	lea    0x8(%esp),%eax
   21ffe:	50                   	push   %eax
   21fff:	ff 74 24 2c          	pushl  0x2c(%esp)
   22003:	8d 44 24 10          	lea    0x10(%esp),%eax
   22007:	50                   	push   %eax
   22008:	e8 e9 f7 ff ff       	call   217f6 <fadd>
   2200d:	83 c4 10             	add    $0x10,%esp
	ftst(&a);                       // 测试结果并设置条件位。
   22010:	83 ec 0c             	sub    $0xc,%esp
   22013:	8d 44 24 10          	lea    0x10(%esp),%eax
   22017:	50                   	push   %eax
   22018:	e8 13 ff ff ff       	call   21f30 <ftst>
   2201d:	83 c4 10             	add    $0x10,%esp
}
   22020:	90                   	nop
   22021:	83 c4 1c             	add    $0x1c,%esp
   22024:	c3                   	ret    

00022025 <fucom>:

// 仿真浮点指令FUCOM（无次序比较）。
// 用于操作数之一是NaN的比较。
void fucom(const temp_real * src1, const temp_real * src2)
{
   22025:	83 ec 0c             	sub    $0xc,%esp
	fcom(src1,src2);
   22028:	83 ec 08             	sub    $0x8,%esp
   2202b:	ff 74 24 1c          	pushl  0x1c(%esp)
   2202f:	ff 74 24 1c          	pushl  0x1c(%esp)
   22033:	e8 96 ff ff ff       	call   21fce <fcom>
   22038:	83 c4 10             	add    $0x10,%esp
}
   2203b:	90                   	nop
   2203c:	83 c4 0c             	add    $0xc,%esp
   2203f:	c3                   	ret    

00022040 <short_to_temp>:
// 短实数长度是32位，基有效数（尾数）长度是23位，指数是8位，还有1个符号位。
void short_to_temp(const short_real * a, temp_real * b)
{
// 首先处理被转换的短实数是0的情况。若为0,则设置对应临时实数b的有效数为0。然后根据短实数符号位设置临时实数的符号位，即exponent
// 的最高有效位。
	if (!(*a & 0x7fffffff)) {
   22040:	8b 44 24 04          	mov    0x4(%esp),%eax
   22044:	8b 00                	mov    (%eax),%eax
   22046:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   2204b:	85 c0                	test   %eax,%eax
   2204d:	75 38                	jne    22087 <short_to_temp+0x47>
		b->a = b->b = 0;                // 置临时实数的有效数 = 0。
   2204f:	8b 44 24 08          	mov    0x8(%esp),%eax
   22053:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   2205a:	8b 44 24 08          	mov    0x8(%esp),%eax
   2205e:	8b 50 04             	mov    0x4(%eax),%edx
   22061:	8b 44 24 08          	mov    0x8(%esp),%eax
   22065:	89 10                	mov    %edx,(%eax)
		if (*a)
   22067:	8b 44 24 04          	mov    0x4(%esp),%eax
   2206b:	8b 00                	mov    (%eax),%eax
   2206d:	85 c0                	test   %eax,%eax
   2206f:	74 0b                	je     2207c <short_to_temp+0x3c>
			b->exponent = 0x8000;   // 设置符号位。
   22071:	8b 44 24 08          	mov    0x8(%esp),%eax
   22075:	66 c7 40 08 00 80    	movw   $0x8000,0x8(%eax)
		else
			b->exponent = 0;
		return;
   2207b:	c3                   	ret    
			b->exponent = 0;
   2207c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22080:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   22086:	c3                   	ret    
	}
// 对于一般短实数，先确定对应临时实数的指数值。这里需要用到整型数偏置表示方法的概念。短实数指数的偏置量是127，而临时实数指数的偏置
// 量是16383。因此在取出短实数中指数值后需要变更其中的偏置量为16383。此时就形成了临时实数格式的指数值exponent。另外，如果短实数
// 是负数，则需要设置临时实数的符号位（位79）。下一步设置尾数值。方法是把短实数左移8位，让23位尾数最高有效位处于临时实数的位62处。
// 而临时实数尾数位63处需要恒置一个1，即需要或上0x80000000。最后清掉临时实数低32位有效数。
	b->exponent = ((*a>>23) & 0xff)-127+16383;      // 取出短实数指数位，更换偏置量。
   22087:	8b 44 24 04          	mov    0x4(%esp),%eax
   2208b:	8b 00                	mov    (%eax),%eax
   2208d:	c1 f8 17             	sar    $0x17,%eax
   22090:	0f b6 c0             	movzbl %al,%eax
   22093:	66 05 80 3f          	add    $0x3f80,%ax
   22097:	89 c2                	mov    %eax,%edx
   22099:	8b 44 24 08          	mov    0x8(%esp),%eax
   2209d:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (*a<0)
   220a1:	8b 44 24 04          	mov    0x4(%esp),%eax
   220a5:	8b 00                	mov    (%eax),%eax
   220a7:	85 c0                	test   %eax,%eax
   220a9:	79 16                	jns    220c1 <short_to_temp+0x81>
		b->exponent |= 0x8000;                  // 若为负数则设置符号位。
   220ab:	8b 44 24 08          	mov    0x8(%esp),%eax
   220af:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   220b3:	66 0d 00 80          	or     $0x8000,%ax
   220b7:	89 c2                	mov    %eax,%edx
   220b9:	8b 44 24 08          	mov    0x8(%esp),%eax
   220bd:	66 89 50 08          	mov    %dx,0x8(%eax)
	b->b = (*a<<8) | 0x80000000;                    // 放置尾数，添加固定1值。
   220c1:	8b 44 24 04          	mov    0x4(%esp),%eax
   220c5:	8b 00                	mov    (%eax),%eax
   220c7:	c1 e0 08             	shl    $0x8,%eax
   220ca:	0d 00 00 00 80       	or     $0x80000000,%eax
   220cf:	89 c2                	mov    %eax,%edx
   220d1:	8b 44 24 08          	mov    0x8(%esp),%eax
   220d5:	89 50 04             	mov    %edx,0x4(%eax)
	b->a = 0;
   220d8:	8b 44 24 08          	mov    0x8(%esp),%eax
   220dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   220e2:	c3                   	ret    

000220e3 <long_to_temp>:

// 长实数转换成临时实数格式。
// 方法与short_to_temp()安全一样。不过长实数指数偏置量是1034。
void long_to_temp(const long_real * a, temp_real * b)
{
	if (!a->a && !(a->b & 0x7fffffff)) {
   220e3:	8b 44 24 04          	mov    0x4(%esp),%eax
   220e7:	8b 00                	mov    (%eax),%eax
   220e9:	85 c0                	test   %eax,%eax
   220eb:	75 49                	jne    22136 <long_to_temp+0x53>
   220ed:	8b 44 24 04          	mov    0x4(%esp),%eax
   220f1:	8b 40 04             	mov    0x4(%eax),%eax
   220f4:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   220f9:	85 c0                	test   %eax,%eax
   220fb:	75 39                	jne    22136 <long_to_temp+0x53>
		b->a = b->b = 0;                // 置临时实数的有效数 = 0。
   220fd:	8b 44 24 08          	mov    0x8(%esp),%eax
   22101:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   22108:	8b 44 24 08          	mov    0x8(%esp),%eax
   2210c:	8b 50 04             	mov    0x4(%eax),%edx
   2210f:	8b 44 24 08          	mov    0x8(%esp),%eax
   22113:	89 10                	mov    %edx,(%eax)
		if (a->b)
   22115:	8b 44 24 04          	mov    0x4(%esp),%eax
   22119:	8b 40 04             	mov    0x4(%eax),%eax
   2211c:	85 c0                	test   %eax,%eax
   2211e:	74 0b                	je     2212b <long_to_temp+0x48>
			b->exponent = 0x8000;   // 设置符号位。
   22120:	8b 44 24 08          	mov    0x8(%esp),%eax
   22124:	66 c7 40 08 00 80    	movw   $0x8000,0x8(%eax)
		else
			b->exponent = 0;
		return;
   2212a:	c3                   	ret    
			b->exponent = 0;
   2212b:	8b 44 24 08          	mov    0x8(%esp),%eax
   2212f:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   22135:	c3                   	ret    
	}
	b->exponent = ((a->b >> 20) & 0x7ff)-1023+16383;        // 取长实数指数，更换偏置量。
   22136:	8b 44 24 04          	mov    0x4(%esp),%eax
   2213a:	8b 40 04             	mov    0x4(%eax),%eax
   2213d:	c1 f8 14             	sar    $0x14,%eax
   22140:	66 25 ff 07          	and    $0x7ff,%ax
   22144:	66 05 00 3c          	add    $0x3c00,%ax
   22148:	89 c2                	mov    %eax,%edx
   2214a:	8b 44 24 08          	mov    0x8(%esp),%eax
   2214e:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (a->b<0)
   22152:	8b 44 24 04          	mov    0x4(%esp),%eax
   22156:	8b 40 04             	mov    0x4(%eax),%eax
   22159:	85 c0                	test   %eax,%eax
   2215b:	79 16                	jns    22173 <long_to_temp+0x90>
		b->exponent |= 0x8000;          // 若为负数则设置符号位。
   2215d:	8b 44 24 08          	mov    0x8(%esp),%eax
   22161:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22165:	66 0d 00 80          	or     $0x8000,%ax
   22169:	89 c2                	mov    %eax,%edx
   2216b:	8b 44 24 08          	mov    0x8(%esp),%eax
   2216f:	66 89 50 08          	mov    %dx,0x8(%eax)
	b->b = 0x80000000 | (a->b<<11) | (((unsigned long)a->a)>>21);
   22173:	8b 44 24 04          	mov    0x4(%esp),%eax
   22177:	8b 40 04             	mov    0x4(%eax),%eax
   2217a:	c1 e0 0b             	shl    $0xb,%eax
   2217d:	89 c2                	mov    %eax,%edx
   2217f:	8b 44 24 04          	mov    0x4(%esp),%eax
   22183:	8b 00                	mov    (%eax),%eax
   22185:	c1 e8 15             	shr    $0x15,%eax
   22188:	09 d0                	or     %edx,%eax
   2218a:	0d 00 00 00 80       	or     $0x80000000,%eax
   2218f:	89 c2                	mov    %eax,%edx
   22191:	8b 44 24 08          	mov    0x8(%esp),%eax
   22195:	89 50 04             	mov    %edx,0x4(%eax)
	b->a = a->a<<11;                        // 放置尾数，添1。
   22198:	8b 44 24 04          	mov    0x4(%esp),%eax
   2219c:	8b 00                	mov    (%eax),%eax
   2219e:	c1 e0 0b             	shl    $0xb,%eax
   221a1:	89 c2                	mov    %eax,%edx
   221a3:	8b 44 24 08          	mov    0x8(%esp),%eax
   221a7:	89 10                	mov    %edx,(%eax)
}
   221a9:	c3                   	ret    

000221aa <temp_to_short>:
// 临时实数转换成短实数格式。
// 过程与short_to_temp()相反，但需要处理精度和舍入问题。
void temp_to_short(const temp_real * a, short_real * b)
{
// 如果指数部分为0，则根据有无符号位设置短实数为-0或0。
	if (!(a->exponent & 0x7fff)) {
   221aa:	8b 44 24 04          	mov    0x4(%esp),%eax
   221ae:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   221b2:	98                   	cwtl   
   221b3:	25 ff 7f 00 00       	and    $0x7fff,%eax
   221b8:	85 c0                	test   %eax,%eax
   221ba:	75 20                	jne    221dc <temp_to_short+0x32>
		*b = (a->exponent)?0x80000000:0;
   221bc:	8b 44 24 04          	mov    0x4(%esp),%eax
   221c0:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   221c4:	66 85 c0             	test   %ax,%ax
   221c7:	74 07                	je     221d0 <temp_to_short+0x26>
   221c9:	ba 00 00 00 80       	mov    $0x80000000,%edx
   221ce:	eb 05                	jmp    221d5 <temp_to_short+0x2b>
   221d0:	ba 00 00 00 00       	mov    $0x0,%edx
   221d5:	8b 44 24 08          	mov    0x8(%esp),%eax
   221d9:	89 10                	mov    %edx,(%eax)
		return;
   221db:	c3                   	ret    
	}
// 先处理指数部分。即更换临时实数指数偏置量（16383）为短实数的偏置量127。
	*b = ((((long) a->exponent)-16383+127) << 23) & 0x7f800000;
   221dc:	8b 44 24 04          	mov    0x4(%esp),%eax
   221e0:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   221e4:	98                   	cwtl   
   221e5:	2d 80 3f 00 00       	sub    $0x3f80,%eax
   221ea:	c1 e0 17             	shl    $0x17,%eax
   221ed:	25 00 00 80 7f       	and    $0x7f800000,%eax
   221f2:	89 c2                	mov    %eax,%edx
   221f4:	8b 44 24 08          	mov    0x8(%esp),%eax
   221f8:	89 10                	mov    %edx,(%eax)
	if (a->exponent < 0)                    // 若是负数则设置符号位。
   221fa:	8b 44 24 04          	mov    0x4(%esp),%eax
   221fe:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22202:	66 85 c0             	test   %ax,%ax
   22205:	79 13                	jns    2221a <temp_to_short+0x70>
		*b |= 0x80000000;
   22207:	8b 44 24 08          	mov    0x8(%esp),%eax
   2220b:	8b 00                	mov    (%eax),%eax
   2220d:	0d 00 00 00 80       	or     $0x80000000,%eax
   22212:	89 c2                	mov    %eax,%edx
   22214:	8b 44 24 08          	mov    0x8(%esp),%eax
   22218:	89 10                	mov    %edx,(%eax)
	*b |= (a->b >> 8) & 0x007fffff;         // 取临时实数有效数高23位。
   2221a:	8b 44 24 08          	mov    0x8(%esp),%eax
   2221e:	8b 10                	mov    (%eax),%edx
   22220:	8b 44 24 04          	mov    0x4(%esp),%eax
   22224:	8b 40 04             	mov    0x4(%eax),%eax
   22227:	c1 f8 08             	sar    $0x8,%eax
   2222a:	25 ff ff 7f 00       	and    $0x7fffff,%eax
   2222f:	09 c2                	or     %eax,%edx
   22231:	8b 44 24 08          	mov    0x8(%esp),%eax
   22235:	89 10                	mov    %edx,(%eax)
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
   22237:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2223c:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   22242:	c1 f8 0a             	sar    $0xa,%eax
   22245:	83 e0 03             	and    $0x3,%eax
   22248:	83 f8 01             	cmp    $0x1,%eax
   2224b:	74 2f                	je     2227c <temp_to_short+0xd2>
   2224d:	83 f8 02             	cmp    $0x2,%eax
   22250:	74 56                	je     222a8 <temp_to_short+0xfe>
   22252:	85 c0                	test   %eax,%eax
   22254:	0f 85 80 00 00 00    	jne    222da <temp_to_short+0x130>
		case ROUND_NEAREST:
			if ((a->b & 0xff) > 0x80)
   2225a:	8b 44 24 04          	mov    0x4(%esp),%eax
   2225e:	8b 40 04             	mov    0x4(%eax),%eax
   22261:	0f b6 c0             	movzbl %al,%eax
   22264:	3d 80 00 00 00       	cmp    $0x80,%eax
   22269:	7e 6a                	jle    222d5 <temp_to_short+0x12b>
				++*b;
   2226b:	8b 44 24 08          	mov    0x8(%esp),%eax
   2226f:	8b 00                	mov    (%eax),%eax
   22271:	8d 50 01             	lea    0x1(%eax),%edx
   22274:	8b 44 24 08          	mov    0x8(%esp),%eax
   22278:	89 10                	mov    %edx,(%eax)
			break;
   2227a:	eb 59                	jmp    222d5 <temp_to_short+0x12b>
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
   2227c:	8b 44 24 04          	mov    0x4(%esp),%eax
   22280:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22284:	66 85 c0             	test   %ax,%ax
   22287:	79 4e                	jns    222d7 <temp_to_short+0x12d>
   22289:	8b 44 24 04          	mov    0x4(%esp),%eax
   2228d:	8b 40 04             	mov    0x4(%eax),%eax
   22290:	0f b6 c0             	movzbl %al,%eax
   22293:	85 c0                	test   %eax,%eax
   22295:	74 40                	je     222d7 <temp_to_short+0x12d>
				++*b;
   22297:	8b 44 24 08          	mov    0x8(%esp),%eax
   2229b:	8b 00                	mov    (%eax),%eax
   2229d:	8d 50 01             	lea    0x1(%eax),%edx
   222a0:	8b 44 24 08          	mov    0x8(%esp),%eax
   222a4:	89 10                	mov    %edx,(%eax)
			break;
   222a6:	eb 2f                	jmp    222d7 <temp_to_short+0x12d>
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
   222a8:	8b 44 24 04          	mov    0x4(%esp),%eax
   222ac:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   222b0:	66 85 c0             	test   %ax,%ax
   222b3:	78 24                	js     222d9 <temp_to_short+0x12f>
   222b5:	8b 44 24 04          	mov    0x4(%esp),%eax
   222b9:	8b 40 04             	mov    0x4(%eax),%eax
   222bc:	0f b6 c0             	movzbl %al,%eax
   222bf:	85 c0                	test   %eax,%eax
   222c1:	74 16                	je     222d9 <temp_to_short+0x12f>
				++*b;
   222c3:	8b 44 24 08          	mov    0x8(%esp),%eax
   222c7:	8b 00                	mov    (%eax),%eax
   222c9:	8d 50 01             	lea    0x1(%eax),%edx
   222cc:	8b 44 24 08          	mov    0x8(%esp),%eax
   222d0:	89 10                	mov    %edx,(%eax)
			break;
   222d2:	90                   	nop
   222d3:	eb 04                	jmp    222d9 <temp_to_short+0x12f>
			break;
   222d5:	90                   	nop
   222d6:	c3                   	ret    
			break;
   222d7:	90                   	nop
   222d8:	c3                   	ret    
			break;
   222d9:	90                   	nop
	}
}
   222da:	c3                   	ret    

000222db <temp_to_long>:

// 临时实数转换成长实数。
void temp_to_long(const temp_real * a, long_real * b)
{
// 如果指数部分为0，则根据有无符号位设置长实数为-0或0。
	if (!(a->exponent & 0x7fff)) {
   222db:	8b 44 24 04          	mov    0x4(%esp),%eax
   222df:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   222e3:	98                   	cwtl   
   222e4:	25 ff 7f 00 00       	and    $0x7fff,%eax
   222e9:	85 c0                	test   %eax,%eax
   222eb:	75 2b                	jne    22318 <temp_to_long+0x3d>
		b->a = 0;
   222ed:	8b 44 24 08          	mov    0x8(%esp),%eax
   222f1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		b->b = (a->exponent)?0x80000000:0;
   222f7:	8b 44 24 04          	mov    0x4(%esp),%eax
   222fb:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   222ff:	66 85 c0             	test   %ax,%ax
   22302:	74 07                	je     2230b <temp_to_long+0x30>
   22304:	ba 00 00 00 80       	mov    $0x80000000,%edx
   22309:	eb 05                	jmp    22310 <temp_to_long+0x35>
   2230b:	ba 00 00 00 00       	mov    $0x0,%edx
   22310:	8b 44 24 08          	mov    0x8(%esp),%eax
   22314:	89 50 04             	mov    %edx,0x4(%eax)
		return;
   22317:	c3                   	ret    
	}
// 先处理指数部分。即更换临时实数指数偏置量（16383）为长实数的偏置量1023.
	b->b = (((0x7fff & (long) a->exponent)-16383+1023) << 20) & 0x7ff00000;
   22318:	8b 44 24 04          	mov    0x4(%esp),%eax
   2231c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22320:	98                   	cwtl   
   22321:	25 ff 7f 00 00       	and    $0x7fff,%eax
   22326:	2d 00 3c 00 00       	sub    $0x3c00,%eax
   2232b:	c1 e0 14             	shl    $0x14,%eax
   2232e:	25 00 00 f0 7f       	and    $0x7ff00000,%eax
   22333:	89 c2                	mov    %eax,%edx
   22335:	8b 44 24 08          	mov    0x8(%esp),%eax
   22339:	89 50 04             	mov    %edx,0x4(%eax)
	if (a->exponent < 0)            // 若是负数则设置符号位。
   2233c:	8b 44 24 04          	mov    0x4(%esp),%eax
   22340:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22344:	66 85 c0             	test   %ax,%ax
   22347:	79 15                	jns    2235e <temp_to_long+0x83>
		b->b |= 0x80000000;
   22349:	8b 44 24 08          	mov    0x8(%esp),%eax
   2234d:	8b 40 04             	mov    0x4(%eax),%eax
   22350:	0d 00 00 00 80       	or     $0x80000000,%eax
   22355:	89 c2                	mov    %eax,%edx
   22357:	8b 44 24 08          	mov    0x8(%esp),%eax
   2235b:	89 50 04             	mov    %edx,0x4(%eax)
	b->b |= (a->b >> 11) & 0x000fffff;      // 取临时实数有效数高20位。
   2235e:	8b 44 24 08          	mov    0x8(%esp),%eax
   22362:	8b 50 04             	mov    0x4(%eax),%edx
   22365:	8b 44 24 04          	mov    0x4(%esp),%eax
   22369:	8b 40 04             	mov    0x4(%eax),%eax
   2236c:	c1 f8 0b             	sar    $0xb,%eax
   2236f:	25 ff ff 0f 00       	and    $0xfffff,%eax
   22374:	09 c2                	or     %eax,%edx
   22376:	8b 44 24 08          	mov    0x8(%esp),%eax
   2237a:	89 50 04             	mov    %edx,0x4(%eax)
	b->a = a->b << 21;
   2237d:	8b 44 24 04          	mov    0x4(%esp),%eax
   22381:	8b 40 04             	mov    0x4(%eax),%eax
   22384:	c1 e0 15             	shl    $0x15,%eax
   22387:	89 c2                	mov    %eax,%edx
   22389:	8b 44 24 08          	mov    0x8(%esp),%eax
   2238d:	89 10                	mov    %edx,(%eax)
	b->a |= (a->a >> 11) & 0x001fffff;
   2238f:	8b 44 24 08          	mov    0x8(%esp),%eax
   22393:	8b 10                	mov    (%eax),%edx
   22395:	8b 44 24 04          	mov    0x4(%esp),%eax
   22399:	8b 00                	mov    (%eax),%eax
   2239b:	c1 e8 0b             	shr    $0xb,%eax
   2239e:	09 c2                	or     %eax,%edx
   223a0:	8b 44 24 08          	mov    0x8(%esp),%eax
   223a4:	89 10                	mov    %edx,(%eax)
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
   223a6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   223ab:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   223b1:	c1 f8 0a             	sar    $0xa,%eax
   223b4:	83 e0 03             	and    $0x3,%eax
   223b7:	83 f8 01             	cmp    $0x1,%eax
   223ba:	74 45                	je     22401 <temp_to_long+0x126>
   223bc:	83 f8 02             	cmp    $0x2,%eax
   223bf:	74 7d                	je     2243e <temp_to_long+0x163>
   223c1:	85 c0                	test   %eax,%eax
   223c3:	0f 85 b8 00 00 00    	jne    22481 <temp_to_long+0x1a6>
		case ROUND_NEAREST:
			if ((a->a & 0x7ff) > 0x400)
   223c9:	8b 44 24 04          	mov    0x4(%esp),%eax
   223cd:	8b 00                	mov    (%eax),%eax
   223cf:	25 ff 07 00 00       	and    $0x7ff,%eax
   223d4:	3d 00 04 00 00       	cmp    $0x400,%eax
   223d9:	0f 8e 9d 00 00 00    	jle    2247c <temp_to_long+0x1a1>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   223df:	8b 44 24 08          	mov    0x8(%esp),%eax
   223e3:	8b 10                	mov    (%eax),%edx
   223e5:	8b 44 24 08          	mov    0x8(%esp),%eax
   223e9:	8b 40 04             	mov    0x4(%eax),%eax
				__asm__("addl $1,%0 ; adcl $0,%1"
   223ec:	83 c2 01             	add    $0x1,%edx
   223ef:	83 d0 00             	adc    $0x0,%eax
   223f2:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   223f6:	89 11                	mov    %edx,(%ecx)
   223f8:	8b 54 24 08          	mov    0x8(%esp),%edx
   223fc:	89 42 04             	mov    %eax,0x4(%edx)
			break;
   223ff:	eb 7b                	jmp    2247c <temp_to_long+0x1a1>
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
   22401:	8b 44 24 04          	mov    0x4(%esp),%eax
   22405:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22409:	66 85 c0             	test   %ax,%ax
   2240c:	79 70                	jns    2247e <temp_to_long+0x1a3>
   2240e:	8b 44 24 04          	mov    0x4(%esp),%eax
   22412:	8b 40 04             	mov    0x4(%eax),%eax
   22415:	0f b6 c0             	movzbl %al,%eax
   22418:	85 c0                	test   %eax,%eax
   2241a:	74 62                	je     2247e <temp_to_long+0x1a3>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   2241c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22420:	8b 10                	mov    (%eax),%edx
   22422:	8b 44 24 08          	mov    0x8(%esp),%eax
   22426:	8b 40 04             	mov    0x4(%eax),%eax
				__asm__("addl $1,%0 ; adcl $0,%1"
   22429:	83 c2 01             	add    $0x1,%edx
   2242c:	83 d0 00             	adc    $0x0,%eax
   2242f:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   22433:	89 11                	mov    %edx,(%ecx)
   22435:	8b 54 24 08          	mov    0x8(%esp),%edx
   22439:	89 42 04             	mov    %eax,0x4(%edx)
			break;
   2243c:	eb 40                	jmp    2247e <temp_to_long+0x1a3>
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
   2243e:	8b 44 24 04          	mov    0x4(%esp),%eax
   22442:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22446:	66 85 c0             	test   %ax,%ax
   22449:	78 35                	js     22480 <temp_to_long+0x1a5>
   2244b:	8b 44 24 04          	mov    0x4(%esp),%eax
   2244f:	8b 40 04             	mov    0x4(%eax),%eax
   22452:	0f b6 c0             	movzbl %al,%eax
   22455:	85 c0                	test   %eax,%eax
   22457:	74 27                	je     22480 <temp_to_long+0x1a5>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   22459:	8b 44 24 08          	mov    0x8(%esp),%eax
   2245d:	8b 10                	mov    (%eax),%edx
   2245f:	8b 44 24 08          	mov    0x8(%esp),%eax
   22463:	8b 40 04             	mov    0x4(%eax),%eax
				__asm__("addl $1,%0 ; adcl $0,%1"
   22466:	83 c2 01             	add    $0x1,%edx
   22469:	83 d0 00             	adc    $0x0,%eax
   2246c:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   22470:	89 11                	mov    %edx,(%ecx)
   22472:	8b 54 24 08          	mov    0x8(%esp),%edx
   22476:	89 42 04             	mov    %eax,0x4(%edx)
			break;
   22479:	90                   	nop
   2247a:	eb 04                	jmp    22480 <temp_to_long+0x1a5>
			break;
   2247c:	90                   	nop
   2247d:	c3                   	ret    
			break;
   2247e:	90                   	nop
   2247f:	c3                   	ret    
			break;
   22480:	90                   	nop
	}
}
   22481:	c3                   	ret    

00022482 <real_to_int>:

// 临时实数转换成临时整数格式。
// 临时整数也用10字节表示。其中低8字节是无符号整数值，高2字节表示指数值和符号位。如果高2字节最高有效位为1，则表示是负数；
// 若位0，表示是正数。
void real_to_int(const temp_real * a, temp_int * b)
{
   22482:	53                   	push   %ebx
   22483:	83 ec 10             	sub    $0x10,%esp
// 整数值最大值是2的63次方，加上临时实数偏置值16383,表示一个整数值转换为临时实数，临时实数指数最大值，减去临时实数指数，
// 得到指数差值（相当于与最大整数值的差值）。
	int shift =  16383 + 63 - (a->exponent & 0x7fff);
   22486:	8b 44 24 18          	mov    0x18(%esp),%eax
   2248a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2248e:	98                   	cwtl   
   2248f:	25 ff 7f 00 00       	and    $0x7fff,%eax
   22494:	ba 3e 40 00 00       	mov    $0x403e,%edx
   22499:	29 c2                	sub    %eax,%edx
   2249b:	89 d0                	mov    %edx,%eax
   2249d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	unsigned long underflow;

	b->a = b->b = underflow = 0;    // 初始化临时整数值为0。
   224a1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   224a8:	00 
   224a9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   224ad:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   224b4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   224b8:	8b 50 04             	mov    0x4(%eax),%edx
   224bb:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   224bf:	89 10                	mov    %edx,(%eax)
	b->sign = (a->exponent < 0);    // 置临时整数符号与临时实数符号一致。
   224c1:	8b 44 24 18          	mov    0x18(%esp),%eax
   224c5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   224c9:	66 c1 e8 0f          	shr    $0xf,%ax
   224cd:	0f b6 d0             	movzbl %al,%edx
   224d0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   224d4:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (shift < 0) {                // 如果指数差值小于0，说明这个临时实数不能放入临时整数中，
   224d8:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   224dd:	79 1e                	jns    224fd <real_to_int+0x7b>
		set_OE();               // 置状态字溢出位。
   224df:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   224e4:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   224ea:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   224ef:	83 ca 08             	or     $0x8,%edx
   224f2:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   224f8:	e9 8b 01 00 00       	jmp    22688 <real_to_int+0x206>
	}
// 如果两值差值小于2的32次方，直接把实数值放入整数值。
	if (shift < 32) {
   224fd:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
   22502:	7f 1c                	jg     22520 <real_to_int+0x9e>
		b->b = a->b; b->a = a->a;
   22504:	8b 44 24 18          	mov    0x18(%esp),%eax
   22508:	8b 50 04             	mov    0x4(%eax),%edx
   2250b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2250f:	89 50 04             	mov    %edx,0x4(%eax)
   22512:	8b 44 24 18          	mov    0x18(%esp),%eax
   22516:	8b 10                	mov    (%eax),%edx
   22518:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2251c:	89 10                	mov    %edx,(%eax)
   2251e:	eb 40                	jmp    22560 <real_to_int+0xde>
// 如果两值差值介于2的32次方与64次方之间，把实数高位a->b放入整数低位b->a，然后把实数低位放入下溢出变量underflow，指数差值
// shift-32。
	} else if (shift < 64) {
   22520:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
   22525:	7f 1e                	jg     22545 <real_to_int+0xc3>
		b->a = a->b; underflow = a->a;
   22527:	8b 44 24 18          	mov    0x18(%esp),%eax
   2252b:	8b 50 04             	mov    0x4(%eax),%edx
   2252e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22532:	89 10                	mov    %edx,(%eax)
   22534:	8b 44 24 18          	mov    0x18(%esp),%eax
   22538:	8b 00                	mov    (%eax),%eax
   2253a:	89 44 24 08          	mov    %eax,0x8(%esp)
		shift -= 32;
   2253e:	83 6c 24 0c 20       	subl   $0x20,0xc(%esp)
   22543:	eb 1b                	jmp    22560 <real_to_int+0xde>
// 如果两值差值介于2的64次方与96次方之间，把实数高位a->b放入下溢出变量underflow，指数差值shift-64。
	} else if (shift < 96) {
   22545:	83 7c 24 0c 5f       	cmpl   $0x5f,0xc(%esp)
   2254a:	0f 8f 31 01 00 00    	jg     22681 <real_to_int+0x1ff>
		underflow = a->b;
   22550:	8b 44 24 18          	mov    0x18(%esp),%eax
   22554:	8b 40 04             	mov    0x4(%eax),%eax
   22557:	89 44 24 08          	mov    %eax,0x8(%esp)
		shift -= 64;
   2255b:	83 6c 24 0c 40       	subl   $0x40,0xc(%esp)
	} else
		return;
// 接着再进行细致的调整，调整方法是把临时整数b的向下溢出变量underflow右移shift位。
	__asm__("shrdl %2,%1,%0"
		:"=r" (underflow),"=r" (b->a)
		:"c" ((char) shift),"0" (underflow),"1" (b->a));
   22560:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22564:	89 c1                	mov    %eax,%ecx
	__asm__("shrdl %2,%1,%0"
   22566:	8b 54 24 08          	mov    0x8(%esp),%edx
		:"c" ((char) shift),"0" (underflow),"1" (b->a));
   2256a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2256e:	8b 00                	mov    (%eax),%eax
	__asm__("shrdl %2,%1,%0"
   22570:	0f ad c2             	shrd   %cl,%eax,%edx
   22573:	89 54 24 08          	mov    %edx,0x8(%esp)
   22577:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   2257b:	89 02                	mov    %eax,(%edx)
// 然后把临时整数b的尾数b->a右移shift位。
	__asm__("shrdl %2,%1,%0"
		:"=r" (b->a),"=r" (b->b)
		:"c" ((char) shift),"0" (b->a),"1" (b->b));
   2257d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22581:	89 c1                	mov    %eax,%ecx
   22583:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22587:	8b 10                	mov    (%eax),%edx
   22589:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2258d:	8b 40 04             	mov    0x4(%eax),%eax
	__asm__("shrdl %2,%1,%0"
   22590:	0f ad c2             	shrd   %cl,%eax,%edx
   22593:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   22597:	89 11                	mov    %edx,(%ecx)
   22599:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   2259d:	89 42 04             	mov    %eax,0x4(%edx)
// 最后把临时整数b的尾数b->b右移shift位。
	__asm__("shrl %1,%0"
		:"=r" (b->b)
		:"c" ((char) shift),"0" (b->b));
   225a0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   225a4:	89 c2                	mov    %eax,%edx
   225a6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225aa:	8b 40 04             	mov    0x4(%eax),%eax
	__asm__("shrl %1,%0"
   225ad:	89 d1                	mov    %edx,%ecx
   225af:	d3 e8                	shr    %cl,%eax
   225b1:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   225b5:	89 42 04             	mov    %eax,0x4(%edx)
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
   225b8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   225bd:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   225c3:	c1 f8 0a             	sar    $0xa,%eax
   225c6:	83 e0 03             	and    $0x3,%eax
   225c9:	83 f8 01             	cmp    $0x1,%eax
   225cc:	74 7b                	je     22649 <real_to_int+0x1c7>
   225ce:	83 f8 02             	cmp    $0x2,%eax
   225d1:	74 3f                	je     22612 <real_to_int+0x190>
   225d3:	85 c0                	test   %eax,%eax
   225d5:	0f 85 ad 00 00 00    	jne    22688 <real_to_int+0x206>
		case ROUND_NEAREST:
			__asm__("addl %4,%5 ; adcl $0,%0 ; adcl $0,%1"
				:"=r" (b->a),"=r" (b->b)
				:"0" (b->a),"1" (b->b)
   225db:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225df:	8b 10                	mov    (%eax),%edx
   225e1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225e5:	8b 58 04             	mov    0x4(%eax),%ebx
				,"r" (0x7fffffff + (b->a & 1))
   225e8:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225ec:	8b 00                	mov    (%eax),%eax
   225ee:	83 e0 01             	and    $0x1,%eax
   225f1:	8d 88 ff ff ff 7f    	lea    0x7fffffff(%eax),%ecx
			__asm__("addl %4,%5 ; adcl $0,%0 ; adcl $0,%1"
   225f7:	89 d8                	mov    %ebx,%eax
   225f9:	01 4c 24 08          	add    %ecx,0x8(%esp)
   225fd:	83 d2 00             	adc    $0x0,%edx
   22600:	83 d0 00             	adc    $0x0,%eax
   22603:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   22607:	89 11                	mov    %edx,(%ecx)
   22609:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   2260d:	89 42 04             	mov    %eax,0x4(%edx)
				,"m" (*&underflow));
			break;
   22610:	eb 76                	jmp    22688 <real_to_int+0x206>
		case ROUND_UP:
			if (!b->sign && underflow)
   22612:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22616:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2261a:	66 85 c0             	test   %ax,%ax
   2261d:	75 65                	jne    22684 <real_to_int+0x202>
   2261f:	8b 44 24 08          	mov    0x8(%esp),%eax
   22623:	85 c0                	test   %eax,%eax
   22625:	74 5d                	je     22684 <real_to_int+0x202>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   22627:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2262b:	8b 10                	mov    (%eax),%edx
   2262d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22631:	8b 40 04             	mov    0x4(%eax),%eax
				__asm__("addl $1,%0 ; adcl $0,%1"
   22634:	83 c2 01             	add    $0x1,%edx
   22637:	83 d0 00             	adc    $0x0,%eax
   2263a:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   2263e:	89 11                	mov    %edx,(%ecx)
   22640:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   22644:	89 42 04             	mov    %eax,0x4(%edx)
			break;
   22647:	eb 3b                	jmp    22684 <real_to_int+0x202>
		case ROUND_DOWN:
			if (b->sign && underflow)
   22649:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2264d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22651:	66 85 c0             	test   %ax,%ax
   22654:	74 31                	je     22687 <real_to_int+0x205>
   22656:	8b 44 24 08          	mov    0x8(%esp),%eax
   2265a:	85 c0                	test   %eax,%eax
   2265c:	74 29                	je     22687 <real_to_int+0x205>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   2265e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22662:	8b 10                	mov    (%eax),%edx
   22664:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22668:	8b 40 04             	mov    0x4(%eax),%eax
				__asm__("addl $1,%0 ; adcl $0,%1"
   2266b:	83 c2 01             	add    $0x1,%edx
   2266e:	83 d0 00             	adc    $0x0,%eax
   22671:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   22675:	89 11                	mov    %edx,(%ecx)
   22677:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   2267b:	89 42 04             	mov    %eax,0x4(%edx)
			break;
   2267e:	90                   	nop
   2267f:	eb 06                	jmp    22687 <real_to_int+0x205>
		return;
   22681:	90                   	nop
   22682:	eb 04                	jmp    22688 <real_to_int+0x206>
			break;
   22684:	90                   	nop
   22685:	eb 01                	jmp    22688 <real_to_int+0x206>
			break;
   22687:	90                   	nop
	}
}
   22688:	83 c4 10             	add    $0x10,%esp
   2268b:	5b                   	pop    %ebx
   2268c:	c3                   	ret    

0002268d <int_to_real>:

// 临时整数转换成临时实数格式。
void int_to_real(const temp_int * a, temp_real * b)
{
// 由于原值是整数，所以转换成临时实数时指数除了需要加上偏置量16383外，还要加上63。表示
	b->a = a->a;
   2268d:	8b 44 24 04          	mov    0x4(%esp),%eax
   22691:	8b 10                	mov    (%eax),%edx
   22693:	8b 44 24 08          	mov    0x8(%esp),%eax
   22697:	89 10                	mov    %edx,(%eax)
	b->b = a->b;
   22699:	8b 44 24 04          	mov    0x4(%esp),%eax
   2269d:	8b 50 04             	mov    0x4(%eax),%edx
   226a0:	8b 44 24 08          	mov    0x8(%esp),%eax
   226a4:	89 50 04             	mov    %edx,0x4(%eax)
	if (b->a || b->b)
   226a7:	8b 44 24 08          	mov    0x8(%esp),%eax
   226ab:	8b 00                	mov    (%eax),%eax
   226ad:	85 c0                	test   %eax,%eax
   226af:	75 0b                	jne    226bc <int_to_real+0x2f>
   226b1:	8b 44 24 08          	mov    0x8(%esp),%eax
   226b5:	8b 40 04             	mov    0x4(%eax),%eax
   226b8:	85 c0                	test   %eax,%eax
   226ba:	74 23                	je     226df <int_to_real+0x52>
		b->exponent = 16383 + 63 + (a->sign? 0x8000:0);
   226bc:	8b 44 24 04          	mov    0x4(%esp),%eax
   226c0:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   226c4:	66 85 c0             	test   %ax,%ax
   226c7:	74 07                	je     226d0 <int_to_real+0x43>
   226c9:	ba 3e c0 ff ff       	mov    $0xffffc03e,%edx
   226ce:	eb 05                	jmp    226d5 <int_to_real+0x48>
   226d0:	ba 3e 40 00 00       	mov    $0x403e,%edx
   226d5:	8b 44 24 08          	mov    0x8(%esp),%eax
   226d9:	66 89 50 08          	mov    %dx,0x8(%eax)
	else {
		b->exponent = 0;
		return;
	}
// 对格式转换后的临时实数进行规格化处理，即让有效数最高有效位不是0。
	while (b->b >= 0) {
   226dd:	eb 3e                	jmp    2271d <int_to_real+0x90>
		b->exponent = 0;
   226df:	8b 44 24 08          	mov    0x8(%esp),%eax
   226e3:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   226e9:	c3                   	ret    
		b->exponent--;
   226ea:	8b 44 24 08          	mov    0x8(%esp),%eax
   226ee:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   226f2:	83 e8 01             	sub    $0x1,%eax
   226f5:	89 c2                	mov    %eax,%edx
   226f7:	8b 44 24 08          	mov    0x8(%esp),%eax
   226fb:	66 89 50 08          	mov    %dx,0x8(%eax)
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (b->a),"=r" (b->b)
			:"0" (b->a),"1" (b->b));
   226ff:	8b 44 24 08          	mov    0x8(%esp),%eax
   22703:	8b 10                	mov    (%eax),%edx
   22705:	8b 44 24 08          	mov    0x8(%esp),%eax
   22709:	8b 40 04             	mov    0x4(%eax),%eax
		__asm__("addl %0,%0 ; adcl %1,%1"
   2270c:	01 d2                	add    %edx,%edx
   2270e:	11 c0                	adc    %eax,%eax
   22710:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   22714:	89 11                	mov    %edx,(%ecx)
   22716:	8b 54 24 08          	mov    0x8(%esp),%edx
   2271a:	89 42 04             	mov    %eax,0x4(%edx)
	while (b->b >= 0) {
   2271d:	8b 44 24 08          	mov    0x8(%esp),%eax
   22721:	8b 40 04             	mov    0x4(%eax),%eax
   22724:	85 c0                	test   %eax,%eax
   22726:	79 c2                	jns    226ea <int_to_real+0x5d>
	}
}
   22728:	c3                   	ret    

00022729 <_exit>:
// 直接调用系统中断int 0x80,功能号__NR_exit.
// 参数:exit_code - 退出码.
// 函数名前的关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好的代码,更重要的是使用这个关键字可以避免产生某些(未初始化变量的)
// 假警告信息.等同于gcc的函数属性说明:void do_exit(int error_code) __attribute__((noreturn));
void _exit(int exit_code)
{
   22729:	53                   	push   %ebx
	__asm__ __volatile__ ("int $0x80"::"a" (__NR_exit), "b" (exit_code));
   2272a:	b8 01 00 00 00       	mov    $0x1,%eax
   2272f:	8b 54 24 08          	mov    0x8(%esp),%edx
   22733:	89 d3                	mov    %edx,%ebx
   22735:	cd 80                	int    $0x80
}
   22737:	90                   	nop
   22738:	5b                   	pop    %ebx
   22739:	c3                   	ret    

0002273a <open>:
// 打开文件函数
// 打开并有可能创建一个文件.
// 参数:filname - 文件名;flag - 文件打开标志;...
// 返回:文件描述符,若出错则置出错码,并返回-1.
int open(const char * filename, int flag, ...)
{
   2273a:	53                   	push   %ebx
   2273b:	83 ec 10             	sub    $0x10,%esp

	// 利用va_start()宏函数,取得flag后面参数的指针,然后调用系统中断int 0x80,功能open进行.
	// 文件打开操作.
	// %0 - eax(返回的描述符或出错码); %1 - eax(系统中断调用功能号__NR_open);
	// %2 - ebx(文件名filename); %3 - ecx(打开文件标志flag); %4 - edx(后随参数文件属性mode).
	va_start(arg, flag);
   2273e:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   22742:	83 c0 04             	add    $0x4,%eax
   22745:	89 44 24 0c          	mov    %eax,0xc(%esp)
	__asm__(
   22749:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
		"int $0x80"
		:"=a" (res)
		:"0" (__NR_open), "b" (filename), "c" (flag),
		"d" (va_arg(arg, int)));
   2274d:	83 44 24 0c 04       	addl   $0x4,0xc(%esp)
   22752:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22756:	83 e8 04             	sub    $0x4,%eax
   22759:	8b 10                	mov    (%eax),%edx
	__asm__(
   2275b:	b8 05 00 00 00       	mov    $0x5,%eax
   22760:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   22764:	cd 80                	int    $0x80
   22766:	89 c3                	mov    %eax,%ebx
	// 系统中断调用返回值大于或等于0,表示是一个文件描述符,则直接返回之.
	if (res >= 0)
   22768:	85 db                	test   %ebx,%ebx
   2276a:	78 04                	js     22770 <open+0x36>
		return res;
   2276c:	89 d8                	mov    %ebx,%eax
   2276e:	eb 0e                	jmp    2277e <open+0x44>
	// 否则说明返回值小于0,则代表一个出错码.设置该出错码并返回-1.
	errno = -res;
   22770:	89 d8                	mov    %ebx,%eax
   22772:	f7 d8                	neg    %eax
   22774:	a3 24 68 04 00       	mov    %eax,0x46824
	return -1;
   22779:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   2277e:	83 c4 10             	add    $0x10,%esp
   22781:	5b                   	pop    %ebx
   22782:	c3                   	ret    

00022783 <close>:
#define __LIBRARY__
#include <unistd.h>	                                // Linux标准头文件.定义了各种符号常数和类型,并声明了各种函数.

// 关闭文件函数
// 下面该调用宏函数对应:int close(int fd).直接调用了系统中断int 0x80,参数是__NR_close.其中fd是文件描述符.
_syscall1(int, close, int, fd)
   22783:	53                   	push   %ebx
   22784:	83 ec 10             	sub    $0x10,%esp
   22787:	b8 06 00 00 00       	mov    $0x6,%eax
   2278c:	8b 54 24 18          	mov    0x18(%esp),%edx
   22790:	89 d3                	mov    %edx,%ebx
   22792:	cd 80                	int    $0x80
   22794:	89 44 24 0c          	mov    %eax,0xc(%esp)
   22798:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   2279d:	78 06                	js     227a5 <close+0x22>
   2279f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   227a3:	eb 10                	jmp    227b5 <close+0x32>
   227a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   227a9:	f7 d8                	neg    %eax
   227ab:	a3 24 68 04 00       	mov    %eax,0x46824
   227b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   227b5:	83 c4 10             	add    $0x10,%esp
   227b8:	5b                   	pop    %ebx
   227b9:	c3                   	ret    

000227ba <write>:

// 写文件系统调用函函数.
// 该宏结构对应于函数:int write(int fd, const char * buf, off_t count)
// 参数:fd - 文件描述符;buf - 写缓冲指针; count - 写字节数.
// 返回:成功时返回写入的字节数(0表示写入0字节);出错时将返回-1,并且设置了出错号.
_syscall3(int, write, int, fd, const char *, buf, off_t, count)
   227ba:	53                   	push   %ebx
   227bb:	83 ec 10             	sub    $0x10,%esp
   227be:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   227c2:	b8 04 00 00 00       	mov    $0x4,%eax
   227c7:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   227cb:	8b 54 24 20          	mov    0x20(%esp),%edx
   227cf:	cd 80                	int    $0x80
   227d1:	89 44 24 0c          	mov    %eax,0xc(%esp)
   227d5:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   227da:	78 06                	js     227e2 <write+0x28>
   227dc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   227e0:	eb 10                	jmp    227f2 <write+0x38>
   227e2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   227e6:	f7 d8                	neg    %eax
   227e8:	a3 24 68 04 00       	mov    %eax,0x46824
   227ed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   227f2:	83 c4 10             	add    $0x10,%esp
   227f5:	5b                   	pop    %ebx
   227f6:	c3                   	ret    

000227f7 <dup>:
			                                    // 如定义了__LIBRARY__,则还含系统调用号和内嵌汇编_syscall0()等.

// 复制文件描述符函数.
// 下面该调用宏函数对应:int dup(int fd).直接调用了系统中断int 0x80,参数是__NR_dup.
// 其中fd是文件描述符.
_syscall1(int, dup, int, fd)
   227f7:	53                   	push   %ebx
   227f8:	83 ec 10             	sub    $0x10,%esp
   227fb:	b8 29 00 00 00       	mov    $0x29,%eax
   22800:	8b 54 24 18          	mov    0x18(%esp),%edx
   22804:	89 d3                	mov    %edx,%ebx
   22806:	cd 80                	int    $0x80
   22808:	89 44 24 0c          	mov    %eax,0xc(%esp)
   2280c:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   22811:	78 06                	js     22819 <dup+0x22>
   22813:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22817:	eb 10                	jmp    22829 <dup+0x32>
   22819:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2281d:	f7 d8                	neg    %eax
   2281f:	a3 24 68 04 00       	mov    %eax,0x46824
   22824:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   22829:	83 c4 10             	add    $0x10,%esp
   2282c:	5b                   	pop    %ebx
   2282d:	c3                   	ret    

0002282e <setsid>:
#include <unistd.h>

// 创建一个会话并设置进程组号。
// 下面系统调用宏对应于函数：pid_t setsid()。
// 返回：调用进程的会话标识符（session ID）。
_syscall0(pid_t, setsid)
   2282e:	83 ec 10             	sub    $0x10,%esp
   22831:	b8 42 00 00 00       	mov    $0x42,%eax
   22836:	cd 80                	int    $0x80
   22838:	89 44 24 0c          	mov    %eax,0xc(%esp)
   2283c:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   22841:	78 06                	js     22849 <setsid+0x1b>
   22843:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22847:	eb 10                	jmp    22859 <setsid+0x2b>
   22849:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2284d:	f7 d8                	neg    %eax
   2284f:	a3 24 68 04 00       	mov    %eax,0x46824
   22854:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   22859:	83 c4 10             	add    $0x10,%esp
   2285c:	c3                   	ret    

0002285d <execve>:

// 加载并执行子进程(其他程序)函数.
// 下面该调用宏函数对应:int execve(const char * file,char ** argv, char ** envp).
// 参数:file - 被执行程序文件名;argv - 命令行参数指针数组;envp - 环境变量指针数组.
// 直接调用了系统中断int 0x80,参数是__NR_execve.参见include/unistd.h和fs/exec.c程序.
_syscall3(int, execve, const char *, file, char **, argv, char **, envp)
   2285d:	53                   	push   %ebx
   2285e:	83 ec 10             	sub    $0x10,%esp
   22861:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   22865:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   22869:	8b 54 24 20          	mov    0x20(%esp),%edx
   2286d:	b8 0b 00 00 00       	mov    $0xb,%eax
   22872:	cd 80                	int    $0x80
   22874:	89 44 24 0c          	mov    %eax,0xc(%esp)
   22878:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   2287d:	78 06                	js     22885 <execve+0x28>
   2287f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22883:	eb 10                	jmp    22895 <execve+0x38>
   22885:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22889:	f7 d8                	neg    %eax
   2288b:	a3 24 68 04 00       	mov    %eax,0x46824
   22890:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   22895:	83 c4 10             	add    $0x10,%esp
   22898:	5b                   	pop    %ebx
   22899:	c3                   	ret    

0002289a <waitpid>:

// 等待进程终止系统调用函数.
// 该下面宏结构对应于函数:pid_t waitpid(pid_t pid,int * wait_stat,int options)
//
// 参数:pid - 等待被终止进程的进程id,或者是用于指定特殊情况的其他特定数值;wait_stat - 用于存放状态信息;options - WNOHANG或WUNTRACED或是0.
_syscall3(pid_t, waitpid, pid_t, pid, int *, wait_stat, int, options)
   2289a:	53                   	push   %ebx
   2289b:	83 ec 10             	sub    $0x10,%esp
   2289e:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   228a2:	b8 07 00 00 00       	mov    $0x7,%eax
   228a7:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   228ab:	8b 54 24 20          	mov    0x20(%esp),%edx
   228af:	cd 80                	int    $0x80
   228b1:	89 44 24 0c          	mov    %eax,0xc(%esp)
   228b5:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   228ba:	78 06                	js     228c2 <waitpid+0x28>
   228bc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228c0:	eb 10                	jmp    228d2 <waitpid+0x38>
   228c2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228c6:	f7 d8                	neg    %eax
   228c8:	a3 24 68 04 00       	mov    %eax,0x46824
   228cd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   228d2:	83 c4 10             	add    $0x10,%esp
   228d5:	5b                   	pop    %ebx
   228d6:	c3                   	ret    

000228d7 <wait>:

// wait()系统调用.直接调用waitpid()函数.
pid_t wait(int * wait_stat)
{
	return waitpid(-1, wait_stat, 0);
   228d7:	6a 00                	push   $0x0
   228d9:	ff 74 24 08          	pushl  0x8(%esp)
   228dd:	6a ff                	push   $0xffffffff
   228df:	e8 b6 ff ff ff       	call   2289a <waitpid>
   228e4:	83 c4 0c             	add    $0xc,%esp
}
   228e7:	c3                   	ret    

000228e8 <Log>:

static unsigned short cur_log_level = LOG_INFO_TYPE;

// linux0.12 kernel log function
void Log(unsigned short log_level, const char *fmt, ...)
{
   228e8:	83 ec 2c             	sub    $0x2c,%esp
   228eb:	8b 44 24 30          	mov    0x30(%esp),%eax
   228ef:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
    if (log_level >= cur_log_level) {
   228f4:	0f b7 05 e0 06 04 00 	movzwl 0x406e0,%eax
   228fb:	66 39 44 24 0c       	cmp    %ax,0xc(%esp)
   22900:	72 34                	jb     22936 <Log+0x4e>
        va_list args;                           // va_list实际上是一个字符指针类型.

        // 运行参数处理开始函数.然后使用格式串fmt将参数列表args输出到buf中.返回值i等于输出字符串的长度.再运行参数处理结束函数.最后调用控制台显示
        // 函数并返回显示字符数.
        va_start(args, fmt);
   22902:	8d 44 24 34          	lea    0x34(%esp),%eax
   22906:	83 c0 04             	add    $0x4,%eax
   22909:	89 44 24 1c          	mov    %eax,0x1c(%esp)
        vsprintf(log_buf, fmt, args);
   2290d:	8b 44 24 34          	mov    0x34(%esp),%eax
   22911:	83 ec 04             	sub    $0x4,%esp
   22914:	ff 74 24 20          	pushl  0x20(%esp)
   22918:	50                   	push   %eax
   22919:	68 e0 02 04 00       	push   $0x402e0
   2291e:	e8 4e 66 fe ff       	call   8f71 <vsprintf>
   22923:	83 c4 10             	add    $0x10,%esp
        va_end(args);
        console_print(log_buf);                 // chr_drv/console.c
   22926:	83 ec 0c             	sub    $0xc,%esp
   22929:	68 e0 02 04 00       	push   $0x402e0
   2292e:	e8 35 ab ff ff       	call   1d468 <console_print>
   22933:	83 c4 10             	add    $0x10,%esp
    }
}
   22936:	90                   	nop
   22937:	83 c4 2c             	add    $0x2c,%esp
   2293a:	c3                   	ret    
